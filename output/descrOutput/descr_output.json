[ {
  "repo name" : "conventional-changelog/standard-version",
  "pairs" : [ {
    "begin time" : "Sun Oct 17 00:00:00 CST 2021",
    "end time" : "Fri Dec 31 00:00:00 CST 2021",
    "description" : "### Features* add .cjs config file ([#717](https://github.com/conventional-changelog/standard-version/issues/717)) ([eceaedf](https://github.com/conventional-changelog/standard-version/commit/eceaedf8b3cdeb282ee06bfa9c65503f42404858))### Bug Fixes* Ensures provided `packageFiles` arguments are merged with `bumpFiles` when no `bumpFiles` argument is specified (default). ([#534](https://github.com/conventional-changelog/standard-version/issues/534)) ([2785023](https://github.com/conventional-changelog/standard-version/commit/2785023c91668e7300e6a22e55d31b6bd9dae59b)), closes [#533](https://github.com/conventional-changelog/standard-version/issues/533)",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex d1221f4..bab204d 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,13 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [9.3.2](https://www.github.com/conventional-changelog/standard-version/compare/v9.3.1...v9.3.2) (2021-10-17)\n+\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-changelog-conventionalcommits to v4.6.1 ([#752](https://www.github.com/conventional-changelog/standard-version/issues/752)) ([bb8869d](https://www.github.com/conventional-changelog/standard-version/commit/bb8869de7d8bcace1ec92f29e389e7fab506d64e))\n+\n ### [9.3.1](https://www.github.com/conventional-changelog/standard-version/compare/v9.3.0...v9.3.1) (2021-07-14)\n \n \ndiff --git a/index.js b/index.js\nindex 3a35555..56f3106 100755\n--- a/index.js\n+++ b/index.js\n@@ -37,10 +37,18 @@\n     throw Error(`custom changelog header must not match ${changelog.START_OF_LAST_RELEASE_PATTERN}`)\n   }\n \n+  /**\n+   * If an argument for `packageFiles` provided, we include it as a \"default\" `bumpFile`.\n+   */\n+  if (argv.packageFiles) {\n+    defaults.bumpFiles = defaults.bumpFiles.concat(argv.packageFiles)\n+  }\n+\n   const args = Object.assign({}, defaults, argv)\n   let pkg\n   for (const packageFile of args.packageFiles) {\n     const updater = resolveUpdaterObjectFromArgument(packageFile)\n+    if (!updater) return\n     const pkgPath = path.resolve(process.cwd(), updater.filename)\n     try {\n       const contents = fs.readFileSync(pkgPath, 'utf8')\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex b52f529..f3977f9 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -1,4 +1,3 @@\n-const accessSync = require('fs-access').sync\n const chalk = require('chalk')\n const checkpoint = require('../checkpoint')\n const conventionalChangelog = require('conventional-changelog')\n@@ -56,7 +55,7 @@\n \n function createIfMissing (args) {\n   try {\n-    accessSync(args.infile, fs.F_OK)\n+    fs.accessSync(args.infile, fs.F_OK)\n   } catch (err) {\n     if (err.code === 'ENOENT') {\n       checkpoint(args, 'created %s', [args.infile])\ndiff --git a/lib/updaters/index.js b/lib/updaters/index.js\nindex 1e68630..ec561a8 100644\n--- a/lib/updaters/index.js\n+++ b/lib/updaters/index.js\n@@ -26,7 +26,7 @@\n   )\n }\n \n-function getCustomUpdater (updater) {\n+function getCustomUpdaterFromPath (updater) {\n   if (typeof updater === 'string') {\n     return require(path.resolve(process.cwd(), updater))\n   }\n@@ -39,32 +39,45 @@\n   throw new Error('Updater must be a string path or an object with readVersion and writeVersion methods')\n }\n \n+/**\n+ * Simple check to determine if the object provided is a compatible updater.\n+ */\n+function isValidUpdater (obj) {\n+  return (\n+    typeof obj.readVersion === 'function' &&\n+    typeof obj.writeVersion === 'function'\n+  )\n+}\n+\n module.exports.resolveUpdaterObjectFromArgument = function (arg) {\n   /**\n    * If an Object was not provided, we assume it's the path/filename\n    * of the updater.\n    */\n   let updater = arg\n+  if (isValidUpdater(updater)) {\n+    return updater\n+  }\n   if (typeof updater !== 'object') {\n     updater = {\n       filename: arg\n     }\n   }\n   try {\n-    if (updater.updater) {\n-      updater.updater = getCustomUpdater(updater.updater)\n+    if (typeof updater.updater === 'string') {\n+      updater.updater = getCustomUpdaterFromPath(updater.updater)\n     } else if (updater.type) {\n       updater.updater = getUpdaterByType(updater.type)\n     } else {\n       updater.updater = getUpdaterByFilename(updater.filename)\n     }\n   } catch (err) {\n-    if (err.code !== 'ENOENT') console.warn(err.message)\n+    if (err.code !== 'ENOENT') console.warn(`Unable to obtain updater for: ${JSON.stringify(arg)}\\n - Error: ${err.message}\\n - Skipping...`)\n   }\n   /**\n    * We weren't able to resolve an updater for the argument.\n    */\n-  if (!updater.updater) {\n+  if (!isValidUpdater(updater.updater)) {\n     return false\n   }\n \ndiff --git a/package.json b/package.json\nindex 51c48ba..f8a247b 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.3.1\",\n+  \"version\": \"9.3.2\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -40,14 +40,13 @@\n     \"chalk\": \"^2.4.2\",\n     \"conventional-changelog\": \"3.1.24\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n-    \"conventional-changelog-conventionalcommits\": \"4.5.0\",\n+    \"conventional-changelog-conventionalcommits\": \"4.6.1\",\n     \"conventional-recommended-bump\": \"6.1.0\",\n     \"detect-indent\": \"^6.0.0\",\n     \"detect-newline\": \"^3.1.0\",\n     \"dotgitignore\": \"^2.1.0\",\n     \"figures\": \"^3.1.0\",\n     \"find-up\": \"^5.0.0\",\n-    \"fs-access\": \"^1.0.1\",\n     \"git-semver-tags\": \"^4.0.0\",\n     \"semver\": \"^7.1.1\",\n     \"stringify-package\": \"^1.0.1\",\n@@ -59,7 +58,7 @@\n     \"eslint-config-standard\": \"^16.0.2\",\n     \"eslint-plugin-import\": \"^2.22.1\",\n     \"eslint-plugin-node\": \"^11.1.0\",\n-    \"eslint-plugin-promise\": \"^4.2.1\",\n+    \"eslint-plugin-promise\": \"^5.0.0\",\n     \"mocha\": \"^8.2.1\",\n     \"mock-fs\": \"^4.13.0\",\n     \"mockery\": \"^2.1.0\",\ndiff --git a/test/core.spec.js b/test/core.spec.js\nindex 22d2b8e..448e107 100644\n--- a/test/core.spec.js\n+++ b/test/core.spec.js\n@@ -568,6 +568,32 @@\n     })\n   })\n \n+  it('`packageFiles` are bumped along with `bumpFiles` defaults [standard-version#533]', async function () {\n+    mock({\n+      bump: 'minor',\n+      fs: {\n+        '.gitignore': '',\n+        'package-lock.json': JSON.stringify({ version: '1.0.0' }),\n+        'manifest.json': fs.readFileSync('./test/mocks/manifest-6.3.1.json')\n+      },\n+      tags: ['v1.0.0']\n+    })\n+\n+    await exec({\n+      silent: true,\n+      packageFiles: [\n+        {\n+          filename: 'manifest.json',\n+          type: 'json'\n+        }\n+      ]\n+    })\n+\n+    JSON.parse(fs.readFileSync('manifest.json', 'utf-8')).version.should.equal('6.4.0')\n+    JSON.parse(fs.readFileSync('package.json', 'utf-8')).version.should.equal('6.4.0')\n+    JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal('6.4.0')\n+  })\n+\n   it('bumps version # in npm-shrinkwrap.json', async function () {\n     mock({\n       bump: 'minor',\n@@ -619,12 +645,22 @@\n     mock({\n       bump: 'minor',\n       fs: {\n-        '.gitignore': 'bower.json',\n-        'bower.json': JSON.stringify({ version: '1.0.0' })\n+        '.gitignore': 'package-lock.json\\nbower.json',\n+        // test a defaults.packageFiles\n+        'bower.json': JSON.stringify({ version: '1.0.0' }),\n+        // test a defaults.bumpFiles\n+        'package-lock.json': JSON.stringify({\n+          name: '@org/package',\n+          version: '1.0.0',\n+          lockfileVersion: 1\n+        })\n       },\n       tags: ['v1.0.0']\n     })\n     await exec()\n+    JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal(\n+      '1.0.0'\n+    )\n     JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal(\n       '1.0.0'\n     )\ndiff --git a/test/mocks/manifest-6.3.1.json b/test/mocks/manifest-6.3.1.json\nnew file mode 100644\nindex 0000000..22a4630\n--- /dev/null\n+++ b/test/mocks/manifest-6.3.1.json\n@@ -0,0 +1,3 @@\n+{\n+  \"version\": \"6.3.1\"\n+}\n\\ No newline at end of file\ndiff --git a/test/preset.spec.js b/test/preset.spec.js\nnew file mode 100644\nindex 0000000..509dec8\n--- /dev/null\n+++ b/test/preset.spec.js\n@@ -0,0 +1,52 @@\n+/* global describe it beforeEach, afterEach */\n+\n+const shell = require('shelljs')\n+const fs = require('fs')\n+\n+require('chai').should()\n+\n+function exec (opt) {\n+  const cli = require('../command')\n+  opt = cli.parse(`standard-version ${opt} --silent`)\n+  opt.skip = { commit: true, tag: true }\n+  return require('../index')(opt)\n+}\n+\n+describe('presets', () => {\n+  beforeEach(function () {\n+    shell.rm('-rf', 'tmp')\n+    shell.config.silent = true\n+    shell.mkdir('tmp')\n+    shell.cd('tmp')\n+    shell.exec('git init')\n+    shell.exec('git config commit.gpgSign false')\n+    shell.exec('git config core.autocrlf false')\n+    shell.exec('git commit --allow-empty -m \"initial commit\"')\n+    shell.exec('git commit --allow-empty -m \"feat: A feature commit.\"')\n+    shell.exec('git commit --allow-empty -m \"perf: A performance change.\"')\n+    shell.exec('git commit --allow-empty -m \"chore: A chore commit.\"')\n+    shell.exec('git commit --allow-empty -m \"ci: A ci commit.\"')\n+    shell.exec('git commit --allow-empty -m \"custom: A custom commit.\"')\n+  })\n+\n+  afterEach(function () {\n+    shell.cd('../')\n+    shell.rm('-rf', 'tmp')\n+  })\n+\n+  it('Conventional Commits (default)', async function () {\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.contain('### Features')\n+    content.should.not.contain('### Performance Improvements')\n+    content.should.not.contain('### Custom')\n+  })\n+\n+  it('Angular', async function () {\n+    await exec('--preset angular')\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.contain('### Features')\n+    content.should.contain('### Performance Improvements')\n+    content.should.not.contain('### Custom')\n+  })\n+})\n"
  }, {
    "begin time" : "Wed Jul 14 00:00:00 CST 2021",
    "end time" : "Sun Oct 17 00:00:00 CST 2021",
    "description" : "### Bug Fixes* **deps:** update dependency conventional-changelog-conventionalcommits to v4.6.1 ([#752](https://www.github.com/conventional-changelog/standard-version/issues/752)) ([bb8869d](https://www.github.com/conventional-changelog/standard-version/commit/bb8869de7d8bcace1ec92f29e389e7fab506d64e))",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 356c915..d1221f4 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,13 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [9.3.1](https://www.github.com/conventional-changelog/standard-version/compare/v9.3.0...v9.3.1) (2021-07-14)\n+\n+\n+### Bug Fixes\n+\n+* **updater:** npm7 package lock's inner version not being updated ([#713](https://www.github.com/conventional-changelog/standard-version/issues/713)) ([a316dd0](https://www.github.com/conventional-changelog/standard-version/commit/a316dd02f5a7d8dee33d99370afda8738985bc10))\n+\n ## [9.3.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.2.0...v9.3.0) (2021-05-04)\n \n \ndiff --git a/package.json b/package.json\nindex 69796f0..51c48ba 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.3.0\",\n+  \"version\": \"9.3.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n"
  }, {
    "begin time" : "Tue May 04 00:00:00 CST 2021",
    "end time" : "Wed Jul 14 00:00:00 CST 2021",
    "description" : "### Bug Fixes* **updater:** npm7 package lock's inner version not being updated ([#713](https://www.github.com/conventional-changelog/standard-version/issues/713)) ([a316dd0](https://www.github.com/conventional-changelog/standard-version/commit/a316dd02f5a7d8dee33d99370afda8738985bc10))",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ebe6789..356c915 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,13 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [9.3.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.2.0...v9.3.0) (2021-05-04)\n+\n+\n+### Features\n+\n+* add --lerna-package flag used to extract tags in case of lerna repo ([#503](https://www.github.com/conventional-changelog/standard-version/issues/503)) ([f579ff0](https://www.github.com/conventional-changelog/standard-version/commit/f579ff08f386aaae022a395ed0dbec9af77a5d49))\n+\n ## [9.2.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.1.1...v9.2.0) (2021-04-06)\n \n \ndiff --git a/package.json b/package.json\nindex 77a93ac..69796f0 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.2.0\",\n+  \"version\": \"9.3.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n"
  }, {
    "begin time" : "Tue Apr 06 00:00:00 CST 2021",
    "end time" : "Tue May 04 00:00:00 CST 2021",
    "description" : "### Features* add --lerna-package flag used to extract tags in case of lerna repo ([#503](https://www.github.com/conventional-changelog/standard-version/issues/503)) ([f579ff0](https://www.github.com/conventional-changelog/standard-version/commit/f579ff08f386aaae022a395ed0dbec9af77a5d49))",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1504ec3..ebe6789 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,13 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [9.2.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.1.1...v9.2.0) (2021-04-06)\n+\n+\n+### Features\n+\n+* allows seperate prefixTag version sequences ([#573](https://www.github.com/conventional-changelog/standard-version/issues/573)) ([3bbba02](https://www.github.com/conventional-changelog/standard-version/commit/3bbba025057ba40c3e15880fede2af851841165b))\n+\n ### [9.1.1](https://www.github.com/conventional-changelog/standard-version/compare/v9.1.0...v9.1.1) (2021-02-06)\n \n \ndiff --git a/package.json b/package.json\nindex 4c930d1..77a93ac 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.1.1\",\n+  \"version\": \"9.2.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n"
  }, {
    "begin time" : "Sat Feb 06 00:00:00 CST 2021",
    "end time" : "Tue Apr 06 00:00:00 CST 2021",
    "description" : "### Features* allows seperate prefixTag version sequences ([#573](https://www.github.com/conventional-changelog/standard-version/issues/573)) ([3bbba02](https://www.github.com/conventional-changelog/standard-version/commit/3bbba025057ba40c3e15880fede2af851841165b))",
    "hunks" : "diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml\nindex 471408a..a631c6c 100644\n--- a/.github/workflows/ci.yaml\n+++ b/.github/workflows/ci.yaml\n@@ -6,10 +6,14 @@\n name: ci\n jobs:\n   test:\n-    runs-on: ubuntu-latest\n+    runs-on: ${{ matrix.os }}\n     strategy:\n       matrix:\n         node: [10, 12, 14]\n+        os: [ubuntu-latest, windows-latest]\n+    env: \n+        OS: ${{ matrix.os }}\n+        NODE_VERSION: ${{ matrix.node }}\n     steps:\n       - uses: actions/checkout@v2\n       - run: git fetch --prune --unshallow\n@@ -21,15 +25,8 @@\n       - run: node --version\n       - run: npm install --engine-strict\n       - run: npm test\n-  windows:\n-    runs-on: windows-latest\n-    steps:\n-      - uses: actions/checkout@v2\n-      - run: git fetch --prune --unshallow\n-      - run: git config --global user.name 'Actions'\n-      - run: git config --global user.email 'dummy@example.org'\n-      - uses: actions/setup-node@v2\n+      - run: npm run coverage\n+      - name: Codecov\n+        uses: codecov/codecov-action@v1\n         with:\n-          node-version: 12\n-      - run: npm install\n-      - run: npm test\n+          env_vars: OS, NODE_VERSION\n\\ No newline at end of file\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ef2d010..1504ec3 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,14 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [9.1.1](https://www.github.com/conventional-changelog/standard-version/compare/v9.1.0...v9.1.1) (2021-02-06)\n+\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-recommended-bump to v6.1.0 ([#695](https://www.github.com/conventional-changelog/standard-version/issues/695)) ([65dd070](https://www.github.com/conventional-changelog/standard-version/commit/65dd070b9f01ffe1764e64ba739bc064b84f4129))\n+* **deps:** update dependency yargs to v16 ([#660](https://www.github.com/conventional-changelog/standard-version/issues/660)) ([f6a7430](https://www.github.com/conventional-changelog/standard-version/commit/f6a7430329919874e1e744ac5dca2f83bba355df))\n+\n ## [9.1.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.0.0...v9.1.0) (2020-12-01)\n \n \ndiff --git a/README.md b/README.md\nindex 66e56fc..f924f60 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n ![ci](https://github.com/conventional-changelog/standard-version/workflows/ci/badge.svg)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n-[![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n+[![codecov](https://codecov.io/gh/conventional-changelog/standard-version/branch/master/graph/badge.svg?token=J7zMN7vTTd)](https://codecov.io/gh/conventional-changelog/standard-version)\n [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n [![Community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n \n@@ -267,11 +267,24 @@\n \n ### Committing Generated Artifacts in the Release Commit\n \n-If you want to commit generated artifacts in the release commit (e.g. [#96](https://github.com/conventional-changelog/standard-version/issues/96)), you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n+If you want to commit generated artifacts in the release commit, you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n \n ```json\n-\"prerelease\": \"webpack -p --bail\",\n-\"release\": \"git add <file(s) to commit> && standard-version -a\"\n+{\n+  \"standard-version\": {\n+    \"scripts\": {\n+      \"prerelease\": \"webpack -p --bail && git add <file(s) to commit>\"\n+    }\n+  }\n+}\n+```\n+\n+```json\n+{\n+  \"scripts\": {\n+    \"release\": \"standard-version -a\"\n+  }\n+}\n ```\n \n ### Dry Run Mode\n@@ -296,7 +309,9 @@\n \n This will prefix your tags to look something like `@scope/package@2.0.0`\n \n-If you do not want to have any tag prefix you can use the `-t` flag without value.\n+If you do not want to have any tag prefix you can use the `-t` flag and provide it with an **empty string** as value.\n+\n+> Note: simply -t or --tag-prefix without any value will fallback to the default 'v'\n \n ### CLI Help\n \n@@ -355,9 +370,7 @@\n \n 1. Specify a custom `bumpFile` \"`filename`\", this is the path to the file you want to \"bump\"\n 2. Specify the `bumpFile` \"`updater`\", this is _how_ the file will be bumped.\n-  \n     a. If you're using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n-\n     b. If your using an less-common version file, you can create your own `updater`.\n \n ```js\ndiff --git a/package.json b/package.json\nindex 5a901f1..4c930d1 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.1.0\",\n+  \"version\": \"9.1.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -8,6 +8,7 @@\n     \"posttest\": \"eslint .\",\n     \"test\": \"nyc mocha --timeout=30000\",\n     \"test:unit\": \"mocha --exclude test/git.spec.js\",\n+    \"coverage\": \"nyc report --reporter=lcov\",\n     \"release\": \"bin/cli.js\"\n   },\n   \"nyc\": {\n@@ -54,16 +55,15 @@\n   },\n   \"devDependencies\": {\n     \"chai\": \"^4.2.0\",\n-    \"coveralls\": \"^3.1.0\",\n     \"eslint\": \"^7.14.0\",\n     \"eslint-config-standard\": \"^16.0.2\",\n     \"eslint-plugin-import\": \"^2.22.1\",\n     \"eslint-plugin-node\": \"^11.1.0\",\n     \"eslint-plugin-promise\": \"^4.2.1\",\n-    \"mocha\": \"^8.0.0\",\n-    \"mock-fs\": \"^4.12.0\",\n+    \"mocha\": \"^8.2.1\",\n+    \"mock-fs\": \"^4.13.0\",\n     \"mockery\": \"^2.1.0\",\n-    \"nyc\": \"^14.1.1\",\n+    \"nyc\": \"^15.1.0\",\n     \"shelljs\": \"^0.8.4\",\n     \"std-mocks\": \"^1.0.1\"\n   }\n"
  }, {
    "begin time" : "Tue Dec 01 00:00:00 CST 2020",
    "end time" : "Sat Feb 06 00:00:00 CST 2021",
    "description" : "### Bug Fixes* **deps:** update dependency conventional-recommended-bump to v6.1.0 ([#695](https://www.github.com/conventional-changelog/standard-version/issues/695)) ([65dd070](https://www.github.com/conventional-changelog/standard-version/commit/65dd070b9f01ffe1764e64ba739bc064b84f4129))* **deps:** update dependency yargs to v16 ([#660](https://www.github.com/conventional-changelog/standard-version/issues/660)) ([f6a7430](https://www.github.com/conventional-changelog/standard-version/commit/f6a7430329919874e1e744ac5dca2f83bba355df))",
    "hunks" : "diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml\nindex 77d63aa..471408a 100644\n--- a/.github/workflows/ci.yaml\n+++ b/.github/workflows/ci.yaml\n@@ -15,7 +15,7 @@\n       - run: git fetch --prune --unshallow\n       - run: git config --global user.name 'Actions'\n       - run: git config --global user.email 'dummy@example.org'\n-      - uses: actions/setup-node@v1\n+      - uses: actions/setup-node@v2\n         with:\n           node-version: ${{ matrix.node }}\n       - run: node --version\n@@ -28,7 +28,7 @@\n       - run: git fetch --prune --unshallow\n       - run: git config --global user.name 'Actions'\n       - run: git config --global user.email 'dummy@example.org'\n-      - uses: actions/setup-node@v1\n+      - uses: actions/setup-node@v2\n         with:\n           node-version: 12\n       - run: npm install\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 645c4f5..ef2d010 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,21 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [9.1.0](https://www.github.com/conventional-changelog/standard-version/compare/v9.0.0...v9.1.0) (2020-12-01)\n+\n+\n+### Features\n+\n+* support custom updater as object as well as path ([#630](https://www.github.com/conventional-changelog/standard-version/issues/630)) ([55bbde8](https://www.github.com/conventional-changelog/standard-version/commit/55bbde8476013de7a2f24bf29c7c12cb07f96e3f))\n+\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-changelog to v3.1.24 ([#677](https://www.github.com/conventional-changelog/standard-version/issues/677)) ([cc45036](https://www.github.com/conventional-changelog/standard-version/commit/cc45036d9960b6d83e0e850ccbbe8e8098d36ae6))\n+* **deps:** update dependency conventional-changelog-conventionalcommits to v4.5.0 ([#678](https://www.github.com/conventional-changelog/standard-version/issues/678)) ([6317d36](https://www.github.com/conventional-changelog/standard-version/commit/6317d36130767cfd85114ab9033a6f1ef110388d))\n+* **deps:** update dependency conventional-recommended-bump to v6.0.11 ([#679](https://www.github.com/conventional-changelog/standard-version/issues/679)) ([360789a](https://www.github.com/conventional-changelog/standard-version/commit/360789ab84957a67d3919cb28db1882cb68296fc))\n+* **deps:** update dependency find-up to v5 ([#651](https://www.github.com/conventional-changelog/standard-version/issues/651)) ([df8db83](https://www.github.com/conventional-changelog/standard-version/commit/df8db832327a751d5c62fe361b6ac2d2b5f66bf6))\n+\n ## [9.0.0](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.2...v9.0.0) (2020-08-15)\n \n \ndiff --git a/lib/updaters/index.js b/lib/updaters/index.js\nindex faaab5e..1e68630 100644\n--- a/lib/updaters/index.js\n+++ b/lib/updaters/index.js\n@@ -22,7 +22,7 @@\n     return getUpdaterByType('plain-text')\n   }\n   throw Error(\n-    `Unsupported file (${filename}) provided for bumping.\\n Please specifcy the updater \\`type\\` or use a custom \\`updater\\`.`\n+    `Unsupported file (${filename}) provided for bumping.\\n Please specify the updater \\`type\\` or use a custom \\`updater\\`.`\n   )\n }\n \ndiff --git a/package.json b/package.json\nindex 3c149c5..b282608 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"9.0.0\",\n+  \"version\": \"9.1.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -50,7 +50,7 @@\n     \"git-semver-tags\": \"^4.0.0\",\n     \"semver\": \"^7.1.1\",\n     \"stringify-package\": \"^1.0.1\",\n-    \"yargs\": \"^15.3.1\"\n+    \"yargs\": \"^16.0.0\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"^4.2.0\",\n"
  }, {
    "begin time" : "Sat Aug 15 00:00:00 CST 2020",
    "end time" : "Tue Dec 01 00:00:00 CST 2020",
    "description" : "### Features* support custom updater as object as well as path ([#630](https://www.github.com/conventional-changelog/standard-version/issues/630)) ([55bbde8](https://www.github.com/conventional-changelog/standard-version/commit/55bbde8476013de7a2f24bf29c7c12cb07f96e3f))### Bug Fixes* **deps:** update dependency conventional-changelog to v3.1.24 ([#677](https://www.github.com/conventional-changelog/standard-version/issues/677)) ([cc45036](https://www.github.com/conventional-changelog/standard-version/commit/cc45036d9960b6d83e0e850ccbbe8e8098d36ae6))* **deps:** update dependency conventional-changelog-conventionalcommits to v4.5.0 ([#678](https://www.github.com/conventional-changelog/standard-version/issues/678)) ([6317d36](https://www.github.com/conventional-changelog/standard-version/commit/6317d36130767cfd85114ab9033a6f1ef110388d))* **deps:** update dependency conventional-recommended-bump to v6.0.11 ([#679](https://www.github.com/conventional-changelog/standard-version/issues/679)) ([360789a](https://www.github.com/conventional-changelog/standard-version/commit/360789ab84957a67d3919cb28db1882cb68296fc))* **deps:** update dependency find-up to v5 ([#651](https://www.github.com/conventional-changelog/standard-version/issues/651)) ([df8db83](https://www.github.com/conventional-changelog/standard-version/commit/df8db832327a751d5c62fe361b6ac2d2b5f66bf6))",
    "hunks" : "diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml\nindex c3c5903..77d63aa 100644\n--- a/.github/workflows/ci.yaml\n+++ b/.github/workflows/ci.yaml\n@@ -19,7 +19,7 @@\n         with:\n           node-version: ${{ matrix.node }}\n       - run: node --version\n-      - run: npm install\n+      - run: npm install --engine-strict\n       - run: npm test\n   windows:\n     runs-on: windows-latest\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 56a456c..645c4f5 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,24 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [9.0.0](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.2...v9.0.0) (2020-08-15)\n+\n+\n+### ⚠ BREAKING CHANGES\n+\n+* NodeJS@8 is no longer supported. (#612)\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-changelog to v3.1.23 ([#652](https://www.github.com/conventional-changelog/standard-version/issues/652)) ([00dd3c0](https://www.github.com/conventional-changelog/standard-version/commit/00dd3c01aab20d28a8bbd1e174e416d6c2b34d90))\n+* **deps:** update dependency conventional-changelog-conventionalcommits to v4.4.0 ([#650](https://www.github.com/conventional-changelog/standard-version/issues/650)) ([9f201a6](https://www.github.com/conventional-changelog/standard-version/commit/9f201a61bb50ec12053a04faccfaea20e44d6ff2))\n+* **deps:** update dependency conventional-recommended-bump to v6.0.10 ([#653](https://www.github.com/conventional-changelog/standard-version/issues/653)) ([c360d6a](https://www.github.com/conventional-changelog/standard-version/commit/c360d6a307909c6e571b29d4a329fd786b4d4543))\n+\n+\n+### Build System\n+\n+* NodeJS@8 is no longer supported. ([#612](https://www.github.com/conventional-changelog/standard-version/issues/612)) ([05edef2](https://www.github.com/conventional-changelog/standard-version/commit/05edef2de79d8d4939a6e699ce0979ff8da12de9))\n+\n ### [8.0.2](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.1...v8.0.2) (2020-07-14)\n \n \ndiff --git a/README.md b/README.md\nindex e1002e7..66e56fc 100644\n--- a/README.md\n+++ b/README.md\n@@ -2,7 +2,7 @@\n \n A utility for versioning using [semver](https://semver.org/) and CHANGELOG generation powered by [Conventional Commits](https://conventionalcommits.org).\n \n-[![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg?branch=master)](https://travis-ci.org/conventional-changelog/standard-version)\n+![ci](https://github.com/conventional-changelog/standard-version/workflows/ci/badge.svg)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n@@ -18,7 +18,7 @@\n \n `standard-version` will then do the following:\n \n-1. Retrieve the current version of your repository by looking at `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters), falling back to the last `git tag`.\n+1. Retrieve the current version of your repository by looking at `packageFiles`[[1]](#bumpfiles-packagefiles-and-updaters), falling back to the last `git tag`.\n 2. `bump` the version in `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) based on your commits.\n 4. Generates a `changelog` based on your commits (uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) under the hood).\n 5. Creates a new `commit` including your `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) and updated CHANGELOG.\n@@ -356,7 +356,7 @@\n 1. Specify a custom `bumpFile` \"`filename`\", this is the path to the file you want to \"bump\"\n 2. Specify the `bumpFile` \"`updater`\", this is _how_ the file will be bumped.\n   \n-    a. If your using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n+    a. If you're using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n \n     b. If your using an less-common version file, you can create your own `updater`.\n \n@@ -383,6 +383,21 @@\n }\n ```\n \n+If using `.versionrc.js` as your configuration file, the `updater` may also be set as an object, rather than a path:\n+\n+```js\n+// .versionrc.js\n+const tracker = {\n+  filename: 'VERSION_TRACKER.json',\n+  updater: require('./path/to/custom-version-updater')\n+}\n+\n+module.exports = {\n+  bumpFiles: [tracker],\n+  packageFiles: [tracker]\n+}\n+```\n+\n #### Custom `updater`s\n \n An `updater` is expected to be a Javascript module with _atleast_ two methods exposed: `readVersion` and `writeVersion`.\ndiff --git a/index.js b/index.js\nindex 74de6e0..aa18e0a 100755\n--- a/index.js\n+++ b/index.js\n@@ -8,7 +8,7 @@\n const tag = require('./lib/lifecycles/tag')\n const { resolveUpdaterObjectFromArgument } = require('./lib/updaters')\n \n-module.exports = function standardVersion (argv) {\n+module.exports = async function standardVersion (argv) {\n   const defaults = require('./defaults')\n   /**\n    * `--message` (`-m`) support will be removed in the next major version.\n@@ -39,8 +39,7 @@\n \n   const args = Object.assign({}, defaults, argv)\n   let pkg\n-  args.packageFiles.forEach((packageFile) => {\n-    if (pkg) return\n+  for (const packageFile of args.packageFiles) {\n     const updater = resolveUpdaterObjectFromArgument(packageFile)\n     const pkgPath = path.resolve(process.cwd(), updater.filename)\n     try {\n@@ -49,39 +48,25 @@\n         version: updater.updater.readVersion(contents),\n         private: typeof updater.updater.isPrivate === 'function' ? updater.updater.isPrivate(contents) : false\n       }\n+      break\n     } catch (err) {}\n-  })\n-  let newVersion\n-  return Promise.resolve()\n-    .then(() => {\n-      if (!pkg && args.gitTagFallback) {\n-        return latestSemverTag()\n-      } else if (!pkg) {\n-        throw new Error('no package file found')\n-      } else {\n-        return pkg.version\n-      }\n-    })\n-    .then(version => {\n-      newVersion = version\n-    })\n-    .then(() => {\n-      return bump(args, newVersion)\n-    })\n-    .then((_newVersion) => {\n-      // if bump runs, it calculaes the new version that we\n-      // should release at.\n-      if (_newVersion) newVersion = _newVersion\n-      return changelog(args, newVersion)\n-    })\n-    .then(() => {\n-      return commit(args, newVersion)\n-    })\n-    .then(() => {\n-      return tag(newVersion, pkg ? pkg.private : false, args)\n-    })\n-    .catch((err) => {\n-      printError(args, err.message)\n-      throw err\n-    })\n+  }\n+  try {\n+    let version\n+    if (pkg) {\n+      version = pkg.version\n+    } else if (args.gitTagFallback) {\n+      version = await latestSemverTag()\n+    } else {\n+      throw new Error('no package file found')\n+    }\n+\n+    const newVersion = await bump(args, version)\n+    await changelog(args, newVersion)\n+    await commit(args, newVersion)\n+    await tag(newVersion, pkg ? pkg.private : false, args)\n+  } catch (err) {\n+    printError(args, err.message)\n+    throw err\n+  }\n }\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex b59c46c..119025f 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -14,34 +14,26 @@\n const { resolveUpdaterObjectFromArgument } = require('../updaters')\n let configsToUpdate = {}\n \n-function Bump (args, version) {\n+async function Bump (args, version) {\n   // reset the cache of updated config files each\n   // time we perform the version bump step.\n   configsToUpdate = {}\n \n-  if (args.skip.bump) return Promise.resolve()\n+  if (args.skip.bump) return version\n   let newVersion = version\n-  return runLifecycleScript(args, 'prerelease')\n-    .then(runLifecycleScript.bind(this, args, 'prebump'))\n-    .then((stdout) => {\n-      if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n-      return bumpVersion(args.releaseAs, version, args)\n-    })\n-    .then((release) => {\n-      if (!args.firstRelease) {\n-        const releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n-        newVersion = semver.valid(releaseType) || semver.inc(version, releaseType, args.prerelease)\n-        updateConfigs(args, newVersion)\n-      } else {\n-        checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n-      }\n-    })\n-    .then(() => {\n-      return runLifecycleScript(args, 'postbump')\n-    })\n-    .then(() => {\n-      return newVersion\n-    })\n+  await runLifecycleScript(args, 'prerelease')\n+  const stdout = await runLifecycleScript(args, 'prebump')\n+  if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n+  const release = await bumpVersion(args.releaseAs, version, args)\n+  if (!args.firstRelease) {\n+    const releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n+    newVersion = semver.valid(releaseType) || semver.inc(version, releaseType, args.prerelease)\n+    updateConfigs(args, newVersion)\n+  } else {\n+    checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n+  }\n+  await runLifecycleScript(args, 'postbump')\n+  return newVersion\n }\n \n Bump.getUpdatedConfigs = function () {\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex dff90ab..b52f529 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -8,15 +8,11 @@\n const writeFile = require('../write-file')\n const START_OF_LAST_RELEASE_PATTERN = /(^#+ \\[?[0-9]+\\.[0-9]+\\.[0-9]+|<a name=)/m\n \n-function Changelog (args, newVersion) {\n-  if (args.skip.changelog) return Promise.resolve()\n-  return runLifecycleScript(args, 'prechangelog')\n-    .then(() => {\n-      return outputChangelog(args, newVersion)\n-    })\n-    .then(() => {\n-      return runLifecycleScript(args, 'postchangelog')\n-    })\n+async function Changelog (args, newVersion) {\n+  if (args.skip.changelog) return\n+  await runLifecycleScript(args, 'prechangelog')\n+  await outputChangelog(args, newVersion)\n+  await runLifecycleScript(args, 'postchangelog')\n }\n \n Changelog.START_OF_LAST_RELEASE_PATTERN = START_OF_LAST_RELEASE_PATTERN\ndiff --git a/lib/lifecycles/commit.js b/lib/lifecycles/commit.js\nindex bcde6f2..7b90a8f 100644\n--- a/lib/lifecycles/commit.js\n+++ b/lib/lifecycles/commit.js\n@@ -5,19 +5,15 @@\n const runExecFile = require('../run-execFile')\n const runLifecycleScript = require('../run-lifecycle-script')\n \n-module.exports = function (args, newVersion) {\n-  if (args.skip.commit) return Promise.resolve()\n-  return runLifecycleScript(args, 'precommit')\n-    .then((message) => {\n-      if (message && message.length) args.releaseCommitMessageFormat = message\n-      return execCommit(args, newVersion)\n-    })\n-    .then(() => {\n-      return runLifecycleScript(args, 'postcommit')\n-    })\n+module.exports = async function (args, newVersion) {\n+  if (args.skip.commit) return\n+  const message = await runLifecycleScript(args, 'precommit')\n+  if (message && message.length) args.releaseCommitMessageFormat = message\n+  await execCommit(args, newVersion)\n+  await runLifecycleScript(args, 'postcommit')\n }\n \n-function execCommit (args, newVersion) {\n+async function execCommit (args, newVersion) {\n   let msg = 'committing %s'\n   let paths = []\n   const verify = args.verify === false || args.n ? ['--no-verify'] : []\n@@ -51,25 +47,23 @@\n \n   // nothing to do, exit without commit anything\n   if (args.skip.changelog && args.skip.bump && toAdd.length === 0) {\n-    return Promise.resolve()\n+    return\n   }\n \n-  return runExecFile(args, 'git', ['add'].concat(toAdd))\n-    .then(() => {\n-      return runExecFile(\n-        args,\n-        'git',\n-        [\n-          'commit'\n-        ].concat(\n-          verify,\n-          sign,\n-          args.commitAll ? [] : toAdd,\n-          [\n-            '-m',\n-            `${formatCommitMessage(args.releaseCommitMessageFormat, newVersion)}`\n-          ]\n-        )\n-      )\n-    })\n+  await runExecFile(args, 'git', ['add'].concat(toAdd))\n+  await runExecFile(\n+    args,\n+    'git',\n+    [\n+      'commit'\n+    ].concat(\n+      verify,\n+      sign,\n+      args.commitAll ? [] : toAdd,\n+      [\n+        '-m',\n+        `${formatCommitMessage(args.releaseCommitMessageFormat, newVersion)}`\n+      ]\n+    )\n+  )\n }\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex f160ce7..ec1b88e 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -6,18 +6,14 @@\n const runExecFile = require('../run-execFile')\n const runLifecycleScript = require('../run-lifecycle-script')\n \n-module.exports = function (newVersion, pkgPrivate, args) {\n-  if (args.skip.tag) return Promise.resolve()\n-  return runLifecycleScript(args, 'pretag')\n-    .then(() => {\n-      return execTag(newVersion, pkgPrivate, args)\n-    })\n-    .then(() => {\n-      return runLifecycleScript(args, 'posttag')\n-    })\n+module.exports = async function (newVersion, pkgPrivate, args) {\n+  if (args.skip.tag) return\n+  await runLifecycleScript(args, 'pretag')\n+  await execTag(newVersion, pkgPrivate, args)\n+  await runLifecycleScript(args, 'posttag')\n }\n \n-function execTag (newVersion, pkgPrivate, args) {\n+async function execTag (newVersion, pkgPrivate, args) {\n   let tagOption\n   if (args.sign) {\n     tagOption = '-s'\n@@ -25,21 +21,19 @@\n     tagOption = '-a'\n   }\n   checkpoint(args, 'tagging release %s%s', [args.tagPrefix, newVersion])\n-  return runExecFile(args, 'git', ['tag', tagOption, args.tagPrefix + newVersion, '-m', `${formatCommitMessage(args.releaseCommitMessageFormat, newVersion)}`])\n-    .then(() => runExecFile('', 'git', ['rev-parse', '--abbrev-ref', 'HEAD']))\n-    .then((currentBranch) => {\n-      let message = 'git push --follow-tags origin ' + currentBranch.trim()\n-      if (pkgPrivate !== true && bump.getUpdatedConfigs()['package.json']) {\n-        message += ' && npm publish'\n-        if (args.prerelease !== undefined) {\n-          if (args.prerelease === '') {\n-            message += ' --tag prerelease'\n-          } else {\n-            message += ' --tag ' + args.prerelease\n-          }\n-        }\n+  await runExecFile(args, 'git', ['tag', tagOption, args.tagPrefix + newVersion, '-m', `${formatCommitMessage(args.releaseCommitMessageFormat, newVersion)}`])\n+  const currentBranch = await runExecFile('', 'git', ['rev-parse', '--abbrev-ref', 'HEAD'])\n+  let message = 'git push --follow-tags origin ' + currentBranch.trim()\n+  if (pkgPrivate !== true && bump.getUpdatedConfigs()['package.json']) {\n+    message += ' && npm publish'\n+    if (args.prerelease !== undefined) {\n+      if (args.prerelease === '') {\n+        message += ' --tag prerelease'\n+      } else {\n+        message += ' --tag ' + args.prerelease\n       }\n+    }\n+  }\n \n-      checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n-    })\n+  checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n }\ndiff --git a/lib/run-exec.js b/lib/run-exec.js\nindex ffcd17d..eec2feb 100644\n--- a/lib/run-exec.js\n+++ b/lib/run-exec.js\n@@ -1,20 +1,18 @@\n-const exec = require('child_process').exec\n+const { promisify } = require('util')\n const printError = require('./print-error')\n \n-module.exports = function (args, cmd) {\n-  if (args.dryRun) return Promise.resolve()\n-  return new Promise((resolve, reject) => {\n-    // Exec given cmd and handle possible errors\n-    exec(cmd, function (err, stdout, stderr) {\n-      // If exec returns content in stderr, but no error, print it as a warning\n-      // If exec returns an error, print it and exit with return code 1\n-      if (err) {\n-        printError(args, stderr || err.message)\n-        return reject(err)\n-      } else if (stderr) {\n-        printError(args, stderr, { level: 'warn', color: 'yellow' })\n-      }\n-      return resolve(stdout)\n-    })\n-  })\n+const exec = promisify(require('child_process').exec)\n+\n+module.exports = async function (args, cmd) {\n+  if (args.dryRun) return\n+  try {\n+    const { stderr, stdout } = await exec(cmd)\n+    // If exec returns content in stderr, but no error, print it as a warning\n+    if (stderr) printError(args, stderr, { level: 'warn', color: 'yellow' })\n+    return stdout\n+  } catch (error) {\n+    // If exec returns an error, print it and exit with return code 1\n+    printError(args, error.stderr || error.message)\n+    throw error\n+  }\n }\ndiff --git a/lib/run-execFile.js b/lib/run-execFile.js\nindex 076f951..c0c814d 100644\n--- a/lib/run-execFile.js\n+++ b/lib/run-execFile.js\n@@ -1,20 +1,18 @@\n-const { execFile } = require('child_process')\n+const { promisify } = require('util')\n const printError = require('./print-error')\n \n-module.exports = function (args, cmd, cmdArgs) {\n-  if (args.dryRun) return Promise.resolve()\n-  return new Promise((resolve, reject) => {\n-    // Exec given cmd and handle possible errors\n-    execFile(cmd, cmdArgs, function (err, stdout, stderr) {\n-      // If exec returns content in stderr, but no error, print it as a warning\n-      // If exec returns an error, print it and exit with return code 1\n-      if (err) {\n-        printError(args, stderr || err.message)\n-        return reject(err)\n-      } else if (stderr) {\n-        printError(args, stderr, { level: 'warn', color: 'yellow' })\n-      }\n-      return resolve(stdout)\n-    })\n-  })\n+const execFile = promisify(require('child_process').execFile)\n+\n+module.exports = async function (args, cmd, cmdArgs) {\n+  if (args.dryRun) return\n+  try {\n+    const { stderr, stdout } = await execFile(cmd, cmdArgs)\n+    // If execFile returns content in stderr, but no error, print it as a warning\n+    if (stderr) printError(args, stderr, { level: 'warn', color: 'yellow' })\n+    return stdout\n+  } catch (error) {\n+    // If execFile returns an error, print it and exit with return code 1\n+    printError(args, error.stderr || error.message)\n+    throw error\n+  }\n }\ndiff --git a/lib/run-lifecycle-hook.js b/lib/run-lifecycle-hook.js\ndeleted file mode 100644\nindex f96b8d1..0000000\n--- a/lib/run-lifecycle-hook.js\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-const chalk = require('chalk')\n-const checkpoint = require('./checkpoint')\n-const figures = require('figures')\n-const runExec = require('./run-exec')\n-\n-module.exports = function (args, hookName, newVersion, hooks, cb) {\n-  if (!hooks[hookName]) return Promise.resolve()\n-  const command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n-  checkpoint(args, 'Running lifecycle hook \"%s\"', [hookName])\n-  checkpoint(args, '- hook command: \"%s\"', [command], chalk.blue(figures.info))\n-  return runExec(args, command)\n-}\ndiff --git a/lib/updaters/index.js b/lib/updaters/index.js\nindex 84ed1a0..faaab5e 100644\n--- a/lib/updaters/index.js\n+++ b/lib/updaters/index.js\n@@ -1,13 +1,17 @@\n const path = require('path')\n const JSON_BUMP_FILES = require('../../defaults').bumpFiles\n+const updatersByType = {\n+  json: require('./types/json'),\n+  'plain-text': require('./types/plain-text')\n+}\n const PLAIN_TEXT_BUMP_FILES = ['VERSION.txt', 'version.txt']\n \n function getUpdaterByType (type) {\n-  try {\n-    return require(`./types/${type}`)\n-  } catch (e) {\n-    throw Error(`Unable to locate updated for provided type (${type}).`)\n+  const updater = updatersByType[type]\n+  if (!updater) {\n+    throw Error(`Unable to locate updater for provided type (${type}).`)\n   }\n+  return updater\n }\n \n function getUpdaterByFilename (filename) {\n@@ -23,7 +27,16 @@\n }\n \n function getCustomUpdater (updater) {\n-  return require(path.resolve(process.cwd(), updater))\n+  if (typeof updater === 'string') {\n+    return require(path.resolve(process.cwd(), updater))\n+  }\n+  if (\n+    typeof updater.readVersion === 'function' &&\n+    typeof updater.writeVersion === 'function'\n+  ) {\n+    return updater\n+  }\n+  throw new Error('Updater must be a string path or an object with readVersion and writeVersion methods')\n }\n \n module.exports.resolveUpdaterObjectFromArgument = function (arg) {\ndiff --git a/package.json b/package.json\nindex e29de7f..7f9c218 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,12 +1,13 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"8.0.2\",\n+  \"version\": \"9.0.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n     \"fix\": \"eslint . --fix\",\n     \"posttest\": \"eslint .\",\n-    \"test\": \"nyc mocha --timeout=30000 test.js\",\n+    \"test\": \"nyc mocha --timeout=30000\",\n+    \"test:unit\": \"mocha --exclude test/git.spec.js\",\n     \"release\": \"bin/cli.js\"\n   },\n   \"nyc\": {\n@@ -36,15 +37,15 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"^2.4.2\",\n-    \"conventional-changelog\": \"3.1.21\",\n+    \"conventional-changelog\": \"3.1.24\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n     \"conventional-changelog-conventionalcommits\": \"4.4.0\",\n-    \"conventional-recommended-bump\": \"6.0.9\",\n+    \"conventional-recommended-bump\": \"6.0.11\",\n     \"detect-indent\": \"^6.0.0\",\n     \"detect-newline\": \"^3.1.0\",\n     \"dotgitignore\": \"^2.1.0\",\n     \"figures\": \"^3.1.0\",\n-    \"find-up\": \"^4.1.0\",\n+    \"find-up\": \"^5.0.0\",\n     \"fs-access\": \"^1.0.1\",\n     \"git-semver-tags\": \"^4.0.0\",\n     \"semver\": \"^7.1.1\",\n@@ -54,16 +55,16 @@\n   \"devDependencies\": {\n     \"chai\": \"^4.2.0\",\n     \"coveralls\": \"^3.1.0\",\n-    \"eslint\": \"^6.8.0\",\n-    \"eslint-config-standard\": \"^14.1.1\",\n-    \"eslint-plugin-import\": \"^2.20.0\",\n-    \"eslint-plugin-node\": \"^10.0.0\",\n+    \"eslint\": \"^7.14.0\",\n+    \"eslint-config-standard\": \"^16.0.2\",\n+    \"eslint-plugin-import\": \"^2.22.1\",\n+    \"eslint-plugin-node\": \"^11.1.0\",\n     \"eslint-plugin-promise\": \"^4.2.1\",\n-    \"eslint-plugin-standard\": \"^4.0.1\",\n     \"mocha\": \"^8.0.0\",\n-    \"mock-git\": \"^2.0.0\",\n+    \"mock-fs\": \"^4.12.0\",\n     \"mockery\": \"^2.1.0\",\n     \"nyc\": \"^14.1.1\",\n-    \"shelljs\": \"^0.8.4\"\n+    \"shelljs\": \"^0.8.4\",\n+    \"std-mocks\": \"^1.0.1\"\n   }\n }\ndiff --git a/test.js b/test.js\ndeleted file mode 100644\nindex 83627fa..0000000\n--- a/test.js\n+++ /dev/null\n@@ -1,1338 +0,0 @@\n-/* global describe it beforeEach afterEach */\n-\n-'use strict'\n-\n-const shell = require('shelljs')\n-const fs = require('fs')\n-const path = require('path')\n-const stream = require('stream')\n-const mockGit = require('mock-git')\n-const mockery = require('mockery')\n-const semver = require('semver')\n-const formatCommitMessage = require('./lib/format-commit-message')\n-const cli = require('./command')\n-const standardVersion = require('./index')\n-\n-const isWindows = process.platform === 'win32'\n-\n-require('chai').should()\n-\n-const cliPath = path.resolve(__dirname, './bin/cli.js')\n-\n-function branch (branch) {\n-  shell.exec('git branch ' + branch)\n-}\n-\n-function checkout (branch) {\n-  shell.exec('git checkout ' + branch)\n-}\n-\n-function commit (msg) {\n-  shell.exec('git commit --allow-empty -m\"' + msg + '\"')\n-}\n-\n-function merge (msg, branch) {\n-  shell.exec('git merge --no-ff -m\"' + msg + '\" ' + branch)\n-}\n-\n-function execCli (argString) {\n-  return shell.exec('node ' + cliPath + (argString != null ? ' ' + argString : ''))\n-}\n-\n-function execCliAsync (argString) {\n-  return standardVersion(cli.parse('standard-version ' + argString + ' --silent'))\n-}\n-\n-function writePackageJson (version, option) {\n-  option = option || {}\n-  const pkg = Object.assign(option, { version: version })\n-  fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n-}\n-\n-function writeBowerJson (version, option) {\n-  option = option || {}\n-  const bower = Object.assign(option, { version: version })\n-  fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n-}\n-\n-function writeManifestJson (version, option) {\n-  option = option || {}\n-  const manifest = Object.assign(option, { version: version })\n-  fs.writeFileSync('manifest.json', JSON.stringify(manifest), 'utf-8')\n-}\n-\n-function writeNpmShrinkwrapJson (version, option) {\n-  option = option || {}\n-  const shrinkwrap = Object.assign(option, { version: version })\n-  fs.writeFileSync('npm-shrinkwrap.json', JSON.stringify(shrinkwrap), 'utf-8')\n-}\n-\n-function writePackageLockJson (version, option) {\n-  option = option || {}\n-  const pkgLock = Object.assign(option, { version: version })\n-  fs.writeFileSync('package-lock.json', JSON.stringify(pkgLock), 'utf-8')\n-}\n-\n-function writeGitPreCommitHook () {\n-  fs.writeFileSync('.git/hooks/pre-commit', '#!/bin/sh\\necho \"precommit ran\"\\nexit 1', 'utf-8')\n-  fs.chmodSync('.git/hooks/pre-commit', '755')\n-}\n-\n-function writePostBumpHook (causeError) {\n-  writeHook('postbump', causeError)\n-}\n-\n-function writeHook (hookName, causeError, script) {\n-  shell.mkdir('-p', 'scripts')\n-  let content = script || 'console.error(\"' + hookName + ' ran\")'\n-  content += causeError ? '\\nthrow new Error(\"' + hookName + '-failure\")' : ''\n-  fs.writeFileSync('scripts/' + hookName + '.js', content, 'utf-8')\n-  fs.chmodSync('scripts/' + hookName + '.js', '755')\n-}\n-\n-function initInTempFolder () {\n-  shell.rm('-rf', 'tmp')\n-  shell.config.silent = true\n-  shell.mkdir('tmp')\n-  shell.cd('tmp')\n-  shell.exec('git init')\n-  shell.exec('git config commit.gpgSign false')\n-  commit('root-commit')\n-  writePackageJson('1.0.0')\n-}\n-\n-function finishTemp () {\n-  shell.cd('../')\n-  shell.rm('-rf', 'tmp')\n-}\n-\n-function getPackageVersion () {\n-  return JSON.parse(fs.readFileSync('package.json', 'utf-8')).version\n-}\n-\n-describe('format-commit-message', function () {\n-  it('works for no {{currentTag}}', function () {\n-    formatCommitMessage('chore(release): 1.0.0', '1.0.0').should.equal('chore(release): 1.0.0')\n-  })\n-  it('works for one {{currentTag}}', function () {\n-    formatCommitMessage('chore(release): {{currentTag}}', '1.0.0').should.equal('chore(release): 1.0.0')\n-  })\n-  it('works for two {{currentTag}}', function () {\n-    formatCommitMessage('chore(release): {{currentTag}} \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v{{currentTag}}/CHANGELOG.md', '1.0.0').should.equal('chore(release): 1.0.0 \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v1.0.0/CHANGELOG.md')\n-  })\n-})\n-\n-describe('cli', function () {\n-  beforeEach(initInTempFolder)\n-  afterEach(finishTemp)\n-\n-  describe('CHANGELOG.md does not exist', function () {\n-    it('populates changelog with commits since last tag by default', function () {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('fix: patch release')\n-\n-      execCli().code.should.equal(0)\n-\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.match(/patch release/)\n-      content.should.not.match(/first commit/)\n-    })\n-\n-    it('includes all commits if --first-release is true', function () {\n-      writePackageJson('1.0.1')\n-\n-      commit('feat: first commit')\n-      commit('fix: patch release')\n-      execCli('--first-release').code.should.equal(0)\n-\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.match(/patch release/)\n-      content.should.match(/first commit/)\n-      shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n-    })\n-\n-    it('skipping changelog will not create a changelog file', function () {\n-      writePackageJson('1.0.0')\n-\n-      commit('feat: first commit')\n-      return execCliAsync('--skip.changelog true')\n-        .then(function () {\n-          getPackageVersion().should.equal('1.1.0')\n-          let fileNotFound = false\n-          try {\n-            fs.readFileSync('CHANGELOG.md', 'utf-8')\n-          } catch (err) {\n-            fileNotFound = true\n-          }\n-\n-          fileNotFound.should.equal(true)\n-        })\n-    })\n-  })\n-\n-  describe('CHANGELOG.md exists', function () {\n-    it('appends the new release above the last release, removing the old header (legacy format)', function () {\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('fix: patch release')\n-\n-      execCli().code.should.equal(0)\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.match(/1\\.0\\.1/)\n-      content.should.not.match(/legacy header format/)\n-    })\n-\n-    // TODO: we should use snapshots which are easier to update than large\n-    // string assertions; we should also consider not using the CLI which\n-    // is slower than calling standard-version directly.\n-    it('appends the new release above the last release, removing the old header (new format)', function () {\n-      // we don't create a package.json, so no {{host}} and {{repo}} tag\n-      // will be populated, let's use a compareUrlFormat without these.\n-      const cliArgs = '--compareUrlFormat=/compare/{{previousTag}}...{{currentTag}}'\n-\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('fix: patch release')\n-\n-      execCli(cliArgs).code.should.equal(0)\n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-\n-      // remove commit hashes and dates to make testing against a static string easier:\n-      content = content.replace(/patch release [0-9a-f]{6,8}/g, 'patch release ABCDEFXY').replace(/\\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)/g, '(YYYY-MM-DD)')\n-      content.should.equal('# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n\\n### [1.0.1](/compare/v1.0.0...v1.0.1) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* patch release ABCDEFXY\\n')\n-\n-      commit('fix: another patch release')\n-      // we've populated no package.json, so no {{host}} and\n-      execCli(cliArgs).code.should.equal(0)\n-      content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content = content.replace(/patch release [0-9a-f]{6,8}/g, 'patch release ABCDEFXY').replace(/\\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)/g, '(YYYY-MM-DD)')\n-      content.should.equal('# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n\\n### [1.0.2](/compare/v1.0.1...v1.0.2) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* another patch release ABCDEFXY\\n\\n### [1.0.1](/compare/v1.0.0...v1.0.1) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* patch release ABCDEFXY\\n')\n-    })\n-\n-    it('commits all staged files', function () {\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('fix: patch release')\n-\n-      fs.writeFileSync('STUFF.md', 'stuff\\n', 'utf-8')\n-\n-      shell.exec('git add STUFF.md')\n-\n-      execCli('--commit-all').code.should.equal(0)\n-\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      const status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n-\n-      status.should.equal('')\n-      status.should.not.match(/STUFF.md/)\n-\n-      content.should.match(/1\\.0\\.1/)\n-      content.should.not.match(/legacy header format/)\n-    })\n-\n-    it('[DEPRECATED] (--changelogHeader) allows for a custom changelog header', function () {\n-      fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n-      commit('feat: first commit')\n-      execCli('--changelogHeader=\"# Pork Chop Log\"').code.should.equal(0)\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.match(/# Pork Chop Log/)\n-    })\n-\n-    it('[DEPRECATED] (--changelogHeader) exits with error if changelog header matches last version search regex', function () {\n-      fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n-      commit('feat: first commit')\n-      execCli('--changelogHeader=\"## 3.0.2\"').code.should.equal(1)\n-    })\n-  })\n-\n-  // TODO: investigate why mock-git does not play well with execFile on Windows.\n-  if (!isWindows) {\n-    describe('with mocked git', function () {\n-      it('--sign signs the commit and tag', function () {\n-        // mock git with file that writes args to gitcapture.log\n-        return mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n-          .then(function (unmock) {\n-            execCli('--sign').code.should.equal(0)\n-\n-            const captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n-              return line ? JSON.parse(line) : line\n-            })\n-            /* eslint-disable no-useless-escape */\n-            captured[captured.length - 4].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n-            captured[captured.length - 3].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'])\n-            /* eslint-enable no-useless-escape */\n-            unmock()\n-          })\n-      })\n-\n-      it('exits with error code if git commit fails', function () {\n-        // mock git by throwing on attempt to commit\n-        return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n-          .then(function (unmock) {\n-            const result = execCli()\n-            result.code.should.equal(1)\n-            result.stderr.should.match(/commit yourself/)\n-\n-            unmock()\n-          })\n-      })\n-\n-      it('exits with error code if git add fails', function () {\n-        // mock git by throwing on attempt to add\n-        return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n-          .then(function (unmock) {\n-            const result = execCli()\n-            result.code.should.equal(1)\n-            result.stderr.should.match(/addition is hard/)\n-\n-            unmock()\n-          })\n-      })\n-\n-      it('exits with error code if git tag fails', function () {\n-        // mock git by throwing on attempt to commit\n-        return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n-          .then(function (unmock) {\n-            const result = execCli()\n-            result.code.should.equal(1)\n-            result.stderr.should.match(/tag, you're it/)\n-\n-            unmock()\n-          })\n-      })\n-\n-      it('doesn\\'t fail fast on stderr output from git', function () {\n-        // mock git by throwing on attempt to commit\n-        return mockGit('console.error(\"haha, kidding, this is just a warning\"); process.exit(0);', 'add')\n-          .then(function (unmock) {\n-            writePackageJson('1.0.0')\n-\n-            const result = execCli()\n-            result.code.should.equal(1)\n-            result.stderr.should.match(/haha, kidding, this is just a warning/)\n-\n-            unmock()\n-          })\n-      })\n-    })\n-  }\n-\n-  describe('lifecycle scripts', () => {\n-    describe('prerelease hook', function () {\n-      it('should run the prerelease hook when provided', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              prerelease: 'node scripts/prerelease'\n-            }\n-          }\n-        })\n-        writeHook('prerelease')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(0)\n-        result.stderr.should.match(/prerelease ran/)\n-      })\n-\n-      it('should abort if the hook returns a non-zero exit code', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              prerelease: 'node scripts/prerelease && exit 1'\n-            }\n-          }\n-        })\n-        writeHook('prerelease')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(1)\n-        result.stderr.should.match(/prerelease ran/)\n-      })\n-    })\n-\n-    describe('prebump hook', function () {\n-      it('should allow prebump hook to return an alternate version #', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              prebump: 'node scripts/prebump'\n-            }\n-          }\n-        })\n-        writeHook('prebump', false, 'console.log(\"9.9.9\")')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.stdout.should.match(/9\\.9\\.9/)\n-        result.code.should.equal(0)\n-      })\n-    })\n-\n-    describe('postbump hook', function () {\n-      it('should run the postbump hook when provided', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              postbump: 'node scripts/postbump'\n-            }\n-          }\n-        })\n-        writePostBumpHook()\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(0)\n-        result.stderr.should.match(/postbump ran/)\n-      })\n-\n-      it('should run the postbump and exit with error when postbump fails', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              postbump: 'node scripts/postbump'\n-            }\n-          }\n-        })\n-        writePostBumpHook(true)\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(1)\n-        result.stderr.should.match(/postbump-failure/)\n-      })\n-    })\n-\n-    describe('precommit hook', function () {\n-      it('should run the precommit hook when provided via .versionrc.json (#371)', function () {\n-        fs.writeFileSync('.versionrc.json', JSON.stringify({\n-          scripts: {\n-            precommit: 'node scripts/precommit'\n-          }\n-        }), 'utf-8')\n-\n-        writeHook('precommit')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-        commit('feat: first commit')\n-        const result = execCli()\n-        result.code.should.equal(0)\n-        result.stderr.should.match(/precommit ran/)\n-      })\n-\n-      it('should run the precommit hook when provided', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              precommit: 'node scripts/precommit'\n-            }\n-          }\n-        })\n-        writeHook('precommit')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(0)\n-        result.stderr.should.match(/precommit ran/)\n-      })\n-\n-      it('should run the precommit hook and exit with error when precommit fails', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              precommit: 'node scripts/precommit'\n-            }\n-          }\n-        })\n-        writeHook('precommit', true)\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(1)\n-        result.stderr.should.match(/precommit-failure/)\n-      })\n-\n-      it('should allow an alternate commit message to be provided by precommit script', function () {\n-        writePackageJson('1.0.0', {\n-          'standard-version': {\n-            scripts: {\n-              precommit: 'node scripts/precommit'\n-            }\n-          }\n-        })\n-        writeHook('precommit', false, 'console.log(\"releasing %s delivers #222\")')\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('feat: first commit')\n-        const result = execCli('--patch')\n-        result.code.should.equal(0)\n-        shell.exec('git log --oneline -n1').should.match(/delivers #222/)\n-      })\n-    })\n-  })\n-\n-  describe('pre-release', function () {\n-    it('works fine without specifying a tag id when prereleasing', function () {\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      return execCliAsync('--prerelease')\n-        .then(function () {\n-          // it's a feature commit, so it's minor type\n-          getPackageVersion().should.equal('1.1.0-0')\n-        })\n-    })\n-\n-    it('advises use of --tag prerelease for publishing to npm', function () {\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      execCli('--prerelease').stdout.should.include('--tag prerelease')\n-    })\n-\n-    it('advises use of --tag alpha for publishing to npm when tagging alpha', function () {\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      execCli('--prerelease alpha').stdout.should.include('--tag alpha')\n-    })\n-\n-    it('does not advise use of --tag prerelease for private modules', function () {\n-      writePackageJson('1.0.0', { private: true })\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('feat: first commit')\n-      execCli('--prerelease').stdout.should.not.include('--tag prerelease')\n-    })\n-  })\n-\n-  describe('manual-release', function () {\n-    it('throws error when not specifying a release type', function () {\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('fix: first commit')\n-      execCli('--release-as').code.should.above(0)\n-    })\n-\n-    describe('release-types', function () {\n-      const regularTypes = ['major', 'minor', 'patch']\n-\n-      regularTypes.forEach(function (type) {\n-        it('creates a ' + type + ' release', function () {\n-          const originVer = '1.0.0'\n-          writePackageJson(originVer)\n-          fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-          commit('fix: first commit')\n-\n-          return execCliAsync('--release-as ' + type)\n-            .then(function () {\n-              const version = {\n-                major: semver.major(originVer),\n-                minor: semver.minor(originVer),\n-                patch: semver.patch(originVer)\n-              }\n-\n-              version[type] += 1\n-\n-              getPackageVersion().should.equal(version.major + '.' + version.minor + '.' + version.patch)\n-            })\n-        })\n-      })\n-\n-      // this is for pre-releases\n-      regularTypes.forEach(function (type) {\n-        it('creates a pre' + type + ' release', function () {\n-          const originVer = '1.0.0'\n-          writePackageJson(originVer)\n-          fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-          commit('fix: first commit')\n-\n-          return execCliAsync('--release-as ' + type + ' --prerelease ' + type)\n-            .then(function () {\n-              const version = {\n-                major: semver.major(originVer),\n-                minor: semver.minor(originVer),\n-                patch: semver.patch(originVer)\n-              }\n-\n-              version[type] += 1\n-\n-              getPackageVersion().should.equal(version.major + '.' + version.minor + '.' + version.patch + '-' + type + '.0')\n-            })\n-        })\n-      })\n-    })\n-\n-    describe('release-as-exact', function () {\n-      it('releases as v100.0.0', function () {\n-        const originVer = '1.0.0'\n-        writePackageJson(originVer)\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('fix: first commit')\n-\n-        return execCliAsync('--release-as v100.0.0')\n-          .then(function () {\n-            getPackageVersion().should.equal('100.0.0')\n-          })\n-      })\n-\n-      it('releases as 200.0.0-amazing', function () {\n-        const originVer = '1.0.0'\n-        writePackageJson(originVer)\n-        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-        commit('fix: first commit')\n-\n-        return execCliAsync('--release-as 200.0.0-amazing')\n-          .then(function () {\n-            getPackageVersion().should.equal('200.0.0-amazing')\n-          })\n-      })\n-    })\n-\n-    it('creates a prerelease with a new minor version after two prerelease patches', function () {\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n-\n-      commit('fix: first patch')\n-      return execCliAsync('--release-as patch --prerelease dev')\n-        .then(function () {\n-          getPackageVersion().should.equal('1.0.1-dev.0')\n-        })\n-\n-        // second\n-        .then(function () {\n-          commit('fix: second patch')\n-          return execCliAsync('--prerelease dev')\n-        })\n-        .then(function () {\n-          getPackageVersion().should.equal('1.0.1-dev.1')\n-        })\n-\n-        // third\n-        .then(function () {\n-          commit('feat: first new feat')\n-          return execCliAsync('--release-as minor --prerelease dev')\n-        })\n-        .then(function () {\n-          getPackageVersion().should.equal('1.1.0-dev.0')\n-        })\n-\n-        .then(function () {\n-          commit('fix: third patch')\n-          return execCliAsync('--release-as minor --prerelease dev')\n-        })\n-        .then(function () {\n-          getPackageVersion().should.equal('1.1.0-dev.1')\n-        })\n-\n-        .then(function () {\n-          commit('fix: forth patch')\n-          return execCliAsync('--prerelease dev')\n-        })\n-        .then(function () {\n-          getPackageVersion().should.equal('1.1.0-dev.2')\n-        })\n-    })\n-  })\n-\n-  it('handles commit messages longer than 80 characters', function () {\n-    commit('feat: first commit')\n-    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-    commit('fix: this is my fairly long commit message which is testing whether or not we allow for long commit messages')\n-\n-    execCli().code.should.equal(0)\n-\n-    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-    content.should.match(/this is my fairly long commit message which is testing whether or not we allow for long commit messages/)\n-  })\n-\n-  it('formats the commit and tag messages appropriately', function () {\n-    commit('feat: first commit')\n-    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-    commit('feat: new feature!')\n-\n-    execCli().code.should.equal(0)\n-\n-    // check last commit message\n-    shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-    // check annotated tag message\n-    shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-  })\n-\n-  it('appends line feed at end of package.json', function () {\n-    execCli().code.should.equal(0)\n-\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n-  })\n-\n-  it('preserves indentation of tabs in package.json', function () {\n-    const indentation = '\\t'\n-    const newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n-    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n-\n-    execCli().code.should.equal(0)\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n-  })\n-\n-  it('preserves indentation of spaces in package.json', function () {\n-    const indentation = '     '\n-    const newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n-    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n-\n-    execCli().code.should.equal(0)\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n-  })\n-\n-  it('preserves line feed in package.json', function () {\n-    const newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n-    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n-\n-    execCli().code.should.equal(0)\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n-  })\n-\n-  it('preserves carriage return + line feed in package.json', function () {\n-    const newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n-    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n-\n-    execCli().code.should.equal(0)\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\r\\n'))\n-  })\n-\n-  it('does not run git hooks if the --no-verify flag is passed', function () {\n-    writeGitPreCommitHook()\n-\n-    commit('feat: first commit')\n-    execCli('--no-verify').code.should.equal(0)\n-    commit('feat: second commit')\n-    execCli('-n').code.should.equal(0)\n-  })\n-\n-  it('does not print output when the --silent flag is passed', function () {\n-    const result = execCli('--silent')\n-    result.code.should.equal(0)\n-    result.stdout.should.equal('')\n-    result.stderr.should.equal('')\n-  })\n-\n-  it('does not display `npm publish` if the package is private', function () {\n-    writePackageJson('1.0.0', { private: true })\n-\n-    const result = execCli()\n-    result.code.should.equal(0)\n-    result.stdout.should.not.match(/npm publish/)\n-  })\n-\n-  it('does not display `all staged files` without the --commit-all flag', function () {\n-    const result = execCli()\n-    result.code.should.equal(0)\n-    result.stdout.should.not.match(/and all staged files/)\n-  })\n-\n-  it('does display `all staged files` if the --commit-all flag is passed', function () {\n-    const result = execCli('--commit-all')\n-    result.code.should.equal(0)\n-    result.stdout.should.match(/and all staged files/)\n-  })\n-\n-  it('includes merge commits', function () {\n-    const branchName = 'new-feature'\n-    commit('feat: first commit')\n-    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-    branch(branchName)\n-    checkout(branchName)\n-    commit('Implementing new feature')\n-    checkout('master')\n-    merge('feat: new feature from branch', branchName)\n-\n-    execCli().code.should.equal(0)\n-\n-    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-    content.should.match(/new feature from branch/)\n-\n-    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n-    pkgJson.should.equal(['{', '  \"version\": \"1.1.0\"', '}', ''].join('\\n'))\n-  })\n-\n-  it('exits with error code if \"scripts\" is not an object', () => {\n-    writePackageJson('1.0.0', {\n-      'standard-version': {\n-        scripts: 'echo hello'\n-      }\n-    })\n-\n-    commit('feat: first commit')\n-    const result = execCli()\n-    result.code.should.equal(1)\n-    result.stderr.should.match(/scripts must be an object/)\n-  })\n-\n-  it('exits with error code if \"skip\" is not an object', () => {\n-    writePackageJson('1.0.0', {\n-      'standard-version': {\n-        skip: true\n-      }\n-    })\n-\n-    commit('feat: first commit')\n-    const result = execCli()\n-    result.code.should.equal(1)\n-    result.stderr.should.match(/skip must be an object/)\n-  })\n-})\n-\n-describe('standard-version', function () {\n-  beforeEach(initInTempFolder)\n-  afterEach(finishTemp)\n-\n-  describe('with mocked conventionalRecommendedBump', function () {\n-    beforeEach(function () {\n-      mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n-      mockery.registerMock('conventional-recommended-bump', function (_, cb) {\n-        cb(new Error('bump err'))\n-      })\n-    })\n-\n-    afterEach(function () {\n-      mockery.deregisterMock('conventional-recommended-bump')\n-      mockery.disable()\n-    })\n-\n-    it('should exit on bump error', function (done) {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-\n-      require('./index')({ silent: true })\n-        .catch((err) => {\n-          err.message.should.match(/bump err/)\n-          done()\n-        })\n-    })\n-  })\n-\n-  describe('with mocked conventionalChangelog', function () {\n-    beforeEach(function () {\n-      mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n-      mockery.registerMock('conventional-changelog', function () {\n-        const readable = new stream.Readable({ objectMode: true })\n-        readable._read = function () {\n-        }\n-        setImmediate(readable.emit.bind(readable), 'error', new Error('changelog err'))\n-        return readable\n-      })\n-    })\n-\n-    afterEach(function () {\n-      mockery.deregisterMock('conventional-changelog')\n-      mockery.disable()\n-    })\n-\n-    it('should exit on changelog error', function (done) {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-\n-      require('./index')({ silent: true })\n-        .catch((err) => {\n-          err.message.should.match(/changelog err/)\n-          return done()\n-        })\n-    })\n-  })\n-\n-  it('formats the commit and tag messages appropriately', function (done) {\n-    commit('feat: first commit')\n-    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-    commit('feat: new feature!')\n-\n-    require('./index')({ silent: true })\n-      .then(() => {\n-        // check last commit message\n-        shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-        // check annotated tag message\n-        shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-        done()\n-      })\n-  })\n-\n-  describe('without a package file to bump', function () {\n-    it('should exit with error', function () {\n-      shell.rm('package.json')\n-      return require('./index')({\n-        silent: true,\n-        gitTagFallback: false\n-      })\n-        .catch((err) => {\n-          err.message.should.equal('no package file found')\n-        })\n-    })\n-  })\n-\n-  describe('bower.json support', function () {\n-    beforeEach(function () {\n-      writeBowerJson('1.0.0')\n-    })\n-\n-    it('bumps version # in bower.json', function () {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.1.0')\n-          getPackageVersion().should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('manifest.json support', function () {\n-    beforeEach(function () {\n-      writeManifestJson('1.0.0')\n-    })\n-\n-    it('bumps version # in manifest.json', function () {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('manifest.json', 'utf-8')).version.should.equal('1.1.0')\n-          getPackageVersion().should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('custom `bumpFiles` support', function () {\n-    it('mix.exs + version.txt', function () {\n-      // @todo This file path is relative to the `tmp` directory, which is a little confusing\n-      fs.copyFileSync('../test/mocks/mix.exs', 'mix.exs')\n-      fs.copyFileSync('../test/mocks/version.txt', 'version.txt')\n-      fs.copyFileSync('../test/mocks/updater/customer-updater.js', 'custom-updater.js')\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({\n-        silent: true,\n-        bumpFiles: [\n-          'version.txt',\n-          {\n-            filename: 'mix.exs',\n-            updater: 'custom-updater.js'\n-          }\n-        ]\n-      })\n-        .then(() => {\n-          fs.readFileSync('mix.exs', 'utf-8').should.contain('version: \"1.1.0\"')\n-          fs.readFileSync('version.txt', 'utf-8').should.equal('1.1.0')\n-        })\n-    })\n-\n-    it('bumps a custom `plain-text` file', function () {\n-      fs.copyFileSync('../test/mocks/VERSION-1.0.0.txt', 'VERSION_TRACKER.txt')\n-      commit('feat: first commit')\n-      return require('./index')({\n-        silent: true,\n-        bumpFiles: [\n-          {\n-            filename: 'VERSION_TRACKER.txt',\n-            type: 'plain-text'\n-          }\n-        ]\n-      })\n-        .then(() => {\n-          fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('custom `packageFiles` support', function () {\n-    it('reads and writes to a custom `plain-text` file', function () {\n-      fs.copyFileSync('../test/mocks/VERSION-6.3.1.txt', 'VERSION_TRACKER.txt')\n-      commit('feat: yet another commit')\n-      return require('./index')({\n-        silent: true,\n-        packageFiles: [\n-          {\n-            filename: 'VERSION_TRACKER.txt',\n-            type: 'plain-text'\n-          }\n-        ],\n-        bumpFiles: [\n-          {\n-            filename: 'VERSION_TRACKER.txt',\n-            type: 'plain-text'\n-          }\n-        ]\n-      })\n-        .then(() => {\n-          fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('6.4.0')\n-        })\n-    })\n-  })\n-\n-  describe('npm-shrinkwrap.json support', function () {\n-    beforeEach(function () {\n-      writeNpmShrinkwrapJson('1.0.0')\n-    })\n-\n-    it('bumps version # in npm-shrinkwrap.json', function (done) {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('npm-shrinkwrap.json', 'utf-8')).version.should.equal('1.1.0')\n-          getPackageVersion().should.equal('1.1.0')\n-          return done()\n-        })\n-    })\n-  })\n-\n-  describe('package-lock.json support', function () {\n-    beforeEach(function () {\n-      writePackageLockJson('1.0.0')\n-      fs.writeFileSync('.gitignore', '', 'utf-8')\n-    })\n-\n-    it('bumps version # in package-lock.json', function () {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal('1.1.0')\n-          getPackageVersion().should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('dry-run', function () {\n-    it('skips all non-idempotent steps', function (done) {\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      execCli('--dry-run').stdout.should.match(/### Features/)\n-      shell.exec('git log --oneline -n1').stdout.should.match(/feat: new feature!/)\n-      shell.exec('git tag').stdout.should.match(/1\\.0\\.0/)\n-      getPackageVersion().should.equal('1.0.0')\n-      return done()\n-    })\n-  })\n-\n-  describe('skip', () => {\n-    it('allows bump and changelog generation to be skipped', function () {\n-      const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n-\n-      commit('feat: first commit')\n-      return execCliAsync('--skip.bump true --skip.changelog true')\n-        .then(function () {\n-          getPackageVersion().should.equal('1.0.0')\n-          const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-          content.should.equal(changelogContent)\n-        })\n-    })\n-\n-    it('allows the commit phase to be skipped', function () {\n-      const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n-      writePackageJson('1.0.0')\n-      fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n-\n-      commit('feat: new feature from branch')\n-      return execCliAsync('--skip.commit true')\n-        .then(function () {\n-          getPackageVersion().should.equal('1.1.0')\n-          const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-          content.should.match(/new feature from branch/)\n-          // check last commit message\n-          shell.exec('git log --oneline -n1').stdout.should.match(/feat: new feature from branch/)\n-        })\n-    })\n-  })\n-\n-  describe('.gitignore', () => {\n-    beforeEach(function () {\n-      writeBowerJson('1.0.0')\n-    })\n-\n-    it('does not update files present in .gitignore', () => {\n-      fs.writeFileSync('.gitignore', 'bower.json', 'utf-8')\n-\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.0.0')\n-          getPackageVersion().should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('.gitignore', () => {\n-    beforeEach(function () {\n-      writeBowerJson('1.0.0')\n-    })\n-\n-    it('does not update files present in .gitignore', () => {\n-      fs.writeFileSync('.gitignore', 'bower.json', 'utf-8')\n-\n-      commit('feat: first commit')\n-      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n-      commit('feat: new feature!')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.0.0')\n-          getPackageVersion().should.equal('1.1.0')\n-        })\n-    })\n-  })\n-\n-  describe('gitTagFallback', () => {\n-    it('defaults to 1.0.0 if no tags in git history', () => {\n-      shell.rm('package.json')\n-      commit('feat: first commit')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          const output = shell.exec('git tag')\n-          output.stdout.should.include('v1.1.0')\n-        })\n-    })\n-\n-    it('bases version on last tag, if tags are found', () => {\n-      shell.rm('package.json')\n-      shell.exec('git tag -a v5.0.0 -m \"a release\"')\n-      shell.exec('git tag -a v3.0.0 -m \"another release\"')\n-      commit('feat: another commit')\n-      return require('./index')({ silent: true })\n-        .then(() => {\n-          const output = shell.exec('git tag')\n-          output.stdout.should.include('v5.1.0')\n-        })\n-    })\n-\n-    it('does not display `npm publish` if there is no package.json', function () {\n-      shell.rm('package.json')\n-      const result = execCli()\n-      result.code.should.equal(0)\n-      result.stdout.should.not.match(/npm publish/)\n-    })\n-  })\n-\n-  describe('configuration', () => {\n-    it('reads config from package.json', function () {\n-      writePackageJson('1.0.0', {\n-        repository: {\n-          url: 'git+https://company@scm.org/office/app.git'\n-        },\n-        'standard-version': {\n-          issueUrlFormat: 'https://standard-version.company.net/browse/{{id}}'\n-        }\n-      })\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('https://standard-version.company.net/browse/1')\n-    })\n-\n-    it('reads config from .versionrc', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync('.versionrc', JSON.stringify({\n-        issueUrlFormat: 'http://www.foo.com/{{id}}'\n-      }), 'utf-8')\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.foo.com/1')\n-    })\n-\n-    it('reads config from .versionrc.json', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync('.versionrc.json', JSON.stringify({\n-        issueUrlFormat: 'http://www.foo.com/{{id}}'\n-      }), 'utf-8')\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.foo.com/1')\n-    })\n-\n-    it('evaluates a config-function from .versionrc.js', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync(\n-        '.versionrc.js',\n-        `module.exports = function() {\n-          return {\n-            issueUrlFormat: 'http://www.versionrc.js/function/{{id}}'\n-          }\n-        }`,\n-        'utf-8'\n-      )\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.versionrc.js/function/1')\n-    })\n-\n-    it('evaluates a config-object from .versionrc.js', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync(\n-        '.versionrc.js',\n-        `module.exports = {\n-          issueUrlFormat: 'http://www.versionrc.js/object/{{id}}'\n-        }`,\n-        'utf-8'\n-      )\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.versionrc.js/object/1')\n-    })\n-\n-    it('throws an error when a non-object is returned from .versionrc.js', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync(\n-        '.versionrc.js',\n-        'module.exports = 3',\n-        'utf-8'\n-      )\n-      commit('feat: another commit addresses issue #1')\n-      execCli().code.should.equal(1)\n-    })\n-\n-    it('.versionrc : releaseCommitMessageFormat', function () {\n-      // write configuration that overrides default issue\n-      // URL format.\n-      fs.writeFileSync('.versionrc', JSON.stringify({\n-        releaseCommitMessageFormat: 'This commit represents release: {{currentTag}}'\n-      }), 'utf-8')\n-      commit('feat: another commit addresses issue #1')\n-      execCli()\n-      shell.exec('git log --oneline -n1').should.include('This commit represents release: 1.1.0')\n-    })\n-\n-    it('--releaseCommitMessageFormat', function () {\n-      commit('feat: another commit addresses issue #1')\n-      execCli('--releaseCommitMessageFormat=\"{{currentTag}} is the version.\"')\n-      shell.exec('git log --oneline -n1').should.include('1.1.0 is the version.')\n-    })\n-\n-    it('.versionrc : issuePrefixes', function () {\n-      // write configuration that overrides default issuePrefixes\n-      // and reference prefix in issue URL format.\n-      fs.writeFileSync('.versionrc', JSON.stringify({\n-        issueUrlFormat: 'http://www.foo.com/{{prefix}}{{id}}',\n-        issuePrefixes: ['ABC-']\n-      }), 'utf-8')\n-      commit('feat: another commit addresses issue ABC-1')\n-      execCli()\n-      // CHANGELOG should have the new issue URL format.\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.foo.com/ABC-1')\n-    })\n-\n-    it('--header', function () {\n-      fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n-      commit('feat: first commit')\n-      execCli('--header=\"# Welcome to our CHANGELOG.md\"').code.should.equal(0)\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.match(/# Welcome to our CHANGELOG.md/)\n-    })\n-\n-    it('--issuePrefixes and --issueUrlFormat', function () {\n-      commit('feat: another commit addresses issue ABC-1')\n-      execCli('--issuePrefixes=\"ABC-\" --issueUrlFormat=\"http://www.foo.com/{{prefix}}{{id}}\"')\n-      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      content.should.include('http://www.foo.com/ABC-1')\n-    })\n-\n-    it('[LEGACY] supports --message (and single %s replacement)', function () {\n-      commit('feat: another commit addresses issue #1')\n-      execCli('--message=\"V:%s\"')\n-      shell.exec('git log --oneline -n1').should.include('V:1.1.0')\n-    })\n-\n-    it('[LEGACY] supports -m (and multiple %s replacements)', function () {\n-      commit('feat: another commit addresses issue #1')\n-      execCli('--message=\"V:%s is the %s.\"')\n-      shell.exec('git log --oneline -n1').should.include('V:1.1.0 is the 1.1.0.')\n-    })\n-  })\n-\n-  describe('pre-major', () => {\n-    it('bumps the minor rather than major, if version < 1.0.0', function () {\n-      writePackageJson('0.5.0', {\n-        repository: {\n-          url: 'https://github.com/yargs/yargs.git'\n-        }\n-      })\n-      commit('feat!: this is a breaking change')\n-      execCli()\n-      getPackageVersion().should.equal('0.6.0')\n-    })\n-\n-    it('bumps major if --release-as=major specified, if version < 1.0.0', function () {\n-      writePackageJson('0.5.0', {\n-        repository: {\n-          url: 'https://github.com/yargs/yargs.git'\n-        }\n-      })\n-      commit('feat!: this is a breaking change')\n-      execCli('-r major')\n-      getPackageVersion().should.equal('1.0.0')\n-    })\n-  })\n-})\n-\n-describe('GHSL-2020-111', function () {\n-  beforeEach(initInTempFolder)\n-  afterEach(finishTemp)\n-  it('does not allow command injection via basic configuration', function () {\n-    return standardVersion({\n-      silent: true,\n-      noVerify: true,\n-      infile: 'foo.txt',\n-      releaseCommitMessageFormat: 'bla `touch exploit`'\n-    }).then(function () {\n-      const stat = shell.test('-f', './exploit')\n-      stat.should.equal(false)\n-    })\n-  })\n-})\ndiff --git a/test/config-files.spec.js b/test/config-files.spec.js\nnew file mode 100644\nindex 0000000..68f718b\n--- /dev/null\n+++ b/test/config-files.spec.js\n@@ -0,0 +1,174 @@\n+/* global describe it beforeEach afterEach */\n+\n+'use strict'\n+\n+const shell = require('shelljs')\n+const fs = require('fs')\n+const { Readable } = require('stream')\n+const mockery = require('mockery')\n+const stdMocks = require('std-mocks')\n+\n+require('chai').should()\n+\n+function exec () {\n+  const cli = require('../command')\n+  const opt = cli.parse('standard-version')\n+  opt.skip = { commit: true, tag: true }\n+  return require('../index')(opt)\n+}\n+\n+/**\n+ * Mock external conventional-changelog modules\n+ *\n+ * Mocks should be unregistered in test cleanup by calling unmock()\n+ *\n+ * bump?: 'major' | 'minor' | 'patch' | Error | (opt, cb) => { cb(err) | cb(null, { releaseType }) }\n+ * changelog?: string | Error | Array<string | Error | (opt) => string | null>\n+ * tags?: string[] | Error\n+ */\n+function mock ({ bump, changelog, tags } = {}) {\n+  mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n+\n+  mockery.registerMock('conventional-recommended-bump', function (opt, cb) {\n+    if (typeof bump === 'function') bump(opt, cb)\n+    else if (bump instanceof Error) cb(bump)\n+    else cb(null, bump ? { releaseType: bump } : {})\n+  })\n+\n+  if (!Array.isArray(changelog)) changelog = [changelog]\n+  mockery.registerMock(\n+    'conventional-changelog',\n+    (opt) =>\n+      new Readable({\n+        read (_size) {\n+          const next = changelog.shift()\n+          if (next instanceof Error) {\n+            this.destroy(next)\n+          } else if (typeof next === 'function') {\n+            this.push(next(opt))\n+          } else {\n+            this.push(next ? Buffer.from(next, 'utf8') : null)\n+          }\n+        }\n+      })\n+  )\n+\n+  mockery.registerMock('git-semver-tags', function (cb) {\n+    if (tags instanceof Error) cb(tags)\n+    else cb(null, tags | [])\n+  })\n+\n+  stdMocks.use()\n+  return () => stdMocks.flush()\n+}\n+\n+describe('config files', () => {\n+  beforeEach(function () {\n+    shell.rm('-rf', 'tmp')\n+    shell.config.silent = true\n+    shell.mkdir('tmp')\n+    shell.cd('tmp')\n+    fs.writeFileSync(\n+      'package.json',\n+      JSON.stringify({ version: '1.0.0' }),\n+      'utf-8'\n+    )\n+  })\n+\n+  afterEach(function () {\n+    shell.cd('../')\n+    shell.rm('-rf', 'tmp')\n+\n+    mockery.deregisterAll()\n+    mockery.disable()\n+    stdMocks.restore()\n+\n+    // push out prints from the Mocha reporter\n+    const { stdout } = stdMocks.flush()\n+    for (const str of stdout) {\n+      if (str.startsWith(' ')) process.stdout.write(str)\n+    }\n+  })\n+\n+  it('reads config from package.json', async function () {\n+    const issueUrlFormat = 'https://standard-version.company.net/browse/{{id}}'\n+    mock({\n+      bump: 'minor',\n+      changelog: ({ preset }) => preset.issueUrlFormat\n+    })\n+    const pkg = {\n+      version: '1.0.0',\n+      repository: { url: 'git+https://company@scm.org/office/app.git' },\n+      'standard-version': { issueUrlFormat }\n+    }\n+    fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n+\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.include(issueUrlFormat)\n+  })\n+\n+  it('reads config from .versionrc', async function () {\n+    const issueUrlFormat = 'http://www.foo.com/{{id}}'\n+    const changelog = ({ preset }) => preset.issueUrlFormat\n+    mock({ bump: 'minor', changelog })\n+    fs.writeFileSync('.versionrc', JSON.stringify({ issueUrlFormat }), 'utf-8')\n+\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.include(issueUrlFormat)\n+  })\n+\n+  it('reads config from .versionrc.json', async function () {\n+    const issueUrlFormat = 'http://www.foo.com/{{id}}'\n+    const changelog = ({ preset }) => preset.issueUrlFormat\n+    mock({ bump: 'minor', changelog })\n+    fs.writeFileSync(\n+      '.versionrc.json',\n+      JSON.stringify({ issueUrlFormat }),\n+      'utf-8'\n+    )\n+\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.include(issueUrlFormat)\n+  })\n+\n+  it('evaluates a config-function from .versionrc.js', async function () {\n+    const issueUrlFormat = 'http://www.foo.com/{{id}}'\n+    const src = `module.exports = function() { return ${JSON.stringify({\n+      issueUrlFormat\n+    })} }`\n+    const changelog = ({ preset }) => preset.issueUrlFormat\n+    mock({ bump: 'minor', changelog })\n+    fs.writeFileSync('.versionrc.js', src, 'utf-8')\n+\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.include(issueUrlFormat)\n+  })\n+\n+  it('evaluates a config-object from .versionrc.js', async function () {\n+    const issueUrlFormat = 'http://www.foo.com/{{id}}'\n+    const src = `module.exports = ${JSON.stringify({ issueUrlFormat })}`\n+    const changelog = ({ preset }) => preset.issueUrlFormat\n+    mock({ bump: 'minor', changelog })\n+    fs.writeFileSync('.versionrc.js', src, 'utf-8')\n+\n+    await exec()\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.include(issueUrlFormat)\n+  })\n+\n+  it('throws an error when a non-object is returned from .versionrc.js', async function () {\n+    mock({ bump: 'minor' })\n+    fs.writeFileSync('.versionrc.js', 'module.exports = 3', 'utf-8')\n+    try {\n+      await exec()\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (error) {\n+      error.message.should.match(/Invalid configuration/)\n+    }\n+  })\n+})\ndiff --git a/test/core.spec.js b/test/core.spec.js\nnew file mode 100644\nindex 0000000..22d2b8e\n--- /dev/null\n+++ b/test/core.spec.js\n@@ -0,0 +1,793 @@\n+/* global describe it afterEach */\n+\n+'use strict'\n+\n+const shell = require('shelljs')\n+const fs = require('fs')\n+const { resolve } = require('path')\n+const { Readable } = require('stream')\n+const mockFS = require('mock-fs')\n+const mockery = require('mockery')\n+const stdMocks = require('std-mocks')\n+\n+const cli = require('../command')\n+const formatCommitMessage = require('../lib/format-commit-message')\n+\n+require('chai').should()\n+\n+// set by mock()\n+let standardVersion\n+\n+function exec (opt = '', git) {\n+  if (typeof opt === 'string') {\n+    opt = cli.parse(`standard-version ${opt}`)\n+  }\n+  if (!git) opt.skip = Object.assign({}, opt.skip, { commit: true, tag: true })\n+  return standardVersion(opt)\n+}\n+\n+function getPackageVersion () {\n+  return JSON.parse(fs.readFileSync('package.json', 'utf-8')).version\n+}\n+\n+/**\n+ * Mock external conventional-changelog modules\n+ *\n+ * Mocks should be unregistered in test cleanup by calling unmock()\n+ *\n+ * bump?: 'major' | 'minor' | 'patch' | Error | (opt, cb) => { cb(err) | cb(null, { releaseType }) }\n+ * changelog?: string | Error | Array<string | Error | (opt) => string | null>\n+ * execFile?: ({ dryRun, silent }, cmd, cmdArgs) => Promise<string>\n+ * fs?: { [string]: string | Buffer | any }\n+ * pkg?: { [string]: any }\n+ * tags?: string[] | Error\n+ */\n+function mock ({ bump, changelog, execFile, fs, pkg, tags } = {}) {\n+  mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n+\n+  mockery.registerMock('conventional-recommended-bump', function (opt, cb) {\n+    if (typeof bump === 'function') bump(opt, cb)\n+    else if (bump instanceof Error) cb(bump)\n+    else cb(null, bump ? { releaseType: bump } : {})\n+  })\n+\n+  if (!Array.isArray(changelog)) changelog = [changelog]\n+  mockery.registerMock(\n+    'conventional-changelog',\n+    (opt) =>\n+      new Readable({\n+        read (_size) {\n+          const next = changelog.shift()\n+          if (next instanceof Error) {\n+            this.destroy(next)\n+          } else if (typeof next === 'function') {\n+            this.push(next(opt))\n+          } else {\n+            this.push(next ? Buffer.from(next, 'utf8') : null)\n+          }\n+        }\n+      })\n+  )\n+\n+  mockery.registerMock('git-semver-tags', function (cb) {\n+    if (tags instanceof Error) cb(tags)\n+    else cb(null, tags | [])\n+  })\n+\n+  if (typeof execFile === 'function') {\n+    // called from commit & tag lifecycle methods\n+    mockery.registerMock('../run-execFile', execFile)\n+  }\n+\n+  // needs to be set after mockery, but before mock-fs\n+  standardVersion = require('../index')\n+\n+  fs = Object.assign({}, fs)\n+  if (pkg) {\n+    fs['package.json'] = JSON.stringify(pkg)\n+  } else if (pkg === undefined && !fs['package.json']) {\n+    fs['package.json'] = JSON.stringify({ version: '1.0.0' })\n+  }\n+  mockFS(fs)\n+\n+  stdMocks.use()\n+  return () => stdMocks.flush()\n+}\n+\n+function unmock () {\n+  mockery.deregisterAll()\n+  mockery.disable()\n+  mockFS.restore()\n+  stdMocks.restore()\n+  standardVersion = null\n+\n+  // push out prints from the Mocha reporter\n+  const { stdout } = stdMocks.flush()\n+  for (const str of stdout) {\n+    if (str.startsWith(' ')) process.stdout.write(str)\n+  }\n+}\n+\n+describe('format-commit-message', function () {\n+  it('works for no {{currentTag}}', function () {\n+    formatCommitMessage('chore(release): 1.0.0', '1.0.0').should.equal(\n+      'chore(release): 1.0.0'\n+    )\n+  })\n+  it('works for one {{currentTag}}', function () {\n+    formatCommitMessage('chore(release): {{currentTag}}', '1.0.0').should.equal(\n+      'chore(release): 1.0.0'\n+    )\n+  })\n+  it('works for two {{currentTag}}', function () {\n+    formatCommitMessage(\n+      'chore(release): {{currentTag}} \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v{{currentTag}}/CHANGELOG.md',\n+      '1.0.0'\n+    ).should.equal(\n+      'chore(release): 1.0.0 \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v1.0.0/CHANGELOG.md'\n+    )\n+  })\n+})\n+\n+describe('cli', function () {\n+  afterEach(unmock)\n+\n+  describe('CHANGELOG.md does not exist', function () {\n+    it('populates changelog with commits since last tag by default', async function () {\n+      mock({ bump: 'patch', changelog: 'patch release\\n', tags: ['v1.0.0'] })\n+      await exec()\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(/patch release/)\n+    })\n+\n+    it('includes all commits if --first-release is true', async function () {\n+      mock({\n+        bump: 'minor',\n+        changelog: 'first commit\\npatch release\\n',\n+        pkg: { version: '1.0.1' }\n+      })\n+      await exec('--first-release')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(/patch release/)\n+      content.should.match(/first commit/)\n+    })\n+\n+    it('skipping changelog will not create a changelog file', async function () {\n+      mock({ bump: 'minor', changelog: 'foo\\n' })\n+      await exec('--skip.changelog true')\n+      getPackageVersion().should.equal('1.1.0')\n+      try {\n+        fs.readFileSync('CHANGELOG.md', 'utf-8')\n+        throw new Error('File should not exist')\n+      } catch (err) {\n+        err.code.should.equal('ENOENT')\n+      }\n+    })\n+  })\n+\n+  describe('CHANGELOG.md exists', function () {\n+    it('appends the new release above the last release, removing the old header (legacy format)', async function () {\n+      mock({\n+        bump: 'patch',\n+        changelog: 'release 1.0.1\\n',\n+        fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' },\n+        tags: ['v1.0.0']\n+      })\n+      await exec()\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(/1\\.0\\.1/)\n+      content.should.not.match(/legacy header format/)\n+    })\n+\n+    it('appends the new release above the last release, removing the old header (new format)', async function () {\n+      const { header } = require('../defaults')\n+      const changelog1 =\n+        '### [1.0.1](/compare/v1.0.0...v1.0.1) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* patch release ABCDEFXY\\n'\n+      mock({ bump: 'patch', changelog: changelog1, tags: ['v1.0.0'] })\n+      await exec()\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.equal(header + '\\n' + changelog1)\n+\n+      const changelog2 =\n+        '### [1.0.2](/compare/v1.0.1...v1.0.2) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* another patch release ABCDEFXY\\n'\n+      unmock()\n+      mock({\n+        bump: 'patch',\n+        changelog: changelog2,\n+        fs: { 'CHANGELOG.md': content },\n+        tags: ['v1.0.0', 'v1.0.1']\n+      })\n+      await exec()\n+      content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.equal(header + '\\n' + changelog2 + changelog1)\n+    })\n+\n+    it('[DEPRECATED] (--changelogHeader) allows for a custom changelog header', async function () {\n+      const header = '# Pork Chop Log'\n+      mock({\n+        bump: 'minor',\n+        changelog: header + '\\n',\n+        fs: { 'CHANGELOG.md': '' }\n+      })\n+      await exec(`--changelogHeader=\"${header}\"`)\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(new RegExp(header))\n+    })\n+\n+    it('[DEPRECATED] (--changelogHeader) exits with error if changelog header matches last version search regex', async function () {\n+      mock({ bump: 'minor', fs: { 'CHANGELOG.md': '' } })\n+      try {\n+        await exec('--changelogHeader=\"## 3.0.2\"')\n+        throw new Error('That should not have worked')\n+      } catch (error) {\n+        error.message.should.match(/custom changelog header must not match/)\n+      }\n+    })\n+  })\n+\n+  describe('lifecycle scripts', () => {\n+    describe('prerelease hook', function () {\n+      it('should run the prerelease hook when provided', async function () {\n+        const flush = mock({\n+          bump: 'minor',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+\n+        await exec({\n+          scripts: { prerelease: 'node -e \"console.error(\\'prerelease\\' + \\' ran\\')\"' }\n+        })\n+        const { stderr } = flush()\n+        stderr.join('\\n').should.match(/prerelease ran/)\n+      })\n+\n+      it('should abort if the hook returns a non-zero exit code', async function () {\n+        mock({\n+          bump: 'minor',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+\n+        try {\n+          await exec({\n+            scripts: {\n+              prerelease: 'node -e \"throw new Error(\\'prerelease\\' + \\' fail\\')\"'\n+            }\n+          })\n+          /* istanbul ignore next */\n+          throw new Error('Unexpected success')\n+        } catch (error) {\n+          error.message.should.match(/prerelease fail/)\n+        }\n+      })\n+    })\n+\n+    describe('prebump hook', function () {\n+      it('should allow prebump hook to return an alternate version #', async function () {\n+        const flush = mock({\n+          bump: 'minor',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+\n+        await exec({ scripts: { prebump: 'node -e \"console.log(Array.of(9, 9, 9).join(\\'.\\'))\"' } })\n+        const { stdout } = flush()\n+        stdout.join('').should.match(/9\\.9\\.9/)\n+      })\n+    })\n+\n+    describe('postbump hook', function () {\n+      it('should run the postbump hook when provided', async function () {\n+        const flush = mock({\n+          bump: 'minor',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+\n+        await exec({\n+          scripts: { postbump: 'node -e \"console.error(\\'postbump\\' + \\' ran\\')\"' }\n+        })\n+        const { stderr } = flush()\n+        stderr.join('\\n').should.match(/postbump ran/)\n+      })\n+\n+      it('should run the postbump and exit with error when postbump fails', async function () {\n+        mock({\n+          bump: 'minor',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+\n+        try {\n+          await exec({\n+            scripts: { postbump: 'node -e \"throw new Error(\\'postbump\\' + \\' fail\\')\"' }\n+          })\n+          await exec('--patch')\n+          /* istanbul ignore next */\n+          throw new Error('Unexpected success')\n+        } catch (error) {\n+          error.message.should.match(/postbump fail/)\n+        }\n+      })\n+    })\n+  })\n+\n+  describe('manual-release', function () {\n+    describe('release-types', function () {\n+      const regularTypes = ['major', 'minor', 'patch']\n+      const nextVersion = { major: '2.0.0', minor: '1.1.0', patch: '1.0.1' }\n+\n+      regularTypes.forEach(function (type) {\n+        it('creates a ' + type + ' release', async function () {\n+          mock({\n+            bump: 'patch',\n+            fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+          })\n+          await exec('--release-as ' + type)\n+          getPackageVersion().should.equal(nextVersion[type])\n+        })\n+      })\n+\n+      // this is for pre-releases\n+      regularTypes.forEach(function (type) {\n+        it('creates a pre' + type + ' release', async function () {\n+          mock({\n+            bump: 'patch',\n+            fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+          })\n+          await exec('--release-as ' + type + ' --prerelease ' + type)\n+          getPackageVersion().should.equal(`${nextVersion[type]}-${type}.0`)\n+        })\n+      })\n+    })\n+\n+    describe('release-as-exact', function () {\n+      it('releases as v100.0.0', async function () {\n+        mock({\n+          bump: 'patch',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+        await exec('--release-as v100.0.0')\n+        getPackageVersion().should.equal('100.0.0')\n+      })\n+\n+      it('releases as 200.0.0-amazing', async function () {\n+        mock({\n+          bump: 'patch',\n+          fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+        })\n+        await exec('--release-as 200.0.0-amazing')\n+        getPackageVersion().should.equal('200.0.0-amazing')\n+      })\n+    })\n+\n+    it('creates a prerelease with a new minor version after two prerelease patches', async function () {\n+      let releaseType = 'patch'\n+      const bump = (_, cb) => cb(null, { releaseType })\n+      mock({\n+        bump,\n+        fs: { 'CHANGELOG.md': 'legacy header format<a name=\"1.0.0\">\\n' }\n+      })\n+\n+      await exec('--release-as patch --prerelease dev')\n+      getPackageVersion().should.equal('1.0.1-dev.0')\n+\n+      await exec('--prerelease dev')\n+      getPackageVersion().should.equal('1.0.1-dev.1')\n+\n+      releaseType = 'minor'\n+      await exec('--release-as minor --prerelease dev')\n+      getPackageVersion().should.equal('1.1.0-dev.0')\n+\n+      await exec('--release-as minor --prerelease dev')\n+      getPackageVersion().should.equal('1.1.0-dev.1')\n+\n+      await exec('--prerelease dev')\n+      getPackageVersion().should.equal('1.1.0-dev.2')\n+    })\n+  })\n+\n+  it('appends line feed at end of package.json', async function () {\n+    mock({ bump: 'patch' })\n+    await exec()\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal('{\\n  \"version\": \"1.0.1\"\\n}\\n')\n+  })\n+\n+  it('preserves indentation of tabs in package.json', async function () {\n+    mock({\n+      bump: 'patch',\n+      fs: { 'package.json': '{\\n\\t\"version\": \"1.0.0\"\\n}\\n' }\n+    })\n+    await exec()\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal('{\\n\\t\"version\": \"1.0.1\"\\n}\\n')\n+  })\n+\n+  it('preserves indentation of spaces in package.json', async function () {\n+    mock({\n+      bump: 'patch',\n+      fs: { 'package.json': '{\\n    \"version\": \"1.0.0\"\\n}\\n' }\n+    })\n+    await exec()\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal('{\\n    \"version\": \"1.0.1\"\\n}\\n')\n+  })\n+\n+  it('preserves carriage return + line feed in package.json', async function () {\n+    mock({\n+      bump: 'patch',\n+      fs: { 'package.json': '{\\r\\n  \"version\": \"1.0.0\"\\r\\n}\\r\\n' }\n+    })\n+    await exec()\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal('{\\r\\n  \"version\": \"1.0.1\"\\r\\n}\\r\\n')\n+  })\n+\n+  it('does not print output when the --silent flag is passed', async function () {\n+    const flush = mock()\n+    await exec('--silent')\n+    flush().should.eql({ stdout: [], stderr: [] })\n+  })\n+})\n+\n+describe('standard-version', function () {\n+  afterEach(unmock)\n+\n+  it('should exit on bump error', async function () {\n+    mock({ bump: new Error('bump err') })\n+    try {\n+      await exec()\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (err) {\n+      err.message.should.match(/bump err/)\n+    }\n+  })\n+\n+  it('should exit on changelog error', async function () {\n+    mock({ bump: 'minor', changelog: new Error('changelog err') })\n+    try {\n+      await exec()\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (err) {\n+      err.message.should.match(/changelog err/)\n+    }\n+  })\n+\n+  it('should exit with error without a package file to bump', async function () {\n+    mock({ bump: 'patch', pkg: false })\n+    try {\n+      await exec({ gitTagFallback: false })\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (err) {\n+      err.message.should.equal('no package file found')\n+    }\n+  })\n+\n+  it('bumps version # in bower.json', async function () {\n+    mock({\n+      bump: 'minor',\n+      fs: { 'bower.json': JSON.stringify({ version: '1.0.0' }) },\n+      tags: ['v1.0.0']\n+    })\n+    await exec()\n+    JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal(\n+      '1.1.0'\n+    )\n+    getPackageVersion().should.equal('1.1.0')\n+  })\n+\n+  it('bumps version # in manifest.json', async function () {\n+    mock({\n+      bump: 'minor',\n+      fs: { 'manifest.json': JSON.stringify({ version: '1.0.0' }) },\n+      tags: ['v1.0.0']\n+    })\n+    await exec()\n+    JSON.parse(fs.readFileSync('manifest.json', 'utf-8')).version.should.equal(\n+      '1.1.0'\n+    )\n+    getPackageVersion().should.equal('1.1.0')\n+  })\n+\n+  describe('custom `bumpFiles` support', function () {\n+    it('mix.exs + version.txt', async function () {\n+      const updater = 'custom-updater.js'\n+      const updaterModule = require('./mocks/updater/customer-updater')\n+      mock({\n+        bump: 'minor',\n+        fs: {\n+          'mix.exs': fs.readFileSync('./test/mocks/mix.exs'),\n+          'version.txt': fs.readFileSync('./test/mocks/version.txt')\n+        },\n+        tags: ['v1.0.0']\n+      })\n+      mockery.registerMock(resolve(process.cwd(), updater), updaterModule)\n+\n+      await exec({\n+        bumpFiles: [\n+          'version.txt',\n+          { filename: 'mix.exs', updater: 'custom-updater.js' }\n+        ]\n+      })\n+      fs.readFileSync('mix.exs', 'utf-8').should.contain('version: \"1.1.0\"')\n+      fs.readFileSync('version.txt', 'utf-8').should.equal('1.1.0')\n+    })\n+\n+    it('bumps a custom `plain-text` file', async function () {\n+      mock({\n+        bump: 'minor',\n+        fs: {\n+          'VERSION_TRACKER.txt': fs.readFileSync(\n+            './test/mocks/VERSION-1.0.0.txt'\n+          )\n+        }\n+      })\n+      await exec({\n+        bumpFiles: [{ filename: 'VERSION_TRACKER.txt', type: 'plain-text' }]\n+      })\n+      fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('1.1.0')\n+    })\n+  })\n+\n+  describe('custom `packageFiles` support', function () {\n+    it('reads and writes to a custom `plain-text` file', async function () {\n+      mock({\n+        bump: 'minor',\n+        fs: {\n+          'VERSION_TRACKER.txt': fs.readFileSync(\n+            './test/mocks/VERSION-6.3.1.txt'\n+          )\n+        }\n+      })\n+      await exec({\n+        packageFiles: [{ filename: 'VERSION_TRACKER.txt', type: 'plain-text' }],\n+        bumpFiles: [{ filename: 'VERSION_TRACKER.txt', type: 'plain-text' }]\n+      })\n+      fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('6.4.0')\n+    })\n+\n+    it('allows same object to be used in packageFiles and bumpFiles', async function () {\n+      mock({\n+        bump: 'minor',\n+        fs: {\n+          'VERSION_TRACKER.txt': fs.readFileSync(\n+            './test/mocks/VERSION-6.3.1.txt'\n+          )\n+        }\n+      })\n+      const origWarn = console.warn\n+      console.warn = () => {\n+        throw new Error('console.warn should not be called')\n+      }\n+      const filedesc = { filename: 'VERSION_TRACKER.txt', type: 'plain-text' }\n+      try {\n+        await exec({ packageFiles: [filedesc], bumpFiles: [filedesc] })\n+        fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('6.4.0')\n+      } finally {\n+        console.warn = origWarn\n+      }\n+    })\n+  })\n+\n+  it('bumps version # in npm-shrinkwrap.json', async function () {\n+    mock({\n+      bump: 'minor',\n+      fs: {\n+        'npm-shrinkwrap.json': JSON.stringify({ version: '1.0.0' })\n+      },\n+      tags: ['v1.0.0']\n+    })\n+    await exec()\n+    JSON.parse(\n+      fs.readFileSync('npm-shrinkwrap.json', 'utf-8')\n+    ).version.should.equal('1.1.0')\n+    getPackageVersion().should.equal('1.1.0')\n+  })\n+\n+  it('bumps version # in package-lock.json', async function () {\n+    mock({\n+      bump: 'minor',\n+      fs: {\n+        '.gitignore': '',\n+        'package-lock.json': JSON.stringify({ version: '1.0.0' })\n+      },\n+      tags: ['v1.0.0']\n+    })\n+    await exec()\n+    JSON.parse(\n+      fs.readFileSync('package-lock.json', 'utf-8')\n+    ).version.should.equal('1.1.0')\n+    getPackageVersion().should.equal('1.1.0')\n+  })\n+\n+  describe('skip', () => {\n+    it('allows bump and changelog generation to be skipped', async function () {\n+      const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+      mock({\n+        bump: 'minor',\n+        changelog: 'foo\\n',\n+        fs: { 'CHANGELOG.md': changelogContent }\n+      })\n+\n+      await exec('--skip.bump true --skip.changelog true')\n+      getPackageVersion().should.equal('1.0.0')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.equal(changelogContent)\n+    })\n+  })\n+\n+  it('does not update files present in .gitignore', async () => {\n+    mock({\n+      bump: 'minor',\n+      fs: {\n+        '.gitignore': 'bower.json',\n+        'bower.json': JSON.stringify({ version: '1.0.0' })\n+      },\n+      tags: ['v1.0.0']\n+    })\n+    await exec()\n+    JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal(\n+      '1.0.0'\n+    )\n+    getPackageVersion().should.equal('1.1.0')\n+  })\n+\n+  describe('configuration', () => {\n+    it('--header', async function () {\n+      mock({ bump: 'minor', fs: { 'CHANGELOG.md': '' } })\n+      await exec('--header=\"# Welcome to our CHANGELOG.md\"')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(/# Welcome to our CHANGELOG.md/)\n+    })\n+\n+    it('--issuePrefixes and --issueUrlFormat', async function () {\n+      const format = 'http://www.foo.com/{{prefix}}{{id}}'\n+      const prefix = 'ABC-'\n+      const changelog = ({ preset }) =>\n+        preset.issueUrlFormat + ':' + preset.issuePrefixes\n+      mock({ bump: 'minor', changelog })\n+      await exec(`--issuePrefixes=\"${prefix}\" --issueUrlFormat=\"${format}\"`)\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include(`${format}:${prefix}`)\n+    })\n+  })\n+\n+  describe('pre-major', () => {\n+    it('bumps the minor rather than major, if version < 1.0.0', async function () {\n+      mock({\n+        bump: 'minor',\n+        pkg: {\n+          version: '0.5.0',\n+          repository: { url: 'https://github.com/yargs/yargs.git' }\n+        }\n+      })\n+      await exec()\n+      getPackageVersion().should.equal('0.6.0')\n+    })\n+\n+    it('bumps major if --release-as=major specified, if version < 1.0.0', async function () {\n+      mock({\n+        bump: 'major',\n+        pkg: {\n+          version: '0.5.0',\n+          repository: { url: 'https://github.com/yargs/yargs.git' }\n+        }\n+      })\n+      await exec('-r major')\n+      getPackageVersion().should.equal('1.0.0')\n+    })\n+  })\n+})\n+\n+describe('GHSL-2020-111', function () {\n+  afterEach(unmock)\n+\n+  it('does not allow command injection via basic configuration', async function () {\n+    mock({ bump: 'patch' })\n+    await exec({\n+      noVerify: true,\n+      infile: 'foo.txt',\n+      releaseCommitMessageFormat: 'bla `touch exploit`'\n+    })\n+    const stat = shell.test('-f', './exploit')\n+    stat.should.equal(false)\n+  })\n+})\n+\n+describe('with mocked git', function () {\n+  afterEach(unmock)\n+\n+  it('--sign signs the commit and tag', async function () {\n+    const gitArgs = [\n+      ['add', 'CHANGELOG.md', 'package.json'],\n+      ['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'],\n+      ['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'],\n+      ['rev-parse', '--abbrev-ref', 'HEAD']\n+    ]\n+    const execFile = (_args, cmd, cmdArgs) => {\n+      cmd.should.equal('git')\n+      const expected = gitArgs.shift()\n+      cmdArgs.should.deep.equal(expected)\n+      if (expected[0] === 'rev-parse') return Promise.resolve('master')\n+      return Promise.resolve('')\n+    }\n+    mock({ bump: 'patch', changelog: 'foo\\n', execFile })\n+\n+    await exec('--sign', true)\n+    gitArgs.should.have.lengthOf(0)\n+  })\n+\n+  it('fails if git add fails', async function () {\n+    const gitArgs = [\n+      ['add', 'CHANGELOG.md', 'package.json']\n+    ]\n+    const execFile = (_args, cmd, cmdArgs) => {\n+      cmd.should.equal('git')\n+      const expected = gitArgs.shift()\n+      cmdArgs.should.deep.equal(expected)\n+      if (expected[0] === 'add') {\n+        return Promise.reject(new Error('Command failed: git\\nfailed add'))\n+      }\n+      return Promise.resolve('')\n+    }\n+    mock({ bump: 'patch', changelog: 'foo\\n', execFile })\n+\n+    try {\n+      await exec({}, true)\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (error) {\n+      error.message.should.match(/failed add/)\n+    }\n+  })\n+\n+  it('fails if git commit fails', async function () {\n+    const gitArgs = [\n+      ['add', 'CHANGELOG.md', 'package.json'],\n+      ['commit', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1']\n+    ]\n+    const execFile = (_args, cmd, cmdArgs) => {\n+      cmd.should.equal('git')\n+      const expected = gitArgs.shift()\n+      cmdArgs.should.deep.equal(expected)\n+      if (expected[0] === 'commit') {\n+        return Promise.reject(new Error('Command failed: git\\nfailed commit'))\n+      }\n+      return Promise.resolve('')\n+    }\n+    mock({ bump: 'patch', changelog: 'foo\\n', execFile })\n+\n+    try {\n+      await exec({}, true)\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (error) {\n+      error.message.should.match(/failed commit/)\n+    }\n+  })\n+\n+  it('fails if git tag fails', async function () {\n+    const gitArgs = [\n+      ['add', 'CHANGELOG.md', 'package.json'],\n+      ['commit', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'],\n+      ['tag', '-a', 'v1.0.1', '-m', 'chore(release): 1.0.1']\n+    ]\n+    const execFile = (_args, cmd, cmdArgs) => {\n+      cmd.should.equal('git')\n+      const expected = gitArgs.shift()\n+      cmdArgs.should.deep.equal(expected)\n+      if (expected[0] === 'tag') {\n+        return Promise.reject(new Error('Command failed: git\\nfailed tag'))\n+      }\n+      return Promise.resolve('')\n+    }\n+    mock({ bump: 'patch', changelog: 'foo\\n', execFile })\n+\n+    try {\n+      await exec({}, true)\n+      /* istanbul ignore next */\n+      throw new Error('Unexpected success')\n+    } catch (error) {\n+      error.message.should.match(/failed tag/)\n+    }\n+  })\n+})\ndiff --git a/test/git.spec.js b/test/git.spec.js\nnew file mode 100644\nindex 0000000..4489372\n--- /dev/null\n+++ b/test/git.spec.js\n@@ -0,0 +1,352 @@\n+/* global describe it beforeEach afterEach */\n+\n+'use strict'\n+\n+const shell = require('shelljs')\n+const fs = require('fs')\n+const { Readable } = require('stream')\n+const mockery = require('mockery')\n+const stdMocks = require('std-mocks')\n+\n+require('chai').should()\n+\n+function exec (opt = '') {\n+  if (typeof opt === 'string') {\n+    const cli = require('../command')\n+    opt = cli.parse(`standard-version ${opt}`)\n+  }\n+  return require('../index')(opt)\n+}\n+\n+function writePackageJson (version, option) {\n+  const pkg = Object.assign({}, option, { version })\n+  fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n+}\n+\n+function writeHook (hookName, causeError, script) {\n+  shell.mkdir('-p', 'scripts')\n+  let content = script || 'console.error(\"' + hookName + ' ran\")'\n+  content += causeError ? '\\nthrow new Error(\"' + hookName + '-failure\")' : ''\n+  fs.writeFileSync('scripts/' + hookName + '.js', content, 'utf-8')\n+  fs.chmodSync('scripts/' + hookName + '.js', '755')\n+}\n+\n+function getPackageVersion () {\n+  return JSON.parse(fs.readFileSync('package.json', 'utf-8')).version\n+}\n+\n+/**\n+ * Mock external conventional-changelog modules\n+ *\n+ * bump: 'major' | 'minor' | 'patch' | Error | (opt, cb) => { cb(err) | cb(null, { releaseType }) }\n+ * changelog?: string | Error | Array<string | Error | (opt) => string | null>\n+ * tags?: string[] | Error\n+ */\n+function mock ({ bump, changelog, tags }) {\n+  if (bump === undefined) throw new Error('bump must be defined for mock()')\n+  mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n+\n+  mockery.registerMock('conventional-recommended-bump', function (opt, cb) {\n+    if (typeof bump === 'function') bump(opt, cb)\n+    else if (bump instanceof Error) cb(bump)\n+    else cb(null, { releaseType: bump })\n+  })\n+\n+  if (!Array.isArray(changelog)) changelog = [changelog]\n+  mockery.registerMock('conventional-changelog', (opt) => new Readable({\n+    read (_size) {\n+      const next = changelog.shift()\n+      if (next instanceof Error) {\n+        this.destroy(next)\n+      } else if (typeof next === 'function') {\n+        this.push(next(opt))\n+      } else {\n+        this.push(next ? Buffer.from(next, 'utf8') : null)\n+      }\n+    }\n+  }))\n+\n+  mockery.registerMock('git-semver-tags', function (cb) {\n+    if (tags instanceof Error) cb(tags)\n+    else cb(null, tags || [])\n+  })\n+\n+  stdMocks.use()\n+  return () => stdMocks.flush()\n+}\n+\n+describe('git', function () {\n+  beforeEach(function () {\n+    shell.rm('-rf', 'tmp')\n+    shell.config.silent = true\n+    shell.mkdir('tmp')\n+    shell.cd('tmp')\n+    shell.exec('git init')\n+    shell.exec('git config commit.gpgSign false')\n+    shell.exec('git config core.autocrlf false')\n+    shell.exec('git commit --allow-empty -m\"root-commit\"')\n+    writePackageJson('1.0.0')\n+  })\n+\n+  afterEach(function () {\n+    shell.cd('../')\n+    shell.rm('-rf', 'tmp')\n+\n+    mockery.deregisterAll()\n+    mockery.disable()\n+    stdMocks.restore()\n+\n+    // push out prints from the Mocha reporter\n+    const { stdout } = stdMocks.flush()\n+    for (const str of stdout) {\n+      if (str.startsWith(' ')) process.stdout.write(str)\n+    }\n+  })\n+\n+  it('formats the commit and tag messages appropriately', async function () {\n+    mock({ bump: 'minor', tags: ['v1.0.0'] })\n+    await exec({})\n+    // check last commit message\n+    shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+    // check annotated tag message\n+    shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+  })\n+\n+  it('formats the tag if --first-release is true', async function () {\n+    writePackageJson('1.0.1')\n+    mock({ bump: 'minor' })\n+    await exec('--first-release')\n+    shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n+  })\n+\n+  it('commits all staged files', async function () {\n+    fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+    fs.writeFileSync('STUFF.md', 'stuff\\n', 'utf-8')\n+    shell.exec('git add STUFF.md')\n+\n+    mock({ bump: 'patch', changelog: 'release 1.0.1\\n', tags: ['v1.0.0'] })\n+    await exec('--commit-all')\n+    const status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n+    status.should.equal('')\n+    status.should.not.match(/STUFF.md/)\n+\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.match(/1\\.0\\.1/)\n+    content.should.not.match(/legacy header format/)\n+  })\n+\n+  it('does not run git hooks if the --no-verify flag is passed', async function () {\n+    fs.writeFileSync('.git/hooks/pre-commit', '#!/bin/sh\\necho \"precommit ran\"\\nexit 1', 'utf-8')\n+    fs.chmodSync('.git/hooks/pre-commit', '755')\n+\n+    mock({ bump: 'minor' })\n+    await exec('--no-verify')\n+    await exec('-n')\n+  })\n+\n+  it('allows the commit phase to be skipped', async function () {\n+    const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+    writePackageJson('1.0.0')\n+    fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n+\n+    mock({ bump: 'minor', changelog: 'new feature\\n' })\n+    await exec('--skip.commit true')\n+    getPackageVersion().should.equal('1.1.0')\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.match(/new feature/)\n+    shell.exec('git log --oneline -n1').stdout.should.match(/root-commit/)\n+  })\n+\n+  it('dry-run skips all non-idempotent steps', async function () {\n+    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+    const flush = mock({ bump: 'minor', changelog: '### Features\\n', tags: ['v1.0.0'] })\n+    await exec('--dry-run')\n+    const { stdout } = flush()\n+    stdout.join('').should.match(/### Features/)\n+    shell.exec('git log --oneline -n1').stdout.should.match(/root-commit/)\n+    shell.exec('git tag').stdout.should.match(/1\\.0\\.0/)\n+    getPackageVersion().should.equal('1.0.0')\n+  })\n+\n+  it('works fine without specifying a tag id when prereleasing', async function () {\n+    writePackageJson('1.0.0')\n+    fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+    mock({ bump: 'minor' })\n+    await exec('--prerelease')\n+    getPackageVersion().should.equal('1.1.0-0')\n+  })\n+\n+  describe('gitTagFallback', () => {\n+    it('defaults to 1.0.0 if no tags in git history', async () => {\n+      shell.rm('package.json')\n+      mock({ bump: 'minor' })\n+      await exec({})\n+      const output = shell.exec('git tag')\n+      output.stdout.should.include('v1.1.0')\n+    })\n+\n+    it('bases version on greatest version tag, if tags are found', async () => {\n+      shell.rm('package.json')\n+      mock({ bump: 'minor', tags: ['v3.9.0', 'v5.0.0', 'v3.0.0'] })\n+      await exec({})\n+      const output = shell.exec('git tag')\n+      output.stdout.should.include('v5.1.0')\n+    })\n+  })\n+\n+  describe('configuration', () => {\n+    it('.versionrc : releaseCommitMessageFormat', async function () {\n+      fs.writeFileSync('.versionrc', JSON.stringify({\n+        releaseCommitMessageFormat: 'This commit represents release: {{currentTag}}'\n+      }), 'utf-8')\n+      mock({ bump: 'minor' })\n+      await exec('')\n+      shell.exec('git log --oneline -n1').should.include('This commit represents release: 1.1.0')\n+    })\n+\n+    it('--releaseCommitMessageFormat', async function () {\n+      mock({ bump: 'minor' })\n+      await exec('--releaseCommitMessageFormat=\"{{currentTag}} is the version.\"')\n+      shell.exec('git log --oneline -n1').should.include('1.1.0 is the version.')\n+    })\n+\n+    it('[LEGACY] supports --message (and single %s replacement)', async function () {\n+      mock({ bump: 'minor' })\n+      await exec('--message=\"V:%s\"')\n+      shell.exec('git log --oneline -n1').should.include('V:1.1.0')\n+    })\n+\n+    it('[LEGACY] supports -m (and multiple %s replacements)', async function () {\n+      mock({ bump: 'minor' })\n+      await exec('--message=\"V:%s is the %s.\"')\n+      shell.exec('git log --oneline -n1').should.include('V:1.1.0 is the 1.1.0.')\n+    })\n+  })\n+\n+  describe('precommit hook', function () {\n+    it('should run the precommit hook when provided via .versionrc.json (#371)', async function () {\n+      fs.writeFileSync('.versionrc.json', JSON.stringify({\n+        scripts: { precommit: 'node scripts/precommit' }\n+      }), 'utf-8')\n+\n+      writeHook('precommit')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+      const flush = mock({ bump: 'minor' })\n+      await exec('')\n+      const { stderr } = flush()\n+      stderr[0].should.match(/precommit ran/)\n+    })\n+\n+    it('should run the precommit hook when provided', async function () {\n+      writePackageJson('1.0.0', {\n+        'standard-version': {\n+          scripts: { precommit: 'node scripts/precommit' }\n+        }\n+      })\n+      writeHook('precommit')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      const flush = mock({ bump: 'minor' })\n+      await exec('--patch')\n+      const { stderr } = flush()\n+      stderr[0].should.match(/precommit ran/)\n+    })\n+\n+    it('should run the precommit hook and exit with error when precommit fails', async function () {\n+      writePackageJson('1.0.0', {\n+        'standard-version': {\n+          scripts: { precommit: 'node scripts/precommit' }\n+        }\n+      })\n+      writeHook('precommit', true)\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      mock({ bump: 'minor' })\n+      try {\n+        await exec('--patch')\n+        /* istanbul ignore next */\n+        throw new Error('Unexpected success')\n+      } catch (error) {\n+        error.message.should.match(/precommit-failure/)\n+      }\n+    })\n+\n+    it('should allow an alternate commit message to be provided by precommit script', async function () {\n+      writePackageJson('1.0.0', {\n+        'standard-version': {\n+          scripts: { precommit: 'node scripts/precommit' }\n+        }\n+      })\n+      writeHook('precommit', false, 'console.log(\"releasing %s delivers #222\")')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      mock({ bump: 'minor' })\n+      await exec('--patch')\n+      shell.exec('git log --oneline -n1').should.match(/delivers #222/)\n+    })\n+  })\n+\n+  describe('Run ... to publish', function () {\n+    it('does normally display `npm publish`', async function () {\n+      const flush = mock({ bump: 'patch' })\n+      await exec('')\n+      flush().stdout.join('').should.match(/npm publish/)\n+    })\n+\n+    it('does not display `npm publish` if the package is private', async function () {\n+      writePackageJson('1.0.0', { private: true })\n+      const flush = mock({ bump: 'patch' })\n+      await exec('')\n+      flush().stdout.join('').should.not.match(/npm publish/)\n+    })\n+\n+    it('does not display `npm publish` if there is no package.json', async function () {\n+      shell.rm('package.json')\n+      const flush = mock({ bump: 'patch' })\n+      await exec('')\n+      flush().stdout.join('').should.not.match(/npm publish/)\n+    })\n+\n+    it('does not display `all staged files` without the --commit-all flag', async function () {\n+      const flush = mock({ bump: 'patch' })\n+      await exec('')\n+      flush().stdout.join('').should.not.match(/all staged files/)\n+    })\n+\n+    it('does display `all staged files` if the --commit-all flag is passed', async function () {\n+      const flush = mock({ bump: 'patch' })\n+      await exec('--commit-all')\n+      flush().stdout.join('').should.match(/all staged files/)\n+    })\n+\n+    it('advises use of --tag prerelease for publishing to npm', async function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      const flush = mock({ bump: 'patch' })\n+      await exec('--prerelease')\n+      const { stdout } = flush()\n+      stdout.join('').should.include('--tag prerelease')\n+    })\n+\n+    it('advises use of --tag alpha for publishing to npm when tagging alpha', async function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      const flush = mock({ bump: 'patch' })\n+      await exec('--prerelease alpha')\n+      const { stdout } = flush()\n+      stdout.join('').should.include('--tag alpha')\n+    })\n+\n+    it('does not advise use of --tag prerelease for private modules', async function () {\n+      writePackageJson('1.0.0', { private: true })\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      const flush = mock({ bump: 'minor' })\n+      await exec('--prerelease')\n+      const { stdout } = flush()\n+      stdout.join('').should.not.include('--tag prerelease')\n+    })\n+  })\n+})\n"
  }, {
    "begin time" : "Tue Jul 14 00:00:00 CST 2020",
    "end time" : "Sat Aug 15 00:00:00 CST 2020",
    "description" : "### ⚠ BREAKING CHANGES* NodeJS@8 is no longer supported. (#612)### Bug Fixes* **deps:** update dependency conventional-changelog to v3.1.23 ([#652](https://www.github.com/conventional-changelog/standard-version/issues/652)) ([00dd3c0](https://www.github.com/conventional-changelog/standard-version/commit/00dd3c01aab20d28a8bbd1e174e416d6c2b34d90))* **deps:** update dependency conventional-changelog-conventionalcommits to v4.4.0 ([#650](https://www.github.com/conventional-changelog/standard-version/issues/650)) ([9f201a6](https://www.github.com/conventional-changelog/standard-version/commit/9f201a61bb50ec12053a04faccfaea20e44d6ff2))* **deps:** update dependency conventional-recommended-bump to v6.0.10 ([#653](https://www.github.com/conventional-changelog/standard-version/issues/653)) ([c360d6a](https://www.github.com/conventional-changelog/standard-version/commit/c360d6a307909c6e571b29d4a329fd786b4d4543))### Build System* NodeJS@8 is no longer supported. ([#612](https://www.github.com/conventional-changelog/standard-version/issues/612)) ([05edef2](https://www.github.com/conventional-changelog/standard-version/commit/05edef2de79d8d4939a6e699ce0979ff8da12de9))",
    "hunks" : "diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml\nindex 4b9d309..c3c5903 100644\n--- a/.github/workflows/ci.yaml\n+++ b/.github/workflows/ci.yaml\n@@ -9,7 +9,7 @@\n     runs-on: ubuntu-latest\n     strategy:\n       matrix:\n-        node: [8, 10, 12, 14]\n+        node: [10, 12, 14]\n     steps:\n       - uses: actions/checkout@v2\n       - run: git fetch --prune --unshallow\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 52810c7..56a456c 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,13 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [8.0.2](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.1...v8.0.2) (2020-07-14)\n+\n+\n+### Bug Fixes\n+\n+* Commit message and tag name is no longer enclosed in quotes. ([#619](https://www.github.com/conventional-changelog/standard-version/issues/619)) ([ae032bf](https://www.github.com/conventional-changelog/standard-version/commit/ae032bfa9268a0a14351b0d78b6deedee7891e3a)), closes [#621](https://www.github.com/conventional-changelog/standard-version/issues/621) [#620](https://www.github.com/conventional-changelog/standard-version/issues/620)\n+\n ### [8.0.1](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.0...v8.0.1) (2020-07-12)\n \n \ndiff --git a/package.json b/package.json\nindex 205aff7..c701310 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"8.0.1\",\n+  \"version\": \"8.0.2\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -16,7 +16,7 @@\n   },\n   \"repository\": \"conventional-changelog/standard-version\",\n   \"engines\": {\n-    \"node\": \">=8.0\"\n+    \"node\": \">=10\"\n   },\n   \"keywords\": [\n     \"conventional-changelog\",\n@@ -60,7 +60,7 @@\n     \"eslint-plugin-node\": \"^10.0.0\",\n     \"eslint-plugin-promise\": \"^4.2.1\",\n     \"eslint-plugin-standard\": \"^4.0.1\",\n-    \"mocha\": \"^7.2.0\",\n+    \"mocha\": \"^8.0.0\",\n     \"mock-git\": \"^2.0.0\",\n     \"mockery\": \"^2.1.0\",\n     \"nyc\": \"^14.1.1\",\n"
  }, {
    "begin time" : "Sun Jul 12 00:00:00 CST 2020",
    "end time" : "Tue Jul 14 00:00:00 CST 2020",
    "description" : "### Bug Fixes* Commit message and tag name is no longer enclosed in quotes. ([#619](https://www.github.com/conventional-changelog/standard-version/issues/619)) ([ae032bf](https://www.github.com/conventional-changelog/standard-version/commit/ae032bfa9268a0a14351b0d78b6deedee7891e3a)), closes [#621](https://www.github.com/conventional-changelog/standard-version/issues/621) [#620](https://www.github.com/conventional-changelog/standard-version/issues/620)",
    "hunks" : "diff --git a/.github/ISSUE_TEMPLATE/ask-a-question.md b/.github/ISSUE_TEMPLATE/ask-a-question.md\nnew file mode 100644\nindex 0000000..8085180\n--- /dev/null\n+++ b/.github/ISSUE_TEMPLATE/ask-a-question.md\n@@ -0,0 +1,10 @@\n+---\n+name: Ask a Question\n+about: '\"How can I X?\" – ask a question about how to use standard-version.'\n+title: ''\n+labels: question\n+assignees: ''\n+\n+---\n+\n+\ndiff --git a/.github/ISSUE_TEMPLATE/bug-report.md b/.github/ISSUE_TEMPLATE/bug-report.md\nnew file mode 100644\nindex 0000000..3c1b10d\n--- /dev/null\n+++ b/.github/ISSUE_TEMPLATE/bug-report.md\n@@ -0,0 +1,31 @@\n+---\n+name: Bug Report\n+about: Use this template if something isn't working as expected.\n+title: ''\n+labels: bug\n+assignees: ''\n+\n+---\n+\n+**Describe the bug**\n+A clear and concise description of what the bug is.\n+\n+**Current behavior**\n+A clear and concise description of the behavior.\n+\n+\n+**Expected behavior**\n+A clear and concise description of what you expected to happen.\n+\n+\n+\n+**Environment**\n+- `standard-version` version(s): [e.g. v6.0.0, v8.0.0, master]\n+- Node/npm version: [e.g. Node 10/npm 6]\n+- OS: [e.g. OSX 10.13.4, Windows 10]\n+\n+**Possible Solution**\n+<!--- If you have suggestions on a fix for the bug -->\n+\n+**Additional context**\n+Add any other context about the problem here. Or a screenshot if applicable\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 2d82b77..52810c7 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,17 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [8.0.1](https://www.github.com/conventional-changelog/standard-version/compare/v8.0.0...v8.0.1) (2020-07-12)\n+\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-changelog to v3.1.21 ([#586](https://www.github.com/conventional-changelog/standard-version/issues/586)) ([fd456c9](https://www.github.com/conventional-changelog/standard-version/commit/fd456c995f3f88497fbb912fb8aabb8a42d97dbb))\n+* **deps:** update dependency conventional-changelog-conventionalcommits to v4.3.0 ([#587](https://www.github.com/conventional-changelog/standard-version/issues/587)) ([b3b5eed](https://www.github.com/conventional-changelog/standard-version/commit/b3b5eedea3eaf062d74d1004a55a0a6b1e3ca6c6))\n+* **deps:** update dependency conventional-recommended-bump to v6.0.9 ([#588](https://www.github.com/conventional-changelog/standard-version/issues/588)) ([d4d2ac2](https://www.github.com/conventional-changelog/standard-version/commit/d4d2ac2a99c095227118da795e1c9e19d06c9a0a))\n+* **deps:** update dependency git-semver-tags to v4 ([#589](https://www.github.com/conventional-changelog/standard-version/issues/589)) ([a0f0e81](https://www.github.com/conventional-changelog/standard-version/commit/a0f0e813b2be4a2065600a19075fda4d6f331ef8))\n+* Vulnerability Report GHSL-2020-11101 ([9d978ac](https://www.github.com/conventional-changelog/standard-version/commit/9d978ac9d4f64be4c7b9d514712ab3757732d561))\n+\n ## [8.0.0](https://www.github.com/conventional-changelog/standard-version/compare/v7.1.0...v8.0.0) (2020-05-06)\n \n \ndiff --git a/package.json b/package.json\nindex ab8f73a..205aff7 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,9 +1,10 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"8.0.0\",\n+  \"version\": \"8.0.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n+    \"fix\": \"eslint . --fix\",\n     \"posttest\": \"eslint .\",\n     \"test\": \"nyc mocha --timeout=30000 test.js\",\n     \"release\": \"bin/cli.js\"\n@@ -34,35 +35,35 @@\n   },\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n-    \"chalk\": \"2.4.2\",\n+    \"chalk\": \"^2.4.2\",\n     \"conventional-changelog\": \"3.1.21\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n     \"conventional-changelog-conventionalcommits\": \"4.3.0\",\n     \"conventional-recommended-bump\": \"6.0.9\",\n-    \"detect-indent\": \"6.0.0\",\n-    \"detect-newline\": \"3.1.0\",\n-    \"dotgitignore\": \"2.1.0\",\n-    \"figures\": \"3.1.0\",\n-    \"find-up\": \"4.1.0\",\n-    \"fs-access\": \"1.0.1\",\n-    \"git-semver-tags\": \"4.0.0\",\n-    \"semver\": \"7.1.1\",\n-    \"stringify-package\": \"1.0.1\",\n-    \"yargs\": \"15.3.1\"\n+    \"detect-indent\": \"^6.0.0\",\n+    \"detect-newline\": \"^3.1.0\",\n+    \"dotgitignore\": \"^2.1.0\",\n+    \"figures\": \"^3.1.0\",\n+    \"find-up\": \"^4.1.0\",\n+    \"fs-access\": \"^1.0.1\",\n+    \"git-semver-tags\": \"^4.0.0\",\n+    \"semver\": \"^7.1.1\",\n+    \"stringify-package\": \"^1.0.1\",\n+    \"yargs\": \"^15.3.1\"\n   },\n   \"devDependencies\": {\n-    \"chai\": \"4.2.0\",\n-    \"coveralls\": \"3.1.0\",\n-    \"eslint\": \"6.8.0\",\n-    \"eslint-config-standard\": \"14.1.1\",\n-    \"eslint-plugin-import\": \"2.20.0\",\n-    \"eslint-plugin-node\": \"10.0.0\",\n-    \"eslint-plugin-promise\": \"4.2.1\",\n-    \"eslint-plugin-standard\": \"4.0.1\",\n-    \"mocha\": \"7.2.0\",\n-    \"mock-git\": \"2.0.0\",\n-    \"mockery\": \"2.1.0\",\n-    \"nyc\": \"14.1.1\",\n-    \"shelljs\": \"0.8.4\"\n+    \"chai\": \"^4.2.0\",\n+    \"coveralls\": \"^3.1.0\",\n+    \"eslint\": \"^6.8.0\",\n+    \"eslint-config-standard\": \"^14.1.1\",\n+    \"eslint-plugin-import\": \"^2.20.0\",\n+    \"eslint-plugin-node\": \"^10.0.0\",\n+    \"eslint-plugin-promise\": \"^4.2.1\",\n+    \"eslint-plugin-standard\": \"^4.0.1\",\n+    \"mocha\": \"^7.2.0\",\n+    \"mock-git\": \"^2.0.0\",\n+    \"mockery\": \"^2.1.0\",\n+    \"nyc\": \"^14.1.1\",\n+    \"shelljs\": \"^0.8.4\"\n   }\n }\ndiff --git a/renovate.json b/renovate.json\nindex f45d8f1..5ec138e 100644\n--- a/renovate.json\n+++ b/renovate.json\n@@ -1,5 +1,9 @@\n {\n   \"extends\": [\n     \"config:base\"\n-  ]\n+  ],\n+  \"pinVersions\": false,\n+  \"rebaseStalePrs\": true,\n+  \"gitAuthor\": null,\n+  \"ignoreDeps\": [\"decamelize\"]\n }\ndiff --git a/test.js b/test.js\nindex 0a60ab8..5b011fd 100644\n--- a/test.js\n+++ b/test.js\n@@ -13,6 +13,8 @@\n const cli = require('./command')\n const standardVersion = require('./index')\n \n+const isWindows = process.platform === 'win32'\n+\n require('chai').should()\n \n const cliPath = path.resolve(__dirname, './bin/cli.js')\n@@ -248,74 +250,77 @@\n     })\n   })\n \n-  describe('with mocked git', function () {\n-    it('--sign signs the commit and tag', function () {\n-      // mock git with file that writes args to gitcapture.log\n-      return mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n-        .then(function (unmock) {\n-          execCli('--sign').code.should.equal(0)\n+  // TODO: investigate why mock-git does not play well with execFile on Windows.\n+  if (!isWindows) {\n+    describe('with mocked git', function () {\n+      it('--sign signs the commit and tag', function () {\n+        // mock git with file that writes args to gitcapture.log\n+        return mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n+          .then(function (unmock) {\n+            execCli('--sign').code.should.equal(0)\n \n-          const captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n-            return line ? JSON.parse(line) : line\n+            const captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n+              return line ? JSON.parse(line) : line\n+            })\n+            /* eslint-disable no-useless-escape */\n+            captured[captured.length - 4].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', '\\\"chore(release): 1.0.1\\\"'])\n+            captured[captured.length - 3].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', '\\\"chore(release): 1.0.1\\\"'])\n+            /* eslint-enable no-useless-escape */\n+            unmock()\n           })\n-          /* eslint-disable no-useless-escape */\n-          captured[captured.length - 4].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', '\\\"chore(release): 1.0.1\\\"'])\n-          captured[captured.length - 3].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', '\\\"chore(release): 1.0.1\\\"'])\n-          /* eslint-enable no-useless-escape */\n-          unmock()\n-        })\n+      })\n+\n+      it('exits with error code if git commit fails', function () {\n+        // mock git by throwing on attempt to commit\n+        return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n+          .then(function (unmock) {\n+            const result = execCli()\n+            result.code.should.equal(1)\n+            result.stderr.should.match(/commit yourself/)\n+\n+            unmock()\n+          })\n+      })\n+\n+      it('exits with error code if git add fails', function () {\n+        // mock git by throwing on attempt to add\n+        return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n+          .then(function (unmock) {\n+            const result = execCli()\n+            result.code.should.equal(1)\n+            result.stderr.should.match(/addition is hard/)\n+\n+            unmock()\n+          })\n+      })\n+\n+      it('exits with error code if git tag fails', function () {\n+        // mock git by throwing on attempt to commit\n+        return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n+          .then(function (unmock) {\n+            const result = execCli()\n+            result.code.should.equal(1)\n+            result.stderr.should.match(/tag, you're it/)\n+\n+            unmock()\n+          })\n+      })\n+\n+      it('doesn\\'t fail fast on stderr output from git', function () {\n+        // mock git by throwing on attempt to commit\n+        return mockGit('console.error(\"haha, kidding, this is just a warning\"); process.exit(0);', 'add')\n+          .then(function (unmock) {\n+            writePackageJson('1.0.0')\n+\n+            const result = execCli()\n+            result.code.should.equal(1)\n+            result.stderr.should.match(/haha, kidding, this is just a warning/)\n+\n+            unmock()\n+          })\n+      })\n     })\n-\n-    it('exits with error code if git commit fails', function () {\n-      // mock git by throwing on attempt to commit\n-      return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n-        .then(function (unmock) {\n-          const result = execCli()\n-          result.code.should.equal(1)\n-          result.stderr.should.match(/commit yourself/)\n-\n-          unmock()\n-        })\n-    })\n-\n-    it('exits with error code if git add fails', function () {\n-      // mock git by throwing on attempt to add\n-      return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n-        .then(function (unmock) {\n-          const result = execCli()\n-          result.code.should.equal(1)\n-          result.stderr.should.match(/addition is hard/)\n-\n-          unmock()\n-        })\n-    })\n-\n-    it('exits with error code if git tag fails', function () {\n-      // mock git by throwing on attempt to commit\n-      return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n-        .then(function (unmock) {\n-          const result = execCli()\n-          result.code.should.equal(1)\n-          result.stderr.should.match(/tag, you're it/)\n-\n-          unmock()\n-        })\n-    })\n-\n-    it('doesn\\'t fail fast on stderr output from git', function () {\n-      // mock git by throwing on attempt to commit\n-      return mockGit('console.error(\"haha, kidding, this is just a warning\"); process.exit(0);', 'add')\n-        .then(function (unmock) {\n-          writePackageJson('1.0.0')\n-\n-          const result = execCli()\n-          result.code.should.equal(1)\n-          result.stderr.should.match(/haha, kidding, this is just a warning/)\n-\n-          unmock()\n-        })\n-    })\n-  })\n+  }\n \n   describe('lifecycle scripts', () => {\n     describe('prerelease hook', function () {\n"
  }, {
    "begin time" : "Wed May 06 00:00:00 CST 2020",
    "end time" : "Sun Jul 12 00:00:00 CST 2020",
    "description" : "### Bug Fixes* **deps:** update dependency conventional-changelog to v3.1.21 ([#586](https://www.github.com/conventional-changelog/standard-version/issues/586)) ([fd456c9](https://www.github.com/conventional-changelog/standard-version/commit/fd456c995f3f88497fbb912fb8aabb8a42d97dbb))* **deps:** update dependency conventional-changelog-conventionalcommits to v4.3.0 ([#587](https://www.github.com/conventional-changelog/standard-version/issues/587)) ([b3b5eed](https://www.github.com/conventional-changelog/standard-version/commit/b3b5eedea3eaf062d74d1004a55a0a6b1e3ca6c6))* **deps:** update dependency conventional-recommended-bump to v6.0.9 ([#588](https://www.github.com/conventional-changelog/standard-version/issues/588)) ([d4d2ac2](https://www.github.com/conventional-changelog/standard-version/commit/d4d2ac2a99c095227118da795e1c9e19d06c9a0a))* **deps:** update dependency git-semver-tags to v4 ([#589](https://www.github.com/conventional-changelog/standard-version/issues/589)) ([a0f0e81](https://www.github.com/conventional-changelog/standard-version/commit/a0f0e813b2be4a2065600a19075fda4d6f331ef8))* Vulnerability Report GHSL-2020-11101 ([9d978ac](https://www.github.com/conventional-changelog/standard-version/commit/9d978ac9d4f64be4c7b9d514712ab3757732d561))",
    "hunks" : "diff --git a/.github/publish.yml b/.github/publish.yml\nnew file mode 100644\nindex 0000000..e933b63\n--- /dev/null\n+++ b/.github/publish.yml\n@@ -0,0 +1,2 @@\n+project: oss-automation\n+secretId: node-tooling\ndiff --git a/.github/release-please.yml b/.github/release-please.yml\nnew file mode 100644\nindex 0000000..3c06599\n--- /dev/null\n+++ b/.github/release-please.yml\n@@ -0,0 +1,2 @@\n+releaseType: node\n+handleGHRelease: true\ndiff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml\nnew file mode 100644\nindex 0000000..4b9d309\n--- /dev/null\n+++ b/.github/workflows/ci.yaml\n@@ -0,0 +1,35 @@\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+name: ci\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        node: [8, 10, 12, 14]\n+    steps:\n+      - uses: actions/checkout@v2\n+      - run: git fetch --prune --unshallow\n+      - run: git config --global user.name 'Actions'\n+      - run: git config --global user.email 'dummy@example.org'\n+      - uses: actions/setup-node@v1\n+        with:\n+          node-version: ${{ matrix.node }}\n+      - run: node --version\n+      - run: npm install\n+      - run: npm test\n+  windows:\n+    runs-on: windows-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - run: git fetch --prune --unshallow\n+      - run: git config --global user.name 'Actions'\n+      - run: git config --global user.email 'dummy@example.org'\n+      - uses: actions/setup-node@v1\n+        with:\n+          node-version: 12\n+      - run: npm install\n+      - run: npm test\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex 6c05713..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-language: node_js\n-os:\n-  - linux\n-  - windows\n-node_js:\n-  - \"8\"\n-  - \"10\"\n-  - \"12\"\n-  - \"node\"\n-before_script:\n-  - git config --global user.name 'Travis-CI'\n-  - git config --global user.email 'dummy@example.org'\n-after_success: npm run coverage\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 7bf20a2..2d82b77 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,20 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [8.0.0](https://www.github.com/conventional-changelog/standard-version/compare/v7.1.0...v8.0.0) (2020-05-06)\n+\n+\n+### ⚠ BREAKING CHANGES\n+\n+* `composer.json` and `composer.lock` will no longer be read from or bumped by default. If you need to obtain a version or write a version to these files, please use `bumpFiles` and/or `packageFiles` options accordingly.\n+\n+### Bug Fixes\n+\n+* composer.json and composer.lock have been removed from default package and bump files. ([c934f3a](https://www.github.com/conventional-changelog/standard-version/commit/c934f3a38da4e7234d9dba3b2405f3b7e4dc5aa8)), closes [#495](https://www.github.com/conventional-changelog/standard-version/issues/495) [#394](https://www.github.com/conventional-changelog/standard-version/issues/394)\n+* **deps:** update dependency conventional-changelog to v3.1.18 ([#510](https://www.github.com/conventional-changelog/standard-version/issues/510)) ([e6aeb77](https://www.github.com/conventional-changelog/standard-version/commit/e6aeb779fe53ffed2a252e6cfd69cfcb786b9ef9))\n+* **deps:** update dependency yargs to v15.1.0 ([#518](https://www.github.com/conventional-changelog/standard-version/issues/518)) ([8f36f9e](https://www.github.com/conventional-changelog/standard-version/commit/8f36f9e073119fcbf5ad843237fb06a4ca42a0f9))\n+* **deps:** update dependency yargs to v15.3.1 ([#559](https://www.github.com/conventional-changelog/standard-version/issues/559)) ([d98cd46](https://www.github.com/conventional-changelog/standard-version/commit/d98cd4674b4d074c0b7f4d50d052ae618cf494c6))\n+\n ## [7.1.0](https://github.com/conventional-changelog/standard-version/compare/v7.0.1...v7.1.0) (2019-12-08)\n \n \ndiff --git a/package.json b/package.json\nindex 3693809..ab8f73a 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,11 +1,10 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"7.1.0\",\n+  \"version\": \"8.0.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n     \"posttest\": \"eslint .\",\n-    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n     \"test\": \"nyc mocha --timeout=30000 test.js\",\n     \"release\": \"bin/cli.js\"\n   },\n@@ -14,10 +13,7 @@\n       \"tmp/**\"\n     ]\n   },\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n-  },\n+  \"repository\": \"conventional-changelog/standard-version\",\n   \"engines\": {\n     \"node\": \">=8.0\"\n   },\n@@ -39,34 +35,34 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"2.4.2\",\n-    \"conventional-changelog\": \"3.1.18\",\n+    \"conventional-changelog\": \"3.1.21\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n-    \"conventional-changelog-conventionalcommits\": \"4.2.3\",\n-    \"conventional-recommended-bump\": \"6.0.5\",\n+    \"conventional-changelog-conventionalcommits\": \"4.3.0\",\n+    \"conventional-recommended-bump\": \"6.0.9\",\n     \"detect-indent\": \"6.0.0\",\n     \"detect-newline\": \"3.1.0\",\n     \"dotgitignore\": \"2.1.0\",\n     \"figures\": \"3.1.0\",\n     \"find-up\": \"4.1.0\",\n     \"fs-access\": \"1.0.1\",\n-    \"git-semver-tags\": \"3.0.1\",\n+    \"git-semver-tags\": \"4.0.0\",\n     \"semver\": \"7.1.1\",\n     \"stringify-package\": \"1.0.1\",\n     \"yargs\": \"15.3.1\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"4.2.0\",\n-    \"coveralls\": \"3.0.9\",\n-    \"eslint\": \"6.7.2\",\n-    \"eslint-config-standard\": \"14.1.0\",\n+    \"coveralls\": \"3.1.0\",\n+    \"eslint\": \"6.8.0\",\n+    \"eslint-config-standard\": \"14.1.1\",\n     \"eslint-plugin-import\": \"2.20.0\",\n     \"eslint-plugin-node\": \"10.0.0\",\n     \"eslint-plugin-promise\": \"4.2.1\",\n     \"eslint-plugin-standard\": \"4.0.1\",\n-    \"mocha\": \"7.0.1\",\n+    \"mocha\": \"7.2.0\",\n     \"mock-git\": \"2.0.0\",\n     \"mockery\": \"2.1.0\",\n     \"nyc\": \"14.1.1\",\n-    \"shelljs\": \"0.8.3\"\n+    \"shelljs\": \"0.8.4\"\n   }\n }\n"
  }, {
    "begin time" : "Sun Dec 08 00:00:00 CST 2019",
    "end time" : "Wed May 06 00:00:00 CST 2020",
    "description" : "### ⚠ BREAKING CHANGES* `composer.json` and `composer.lock` will no longer be read from or bumped by default. If you need to obtain a version or write a version to these files, please use `bumpFiles` and/or `packageFiles` options accordingly.### Bug Fixes* composer.json and composer.lock have been removed from default package and bump files. ([c934f3a](https://www.github.com/conventional-changelog/standard-version/commit/c934f3a38da4e7234d9dba3b2405f3b7e4dc5aa8)), closes [#495](https://www.github.com/conventional-changelog/standard-version/issues/495) [#394](https://www.github.com/conventional-changelog/standard-version/issues/394)* **deps:** update dependency conventional-changelog to v3.1.18 ([#510](https://www.github.com/conventional-changelog/standard-version/issues/510)) ([e6aeb77](https://www.github.com/conventional-changelog/standard-version/commit/e6aeb779fe53ffed2a252e6cfd69cfcb786b9ef9))* **deps:** update dependency yargs to v15.1.0 ([#518](https://www.github.com/conventional-changelog/standard-version/issues/518)) ([8f36f9e](https://www.github.com/conventional-changelog/standard-version/commit/8f36f9e073119fcbf5ad843237fb06a4ca42a0f9))* **deps:** update dependency yargs to v15.3.1 ([#559](https://www.github.com/conventional-changelog/standard-version/issues/559)) ([d98cd46](https://www.github.com/conventional-changelog/standard-version/commit/d98cd4674b4d074c0b7f4d50d052ae618cf494c6))",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nindex 64f2049..6c05713 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -5,6 +5,7 @@\n node_js:\n   - \"8\"\n   - \"10\"\n+  - \"12\"\n   - \"node\"\n before_script:\n   - git config --global user.name 'Travis-CI'\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c7497a1..7bf20a2 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,28 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [7.1.0](https://github.com/conventional-changelog/standard-version/compare/v7.0.1...v7.1.0) (2019-12-08)\n+\n+\n+### Features\n+\n+* Adds support for `header` (--header) configuration based on the spec. ([#364](https://github.com/conventional-changelog/standard-version/issues/364)) ([ba80a0c](https://github.com/conventional-changelog/standard-version/commit/ba80a0c27029f54c751fe845560504925b45eab8))\n+* custom 'bumpFiles' and 'packageFiles' support ([#372](https://github.com/conventional-changelog/standard-version/issues/372)) ([564d948](https://github.com/conventional-changelog/standard-version/commit/564d9482a459d5d7a2020c2972b4d39167ded4bf))\n+\n+\n+### Bug Fixes\n+\n+* **deps:** update dependency conventional-changelog to v3.1.15 ([#479](https://github.com/conventional-changelog/standard-version/issues/479)) ([492e721](https://github.com/conventional-changelog/standard-version/commit/492e72192ebf35d7c58c00526b1e6bd2abac7f13))\n+* **deps:** update dependency conventional-changelog-conventionalcommits to v4.2.3 ([#496](https://github.com/conventional-changelog/standard-version/issues/496)) ([bc606f8](https://github.com/conventional-changelog/standard-version/commit/bc606f8e96bcef1d46b28305622fc76dfbf306cf))\n+* **deps:** update dependency conventional-recommended-bump to v6.0.5 ([#480](https://github.com/conventional-changelog/standard-version/issues/480)) ([1e1e215](https://github.com/conventional-changelog/standard-version/commit/1e1e215a633963188cdb02be1316b5506e3b99b7))\n+* **deps:** update dependency yargs to v15 ([#484](https://github.com/conventional-changelog/standard-version/issues/484)) ([35b90c3](https://github.com/conventional-changelog/standard-version/commit/35b90c3f24cfb8237e94482fd20997900569193e))\n+* use require.resolve for the default preset ([#465](https://github.com/conventional-changelog/standard-version/issues/465)) ([d557372](https://github.com/conventional-changelog/standard-version/commit/d55737239530f5eee684e9cbf959f7238d609fd4))\n+* **deps:** update dependency detect-newline to v3.1.0 ([#482](https://github.com/conventional-changelog/standard-version/issues/482)) ([04ab36a](https://github.com/conventional-changelog/standard-version/commit/04ab36a12be58915cfa9c60771890e074d1f5685))\n+* **deps:** update dependency figures to v3.1.0 ([#468](https://github.com/conventional-changelog/standard-version/issues/468)) ([63300a9](https://github.com/conventional-changelog/standard-version/commit/63300a935c0079fd03e8e1acc55fd5b1dcea677f))\n+* **deps:** update dependency git-semver-tags to v3.0.1 ([#485](https://github.com/conventional-changelog/standard-version/issues/485)) ([9cc188c](https://github.com/conventional-changelog/standard-version/commit/9cc188cbb84ee3ae80d5e66f5c54727877313b14))\n+* **deps:** update dependency yargs to v14.2.1 ([#483](https://github.com/conventional-changelog/standard-version/issues/483)) ([dc1fa61](https://github.com/conventional-changelog/standard-version/commit/dc1fa6170ffe12d4f8b44b70d23688a64d2ad0fb))\n+* **deps:** update dependency yargs to v14.2.2 ([#488](https://github.com/conventional-changelog/standard-version/issues/488)) ([ecf26b6](https://github.com/conventional-changelog/standard-version/commit/ecf26b6fc9421a78fb81793c4a932f579f7e9d4a))\n+\n ### [7.0.1](https://github.com/conventional-changelog/standard-version/compare/v7.0.0...v7.0.1) (2019-11-07)\n \n \ndiff --git a/README.md b/README.md\nindex e0c9f2a..e1002e7 100644\n--- a/README.md\n+++ b/README.md\n@@ -18,10 +18,10 @@\n \n `standard-version` will then do the following:\n \n-1. Retreive the current version of your repository by looking at `bumpFiles`[1](), falling back to the last `git tag`.\n-2. `bump` the version in `bumpFiles`[1]() based on your commits.\n-4. Generates a `changelog` based on your commints (uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) under the hood).\n-5. Creates a new `commit` including your `bumpFiles`[1]() and updated CHANGELOG.\n+1. Retrieve the current version of your repository by looking at `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters), falling back to the last `git tag`.\n+2. `bump` the version in `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) based on your commits.\n+4. Generates a `changelog` based on your commits (uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) under the hood).\n+5. Creates a new `commit` including your `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) and updated CHANGELOG.\n 6. Creates a new `tag` with the new version number.\n \n \n@@ -29,7 +29,7 @@\n \n `standard-version` uses a few key concepts for handling version bumping in your project.\n \n-- **`packageFiles`** – User-defined files where versions can be read from _and_ \"bumped\".\n+- **`packageFiles`** – User-defined files where versions can be read from _and_ be \"bumped\".\n   - Examples: `package.json`, `manifest.json`\n   - In most cases (including the default), `packageFiles` are a subset of `bumpFiles`.\n - **`bumpFiles`** – User-defined files where versions should be \"bumped\", but not explicitly read from.\n@@ -38,7 +38,7 @@\n \n By default, `standard-version` assumes you're working in a NodeJS based project... because of this, for the majority of projects you might never need to interact with these options.\n \n-That said, if you find your self asking [\"How can I use `standard-version` for additional metadata files, languages or version files?\"](#how-can-I-use-standard-version-for-additional metadata-files-languages-or-version-files) – these configuration options will help!\n+That said, if you find your self asking [How can I use standard-version for additional metadata files, languages or version files?](#can-i-use-standard-version-for-additional-metadata-files-languages-or-version-files) – these configuration options will help!\n \n ## Installing `standard-version`\n \n@@ -190,7 +190,7 @@\n npm run release -- --release-as 1.1.0\n ```\n \n-you will get version `1.1.0` rather than what would be the auto-generated version `1.0.1`.\n+You will get version `1.1.0` rather than what would be the auto-generated version `1.0.1`.\n \n > **NOTE:** you can combine `--release-as` and `--prerelease` to generate a release. This is useful when publishing experimental feature(s).\n \n@@ -351,31 +351,31 @@\n \n ### Can I use `standard-version` for additional metadata files, languages or version files?\n \n-YES! Using `bumpFiles` (and `packageFiles`) configurations you should be able to configure `standard-version` to work for you.\n+As of version `7.1.0` you can configure multiple `bumpFiles` and `packageFiles`.\n \n-1. Specify a custom `bumpFile` \"`file`\", this is the path to the file you want to \"bump\"\n+1. Specify a custom `bumpFile` \"`filename`\", this is the path to the file you want to \"bump\"\n 2. Specify the `bumpFile` \"`updater`\", this is _how_ the file will be bumped.\n   \n     a. If your using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n \n     b. If your using an less-common version file, you can create your own `updater`.\n \n-```json\n+```js\n // .versionrc\n {\n   \"bumpFiles\": [\n     {\n-      \"file\": \"MY_VERSION_TRACKER.txt\",\n+      \"filename\": \"MY_VERSION_TRACKER.txt\",\n       // The `plain-text` updater assumes the file contents represents the version.\n       \"type\": \"plain-text\"\n     },\n     {\n-      \"file\": \"a/deep/package/dot/json/file/package.json\",\n+      \"filename\": \"a/deep/package/dot/json/file/package.json\",\n       // The `json` updater assumes the version is available under a `version` key in the provided JSON document.\n       \"type\": \"json\"\n-    }\n+    },\n     {\n-      \"file\": \"VERSION_TRACKER.json\",\n+      \"filename\": \"VERSION_TRACKER.json\",\n       //  See \"Custom `updater`s\" for more details.\n       \"updater\": \"standard-version-updater.js\"\n     }\ndiff --git a/defaults.js b/defaults.js\nindex dd9c684..614c453 100644\n--- a/defaults.js\n+++ b/defaults.js\n@@ -32,14 +32,12 @@\n defaults.packageFiles = [\n   'package.json',\n   'bower.json',\n-  'manifest.json',\n-  'composer.json'\n+  'manifest.json'\n ]\n \n defaults.bumpFiles = defaults.packageFiles.concat([\n   'package-lock.json',\n-  'npm-shrinkwrap.json',\n-  'composer.lock'\n+  'npm-shrinkwrap.json'\n ])\n \n module.exports = defaults\ndiff --git a/package.json b/package.json\nindex 98273db..ec0d5fe 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"7.0.1\",\n+  \"version\": \"7.1.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -39,7 +39,7 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"2.4.2\",\n-    \"conventional-changelog\": \"3.1.15\",\n+    \"conventional-changelog\": \"3.1.18\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n     \"conventional-changelog-conventionalcommits\": \"4.2.3\",\n     \"conventional-recommended-bump\": \"6.0.5\",\n@@ -50,20 +50,20 @@\n     \"find-up\": \"4.1.0\",\n     \"fs-access\": \"1.0.1\",\n     \"git-semver-tags\": \"3.0.1\",\n-    \"semver\": \"6.3.0\",\n+    \"semver\": \"7.1.1\",\n     \"stringify-package\": \"1.0.1\",\n-    \"yargs\": \"15.0.2\"\n+    \"yargs\": \"15.1.0\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"4.2.0\",\n     \"coveralls\": \"3.0.9\",\n     \"eslint\": \"6.7.2\",\n     \"eslint-config-standard\": \"14.1.0\",\n-    \"eslint-plugin-import\": \"2.18.2\",\n+    \"eslint-plugin-import\": \"2.20.0\",\n     \"eslint-plugin-node\": \"10.0.0\",\n     \"eslint-plugin-promise\": \"4.2.1\",\n     \"eslint-plugin-standard\": \"4.0.1\",\n-    \"mocha\": \"6.2.2\",\n+    \"mocha\": \"7.0.1\",\n     \"mock-git\": \"2.0.0\",\n     \"mockery\": \"2.1.0\",\n     \"nyc\": \"14.1.1\",\n"
  }, {
    "begin time" : "Thu Nov 07 00:00:00 CST 2019",
    "end time" : "Sun Dec 08 00:00:00 CST 2019",
    "description" : "### Features* Adds support for `header` (--header) configuration based on the spec. ([#364](https://github.com/conventional-changelog/standard-version/issues/364)) ([ba80a0c](https://github.com/conventional-changelog/standard-version/commit/ba80a0c27029f54c751fe845560504925b45eab8))* custom 'bumpFiles' and 'packageFiles' support ([#372](https://github.com/conventional-changelog/standard-version/issues/372)) ([564d948](https://github.com/conventional-changelog/standard-version/commit/564d9482a459d5d7a2020c2972b4d39167ded4bf))### Bug Fixes* **deps:** update dependency conventional-changelog to v3.1.15 ([#479](https://github.com/conventional-changelog/standard-version/issues/479)) ([492e721](https://github.com/conventional-changelog/standard-version/commit/492e72192ebf35d7c58c00526b1e6bd2abac7f13))* **deps:** update dependency conventional-changelog-conventionalcommits to v4.2.3 ([#496](https://github.com/conventional-changelog/standard-version/issues/496)) ([bc606f8](https://github.com/conventional-changelog/standard-version/commit/bc606f8e96bcef1d46b28305622fc76dfbf306cf))* **deps:** update dependency conventional-recommended-bump to v6.0.5 ([#480](https://github.com/conventional-changelog/standard-version/issues/480)) ([1e1e215](https://github.com/conventional-changelog/standard-version/commit/1e1e215a633963188cdb02be1316b5506e3b99b7))* **deps:** update dependency yargs to v15 ([#484](https://github.com/conventional-changelog/standard-version/issues/484)) ([35b90c3](https://github.com/conventional-changelog/standard-version/commit/35b90c3f24cfb8237e94482fd20997900569193e))* use require.resolve for the default preset ([#465](https://github.com/conventional-changelog/standard-version/issues/465)) ([d557372](https://github.com/conventional-changelog/standard-version/commit/d55737239530f5eee684e9cbf959f7238d609fd4))* **deps:** update dependency detect-newline to v3.1.0 ([#482](https://github.com/conventional-changelog/standard-version/issues/482)) ([04ab36a](https://github.com/conventional-changelog/standard-version/commit/04ab36a12be58915cfa9c60771890e074d1f5685))* **deps:** update dependency figures to v3.1.0 ([#468](https://github.com/conventional-changelog/standard-version/issues/468)) ([63300a9](https://github.com/conventional-changelog/standard-version/commit/63300a935c0079fd03e8e1acc55fd5b1dcea677f))* **deps:** update dependency git-semver-tags to v3.0.1 ([#485](https://github.com/conventional-changelog/standard-version/issues/485)) ([9cc188c](https://github.com/conventional-changelog/standard-version/commit/9cc188cbb84ee3ae80d5e66f5c54727877313b14))* **deps:** update dependency yargs to v14.2.1 ([#483](https://github.com/conventional-changelog/standard-version/issues/483)) ([dc1fa61](https://github.com/conventional-changelog/standard-version/commit/dc1fa6170ffe12d4f8b44b70d23688a64d2ad0fb))* **deps:** update dependency yargs to v14.2.2 ([#488](https://github.com/conventional-changelog/standard-version/issues/488)) ([ecf26b6](https://github.com/conventional-changelog/standard-version/commit/ecf26b6fc9421a78fb81793c4a932f579f7e9d4a))",
    "hunks" : "diff --git a/README.md b/README.md\nindex e614ff2..e0c9f2a 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,37 +1,48 @@\n # Standard Version\n \n+A utility for versioning using [semver](https://semver.org/) and CHANGELOG generation powered by [Conventional Commits](https://conventionalcommits.org).\n+\n [![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg?branch=master)](https://travis-ci.org/conventional-changelog/standard-version)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n-[![community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n+[![Community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n \n-_Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n+_Having problems? Want to contribute? Join us on the [node-tooling community Slack](http://devtoolscommunity.herokuapp.com)_.\n \n \n-Automate versioning and CHANGELOG generation, with [semver](https://semver.org/) and\n-[conventional commit messages](https://conventionalcommits.org).\n+_How It Works:_\n \n-_how it works:_\n+1. Follow the [Conventional Commits Specification](https://conventionalcommits.org) in your repository.\n+2. When you're ready to release, run `standard-version`.\n \n-1. when you land commits on your `master` branch, select the _Squash and Merge_ option.\n-2. add a title and body that follows the [Conventional Commits Specification](https://conventionalcommits.org).\n-3. when you're ready to release:\n-  1. `git checkout master; git pull origin master`\n-  2. run `standard-version`\n-  3. `git push --follow-tags origin master && npm publish`\n-     _(or, `docker push`, `gem push`, etc.)_\n+`standard-version` will then do the following:\n \n-`standard-version` does the following:\n+1. Retreive the current version of your repository by looking at `bumpFiles`[1](), falling back to the last `git tag`.\n+2. `bump` the version in `bumpFiles`[1]() based on your commits.\n+4. Generates a `changelog` based on your commints (uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) under the hood).\n+5. Creates a new `commit` including your `bumpFiles`[1]() and updated CHANGELOG.\n+6. Creates a new `tag` with the new version number.\n \n-1. bumps the version in metadata files (package.json, composer.json, etc).\n-2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md_\n-3. commits _package.json (et al.)_ and _CHANGELOG.md_\n-4. tags a new release\n \n-## Installation\n+### `bumpFiles`, `packageFiles` and `updaters`\n \n-### As `npm run` script\n+`standard-version` uses a few key concepts for handling version bumping in your project.\n+\n+- **`packageFiles`** – User-defined files where versions can be read from _and_ \"bumped\".\n+  - Examples: `package.json`, `manifest.json`\n+  - In most cases (including the default), `packageFiles` are a subset of `bumpFiles`.\n+- **`bumpFiles`** – User-defined files where versions should be \"bumped\", but not explicitly read from.\n+  - Examples: `package-lock.json`, `npm-shrinkwrap.json`\n+- **`updaters`** – Simple modules used for reading `packageFiles` and writing to `bumpFiles`.\n+\n+By default, `standard-version` assumes you're working in a NodeJS based project... because of this, for the majority of projects you might never need to interact with these options.\n+\n+That said, if you find your self asking [\"How can I use `standard-version` for additional metadata files, languages or version files?\"](#how-can-I-use-standard-version-for-additional metadata-files-languages-or-version-files) – these configuration options will help!\n+\n+## Installing `standard-version`\n+\n+### As a local `npm run` script\n \n Install and add to `devDependencies`:\n \n@@ -39,7 +50,7 @@\n npm i --save-dev standard-version\n ```\n \n-Add an [`npm run` script](https://docs.npmjs.com/cli/run-script) to your _package.json_:\n+Add an [`npm run` script](https://docs.npmjs.com/cli/run-script) to your `package.json`:\n \n ```json\n {\n@@ -53,7 +64,7 @@\n \n This has the benefit of making your repo/package more portable, so that other developers can cut releases without having to globally install `standard-version` on their machine.\n \n-### As global bin\n+### As global `bin`\n \n Install globally (add to your `PATH`):\n \n@@ -65,6 +76,12 @@\n \n This has the benefit of allowing you to use `standard-version` on any repo/package without adding a dev dependency to each one.\n \n+### Using `npx`\n+\n+As of `npm@5.2.0`, `npx` is installed alongside `npm`. Using `npx` you can use `standard-version` without having to keep a `package.json` file by running: `npx standard-version`.\n+\n+This method is especially useful when using `standard-version` in non-JavaScript projects.\n+\n ## Configuration\n \n You can configure `standard-version` either by:\n@@ -80,15 +97,15 @@\n \n ### Customizing CHANGELOG Generation\n \n-By default, `standard-version` uses the [conventionalcommits preset](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits).\n+By default (as of `6.0.0`), `standard-version` uses the [conventionalcommits preset](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits).\n \n This preset:\n \n-* adheres closely to the [conventionalcommits.org](https://www.conventionalcommits.org)\n+* Adheres closely to the [conventionalcommits.org](https://www.conventionalcommits.org)\n   specification.\n-* is highly configurable, following the configuration specification\n+* Is highly configurable, following the configuration specification\n   [maintained here](https://github.com/conventional-changelog/conventional-changelog-config-spec).\n-  * _we've documented these config settings as a recommendation to other tooling makers._\n+  * _We've documented these config settings as a recommendation to other tooling makers._\n \n There are a variety of dials and knobs you can turn related to CHANGELOG generation.\n \n@@ -111,15 +128,17 @@\n ```sh\n # npm run script\n npm run release -- --first-release\n-# or global bin\n+# global bin\n standard-version --first-release\n+# npx\n+npx standard-version --first-release\n ```\n \n-This will tag a release **without bumping the version in package.json (_et al._)**.\n+This will tag a release **without bumping the version `bumpFiles`[1]()**.\n \n-When ready, push the git tag and `npm publish` your first release. \\o/\n+When you are ready, push the git tag and `npm publish` your first release. \\o/\n \n-### Cut a Release\n+### Cutting Releases\n \n If you typically use `npm version` to cut a new release, do this instead:\n \n@@ -134,7 +153,7 @@\n \n After you cut a release, you can push the new git tag and `npm publish` (or `npm publish --tag next`) when you're ready.\n \n-### Release as a pre-release\n+### Release as a Pre-Release\n \n Use the flag `--prerelease` to generate pre-releases:\n \n@@ -144,7 +163,7 @@\n # npm run script\n npm run release -- --prerelease\n ```\n-you will get version `1.0.1-0`.\n+This will tag your version as: `1.0.1-0`.\n \n If you want to name the pre-release, you specify the name via `--prerelease <name>`.\n \n@@ -155,14 +174,14 @@\n npm run release -- --prerelease alpha\n ```\n \n-this will tag the version `1.0.1-alpha.0`\n+This will tag the version as: `1.0.1-alpha.0`\n \n-### Release as a target type imperatively like `npm version`\n+### Release as a Target Type Imperatively (`npm version`-like)\n \n-To forgo the automated version bump use `--release-as` with the argument `major`, `minor` or `patch`:\n+To forgo the automated version bump use `--release-as` with the argument `major`, `minor` or `patch`.\n \n Suppose the last version of your code is `1.0.0`, you've only landed `fix:` commits, but\n-you would like your next release to be a `minor`. Simply do:\n+you would like your next release to be a `minor`. Simply run the following:\n \n ```bash\n # npm run script\n@@ -171,7 +190,7 @@\n npm run release -- --release-as 1.1.0\n ```\n \n-you will get version `1.1.0` rather than the auto generated version `1.0.1`.\n+you will get version `1.1.0` rather than what would be the auto-generated version `1.0.1`.\n \n > **NOTE:** you can combine `--release-as` and `--prerelease` to generate a release. This is useful when publishing experimental feature(s).\n \n@@ -186,11 +205,11 @@\n standard-version --no-verify\n ```\n \n-### Signing commits and tags\n+### Signing Commits and Tags\n \n If you have your GPG key set up, add the `--sign` or `-s` flag to your `standard-version` command.\n \n-### Lifecycle scripts\n+### Lifecycle Scripts\n \n `standard-version` supports lifecycle scripts. These allow you to execute your\n own supplementary commands during the release. The following\n@@ -231,7 +250,7 @@\n }\n ```\n \n-### Skipping lifecycle steps\n+### Skipping Lifecycle Steps\n \n You can skip any of the lifecycle steps (`bump`, `changelog`, `commit`, `tag`),\n by adding the following to your package.json:\n@@ -246,7 +265,7 @@\n }\n ```\n \n-### Committing generated artifacts in the release commit\n+### Committing Generated Artifacts in the Release Commit\n \n If you want to commit generated artifacts in the release commit (e.g. [#96](https://github.com/conventional-changelog/standard-version/issues/96)), you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n \n@@ -255,7 +274,7 @@\n \"release\": \"git add <file(s) to commit> && standard-version -a\"\n ```\n \n-### Dry run mode\n+### Dry Run Mode\n \n running `standard-version` with the flag `--dry-run` allows you to see what\n commands would be run, without committing to git or updating files.\n@@ -288,10 +307,7 @@\n standard-version --help\n ```\n \n-## Code usage\n-\n-Use the `silent` option to stop `standard-version` from printing anything\n-to the console.\n+## Code Usage\n \n ```js\n const standardVersion = require('standard-version')\n@@ -309,47 +325,7 @@\n })\n ```\n \n-## Commit Message Convention, at a Glance\n-\n-_patches:_\n-\n-```sh\n-git commit -a -m \"fix(parsing): fixed a bug in our parser\"\n-```\n-\n-_features:_\n-\n-```sh\n-git commit -a -m \"feat(parser): we now have a parser \\o/\"\n-```\n-\n-_breaking changes:_\n-\n-```sh\n-git commit -a -m \"feat(new-parser): introduces a new parsing library\n-BREAKING CHANGE: new library does not support foo-construct\"\n-```\n-\n-_other changes:_\n-\n-You decide, e.g., docs, chore, etc.\n-\n-```sh\n-git commit -a -m \"docs: fixed up the docs a bit\"\n-```\n-\n-_but wait, there's more!_\n-\n-Github usernames (`@bcoe`) and issue references (#133) will be swapped out for the\n-appropriate URLs in your CHANGELOG.\n-\n-## Badges!\n-\n-Tell your users that you adhere to the Conventional Commits specification:\n-\n-```markdown\n-[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n-```\n+_TIP: Use the `silent` option to prevent `standard-version` from printing to the `console`._\n \n ## FAQ\n \n@@ -373,6 +349,92 @@\n \n For this reason, we recommend keeping the scope of each PR to one general feature or fix. In practice, this allows you to use unstructured commit messages when committing each little change and then squash them into a single commit with a structured message (referencing the PR number) once they have been reviewed and accepted.\n \n+### Can I use `standard-version` for additional metadata files, languages or version files?\n+\n+YES! Using `bumpFiles` (and `packageFiles`) configurations you should be able to configure `standard-version` to work for you.\n+\n+1. Specify a custom `bumpFile` \"`file`\", this is the path to the file you want to \"bump\"\n+2. Specify the `bumpFile` \"`updater`\", this is _how_ the file will be bumped.\n+  \n+    a. If your using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n+\n+    b. If your using an less-common version file, you can create your own `updater`.\n+\n+```json\n+// .versionrc\n+{\n+  \"bumpFiles\": [\n+    {\n+      \"file\": \"MY_VERSION_TRACKER.txt\",\n+      // The `plain-text` updater assumes the file contents represents the version.\n+      \"type\": \"plain-text\"\n+    },\n+    {\n+      \"file\": \"a/deep/package/dot/json/file/package.json\",\n+      // The `json` updater assumes the version is available under a `version` key in the provided JSON document.\n+      \"type\": \"json\"\n+    }\n+    {\n+      \"file\": \"VERSION_TRACKER.json\",\n+      //  See \"Custom `updater`s\" for more details.\n+      \"updater\": \"standard-version-updater.js\"\n+    }\n+  ]\n+}\n+```\n+\n+#### Custom `updater`s\n+\n+An `updater` is expected to be a Javascript module with _atleast_ two methods exposed: `readVersion` and `writeVersion`.\n+\n+##### `readVersion(contents = string): string`\n+\n+This method is used to read the version from the provided file contents.\n+\n+The return value is expected to be a semantic version string.\n+\n+##### `writeVersion(contents = string, version: string): string`\n+\n+This method is used to write the version to the provided contents.\n+\n+The return value will be written directly (overwrite) to the provided file.\n+\n+---\n+\n+Let's assume our `VERSION_TRACKER.json` has the following contents:\n+\n+```json\n+{\n+  \"tracker\": {\n+    \"package\": {\n+      \"version\": \"1.0.0\"\n+    }\n+  }\n+}\n+\n+```\n+\n+An acceptable `standard-version-updater.js` would be:\n+\n+```js\n+// standard-version-updater.js\n+const stringifyPackage = require('stringify-package')\n+const detectIndent = require('detect-indent')\n+const detectNewline = require('detect-newline')\n+\n+module.exports.readVersion = function (contents) {\n+  return JSON.parse(contents).tracker.package.version;\n+}\n+\n+module.exports.writeVersion = function (contents, version) {\n+  const json = JSON.parse(contents)\n+  let indent = detectIndent(contents).indent\n+  let newline = detectNewline(contents)\n+  json.tracker.package.version = version\n+  return stringifyPackage(json, indent, newline)\n+}\n+```\n+\n ## License\n \n ISC\ndiff --git a/command.js b/command.js\nindex 1674aec..95d1582 100755\n--- a/command.js\n+++ b/command.js\n@@ -5,6 +5,14 @@\n \n const yargs = require('yargs')\n   .usage('Usage: $0 [options]')\n+  .option('packageFiles', {\n+    default: defaults.packageFiles,\n+    array: true\n+  })\n+  .option('bumpFiles', {\n+    default: defaults.bumpFiles,\n+    array: true\n+  })\n   .option('release-as', {\n     alias: 'r',\n     describe: 'Specify the release type manually (like npm version <major|minor|patch>)',\ndiff --git a/defaults.js b/defaults.js\nindex 202b8f4..fc88a5f 100644\n--- a/defaults.js\n+++ b/defaults.js\n@@ -12,7 +12,7 @@\n   skip: {},\n   dryRun: false,\n   gitTagFallback: true,\n-  preset: 'conventionalcommits'\n+  preset: require.resolve('conventional-changelog-conventionalcommits')\n }\n \n /**\n@@ -23,4 +23,17 @@\n   defaults[propertyKey] = property.default\n })\n \n+defaults.packageFiles = [\n+  'package.json',\n+  'bower.json',\n+  'manifest.json',\n+  'composer.json'\n+]\n+\n+defaults.bumpFiles = defaults.packageFiles.concat([\n+  'package-lock.json',\n+  'npm-shrinkwrap.json',\n+  'composer.lock'\n+])\n+\n module.exports = defaults\ndiff --git a/index.js b/index.js\nindex 00dbadd..9ee4585 100755\n--- a/index.js\n+++ b/index.js\n@@ -6,8 +6,10 @@\n const path = require('path')\n const printError = require('./lib/print-error')\n const tag = require('./lib/lifecycles/tag')\n+const { resolveUpdaterObjectFromArgument } = require('./lib/updaters')\n \n module.exports = function standardVersion (argv) {\n+  const defaults = require('./defaults')\n   /**\n    * `--message` (`-m`) support will be removed in the next major version.\n    */\n@@ -24,19 +26,21 @@\n     }\n   }\n \n+  const args = Object.assign({}, defaults, argv)\n   let pkg\n-  bump.pkgFiles.forEach((filename) => {\n+  args.packageFiles.forEach((packageFile) => {\n     if (pkg) return\n-    const pkgPath = path.resolve(process.cwd(), filename)\n+    const updater = resolveUpdaterObjectFromArgument(packageFile)\n+    const pkgPath = path.resolve(process.cwd(), updater.filename)\n     try {\n-      const data = fs.readFileSync(pkgPath, 'utf8')\n-      pkg = JSON.parse(data)\n+      const contents = fs.readFileSync(pkgPath, 'utf8')\n+      pkg = {\n+        version: updater.updater.readVersion(contents),\n+        private: typeof updater.updater.isPrivate === 'function' ? updater.updater.isPrivate(contents) : false\n+      }\n     } catch (err) {}\n   })\n   let newVersion\n-  const defaults = require('./defaults')\n-  const args = Object.assign({}, defaults, argv)\n-\n   return Promise.resolve()\n     .then(() => {\n       if (!pkg && args.gitTagFallback) {\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 86bb774..b59c46c 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -3,8 +3,6 @@\n const chalk = require('chalk')\n const checkpoint = require('../checkpoint')\n const conventionalRecommendedBump = require('conventional-recommended-bump')\n-const detectIndent = require('detect-indent')\n-const detectNewline = require('detect-newline')\n const figures = require('figures')\n const fs = require('fs')\n const DotGitignore = require('dotgitignore')\n@@ -12,9 +10,8 @@\n const presetLoader = require('../preset-loader')\n const runLifecycleScript = require('../run-lifecycle-script')\n const semver = require('semver')\n-const stringifyPackage = require('stringify-package')\n const writeFile = require('../write-file')\n-\n+const { resolveUpdaterObjectFromArgument } = require('../updaters')\n let configsToUpdate = {}\n \n function Bump (args, version) {\n@@ -51,19 +48,6 @@\n   return configsToUpdate\n }\n \n-Bump.pkgFiles = [\n-  'package.json',\n-  'bower.json',\n-  'manifest.json',\n-  'composer.json'\n-]\n-\n-Bump.lockFiles = [\n-  'package-lock.json',\n-  'npm-shrinkwrap.json',\n-  'composer.lock'\n-]\n-\n function getReleaseType (prerelease, expectedReleaseType, currentVersion) {\n   if (isString(prerelease)) {\n     if (isInPrerelease(currentVersion)) {\n@@ -154,32 +138,38 @@\n }\n \n /**\n- * attempt to update the version # in a collection of common config\n- * files, e.g., package.json, bower.json.\n- *\n+ * attempt to update the version number in provided `bumpFiles`\n  * @param args config object\n- * @param newVersion version # to update to.\n- * @return {string}\n+ * @param newVersion version number to update to.\n+ * @return void\n  */\n function updateConfigs (args, newVersion) {\n   const dotgit = DotGitignore()\n-  Bump.pkgFiles.concat(Bump.lockFiles).forEach(function (filename) {\n-    const configPath = path.resolve(process.cwd(), filename)\n+  args.bumpFiles.forEach(function (bumpFile) {\n+    const updater = resolveUpdaterObjectFromArgument(bumpFile)\n+    if (!updater) {\n+      return\n+    }\n+    const configPath = path.resolve(process.cwd(), updater.filename)\n     try {\n       if (dotgit.ignore(configPath)) return\n       const stat = fs.lstatSync(configPath)\n-      if (stat.isFile()) {\n-        const data = fs.readFileSync(configPath, 'utf8')\n-        const indent = detectIndent(data).indent\n-        const newline = detectNewline(data)\n-        const config = JSON.parse(data)\n-        checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n-        config.version = newVersion\n-        writeFile(args, configPath, stringifyPackage(config, indent, newline))\n-        // flag any config files that we modify the version # for\n-        // as having been updated.\n-        configsToUpdate[filename] = true\n-      }\n+\n+      if (!stat.isFile()) return\n+      const contents = fs.readFileSync(configPath, 'utf8')\n+      checkpoint(\n+        args,\n+        'bumping version in ' + updater.filename + ' from %s to %s',\n+        [updater.updater.readVersion(contents), newVersion]\n+      )\n+      writeFile(\n+        args,\n+        configPath,\n+        updater.updater.writeVersion(contents, newVersion)\n+      )\n+      // flag any config files that we modify the version # for\n+      // as having been updated.\n+      configsToUpdate[updater.filename] = true\n     } catch (err) {\n       if (err.code !== 'ENOENT') console.warn(err.message)\n     }\ndiff --git a/lib/preset-loader.js b/lib/preset-loader.js\nindex 72cb4d3..a7c0772 100644\n--- a/lib/preset-loader.js\n+++ b/lib/preset-loader.js\n@@ -3,10 +3,11 @@\n const spec = require('conventional-changelog-config-spec')\n \n module.exports = (args) => {\n-  let preset = args.preset || 'conventionalcommits'\n-  if (preset === 'conventionalcommits') {\n+  const defaultPreset = require.resolve('conventional-changelog-conventionalcommits')\n+  let preset = args.preset || defaultPreset\n+  if (preset === defaultPreset) {\n     preset = {\n-      name: preset\n+      name: defaultPreset\n     }\n     Object.keys(spec.properties).forEach(key => {\n       if (args[key] !== undefined) preset[key] = args[key]\ndiff --git a/lib/updaters/index.js b/lib/updaters/index.js\nnew file mode 100644\nindex 0000000..84ed1a0\n--- /dev/null\n+++ b/lib/updaters/index.js\n@@ -0,0 +1,59 @@\n+const path = require('path')\n+const JSON_BUMP_FILES = require('../../defaults').bumpFiles\n+const PLAIN_TEXT_BUMP_FILES = ['VERSION.txt', 'version.txt']\n+\n+function getUpdaterByType (type) {\n+  try {\n+    return require(`./types/${type}`)\n+  } catch (e) {\n+    throw Error(`Unable to locate updated for provided type (${type}).`)\n+  }\n+}\n+\n+function getUpdaterByFilename (filename) {\n+  if (JSON_BUMP_FILES.includes(path.basename(filename))) {\n+    return getUpdaterByType('json')\n+  }\n+  if (PLAIN_TEXT_BUMP_FILES.includes(filename)) {\n+    return getUpdaterByType('plain-text')\n+  }\n+  throw Error(\n+    `Unsupported file (${filename}) provided for bumping.\\n Please specifcy the updater \\`type\\` or use a custom \\`updater\\`.`\n+  )\n+}\n+\n+function getCustomUpdater (updater) {\n+  return require(path.resolve(process.cwd(), updater))\n+}\n+\n+module.exports.resolveUpdaterObjectFromArgument = function (arg) {\n+  /**\n+   * If an Object was not provided, we assume it's the path/filename\n+   * of the updater.\n+   */\n+  let updater = arg\n+  if (typeof updater !== 'object') {\n+    updater = {\n+      filename: arg\n+    }\n+  }\n+  try {\n+    if (updater.updater) {\n+      updater.updater = getCustomUpdater(updater.updater)\n+    } else if (updater.type) {\n+      updater.updater = getUpdaterByType(updater.type)\n+    } else {\n+      updater.updater = getUpdaterByFilename(updater.filename)\n+    }\n+  } catch (err) {\n+    if (err.code !== 'ENOENT') console.warn(err.message)\n+  }\n+  /**\n+   * We weren't able to resolve an updater for the argument.\n+   */\n+  if (!updater.updater) {\n+    return false\n+  }\n+\n+  return updater\n+}\ndiff --git a/lib/updaters/types/json.js b/lib/updaters/types/json.js\nnew file mode 100644\nindex 0000000..4494aab\n--- /dev/null\n+++ b/lib/updaters/types/json.js\n@@ -0,0 +1,19 @@\n+const stringifyPackage = require('stringify-package')\n+const detectIndent = require('detect-indent')\n+const detectNewline = require('detect-newline')\n+\n+module.exports.readVersion = function (contents) {\n+  return JSON.parse(contents).version\n+}\n+\n+module.exports.writeVersion = function (contents, version) {\n+  const json = JSON.parse(contents)\n+  const indent = detectIndent(contents).indent\n+  const newline = detectNewline(contents)\n+  json.version = version\n+  return stringifyPackage(json, indent, newline)\n+}\n+\n+module.exports.isPrivate = function (contents) {\n+  return JSON.parse(contents).private\n+}\ndiff --git a/lib/updaters/types/plain-text.js b/lib/updaters/types/plain-text.js\nnew file mode 100644\nindex 0000000..18bcabe\n--- /dev/null\n+++ b/lib/updaters/types/plain-text.js\n@@ -0,0 +1,7 @@\n+module.exports.readVersion = function (contents) {\n+  return contents\n+}\n+\n+module.exports.writeVersion = function (_contents, version) {\n+  return version\n+}\ndiff --git a/package.json b/package.json\nindex ddae599..98273db 100644\n--- a/package.json\n+++ b/package.json\n@@ -39,30 +39,31 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"2.4.2\",\n-    \"conventional-changelog\": \"3.1.12\",\n+    \"conventional-changelog\": \"3.1.15\",\n     \"conventional-changelog-config-spec\": \"2.1.0\",\n-    \"conventional-recommended-bump\": \"6.0.2\",\n+    \"conventional-changelog-conventionalcommits\": \"4.2.3\",\n+    \"conventional-recommended-bump\": \"6.0.5\",\n     \"detect-indent\": \"6.0.0\",\n-    \"detect-newline\": \"3.0.0\",\n+    \"detect-newline\": \"3.1.0\",\n     \"dotgitignore\": \"2.1.0\",\n-    \"figures\": \"3.0.0\",\n+    \"figures\": \"3.1.0\",\n     \"find-up\": \"4.1.0\",\n     \"fs-access\": \"1.0.1\",\n-    \"git-semver-tags\": \"3.0.0\",\n+    \"git-semver-tags\": \"3.0.1\",\n     \"semver\": \"6.3.0\",\n     \"stringify-package\": \"1.0.1\",\n-    \"yargs\": \"14.2.0\"\n+    \"yargs\": \"15.0.2\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"4.2.0\",\n-    \"coveralls\": \"3.0.7\",\n-    \"eslint\": \"6.2.2\",\n+    \"coveralls\": \"3.0.9\",\n+    \"eslint\": \"6.7.2\",\n     \"eslint-config-standard\": \"14.1.0\",\n     \"eslint-plugin-import\": \"2.18.2\",\n-    \"eslint-plugin-node\": \"9.2.0\",\n+    \"eslint-plugin-node\": \"10.0.0\",\n     \"eslint-plugin-promise\": \"4.2.1\",\n     \"eslint-plugin-standard\": \"4.0.1\",\n-    \"mocha\": \"6.2.0\",\n+    \"mocha\": \"6.2.2\",\n     \"mock-git\": \"2.0.0\",\n     \"mockery\": \"2.1.0\",\n     \"nyc\": \"14.1.1\",\ndiff --git a/test.js b/test.js\nindex 2780916..19120bc 100644\n--- a/test.js\n+++ b/test.js\n@@ -922,6 +922,74 @@\n     })\n   })\n \n+  describe('custom `bumpFiles` support', function () {\n+    it('mix.exs + version.txt', function () {\n+      // @todo This file path is relative to the `tmp` directory, which is a little confusing\n+      fs.copyFileSync('../test/mocks/mix.exs', 'mix.exs')\n+      fs.copyFileSync('../test/mocks/version.txt', 'version.txt')\n+      fs.copyFileSync('../test/mocks/updater/customer-updater.js', 'custom-updater.js')\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      return require('./index')({\n+        silent: true,\n+        bumpFiles: [\n+          'version.txt',\n+          {\n+            filename: 'mix.exs',\n+            updater: 'custom-updater.js'\n+          }\n+        ]\n+      })\n+        .then(() => {\n+          fs.readFileSync('mix.exs', 'utf-8').should.contain('version: \"1.1.0\"')\n+          fs.readFileSync('version.txt', 'utf-8').should.equal('1.1.0')\n+        })\n+    })\n+\n+    it('bumps a custom `plain-text` file', function () {\n+      fs.copyFileSync('../test/mocks/VERSION-1.0.0.txt', 'VERSION_TRACKER.txt')\n+      commit('feat: first commit')\n+      return require('./index')({\n+        silent: true,\n+        bumpFiles: [\n+          {\n+            filename: 'VERSION_TRACKER.txt',\n+            type: 'plain-text'\n+          }\n+        ]\n+      })\n+        .then(() => {\n+          fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('1.1.0')\n+        })\n+    })\n+  })\n+\n+  describe('custom `packageFiles` support', function () {\n+    it('reads and writes to a custom `plain-text` file', function () {\n+      fs.copyFileSync('../test/mocks/VERSION-6.3.1.txt', 'VERSION_TRACKER.txt')\n+      commit('feat: yet another commit')\n+      return require('./index')({\n+        silent: true,\n+        packageFiles: [\n+          {\n+            filename: 'VERSION_TRACKER.txt',\n+            type: 'plain-text'\n+          }\n+        ],\n+        bumpFiles: [\n+          {\n+            filename: 'VERSION_TRACKER.txt',\n+            type: 'plain-text'\n+          }\n+        ]\n+      })\n+        .then(() => {\n+          fs.readFileSync('VERSION_TRACKER.txt', 'utf-8').should.equal('6.4.0')\n+        })\n+    })\n+  })\n+\n   describe('npm-shrinkwrap.json support', function () {\n     beforeEach(function () {\n       writeNpmShrinkwrapJson('1.0.0')\n@@ -1073,6 +1141,22 @@\n   })\n \n   describe('configuration', () => {\n+    it('reads config from package.json', function () {\n+      writePackageJson('1.0.0', {\n+        repository: {\n+          url: 'git+https://company@scm.org/office/app.git'\n+        },\n+        'standard-version': {\n+          issueUrlFormat: 'https://standard-version.company.net/browse/{{id}}'\n+        }\n+      })\n+      commit('feat: another commit addresses issue #1')\n+      execCli()\n+      // CHANGELOG should have the new issue URL format.\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('https://standard-version.company.net/browse/1')\n+    })\n+\n     it('reads config from .versionrc', function () {\n       // write configuration that overrides default issue\n       // URL format.\ndiff --git a/test/mocks/VERSION-1.0.0.txt b/test/mocks/VERSION-1.0.0.txt\nnew file mode 100644\nindex 0000000..afaf360\n--- /dev/null\n+++ b/test/mocks/VERSION-1.0.0.txt\n@@ -0,0 +1 @@\n+1.0.0\n\\ No newline at end of file\ndiff --git a/test/mocks/VERSION-6.3.1.txt b/test/mocks/VERSION-6.3.1.txt\nnew file mode 100644\nindex 0000000..39ee137\n--- /dev/null\n+++ b/test/mocks/VERSION-6.3.1.txt\n@@ -0,0 +1 @@\n+6.3.1\n\\ No newline at end of file\ndiff --git a/test/mocks/mix.exs b/test/mocks/mix.exs\nnew file mode 100644\nindex 0000000..bc53913\n--- /dev/null\n+++ b/test/mocks/mix.exs\n@@ -0,0 +1,28 @@\n+defmodule StandardVersion.MixProject do\n+  use Mix.Project\n+\n+  def project do\n+    [\n+      app: :standard_version,\n+      version: \"0.1.0\",\n+      elixir: \"~> 1.9\",\n+      start_permanent: Mix.env() == :prod,\n+      deps: deps()\n+    ]\n+  end\n+\n+  # Run \"mix help compile.app\" to learn about applications.\n+  def application do\n+    [\n+      extra_applications: [:logger]\n+    ]\n+  end\n+\n+  # Run \"mix help deps\" to learn about dependencies.\n+  defp deps do\n+    [\n+      # {:dep_from_hexpm, \"~> 0.3.0\"},\n+      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"}\n+    ]\n+  end\n+end\ndiff --git a/test/mocks/updater/customer-updater.js b/test/mocks/updater/customer-updater.js\nnew file mode 100644\nindex 0000000..989aba3\n--- /dev/null\n+++ b/test/mocks/updater/customer-updater.js\n@@ -0,0 +1,12 @@\n+const REPLACER = /version: \"(.*)\"/\n+\n+module.exports.readVersion = function (contents) {\n+  return REPLACER.exec(contents)[1]\n+}\n+\n+module.exports.writeVersion = function (contents, version) {\n+  return contents.replace(\n+    REPLACER.exec(contents)[0],\n+    `version: \"${version}\"`\n+  )\n+}\ndiff --git a/test/mocks/version.txt b/test/mocks/version.txt\nnew file mode 100644\nindex 0000000..e69de29\n--- /dev/null\n+++ b/test/mocks/version.txt\n"
  }, {
    "begin time" : "Tue Jul 30 00:00:00 CST 2019",
    "end time" : "Thu Nov 07 00:00:00 CST 2019",
    "description" : "### Bug Fixes* **deps:** update dependency conventional-changelog to v3.1.12 ([#463](https://github.com/conventional-changelog/standard-version/issues/463)) ([f04161a](https://github.com/conventional-changelog/standard-version/commit/f04161ae624705e68f9018d563e9f3c09ccf6f30))* **deps:** update dependency conventional-changelog-config-spec to v2.1.0 ([#442](https://github.com/conventional-changelog/standard-version/issues/442)) ([a2c5747](https://github.com/conventional-changelog/standard-version/commit/a2c574735ac5a165a190661b7735ea284bdc7dda))* **deps:** update dependency conventional-recommended-bump to v6.0.2 ([#462](https://github.com/conventional-changelog/standard-version/issues/462)) ([84bb581](https://github.com/conventional-changelog/standard-version/commit/84bb581209b50357761cbec45bb8253f6a182801))* **deps:** update dependency stringify-package to v1.0.1 ([#459](https://github.com/conventional-changelog/standard-version/issues/459)) ([e06a835](https://github.com/conventional-changelog/standard-version/commit/e06a835c8296a92f4fa7c07f98057d765c1a91e5))* **deps:** update dependency yargs to v14 ([#440](https://github.com/conventional-changelog/standard-version/issues/440)) ([fe37e73](https://github.com/conventional-changelog/standard-version/commit/fe37e7390760d8d16d1b94ca58d8123e292c46a8))* **deps:** update dependency yargs to v14.2.0 ([#461](https://github.com/conventional-changelog/standard-version/issues/461)) ([fb21851](https://github.com/conventional-changelog/standard-version/commit/fb2185107a90ba4b9dc7c9c1d873ed1283706ac1))",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 2d8e9f2..211fdc1 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,31 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [7.0.0](https://github.com/conventional-changelog/standard-version/compare/v6.0.1...v7.0.0) (2019-07-30)\n+\n+\n+### ⚠ BREAKING CHANGES\n+\n+* we were accepting .version.json as a config file, rather than .versionrc.json\n+\n+### Bug Fixes\n+\n+* **bump:** transmit tag prefix argument to conventionalRecommendedBump ([#393](https://github.com/conventional-changelog/standard-version/issues/393)) ([8205222](https://github.com/conventional-changelog/standard-version/commit/8205222))\n+* **cli:** display only one, correct default for --preset flag ([#377](https://github.com/conventional-changelog/standard-version/issues/377)) ([d17fc81](https://github.com/conventional-changelog/standard-version/commit/d17fc81))\n+* **commit:** don't try to process and add changelog if skipped ([#318](https://github.com/conventional-changelog/standard-version/issues/318)) ([3e4fdec](https://github.com/conventional-changelog/standard-version/commit/3e4fdec))\n+* **deps:** update dependency conventional-changelog-config-spec to v2 ([#352](https://github.com/conventional-changelog/standard-version/issues/352)) ([f586844](https://github.com/conventional-changelog/standard-version/commit/f586844))\n+* **deps:** update dependency conventional-recommended-bump to v6 ([#417](https://github.com/conventional-changelog/standard-version/issues/417)) ([4c5cad1](https://github.com/conventional-changelog/standard-version/commit/4c5cad1))\n+* **deps:** update dependency find-up to v4 ([#355](https://github.com/conventional-changelog/standard-version/issues/355)) ([73b35f8](https://github.com/conventional-changelog/standard-version/commit/73b35f8))\n+* **deps:** update dependency find-up to v4.1.0 ([#383](https://github.com/conventional-changelog/standard-version/issues/383)) ([b621a4a](https://github.com/conventional-changelog/standard-version/commit/b621a4a))\n+* **deps:** update dependency git-semver-tags to v3 ([#418](https://github.com/conventional-changelog/standard-version/issues/418)) ([1ce3f4a](https://github.com/conventional-changelog/standard-version/commit/1ce3f4a))\n+* **deps:** update dependency semver to v6.3.0 ([#366](https://github.com/conventional-changelog/standard-version/issues/366)) ([cd866c7](https://github.com/conventional-changelog/standard-version/commit/cd866c7))\n+* **deps:** update dependency yargs to v13.3.0 ([#401](https://github.com/conventional-changelog/standard-version/issues/401)) ([3d0e8c7](https://github.com/conventional-changelog/standard-version/commit/3d0e8c7))\n+* adds support for `releaseCommitMessageFormat` ([#351](https://github.com/conventional-changelog/standard-version/issues/351)) ([a7133cc](https://github.com/conventional-changelog/standard-version/commit/a7133cc))\n+* stop suggesting npm publish if package.json was not updated ([#319](https://github.com/conventional-changelog/standard-version/issues/319)) ([a5ac845](https://github.com/conventional-changelog/standard-version/commit/a5ac845))\n+* Updates package.json to _actual_ supported (tested) NodeJS versions. ([#379](https://github.com/conventional-changelog/standard-version/issues/379)) ([15eec8a](https://github.com/conventional-changelog/standard-version/commit/15eec8a))\n+* **deps:** update dependency yargs to v13.2.4 ([#356](https://github.com/conventional-changelog/standard-version/issues/356)) ([00b2ce6](https://github.com/conventional-changelog/standard-version/commit/00b2ce6))\n+* update config file name in command based on README.md ([#357](https://github.com/conventional-changelog/standard-version/issues/357)) ([ce44dd2](https://github.com/conventional-changelog/standard-version/commit/ce44dd2))\n+\n ### [6.0.1](https://github.com/conventional-changelog/standard-version/compare/v6.0.0...v6.0.1) (2019-05-05)\n \n \ndiff --git a/README.md b/README.md\nindex a349585..e614ff2 100644\n--- a/README.md\n+++ b/README.md\n@@ -71,11 +71,13 @@\n \n 1. Placing a `standard-version` stanza in your `package.json` (assuming\n    your project is JavaScript).\n-1. Creating a `.versionrc` or `.versionrc.json`.\n+2. Creating a `.versionrc`, `.versionrc.json` or `.versionrc.js`.\n+  - If you are using a `.versionrc.js` your default export must be a configuration object, or a function returning a configuration object.\n \n-Any of the command line paramters accepted by `standard-version` can instead\n+Any of the command line parameters accepted by `standard-version` can instead\n be provided via configuration. Please refer to the [conventional-changelog-config-spec](https://github.com/conventional-changelog/conventional-changelog-config-spec/) for details on available configuration options.\n \n+\n ### Customizing CHANGELOG Generation\n \n By default, `standard-version` uses the [conventionalcommits preset](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits).\n@@ -353,13 +355,13 @@\n \n ### How is `standard-version` different from `semantic-release`?\n \n-[`semantic-release`](https://github.com/semantic-release/semantic-release) is a fully automated library/system for versioning, changelog generation, git tagging, and publishing to the npm registry.\n+[`semantic-release`](https://github.com/semantic-release/semantic-release) is described as:\n \n-`standard-version` is different because it handles the versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you still have the ability to review things and correct mistakes if you want to.\n+> semantic-release automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.\n \n-They are both based on the same foundation of structured commit messages (using [Angular format](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md)), but `standard-version` is a good choice for folks who are not yet comfortable letting publishes go out automatically. In this way, you can view `standard-version` as an incremental step to adopting `semantic-release`.\n+While both are based on the same foundation of structured commit messages, `standard-version`  takes a different approach by handling versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you can review your release state, correct mistakes and follow the release strategy that makes the most sense for your codebase.\n \n-We think they are both fantastic tools, and we encourage folks to use `semantic-release` instead of `standard-version` if it makes sense for them.\n+We think they are both fantastic tools, and we encourage folks to use `semantic-release` instead of `standard-version` if it makes sense for their use-case.\n \n ### Should I always squash commits when merging PRs?\n \ndiff --git a/command.js b/command.js\nindex c03ce56..1674aec 100755\n--- a/command.js\n+++ b/command.js\n@@ -1,10 +1,6 @@\n-const findUp = require('find-up')\n-const defaults = require('./defaults')\n-const { readFileSync } = require('fs')\n-\n-const configPath = findUp.sync(['.versionrc', '.versionrc.json'])\n-const config = configPath ? JSON.parse(readFileSync(configPath)) : {}\n const spec = require('conventional-changelog-config-spec')\n+const { getConfiguration } = require('./lib/configuration')\n+const defaults = require('./defaults')\n const { START_OF_LAST_RELEASE_PATTERN } = require('./lib/lifecycles/changelog')\n \n const yargs = require('yargs')\n@@ -81,7 +77,7 @@\n   .option('git-tag-fallback', {\n     type: 'boolean',\n     default: defaults.gitTagFallback,\n-    describe: `fallback to git tags for version, if no meta-information file is found (e.g., package.json)`\n+    describe: 'fallback to git tags for version, if no meta-information file is found (e.g., package.json)'\n   })\n   .option('path', {\n     type: 'string',\n@@ -110,7 +106,7 @@\n   .example('$0', 'Update changelog and tag release')\n   .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n   .pkgConf('standard-version')\n-  .config(config)\n+  .config(getConfiguration())\n   .wrap(97)\n   .check((args) => {\n     if (args.changelogHeader && args.changelogHeader.search(START_OF_LAST_RELEASE_PATTERN) !== -1) {\ndiff --git a/index.js b/index.js\nindex e403398..00dbadd 100755\n--- a/index.js\n+++ b/index.js\n@@ -27,15 +27,15 @@\n   let pkg\n   bump.pkgFiles.forEach((filename) => {\n     if (pkg) return\n-    let pkgPath = path.resolve(process.cwd(), filename)\n+    const pkgPath = path.resolve(process.cwd(), filename)\n     try {\n-      let data = fs.readFileSync(pkgPath, 'utf8')\n+      const data = fs.readFileSync(pkgPath, 'utf8')\n       pkg = JSON.parse(data)\n     } catch (err) {}\n   })\n   let newVersion\n-  let defaults = require('./defaults')\n-  let args = Object.assign({}, defaults, argv)\n+  const defaults = require('./defaults')\n+  const args = Object.assign({}, defaults, argv)\n \n   return Promise.resolve()\n     .then(() => {\ndiff --git a/lib/configuration.js b/lib/configuration.js\nnew file mode 100644\nindex 0000000..4b74b14\n--- /dev/null\n+++ b/lib/configuration.js\n@@ -0,0 +1,39 @@\n+const path = require('path')\n+const findUp = require('find-up')\n+const { readFileSync } = require('fs')\n+\n+const CONFIGURATION_FILES = [\n+  '.versionrc',\n+  '.versionrc.json',\n+  '.versionrc.js'\n+]\n+\n+module.exports.getConfiguration = function () {\n+  let config = {}\n+  const configPath = findUp.sync(CONFIGURATION_FILES)\n+  if (!configPath) {\n+    return config\n+  }\n+  if (path.extname(configPath) === '.js') {\n+    const jsConfiguration = require(configPath)\n+    if (typeof jsConfiguration === 'function') {\n+      config = jsConfiguration()\n+    } else {\n+      config = jsConfiguration\n+    }\n+  } else {\n+    config = JSON.parse(readFileSync(configPath))\n+  }\n+\n+  /**\n+   * @todo we could eventually have deeper validation of the configuration (using `ajv`) and\n+   * provide a more helpful error.\n+   */\n+  if (typeof config !== 'object') {\n+    throw Error(\n+      `[standard-version] Invalid configuration in ${configPath} provided. Expected an object but found ${typeof config}.`\n+    )\n+  }\n+\n+  return config\n+}\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex a2a5335..86bb774 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -32,7 +32,7 @@\n     })\n     .then((release) => {\n       if (!args.firstRelease) {\n-        let releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n+        const releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n         newVersion = semver.valid(releaseType) || semver.inc(version, releaseType, args.prerelease)\n         updateConfigs(args, newVersion)\n       } else {\n@@ -101,7 +101,7 @@\n   return Array.isArray(semver.prerelease(version))\n }\n \n-let TypeList = ['major', 'minor', 'patch'].reverse()\n+const TypeList = ['major', 'minor', 'patch'].reverse()\n \n /**\n  * extract the in-pre-release type in target version\n@@ -110,7 +110,7 @@\n  * @return {string}\n  */\n function getCurrentActiveType (version) {\n-  let typelist = TypeList\n+  const typelist = TypeList\n   for (let i = 0; i < typelist.length; i++) {\n     if (semver[typelist[i]](version)) {\n       return typelist[i]\n@@ -164,15 +164,15 @@\n function updateConfigs (args, newVersion) {\n   const dotgit = DotGitignore()\n   Bump.pkgFiles.concat(Bump.lockFiles).forEach(function (filename) {\n-    let configPath = path.resolve(process.cwd(), filename)\n+    const configPath = path.resolve(process.cwd(), filename)\n     try {\n       if (dotgit.ignore(configPath)) return\n-      let stat = fs.lstatSync(configPath)\n+      const stat = fs.lstatSync(configPath)\n       if (stat.isFile()) {\n-        let data = fs.readFileSync(configPath, 'utf8')\n-        let indent = detectIndent(data).indent\n-        let newline = detectNewline(data)\n-        let config = JSON.parse(data)\n+        const data = fs.readFileSync(configPath, 'utf8')\n+        const indent = detectIndent(data).indent\n+        const newline = detectNewline(data)\n+        const config = JSON.parse(data)\n         checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n         config.version = newVersion\n         writeFile(args, configPath, stringifyPackage(config, indent, newline))\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex 689ed38..0f3616a 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -29,14 +29,14 @@\n     const header = args.changelogHeader || '# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n \n     let oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n-    let oldContentStart = oldContent.search(START_OF_LAST_RELEASE_PATTERN)\n+    const oldContentStart = oldContent.search(START_OF_LAST_RELEASE_PATTERN)\n     // find the position of the last release and remove header:\n     if (oldContentStart !== -1) {\n       oldContent = oldContent.substring(oldContentStart)\n     }\n     let content = ''\n     const context = { version: newVersion }\n-    let changelogStream = conventionalChangelog({\n+    const changelogStream = conventionalChangelog({\n       debug: args.verbose && console.info.bind(console, 'conventional-changelog'),\n       preset: presetLoader(args),\n       tagPrefix: args.tagPrefix\ndiff --git a/lib/lifecycles/commit.js b/lib/lifecycles/commit.js\nindex 4ec0006..e8fe17c 100644\n--- a/lib/lifecycles/commit.js\n+++ b/lib/lifecycles/commit.js\n@@ -20,7 +20,7 @@\n function execCommit (args, newVersion) {\n   let msg = 'committing %s'\n   let paths = []\n-  let verify = args.verify === false || args.n ? '--no-verify ' : ''\n+  const verify = args.verify === false || args.n ? '--no-verify ' : ''\n   let toAdd = ''\n \n   // only start with a pre-populated paths list when CHANGELOG processing is not skipped\ndiff --git a/lib/run-lifecycle-hook.js b/lib/run-lifecycle-hook.js\nindex 9c0dc2c..f96b8d1 100644\n--- a/lib/run-lifecycle-hook.js\n+++ b/lib/run-lifecycle-hook.js\n@@ -5,7 +5,7 @@\n \n module.exports = function (args, hookName, newVersion, hooks, cb) {\n   if (!hooks[hookName]) return Promise.resolve()\n-  let command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n+  const command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n   checkpoint(args, 'Running lifecycle hook \"%s\"', [hookName])\n   checkpoint(args, '- hook command: \"%s\"', [command], chalk.blue(figures.info))\n   return runExec(args, command)\ndiff --git a/lib/run-lifecycle-script.js b/lib/run-lifecycle-script.js\nindex 7a9b2a2..a4c88c2 100644\n--- a/lib/run-lifecycle-script.js\n+++ b/lib/run-lifecycle-script.js\n@@ -6,7 +6,7 @@\n module.exports = function (args, hookName) {\n   const scripts = args.scripts\n   if (!scripts || !scripts[hookName]) return Promise.resolve()\n-  let command = scripts[hookName]\n+  const command = scripts[hookName]\n   checkpoint(args, 'Running lifecycle script \"%s\"', [hookName])\n   checkpoint(args, '- execute command: \"%s\"', [command], chalk.blue(figures.info))\n   return runExec(args, command)\ndiff --git a/package.json b/package.json\nindex c408445..b59805f 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"6.0.1\",\n+  \"version\": \"7.0.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -39,9 +39,9 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"2.4.2\",\n-    \"conventional-changelog\": \"3.1.9\",\n-    \"conventional-changelog-config-spec\": \"2.0.0\",\n-    \"conventional-recommended-bump\": \"5.0.0\",\n+    \"conventional-changelog\": \"3.1.12\",\n+    \"conventional-changelog-config-spec\": \"2.1.0\",\n+    \"conventional-recommended-bump\": \"6.0.2\",\n     \"detect-indent\": \"6.0.0\",\n     \"detect-newline\": \"3.0.0\",\n     \"dotgitignore\": \"2.1.0\",\n@@ -49,19 +49,19 @@\n     \"find-up\": \"4.1.0\",\n     \"fs-access\": \"1.0.1\",\n     \"git-semver-tags\": \"3.0.0\",\n-    \"semver\": \"6.0.0\",\n-    \"stringify-package\": \"1.0.0\",\n-    \"yargs\": \"13.3.0\"\n+    \"semver\": \"6.3.0\",\n+    \"stringify-package\": \"1.0.1\",\n+    \"yargs\": \"14.2.0\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"4.2.0\",\n-    \"coveralls\": \"3.0.5\",\n-    \"eslint\": \"6.1.0\",\n-    \"eslint-config-standard\": \"12.0.0\",\n+    \"coveralls\": \"3.0.7\",\n+    \"eslint\": \"6.2.2\",\n+    \"eslint-config-standard\": \"14.1.0\",\n     \"eslint-plugin-import\": \"2.18.2\",\n-    \"eslint-plugin-node\": \"9.1.0\",\n+    \"eslint-plugin-node\": \"9.2.0\",\n     \"eslint-plugin-promise\": \"4.2.1\",\n-    \"eslint-plugin-standard\": \"4.0.0\",\n+    \"eslint-plugin-standard\": \"4.0.1\",\n     \"mocha\": \"6.2.0\",\n     \"mock-git\": \"2.0.0\",\n     \"mockery\": \"2.1.0\",\ndiff --git a/test.js b/test.js\nindex 55a11bd..2780916 100644\n--- a/test.js\n+++ b/test.js\n@@ -15,7 +15,7 @@\n \n require('chai').should()\n \n-let cliPath = path.resolve(__dirname, './bin/cli.js')\n+const cliPath = path.resolve(__dirname, './bin/cli.js')\n \n function branch (branch) {\n   shell.exec('git branch ' + branch)\n@@ -43,31 +43,31 @@\n \n function writePackageJson (version, option) {\n   option = option || {}\n-  let pkg = Object.assign(option, { version: version })\n+  const pkg = Object.assign(option, { version: version })\n   fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n }\n \n function writeBowerJson (version, option) {\n   option = option || {}\n-  let bower = Object.assign(option, { version: version })\n+  const bower = Object.assign(option, { version: version })\n   fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n }\n \n function writeManifestJson (version, option) {\n   option = option || {}\n-  let manifest = Object.assign(option, { version: version })\n+  const manifest = Object.assign(option, { version: version })\n   fs.writeFileSync('manifest.json', JSON.stringify(manifest), 'utf-8')\n }\n \n function writeNpmShrinkwrapJson (version, option) {\n   option = option || {}\n-  let shrinkwrap = Object.assign(option, { version: version })\n+  const shrinkwrap = Object.assign(option, { version: version })\n   fs.writeFileSync('npm-shrinkwrap.json', JSON.stringify(shrinkwrap), 'utf-8')\n }\n \n function writePackageLockJson (version, option) {\n   option = option || {}\n-  let pkgLock = Object.assign(option, { version: version })\n+  const pkgLock = Object.assign(option, { version: version })\n   fs.writeFileSync('package-lock.json', JSON.stringify(pkgLock), 'utf-8')\n }\n \n@@ -132,7 +132,7 @@\n \n       execCli().code.should.equal(0)\n \n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n       content.should.not.match(/first commit/)\n     })\n@@ -144,7 +144,7 @@\n       commit('fix: patch release')\n       execCli('--first-release').code.should.equal(0)\n \n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n       content.should.match(/first commit/)\n       shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n@@ -178,7 +178,7 @@\n       commit('fix: patch release')\n \n       execCli().code.should.equal(0)\n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/1\\.0\\.1/)\n       content.should.not.match(/legacy header format/)\n     })\n@@ -223,8 +223,8 @@\n \n       execCli('--commit-all').code.should.equal(0)\n \n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      let status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      const status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n \n       status.should.equal('')\n       status.should.not.match(/STUFF.md/)\n@@ -237,7 +237,7 @@\n       fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n       commit('feat: first commit')\n       execCli('--changelogHeader=\"# Pork Chop Log\"').code.should.equal(0)\n-      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/# Pork Chop Log/)\n     })\n \n@@ -255,7 +255,7 @@\n         .then(function (unmock) {\n           execCli('--sign').code.should.equal(0)\n \n-          let captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n+          const captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n             return line ? JSON.parse(line) : line\n           })\n           captured[captured.length - 4].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n@@ -269,7 +269,7 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n         .then(function (unmock) {\n-          let result = execCli()\n+          const result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/commit yourself/)\n \n@@ -281,7 +281,7 @@\n       // mock git by throwing on attempt to add\n       return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n         .then(function (unmock) {\n-          let result = execCli()\n+          const result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/addition is hard/)\n \n@@ -293,7 +293,7 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n         .then(function (unmock) {\n-          let result = execCli()\n+          const result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/tag, you're it/)\n \n@@ -307,7 +307,7 @@\n         .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n-          let result = execCli()\n+          const result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/haha, kidding, this is just a warning/)\n \n@@ -321,8 +321,8 @@\n       it('should run the prerelease hook when provided', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'prerelease': 'node scripts/prerelease'\n+            scripts: {\n+              prerelease: 'node scripts/prerelease'\n             }\n           }\n         })\n@@ -330,7 +330,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/prerelease ran/)\n       })\n@@ -338,8 +338,8 @@\n       it('should abort if the hook returns a non-zero exit code', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'prerelease': 'node scripts/prerelease && exit 1'\n+            scripts: {\n+              prerelease: 'node scripts/prerelease && exit 1'\n             }\n           }\n         })\n@@ -347,7 +347,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/prerelease ran/)\n       })\n@@ -357,8 +357,8 @@\n       it('should allow prebump hook to return an alternate version #', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'prebump': 'node scripts/prebump'\n+            scripts: {\n+              prebump: 'node scripts/prebump'\n             }\n           }\n         })\n@@ -366,7 +366,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.stdout.should.match(/9\\.9\\.9/)\n         result.code.should.equal(0)\n       })\n@@ -376,8 +376,8 @@\n       it('should run the postbump hook when provided', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'postbump': 'node scripts/postbump'\n+            scripts: {\n+              postbump: 'node scripts/postbump'\n             }\n           }\n         })\n@@ -385,7 +385,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/postbump ran/)\n       })\n@@ -393,8 +393,8 @@\n       it('should run the postbump and exit with error when postbump fails', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'postbump': 'node scripts/postbump'\n+            scripts: {\n+              postbump: 'node scripts/postbump'\n             }\n           }\n         })\n@@ -402,7 +402,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/postbump-failure/)\n       })\n@@ -411,15 +411,15 @@\n     describe('precommit hook', function () {\n       it('should run the precommit hook when provided via .versionrc.json (#371)', function () {\n         fs.writeFileSync('.versionrc.json', JSON.stringify({\n-          'scripts': {\n-            'precommit': 'node scripts/precommit'\n+          scripts: {\n+            precommit: 'node scripts/precommit'\n           }\n         }), 'utf-8')\n \n         writeHook('precommit')\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n         commit('feat: first commit')\n-        let result = execCli()\n+        const result = execCli()\n         result.code.should.equal(0)\n         result.stderr.should.match(/precommit ran/)\n       })\n@@ -427,8 +427,8 @@\n       it('should run the precommit hook when provided', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'precommit': 'node scripts/precommit'\n+            scripts: {\n+              precommit: 'node scripts/precommit'\n             }\n           }\n         })\n@@ -436,7 +436,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/precommit ran/)\n       })\n@@ -444,8 +444,8 @@\n       it('should run the precommit hook and exit with error when precommit fails', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'precommit': 'node scripts/precommit'\n+            scripts: {\n+              precommit: 'node scripts/precommit'\n             }\n           }\n         })\n@@ -453,7 +453,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/precommit-failure/)\n       })\n@@ -461,8 +461,8 @@\n       it('should allow an alternate commit message to be provided by precommit script', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n-            'scripts': {\n-              'precommit': 'node scripts/precommit'\n+            scripts: {\n+              precommit: 'node scripts/precommit'\n             }\n           }\n         })\n@@ -470,7 +470,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        let result = execCli('--patch')\n+        const result = execCli('--patch')\n         result.code.should.equal(0)\n         shell.exec('git log --oneline -n1').should.match(/delivers #222/)\n       })\n@@ -525,11 +525,11 @@\n     })\n \n     describe('release-types', function () {\n-      let regularTypes = ['major', 'minor', 'patch']\n+      const regularTypes = ['major', 'minor', 'patch']\n \n       regularTypes.forEach(function (type) {\n         it('creates a ' + type + ' release', function () {\n-          let originVer = '1.0.0'\n+          const originVer = '1.0.0'\n           writePackageJson(originVer)\n           fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -537,7 +537,7 @@\n \n           return execCliAsync('--release-as ' + type)\n             .then(function () {\n-              let version = {\n+              const version = {\n                 major: semver.major(originVer),\n                 minor: semver.minor(originVer),\n                 patch: semver.patch(originVer)\n@@ -553,7 +553,7 @@\n       // this is for pre-releases\n       regularTypes.forEach(function (type) {\n         it('creates a pre' + type + ' release', function () {\n-          let originVer = '1.0.0'\n+          const originVer = '1.0.0'\n           writePackageJson(originVer)\n           fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -561,7 +561,7 @@\n \n           return execCliAsync('--release-as ' + type + ' --prerelease ' + type)\n             .then(function () {\n-              let version = {\n+              const version = {\n                 major: semver.major(originVer),\n                 minor: semver.minor(originVer),\n                 patch: semver.patch(originVer)\n@@ -577,7 +577,7 @@\n \n     describe('release-as-exact', function () {\n       it('releases as v100.0.0', function () {\n-        let originVer = '1.0.0'\n+        const originVer = '1.0.0'\n         writePackageJson(originVer)\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -590,7 +590,7 @@\n       })\n \n       it('releases as 200.0.0-amazing', function () {\n-        let originVer = '1.0.0'\n+        const originVer = '1.0.0'\n         writePackageJson(originVer)\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -656,7 +656,7 @@\n \n     execCli().code.should.equal(0)\n \n-    let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n     content.should.match(/this is my fairly long commit message which is testing whether or not we allow for long commit messages/)\n   })\n \n@@ -676,45 +676,45 @@\n   it('appends line feed at end of package.json', function () {\n     execCli().code.should.equal(0)\n \n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves indentation of tabs in package.json', function () {\n-    let indentation = '\\t'\n-    let newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    const indentation = '\\t'\n+    const newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves indentation of spaces in package.json', function () {\n-    let indentation = '     '\n-    let newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    const indentation = '     '\n+    const newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves line feed in package.json', function () {\n-    let newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    const newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves carriage return + line feed in package.json', function () {\n-    let newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n+    const newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\r\\n'))\n   })\n \n@@ -728,7 +728,7 @@\n   })\n \n   it('does not print output when the --silent flag is passed', function () {\n-    let result = execCli('--silent')\n+    const result = execCli('--silent')\n     result.code.should.equal(0)\n     result.stdout.should.equal('')\n     result.stderr.should.equal('')\n@@ -737,7 +737,7 @@\n   it('does not display `npm publish` if the package is private', function () {\n     writePackageJson('1.0.0', { private: true })\n \n-    let result = execCli()\n+    const result = execCli()\n     result.code.should.equal(0)\n     result.stdout.should.not.match(/npm publish/)\n   })\n@@ -755,7 +755,7 @@\n   })\n \n   it('includes merge commits', function () {\n-    let branchName = 'new-feature'\n+    const branchName = 'new-feature'\n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     branch(branchName)\n@@ -766,10 +766,10 @@\n \n     execCli().code.should.equal(0)\n \n-    let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n     content.should.match(/new feature from branch/)\n \n-    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    const pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.1.0\"', '}', ''].join('\\n'))\n   })\n \n@@ -781,7 +781,7 @@\n     })\n \n     commit('feat: first commit')\n-    let result = execCli()\n+    const result = execCli()\n     result.code.should.equal(1)\n     result.stderr.should.match(/scripts must be an object/)\n   })\n@@ -794,7 +794,7 @@\n     })\n \n     commit('feat: first commit')\n-    let result = execCli()\n+    const result = execCli()\n     result.code.should.equal(1)\n     result.stderr.should.match(/skip must be an object/)\n   })\n@@ -834,7 +834,7 @@\n     beforeEach(function () {\n       mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n       mockery.registerMock('conventional-changelog', function () {\n-        let readable = new stream.Readable({ objectMode: true })\n+        const readable = new stream.Readable({ objectMode: true })\n         readable._read = function () {\n         }\n         setImmediate(readable.emit.bind(readable), 'error', new Error('changelog err'))\n@@ -973,7 +973,7 @@\n \n   describe('skip', () => {\n     it('allows bump and changelog generation to be skipped', function () {\n-      let changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+      const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n       writePackageJson('1.0.0')\n       fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n \n@@ -981,13 +981,13 @@\n       return execCliAsync('--skip.bump true --skip.changelog true')\n         .then(function () {\n           getPackageVersion().should.equal('1.0.0')\n-          let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n           content.should.equal(changelogContent)\n         })\n     })\n \n     it('allows the commit phase to be skipped', function () {\n-      let changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+      const changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n       writePackageJson('1.0.0')\n       fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n \n@@ -995,7 +995,7 @@\n       return execCliAsync('--skip.commit true')\n         .then(function () {\n           getPackageVersion().should.equal('1.1.0')\n-          let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n           content.should.match(/new feature from branch/)\n           // check last commit message\n           shell.exec('git log --oneline -n1').stdout.should.match(/feat: new feature from branch/)\n@@ -1099,6 +1099,54 @@\n       content.should.include('http://www.foo.com/1')\n     })\n \n+    it('evaluates a config-function from .versionrc.js', function () {\n+      // write configuration that overrides default issue\n+      // URL format.\n+      fs.writeFileSync(\n+        '.versionrc.js',\n+        `module.exports = function() {\n+          return {\n+            issueUrlFormat: 'http://www.versionrc.js/function/{{id}}'\n+          }\n+        }`,\n+        'utf-8'\n+      )\n+      commit('feat: another commit addresses issue #1')\n+      execCli()\n+      // CHANGELOG should have the new issue URL format.\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('http://www.versionrc.js/function/1')\n+    })\n+\n+    it('evaluates a config-object from .versionrc.js', function () {\n+      // write configuration that overrides default issue\n+      // URL format.\n+      fs.writeFileSync(\n+        '.versionrc.js',\n+        `module.exports = {\n+          issueUrlFormat: 'http://www.versionrc.js/object/{{id}}'\n+        }`,\n+        'utf-8'\n+      )\n+      commit('feat: another commit addresses issue #1')\n+      execCli()\n+      // CHANGELOG should have the new issue URL format.\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('http://www.versionrc.js/object/1')\n+    })\n+\n+    it('throws an error when a non-object is returned from .versionrc.js', function () {\n+      // write configuration that overrides default issue\n+      // URL format.\n+      fs.writeFileSync(\n+        '.versionrc.js',\n+        'module.exports = 3',\n+        'utf-8'\n+      )\n+      commit('feat: another commit addresses issue #1')\n+      execCli().code.should.equal(1)\n+    })\n+\n     it('.versionrc : releaseCommitMessageFormat', function () {\n       // write configuration that overrides default issue\n       // URL format.\n@@ -1116,6 +1164,27 @@\n       shell.exec('git log --oneline -n1').should.include('1.1.0 is the version.')\n     })\n \n+    it('.versionrc : issuePrefixes', function () {\n+      // write configuration that overrides default issuePrefixes\n+      // and reference prefix in issue URL format.\n+      fs.writeFileSync('.versionrc', JSON.stringify({\n+        issueUrlFormat: 'http://www.foo.com/{{prefix}}{{id}}',\n+        issuePrefixes: ['ABC-']\n+      }), 'utf-8')\n+      commit('feat: another commit addresses issue ABC-1')\n+      execCli()\n+      // CHANGELOG should have the new issue URL format.\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('http://www.foo.com/ABC-1')\n+    })\n+\n+    it('--issuePrefixes and --issueUrlFormat', function () {\n+      commit('feat: another commit addresses issue ABC-1')\n+      execCli('--issuePrefixes=\"ABC-\" --issueUrlFormat=\"http://www.foo.com/{{prefix}}{{id}}\"')\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('http://www.foo.com/ABC-1')\n+    })\n+\n     it('[LEGACY] supports --message (and single %s replacement)', function () {\n       commit('feat: another commit addresses issue #1')\n       execCli('--message=\"V:%s\"')\n"
  }, {
    "begin time" : "Sun May 05 00:00:00 CST 2019",
    "end time" : "Tue Jul 30 00:00:00 CST 2019",
    "description" : "### ⚠ BREAKING CHANGES* we were accepting .version.json as a config file, rather than .versionrc.json### Bug Fixes* **bump:** transmit tag prefix argument to conventionalRecommendedBump ([#393](https://github.com/conventional-changelog/standard-version/issues/393)) ([8205222](https://github.com/conventional-changelog/standard-version/commit/8205222))* **cli:** display only one, correct default for --preset flag ([#377](https://github.com/conventional-changelog/standard-version/issues/377)) ([d17fc81](https://github.com/conventional-changelog/standard-version/commit/d17fc81))* **commit:** don't try to process and add changelog if skipped ([#318](https://github.com/conventional-changelog/standard-version/issues/318)) ([3e4fdec](https://github.com/conventional-changelog/standard-version/commit/3e4fdec))* **deps:** update dependency conventional-changelog-config-spec to v2 ([#352](https://github.com/conventional-changelog/standard-version/issues/352)) ([f586844](https://github.com/conventional-changelog/standard-version/commit/f586844))* **deps:** update dependency conventional-recommended-bump to v6 ([#417](https://github.com/conventional-changelog/standard-version/issues/417)) ([4c5cad1](https://github.com/conventional-changelog/standard-version/commit/4c5cad1))* **deps:** update dependency find-up to v4 ([#355](https://github.com/conventional-changelog/standard-version/issues/355)) ([73b35f8](https://github.com/conventional-changelog/standard-version/commit/73b35f8))* **deps:** update dependency find-up to v4.1.0 ([#383](https://github.com/conventional-changelog/standard-version/issues/383)) ([b621a4a](https://github.com/conventional-changelog/standard-version/commit/b621a4a))* **deps:** update dependency git-semver-tags to v3 ([#418](https://github.com/conventional-changelog/standard-version/issues/418)) ([1ce3f4a](https://github.com/conventional-changelog/standard-version/commit/1ce3f4a))* **deps:** update dependency semver to v6.3.0 ([#366](https://github.com/conventional-changelog/standard-version/issues/366)) ([cd866c7](https://github.com/conventional-changelog/standard-version/commit/cd866c7))* **deps:** update dependency yargs to v13.3.0 ([#401](https://github.com/conventional-changelog/standard-version/issues/401)) ([3d0e8c7](https://github.com/conventional-changelog/standard-version/commit/3d0e8c7))* adds support for `releaseCommitMessageFormat` ([#351](https://github.com/conventional-changelog/standard-version/issues/351)) ([a7133cc](https://github.com/conventional-changelog/standard-version/commit/a7133cc))* stop suggesting npm publish if package.json was not updated ([#319](https://github.com/conventional-changelog/standard-version/issues/319)) ([a5ac845](https://github.com/conventional-changelog/standard-version/commit/a5ac845))* Updates package.json to _actual_ supported (tested) NodeJS versions. ([#379](https://github.com/conventional-changelog/standard-version/issues/379)) ([15eec8a](https://github.com/conventional-changelog/standard-version/commit/15eec8a))* **deps:** update dependency yargs to v13.2.4 ([#356](https://github.com/conventional-changelog/standard-version/issues/356)) ([00b2ce6](https://github.com/conventional-changelog/standard-version/commit/00b2ce6))* update config file name in command based on README.md ([#357](https://github.com/conventional-changelog/standard-version/issues/357)) ([ce44dd2](https://github.com/conventional-changelog/standard-version/commit/ce44dd2))",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nindex 5960012..64f2049 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,8 +1,11 @@\n language: node_js\n+os:\n+  - linux\n+  - windows\n node_js:\n-  - \"6\"\n+  - \"8\"\n   - \"10\"\n-  - \"stable\"\n+  - \"node\"\n before_script:\n   - git config --global user.name 'Travis-CI'\n   - git config --global user.email 'dummy@example.org'\ndiff --git a/.versionrc b/.versionrc\nnew file mode 100644\nindex 0000000..2f185cd\n--- /dev/null\n+++ b/.versionrc\n@@ -0,0 +1,10 @@\n+{\n+  \"types\": [\n+    {\"type\":\"feat\",\"section\":\"Features\"},\n+    {\"type\":\"fix\",\"section\":\"Bug Fixes\"},\n+    {\"type\":\"test\",\"section\":\"Tests\", \"hidden\": true},\n+    {\"type\":\"build\",\"section\":\"Build System\", \"hidden\": true},\n+    {\"type\":\"ci\",\"hidden\":true}\n+  ]\n+}\n+\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex eeaeacd..2d8e9f2 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,7 +1,59 @@\n-# Change Log\n+# Changelog\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+### [6.0.1](https://github.com/conventional-changelog/standard-version/compare/v6.0.0...v6.0.1) (2019-05-05)\n+\n+\n+### Bug Fixes\n+\n+* don't pass args to git rev-parse ([1ac72f7](https://github.com/conventional-changelog/standard-version/commit/1ac72f7))\n+\n+\n+\n+## [6.0.0](https://github.com/conventional-changelog/standard-version/compare/v5.0.2...v6.0.0) (2019-05-05)\n+\n+\n+### Bug Fixes\n+\n+* always pass version to changelog context ([#327](https://github.com/conventional-changelog/standard-version/issues/327)) ([00e3381](https://github.com/conventional-changelog/standard-version/commit/00e3381))\n+* **deps:** update dependency detect-indent to v6 ([#341](https://github.com/conventional-changelog/standard-version/issues/341)) ([234d9dd](https://github.com/conventional-changelog/standard-version/commit/234d9dd))\n+* **deps:** update dependency detect-newline to v3 ([#342](https://github.com/conventional-changelog/standard-version/issues/342)) ([02a6093](https://github.com/conventional-changelog/standard-version/commit/02a6093))\n+* **deps:** update dependency figures to v3 ([#343](https://github.com/conventional-changelog/standard-version/issues/343)) ([7208ded](https://github.com/conventional-changelog/standard-version/commit/7208ded))\n+* **deps:** update dependency semver to v6 ([#344](https://github.com/conventional-changelog/standard-version/issues/344)) ([c40487a](https://github.com/conventional-changelog/standard-version/commit/c40487a))\n+* **deps:** update dependency yargs to v13 ([#345](https://github.com/conventional-changelog/standard-version/issues/345)) ([b2c8e59](https://github.com/conventional-changelog/standard-version/commit/b2c8e59))\n+* prevent duplicate headers from being added ([#305](https://github.com/conventional-changelog/standard-version/issues/305)) ([#307](https://github.com/conventional-changelog/standard-version/issues/307)) ([db2c6e5](https://github.com/conventional-changelog/standard-version/commit/db2c6e5))\n+\n+\n+### Build System\n+\n+* add renovate.json ([#273](https://github.com/conventional-changelog/standard-version/issues/273)) ([bf41474](https://github.com/conventional-changelog/standard-version/commit/bf41474))\n+* drop Node 6 from testing matrix ([#346](https://github.com/conventional-changelog/standard-version/issues/346)) ([6718428](https://github.com/conventional-changelog/standard-version/commit/6718428))\n+\n+\n+### Features\n+\n+* adds configurable conventionalcommits preset ([#323](https://github.com/conventional-changelog/standard-version/issues/323)) ([4fcd4a7](https://github.com/conventional-changelog/standard-version/commit/4fcd4a7))\n+* allow a user to provide a custom changelog header ([#335](https://github.com/conventional-changelog/standard-version/issues/335)) ([1c51064](https://github.com/conventional-changelog/standard-version/commit/1c51064))\n+* bump minor rather than major, if release is < 1.0.0 ([#347](https://github.com/conventional-changelog/standard-version/issues/347)) ([5d972cf](https://github.com/conventional-changelog/standard-version/commit/5d972cf))\n+* suggest branch name other than master ([#331](https://github.com/conventional-changelog/standard-version/issues/331)) ([304b49a](https://github.com/conventional-changelog/standard-version/commit/304b49a))\n+* update commit msg for when using commitAll ([#320](https://github.com/conventional-changelog/standard-version/issues/320)) ([74a040a](https://github.com/conventional-changelog/standard-version/commit/74a040a))\n+\n+\n+### Tests\n+\n+* disable gpg signing in temporary test repositories. ([#311](https://github.com/conventional-changelog/standard-version/issues/311)) ([bd0fcdf](https://github.com/conventional-changelog/standard-version/commit/bd0fcdf))\n+* use const based on new eslint rules ([#329](https://github.com/conventional-changelog/standard-version/issues/329)) ([b6d3d13](https://github.com/conventional-changelog/standard-version/commit/b6d3d13))\n+\n+\n+### BREAKING CHANGES\n+\n+* we now bump the minor rather than major if version < 1.0.0; --release-as can be used to bump to 1.0.0.\n+* tests are no longer run for Node 6\n+* we now use the conventionalcommits preset by default, which directly tracks conventionalcommits.org.\n+\n+\n+\n ## [5.0.2](https://github.com/conventional-changelog/standard-version/compare/v5.0.1...v5.0.2) (2019-03-16)\n \n \ndiff --git a/README.md b/README.md\nindex 6d6b7d3..a349585 100644\n--- a/README.md\n+++ b/README.md\n@@ -74,7 +74,7 @@\n 1. Creating a `.versionrc` or `.versionrc.json`.\n \n Any of the command line paramters accepted by `standard-version` can instead\n-be provided via configuration.\n+be provided via configuration. Please refer to the [conventional-changelog-config-spec](https://github.com/conventional-changelog/conventional-changelog-config-spec/) for details on available configuration options.\n \n ### Customizing CHANGELOG Generation\n \n@@ -100,6 +100,8 @@\n \n ## CLI Usage\n \n+> **NOTE:** To pass nested configurations to the CLI without defining them in the `package.json` use dot notation as the parameters `e.g. --skip.changelog`.\n+\n ### First Release\n \n To generate your changelog for your first release, simply do:\n@@ -265,7 +267,7 @@\n \n ### Prefix Tags\n \n-If you would like to prefix your tags with something, you can do so with the `-t` flag.\n+Tags are prefixed with `v` by default. If you would like to prefix your tags with something else, you can do so with the `-t` flag.\n \n ```sh\n standard-version -t @scope/package\\@\n@@ -273,6 +275,8 @@\n \n This will prefix your tags to look something like `@scope/package@2.0.0`\n \n+If you do not want to have any tag prefix you can use the `-t` flag without value.\n+\n ### CLI Help\n \n ```sh\ndiff --git a/appveyor.yml b/appveyor.yml\ndeleted file mode 100644\nindex 3b190c9..0000000\n--- a/appveyor.yml\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-environment:\n-  matrix:\n-    - nodejs_version: '10'\n-install:\n-  - ps: Install-Product node $env:nodejs_version\n-  - git config --global user.name 'Appveyor'\n-  - git config --global user.email 'dummy@example.org'\n-  - set CI=true\n-  - npm -g install npm@latest\n-  - set PATH=%APPDATA%\\npm;%PATH%\n-  - npm install\n-matrix:\n-  fast_finish: true\n-build: off\n-version: '{build}'\n-test_script:\n-  - node --version\n-  - npm --version\n-  - npm test\ndiff --git a/command.js b/command.js\nindex 4ea6c1c..c03ce56 100755\n--- a/command.js\n+++ b/command.js\n@@ -2,9 +2,10 @@\n const defaults = require('./defaults')\n const { readFileSync } = require('fs')\n \n-const configPath = findUp.sync(['.versionrc', '.version.json'])\n+const configPath = findUp.sync(['.versionrc', '.versionrc.json'])\n const config = configPath ? JSON.parse(readFileSync(configPath)) : {}\n const spec = require('conventional-changelog-config-spec')\n+const { START_OF_LAST_RELEASE_PATTERN } = require('./lib/lifecycles/changelog')\n \n const yargs = require('yargs')\n   .usage('Usage: $0 [options]')\n@@ -25,10 +26,9 @@\n     default: defaults.infile\n   })\n   .option('message', {\n-    alias: 'm',\n-    describe: 'Commit message, replaces %s with new version',\n-    type: 'string',\n-    default: defaults.message\n+    alias: ['m'],\n+    describe: '[DEPRECATED] Commit message, replaces %s with new version.\\nThis option will be removed in the next major version, please use --releaseCommitMessageFormat.',\n+    type: 'string'\n   })\n   .option('first-release', {\n     alias: 'f',\n@@ -87,10 +87,14 @@\n     type: 'string',\n     describe: 'Only populate commits made under this path'\n   })\n+  .option('changelogHeader', {\n+    type: 'string',\n+    describe: 'Use a custom header when generating and updating changelog.'\n+  })\n   .option('preset', {\n     type: 'string',\n     default: defaults.preset,\n-    describe: 'Commit message guideline preset (default: angular)'\n+    describe: 'Commit message guideline preset'\n   })\n   .check((argv) => {\n     if (typeof argv.scripts !== 'object' || Array.isArray(argv.scripts)) {\n@@ -108,6 +112,13 @@\n   .pkgConf('standard-version')\n   .config(config)\n   .wrap(97)\n+  .check((args) => {\n+    if (args.changelogHeader && args.changelogHeader.search(START_OF_LAST_RELEASE_PATTERN) !== -1) {\n+      throw Error(`custom changelog header must not match ${START_OF_LAST_RELEASE_PATTERN}`)\n+    } else {\n+      return true\n+    }\n+  })\n \n Object.keys(spec.properties).forEach(propertyKey => {\n   const property = spec.properties[propertyKey]\n@@ -120,6 +131,3 @@\n })\n \n module.exports = yargs\n-\n-// TODO: yargs should be populated with keys/descriptions from\n-// https://github.com/conventional-changelog/conventional-changelog-config-spec\ndiff --git a/defaults.js b/defaults.js\nnew file mode 100644\nindex 0000000..202b8f4\n--- /dev/null\n+++ b/defaults.js\n@@ -0,0 +1,26 @@\n+const spec = require('conventional-changelog-config-spec')\n+\n+const defaults = {\n+  infile: 'CHANGELOG.md',\n+  firstRelease: false,\n+  sign: false,\n+  noVerify: false,\n+  commitAll: false,\n+  silent: false,\n+  tagPrefix: 'v',\n+  scripts: {},\n+  skip: {},\n+  dryRun: false,\n+  gitTagFallback: true,\n+  preset: 'conventionalcommits'\n+}\n+\n+/**\n+ * Merge in defaults provided by the spec\n+ */\n+Object.keys(spec.properties).forEach(propertyKey => {\n+  const property = spec.properties[propertyKey]\n+  defaults[propertyKey] = property.default\n+})\n+\n+module.exports = defaults\ndiff --git a/defaults.json b/defaults.json\ndeleted file mode 100644\nindex c5bc421..0000000\n--- a/defaults.json\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-{\n-  \"infile\": \"CHANGELOG.md\",\n-  \"message\": \"chore(release): %s\",\n-  \"firstRelease\": false,\n-  \"sign\": false,\n-  \"noVerify\": false,\n-  \"commitAll\": false,\n-  \"silent\": false,\n-  \"tagPrefix\": \"v\",\n-  \"scripts\": {},\n-  \"skip\": {},\n-  \"dryRun\": false,\n-  \"gitTagFallback\": true,\n-  \"preset\": \"conventionalcommits\"\n-}\n\\ No newline at end of file\ndiff --git a/index.js b/index.js\nindex 956e1e8..e403398 100755\n--- a/index.js\n+++ b/index.js\n@@ -8,6 +8,22 @@\n const tag = require('./lib/lifecycles/tag')\n \n module.exports = function standardVersion (argv) {\n+  /**\n+   * `--message` (`-m`) support will be removed in the next major version.\n+   */\n+  const message = argv.m || argv.message\n+  if (message) {\n+    /**\n+     * The `--message` flag uses `%s` for version substitutions, we swap this\n+     * for the substitution defined in the config-spec for future-proofing upstream\n+     * handling.\n+     */\n+    argv.releaseCommitMessageFormat = message.replace(/%s/g, '{{currentTag}}')\n+    if (!argv.silent) {\n+      console.warn('[standard-version]: --message (-m) will be removed in the next major release. Use --releaseCommitMessageFormat.')\n+    }\n+  }\n+\n   let pkg\n   bump.pkgFiles.forEach((filename) => {\n     if (pkg) return\ndiff --git a/lib/format-commit-message.js b/lib/format-commit-message.js\nindex b79ad2e..a597b51 100644\n--- a/lib/format-commit-message.js\n+++ b/lib/format-commit-message.js\n@@ -1,10 +1,4 @@\n-const util = require('util')\n-\n module.exports = function (rawMsg, newVersion) {\n   const message = String(rawMsg)\n-  const matchCount = (message.match(/%s/g) || []).length\n-  const args = Array(1 + matchCount)\n-  args[0] = message\n-  args.fill(newVersion, 1, args.length)\n-  return util.format.apply(util, args)\n+  return message.replace(/{{currentTag}}/g, newVersion)\n }\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 0fd0a1a..a2a5335 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -28,7 +28,7 @@\n     .then(runLifecycleScript.bind(this, args, 'prebump'))\n     .then((stdout) => {\n       if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n-      return bumpVersion(args.releaseAs, args)\n+      return bumpVersion(args.releaseAs, version, args)\n     })\n     .then((release) => {\n       if (!args.firstRelease) {\n@@ -129,17 +129,22 @@\n   return TypeList.indexOf(type)\n }\n \n-function bumpVersion (releaseAs, args) {\n+function bumpVersion (releaseAs, currentVersion, args) {\n   return new Promise((resolve, reject) => {\n     if (releaseAs) {\n       return resolve({\n         releaseType: releaseAs\n       })\n     } else {\n+      const presetOptions = presetLoader(args)\n+      if (typeof presetOptions === 'object') {\n+        if (semver.lt(currentVersion, '1.0.0')) presetOptions.preMajor = true\n+      }\n       conventionalRecommendedBump({\n         debug: args.verbose && console.info.bind(console, 'conventional-recommended-bump'),\n-        preset: presetLoader(args),\n-        path: args.path\n+        preset: presetOptions,\n+        path: args.path,\n+        tagPrefix: args.tagPrefix\n       }, function (err, release) {\n         if (err) return reject(err)\n         else return resolve(release)\n@@ -158,10 +163,8 @@\n  */\n function updateConfigs (args, newVersion) {\n   const dotgit = DotGitignore()\n-  Bump.pkgFiles.concat(Bump.lockFiles).forEach((filename) => {\n-    configsToUpdate[path.resolve(process.cwd(), filename)] = false\n-  })\n-  Object.keys(configsToUpdate).forEach(function (configPath) {\n+  Bump.pkgFiles.concat(Bump.lockFiles).forEach(function (filename) {\n+    let configPath = path.resolve(process.cwd(), filename)\n     try {\n       if (dotgit.ignore(configPath)) return\n       let stat = fs.lstatSync(configPath)\n@@ -170,13 +173,12 @@\n         let indent = detectIndent(data).indent\n         let newline = detectNewline(data)\n         let config = JSON.parse(data)\n-        let filename = path.basename(configPath)\n         checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n         config.version = newVersion\n         writeFile(args, configPath, stringifyPackage(config, indent, newline))\n         // flag any config files that we modify the version # for\n         // as having been updated.\n-        configsToUpdate[configPath] = true\n+        configsToUpdate[filename] = true\n       }\n     } catch (err) {\n       if (err.code !== 'ENOENT') console.warn(err.message)\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex f32eabd..689ed38 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -6,8 +6,9 @@\n const presetLoader = require('../preset-loader')\n const runLifecycleScript = require('../run-lifecycle-script')\n const writeFile = require('../write-file')\n+const START_OF_LAST_RELEASE_PATTERN = /(^#+ \\[?[0-9]+\\.[0-9]+\\.[0-9]+|<a name=)/m\n \n-module.exports = function (args, newVersion) {\n+function Changelog (args, newVersion) {\n   if (args.skip.changelog) return Promise.resolve()\n   return runLifecycleScript(args, 'prechangelog')\n     .then(() => {\n@@ -18,19 +19,23 @@\n     })\n }\n \n+Changelog.START_OF_LAST_RELEASE_PATTERN = START_OF_LAST_RELEASE_PATTERN\n+\n+module.exports = Changelog\n+\n function outputChangelog (args, newVersion) {\n   return new Promise((resolve, reject) => {\n     createIfMissing(args)\n-    let header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n+    const header = args.changelogHeader || '# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n+\n     let oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n+    let oldContentStart = oldContent.search(START_OF_LAST_RELEASE_PATTERN)\n     // find the position of the last release and remove header:\n-    const changelogSectionRegExp = /<a name=|##? \\[?[0-9]+\\.[0-9]+\\.[0-9]+\\]?/\n-    if (oldContent.search(changelogSectionRegExp) !== -1) {\n-      oldContent = oldContent.substring(oldContent.search(changelogSectionRegExp))\n+    if (oldContentStart !== -1) {\n+      oldContent = oldContent.substring(oldContentStart)\n     }\n     let content = ''\n-    let context\n-    if (args.dryRun) context = { version: newVersion }\n+    const context = { version: newVersion }\n     let changelogStream = conventionalChangelog({\n       debug: args.verbose && console.info.bind(console, 'conventional-changelog'),\n       preset: presetLoader(args),\ndiff --git a/lib/lifecycles/commit.js b/lib/lifecycles/commit.js\nindex 7c7aa6a..4ec0006 100644\n--- a/lib/lifecycles/commit.js\n+++ b/lib/lifecycles/commit.js\n@@ -9,7 +9,7 @@\n   if (args.skip.commit) return Promise.resolve()\n   return runLifecycleScript(args, 'precommit')\n     .then((message) => {\n-      if (message && message.length) args.message = message\n+      if (message && message.length) args.releaseCommitMessageFormat = message\n       return execCommit(args, newVersion)\n     })\n     .then(() => {\n@@ -19,16 +19,25 @@\n \n function execCommit (args, newVersion) {\n   let msg = 'committing %s'\n-  let paths = [args.infile]\n+  let paths = []\n   let verify = args.verify === false || args.n ? '--no-verify ' : ''\n   let toAdd = ''\n+\n+  // only start with a pre-populated paths list when CHANGELOG processing is not skipped\n+  if (!args.skip.changelog) {\n+    paths = [args.infile]\n+    toAdd += ' ' + args.infile\n+  }\n+\n   // commit any of the config files that we've updated\n   // the version # for.\n   Object.keys(bump.getUpdatedConfigs()).forEach(function (p) {\n-    if (bump.getUpdatedConfigs()[p]) {\n+    paths.unshift(p)\n+    toAdd += ' ' + path.relative(process.cwd(), p)\n+\n+    // account for multiple files in the output message\n+    if (paths.length > 1) {\n       msg += ' and %s'\n-      paths.unshift(path.basename(p))\n-      toAdd += ' ' + path.relative(process.cwd(), p)\n     }\n   })\n \n@@ -38,8 +47,14 @@\n   }\n \n   checkpoint(args, msg, paths)\n-  return runExec(args, 'git add' + toAdd + ' ' + args.infile)\n+\n+  // nothing to do, exit without commit anything\n+  if (args.skip.changelog && args.skip.bump && toAdd.length === 0) {\n+    return Promise.resolve()\n+  }\n+\n+  return runExec(args, 'git add' + toAdd)\n     .then(() => {\n-      return runExec(args, 'git commit ' + verify + (args.sign ? '-S ' : '') + (args.commitAll ? '' : (args.infile + toAdd)) + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n+      return runExec(args, 'git commit ' + verify + (args.sign ? '-S ' : '') + (args.commitAll ? '' : (toAdd)) + ' -m \"' + formatCommitMessage(args.releaseCommitMessageFormat, newVersion) + '\"')\n     })\n }\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex a7b4019..f6a2108 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -1,3 +1,4 @@\n+const bump = require('../lifecycles/bump')\n const chalk = require('chalk')\n const checkpoint = require('../checkpoint')\n const figures = require('figures')\n@@ -24,10 +25,11 @@\n     tagOption = '-a '\n   }\n   checkpoint(args, 'tagging release %s%s', [args.tagPrefix, newVersion])\n-  return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n-    .then(() => {\n-      let message = 'git push --follow-tags origin master'\n-      if (pkgPrivate !== true) {\n+  return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.releaseCommitMessageFormat, newVersion) + '\"')\n+    .then(() => runExec('', 'git rev-parse --abbrev-ref HEAD'))\n+    .then((currentBranch) => {\n+      let message = 'git push --follow-tags origin ' + currentBranch.trim()\n+      if (pkgPrivate !== true && bump.getUpdatedConfigs()['package.json']) {\n         message += ' && npm publish'\n         if (args.prerelease !== undefined) {\n           if (args.prerelease === '') {\ndiff --git a/package.json b/package.json\nindex 5bdcca0..74e7624 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,12 +1,12 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"5.0.2\",\n+  \"version\": \"6.0.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n     \"posttest\": \"eslint .\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n-    \"test\": \"nyc mocha --timeout=20000 test.js\",\n+    \"test\": \"nyc mocha --timeout=30000 test.js\",\n     \"release\": \"bin/cli.js\"\n   },\n   \"nyc\": {\n@@ -19,7 +19,7 @@\n     \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n   },\n   \"engines\": {\n-    \"node\": \">=4.0\"\n+    \"node\": \">=8.0\"\n   },\n   \"keywords\": [\n     \"conventional-changelog\",\n@@ -38,34 +38,34 @@\n   },\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n-    \"chalk\": \"^2.4.1\",\n-    \"conventional-changelog\": \"^3.1.2\",\n-    \"conventional-changelog-config-spec\": \"^1.0.0\",\n-    \"conventional-recommended-bump\": \"^4.1.1\",\n-    \"detect-indent\": \"^5.0.0\",\n-    \"detect-newline\": \"^2.1.0\",\n-    \"dotgitignore\": \"^2.1.0\",\n-    \"figures\": \"^2.0.0\",\n-    \"find-up\": \"^3.0.0\",\n-    \"fs-access\": \"^1.0.0\",\n-    \"git-semver-tags\": \"^2.0.2\",\n-    \"semver\": \"^5.2.0\",\n-    \"stringify-package\": \"^1.0.0\",\n-    \"yargs\": \"^12.0.2\"\n+    \"chalk\": \"2.4.2\",\n+    \"conventional-changelog\": \"3.1.9\",\n+    \"conventional-changelog-config-spec\": \"2.0.0\",\n+    \"conventional-recommended-bump\": \"5.0.0\",\n+    \"detect-indent\": \"6.0.0\",\n+    \"detect-newline\": \"3.0.0\",\n+    \"dotgitignore\": \"2.1.0\",\n+    \"figures\": \"3.0.0\",\n+    \"find-up\": \"4.1.0\",\n+    \"fs-access\": \"1.0.1\",\n+    \"git-semver-tags\": \"2.0.2\",\n+    \"semver\": \"6.0.0\",\n+    \"stringify-package\": \"1.0.0\",\n+    \"yargs\": \"13.3.0\"\n   },\n   \"devDependencies\": {\n-    \"chai\": \"^3.5.0\",\n-    \"coveralls\": \"^3.0.3\",\n-    \"eslint\": \"^5.16.0\",\n-    \"eslint-config-standard\": \"^12.0.0\",\n-    \"eslint-plugin-import\": \"^2.16.0\",\n-    \"eslint-plugin-node\": \"^8.0.1\",\n-    \"eslint-plugin-promise\": \"^4.0.1\",\n-    \"eslint-plugin-standard\": \"^4.0.0\",\n-    \"mocha\": \"^5.2.0\",\n-    \"mock-git\": \"^1.0.3\",\n-    \"mockery\": \"^2.0.0\",\n-    \"nyc\": \"^13.3.0\",\n-    \"shelljs\": \"^0.7.8\"\n+    \"chai\": \"4.2.0\",\n+    \"coveralls\": \"3.0.5\",\n+    \"eslint\": \"6.1.0\",\n+    \"eslint-config-standard\": \"12.0.0\",\n+    \"eslint-plugin-import\": \"2.18.2\",\n+    \"eslint-plugin-node\": \"9.1.0\",\n+    \"eslint-plugin-promise\": \"4.2.1\",\n+    \"eslint-plugin-standard\": \"4.0.0\",\n+    \"mocha\": \"6.2.0\",\n+    \"mock-git\": \"2.0.0\",\n+    \"mockery\": \"2.1.0\",\n+    \"nyc\": \"14.1.1\",\n+    \"shelljs\": \"0.8.3\"\n   }\n }\ndiff --git a/renovate.json b/renovate.json\nindex 010732b..f45d8f1 100644\n--- a/renovate.json\n+++ b/renovate.json\n@@ -1,3 +1,5 @@\n {\n-  \"enabled\": false\n+  \"extends\": [\n+    \"config:base\"\n+  ]\n }\ndiff --git a/test.js b/test.js\nindex 28d73e2..55a11bd 100644\n--- a/test.js\n+++ b/test.js\n@@ -94,6 +94,7 @@\n   shell.mkdir('tmp')\n   shell.cd('tmp')\n   shell.exec('git init')\n+  shell.exec('git config commit.gpgSign false')\n   commit('root-commit')\n   writePackageJson('1.0.0')\n }\n@@ -108,14 +109,14 @@\n }\n \n describe('format-commit-message', function () {\n-  it('works for no %s', function () {\n+  it('works for no {{currentTag}}', function () {\n     formatCommitMessage('chore(release): 1.0.0', '1.0.0').should.equal('chore(release): 1.0.0')\n   })\n-  it('works for one %s', function () {\n-    formatCommitMessage('chore(release): %s', '1.0.0').should.equal('chore(release): 1.0.0')\n+  it('works for one {{currentTag}}', function () {\n+    formatCommitMessage('chore(release): {{currentTag}}', '1.0.0').should.equal('chore(release): 1.0.0')\n   })\n-  it('works for two %s', function () {\n-    formatCommitMessage('chore(release): %s \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v%s/CHANGELOG.md', '1.0.0').should.equal('chore(release): 1.0.0 \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v1.0.0/CHANGELOG.md')\n+  it('works for two {{currentTag}}', function () {\n+    formatCommitMessage('chore(release): {{currentTag}} \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v{{currentTag}}/CHANGELOG.md', '1.0.0').should.equal('chore(release): 1.0.0 \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v1.0.0/CHANGELOG.md')\n   })\n })\n \n@@ -148,10 +149,28 @@\n       content.should.match(/first commit/)\n       shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n     })\n+\n+    it('skipping changelog will not create a changelog file', function () {\n+      writePackageJson('1.0.0')\n+\n+      commit('feat: first commit')\n+      return execCliAsync('--skip.changelog true')\n+        .then(function () {\n+          getPackageVersion().should.equal('1.1.0')\n+          let fileNotFound = false\n+          try {\n+            fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          } catch (err) {\n+            fileNotFound = true\n+          }\n+\n+          fileNotFound.should.equal(true)\n+        })\n+    })\n   })\n \n   describe('CHANGELOG.md exists', function () {\n-    it('appends the new release above the last release, removing the old header', function () {\n+    it('appends the new release above the last release, removing the old header (legacy format)', function () {\n       fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n       commit('feat: first commit')\n@@ -164,6 +183,33 @@\n       content.should.not.match(/legacy header format/)\n     })\n \n+    // TODO: we should use snapshots which are easier to update than large\n+    // string assertions; we should also consider not using the CLI which\n+    // is slower than calling standard-version directly.\n+    it('appends the new release above the last release, removing the old header (new format)', function () {\n+      // we don't create a package.json, so no {{host}} and {{repo}} tag\n+      // will be populated, let's use a compareUrlFormat without these.\n+      const cliArgs = '--compareUrlFormat=/compare/{{previousTag}}...{{currentTag}}'\n+\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('fix: patch release')\n+\n+      execCli(cliArgs).code.should.equal(0)\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+\n+      // remove commit hashes and dates to make testing against a static string easier:\n+      content = content.replace(/patch release [0-9a-f]{6,8}/g, 'patch release ABCDEFXY').replace(/\\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)/g, '(YYYY-MM-DD)')\n+      content.should.equal('# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n\\n### [1.0.1](/compare/v1.0.0...v1.0.1) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* patch release ABCDEFXY\\n')\n+\n+      commit('fix: another patch release')\n+      // we've populated no package.json, so no {{host}} and\n+      execCli(cliArgs).code.should.equal(0)\n+      content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content = content.replace(/patch release [0-9a-f]{6,8}/g, 'patch release ABCDEFXY').replace(/\\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)/g, '(YYYY-MM-DD)')\n+      content.should.equal('# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n\\n### [1.0.2](/compare/v1.0.1...v1.0.2) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* another patch release ABCDEFXY\\n\\n### [1.0.1](/compare/v1.0.0...v1.0.1) (YYYY-MM-DD)\\n\\n\\n### Bug Fixes\\n\\n* patch release ABCDEFXY\\n')\n+    })\n+\n     it('commits all staged files', function () {\n       fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -186,6 +232,20 @@\n       content.should.match(/1\\.0\\.1/)\n       content.should.not.match(/legacy header format/)\n     })\n+\n+    it('allows for a custom changelog header', function () {\n+      fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n+      commit('feat: first commit')\n+      execCli('--changelogHeader=\"# Pork Chop Log\"').code.should.equal(0)\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.match(/# Pork Chop Log/)\n+    })\n+\n+    it('exits with error if changelog header matches last version search regex', function () {\n+      fs.writeFileSync('CHANGELOG.md', '', 'utf-8')\n+      commit('feat: first commit')\n+      execCli('--changelogHeader=\"## 3.0.2\"').code.should.equal(1)\n+    })\n   })\n \n   describe('with mocked git', function () {\n@@ -198,8 +258,8 @@\n           let captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n             return line ? JSON.parse(line) : line\n           })\n-          captured[captured.length - 3].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n-          captured[captured.length - 2].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'])\n+          captured[captured.length - 4].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n+          captured[captured.length - 3].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'])\n \n           unmock()\n         })\n@@ -248,7 +308,7 @@\n           writePackageJson('1.0.0')\n \n           let result = execCli()\n-          result.code.should.equal(0)\n+          result.code.should.equal(1)\n           result.stderr.should.match(/haha, kidding, this is just a warning/)\n \n           unmock()\n@@ -349,6 +409,21 @@\n     })\n \n     describe('precommit hook', function () {\n+      it('should run the precommit hook when provided via .versionrc.json (#371)', function () {\n+        fs.writeFileSync('.versionrc.json', JSON.stringify({\n+          'scripts': {\n+            'precommit': 'node scripts/precommit'\n+          }\n+        }), 'utf-8')\n+\n+        writeHook('precommit')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+        commit('feat: first commit')\n+        let result = execCli()\n+        result.code.should.equal(0)\n+        result.stderr.should.match(/precommit ran/)\n+      })\n+\n       it('should run the precommit hook when provided', function () {\n         writePackageJson('1.0.0', {\n           'standard-version': {\n@@ -668,13 +743,13 @@\n   })\n \n   it('does not display `all staged files` without the --commit-all flag', function () {\n-    let result = execCli()\n+    const result = execCli()\n     result.code.should.equal(0)\n     result.stdout.should.not.match(/and all staged files/)\n   })\n \n   it('does display `all staged files` if the --commit-all flag is passed', function () {\n-    let result = execCli('--commit-all')\n+    const result = execCli('--commit-all')\n     result.code.should.equal(0)\n     result.stdout.should.match(/and all staged files/)\n   })\n@@ -988,21 +1063,17 @@\n           output.stdout.should.include('v5.1.0')\n         })\n     })\n+\n+    it('does not display `npm publish` if there is no package.json', function () {\n+      shell.rm('package.json')\n+      const result = execCli()\n+      result.code.should.equal(0)\n+      result.stdout.should.not.match(/npm publish/)\n+    })\n   })\n \n   describe('configuration', () => {\n     it('reads config from .versionrc', function () {\n-      // we currently skip several replacments in CHANGELOG\n-      // generation if repository URL isn't set.\n-      //\n-      // TODO: consider modifying this logic in conventional-commits\n-      // perhaps we should only skip the replacement if we rely on\n-      // the {{host}} field?\n-      writePackageJson('1.0.0', {\n-        repository: {\n-          url: 'https://github.com/yargs/yargs.git'\n-        }\n-      })\n       // write configuration that overrides default issue\n       // URL format.\n       fs.writeFileSync('.versionrc', JSON.stringify({\n@@ -1014,5 +1085,71 @@\n       const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.include('http://www.foo.com/1')\n     })\n+\n+    it('reads config from .versionrc.json', function () {\n+      // write configuration that overrides default issue\n+      // URL format.\n+      fs.writeFileSync('.versionrc.json', JSON.stringify({\n+        issueUrlFormat: 'http://www.foo.com/{{id}}'\n+      }), 'utf-8')\n+      commit('feat: another commit addresses issue #1')\n+      execCli()\n+      // CHANGELOG should have the new issue URL format.\n+      const content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      content.should.include('http://www.foo.com/1')\n+    })\n+\n+    it('.versionrc : releaseCommitMessageFormat', function () {\n+      // write configuration that overrides default issue\n+      // URL format.\n+      fs.writeFileSync('.versionrc', JSON.stringify({\n+        releaseCommitMessageFormat: 'This commit represents release: {{currentTag}}'\n+      }), 'utf-8')\n+      commit('feat: another commit addresses issue #1')\n+      execCli()\n+      shell.exec('git log --oneline -n1').should.include('This commit represents release: 1.1.0')\n+    })\n+\n+    it('--releaseCommitMessageFormat', function () {\n+      commit('feat: another commit addresses issue #1')\n+      execCli('--releaseCommitMessageFormat=\"{{currentTag}} is the version.\"')\n+      shell.exec('git log --oneline -n1').should.include('1.1.0 is the version.')\n+    })\n+\n+    it('[LEGACY] supports --message (and single %s replacement)', function () {\n+      commit('feat: another commit addresses issue #1')\n+      execCli('--message=\"V:%s\"')\n+      shell.exec('git log --oneline -n1').should.include('V:1.1.0')\n+    })\n+\n+    it('[LEGACY] supports -m (and multiple %s replacements)', function () {\n+      commit('feat: another commit addresses issue #1')\n+      execCli('--message=\"V:%s is the %s.\"')\n+      shell.exec('git log --oneline -n1').should.include('V:1.1.0 is the 1.1.0.')\n+    })\n+  })\n+\n+  describe('pre-major', () => {\n+    it('bumps the minor rather than major, if version < 1.0.0', function () {\n+      writePackageJson('0.5.0', {\n+        repository: {\n+          url: 'https://github.com/yargs/yargs.git'\n+        }\n+      })\n+      commit('feat!: this is a breaking change')\n+      execCli()\n+      getPackageVersion().should.equal('0.6.0')\n+    })\n+\n+    it('bumps major if --release-as=major specified, if version < 1.0.0', function () {\n+      writePackageJson('0.5.0', {\n+        repository: {\n+          url: 'https://github.com/yargs/yargs.git'\n+        }\n+      })\n+      commit('feat!: this is a breaking change')\n+      execCli('-r major')\n+      getPackageVersion().should.equal('1.0.0')\n+    })\n   })\n })\n"
  }, {
    "begin time" : "Sat Mar 16 00:00:00 CST 2019",
    "end time" : "Sun May 05 00:00:00 CST 2019",
    "description" : "### Bug Fixes* always pass version to changelog context ([#327](https://github.com/conventional-changelog/standard-version/issues/327)) ([00e3381](https://github.com/conventional-changelog/standard-version/commit/00e3381))* **deps:** update dependency detect-indent to v6 ([#341](https://github.com/conventional-changelog/standard-version/issues/341)) ([234d9dd](https://github.com/conventional-changelog/standard-version/commit/234d9dd))* **deps:** update dependency detect-newline to v3 ([#342](https://github.com/conventional-changelog/standard-version/issues/342)) ([02a6093](https://github.com/conventional-changelog/standard-version/commit/02a6093))* **deps:** update dependency figures to v3 ([#343](https://github.com/conventional-changelog/standard-version/issues/343)) ([7208ded](https://github.com/conventional-changelog/standard-version/commit/7208ded))* **deps:** update dependency semver to v6 ([#344](https://github.com/conventional-changelog/standard-version/issues/344)) ([c40487a](https://github.com/conventional-changelog/standard-version/commit/c40487a))* **deps:** update dependency yargs to v13 ([#345](https://github.com/conventional-changelog/standard-version/issues/345)) ([b2c8e59](https://github.com/conventional-changelog/standard-version/commit/b2c8e59))* prevent duplicate headers from being added ([#305](https://github.com/conventional-changelog/standard-version/issues/305)) ([#307](https://github.com/conventional-changelog/standard-version/issues/307)) ([db2c6e5](https://github.com/conventional-changelog/standard-version/commit/db2c6e5))### Build System* add renovate.json ([#273](https://github.com/conventional-changelog/standard-version/issues/273)) ([bf41474](https://github.com/conventional-changelog/standard-version/commit/bf41474))* drop Node 6 from testing matrix ([#346](https://github.com/conventional-changelog/standard-version/issues/346)) ([6718428](https://github.com/conventional-changelog/standard-version/commit/6718428))### Features* adds configurable conventionalcommits preset ([#323](https://github.com/conventional-changelog/standard-version/issues/323)) ([4fcd4a7](https://github.com/conventional-changelog/standard-version/commit/4fcd4a7))* allow a user to provide a custom changelog header ([#335](https://github.com/conventional-changelog/standard-version/issues/335)) ([1c51064](https://github.com/conventional-changelog/standard-version/commit/1c51064))* bump minor rather than major, if release is < 1.0.0 ([#347](https://github.com/conventional-changelog/standard-version/issues/347)) ([5d972cf](https://github.com/conventional-changelog/standard-version/commit/5d972cf))* suggest branch name other than master ([#331](https://github.com/conventional-changelog/standard-version/issues/331)) ([304b49a](https://github.com/conventional-changelog/standard-version/commit/304b49a))* update commit msg for when using commitAll ([#320](https://github.com/conventional-changelog/standard-version/issues/320)) ([74a040a](https://github.com/conventional-changelog/standard-version/commit/74a040a))### Tests* disable gpg signing in temporary test repositories. ([#311](https://github.com/conventional-changelog/standard-version/issues/311)) ([bd0fcdf](https://github.com/conventional-changelog/standard-version/commit/bd0fcdf))* use const based on new eslint rules ([#329](https://github.com/conventional-changelog/standard-version/issues/329)) ([b6d3d13](https://github.com/conventional-changelog/standard-version/commit/b6d3d13))### BREAKING CHANGES* we now bump the minor rather than major if version < 1.0.0; --release-as can be used to bump to 1.0.0.* tests are no longer run for Node 6* we now use the conventionalcommits preset by default, which directly tracks conventionalcommits.org.",
    "hunks" : "diff --git a/.eslintrc b/.eslintrc\nnew file mode 100644\nindex 0000000..42a52a6\n--- /dev/null\n+++ b/.eslintrc\n@@ -0,0 +1,6 @@\n+{\n+  \"extends\": \"standard\",\n+  \"rules\": {\n+    \"no-var\": \"error\"\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex bef5182..eeaeacd 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,10 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [5.0.2](https://github.com/conventional-changelog/standard-version/compare/v5.0.1...v5.0.2) (2019-03-16)\n+\n+\n+\n ## [5.0.1](https://github.com/conventional-changelog/standard-version/compare/v5.0.0...v5.0.1) (2019-02-28)\n \n \ndiff --git a/command.js b/command.js\nindex 3406cd0..23e3ab2 100755\n--- a/command.js\n+++ b/command.js\n@@ -1,4 +1,4 @@\n-var defaults = require('./defaults')\n+let defaults = require('./defaults')\n \n module.exports = require('yargs')\n   .usage('Usage: $0 [options]')\ndiff --git a/index.js b/index.js\nindex 8408def..956e1e8 100755\n--- a/index.js\n+++ b/index.js\n@@ -11,9 +11,9 @@\n   let pkg\n   bump.pkgFiles.forEach((filename) => {\n     if (pkg) return\n-    var pkgPath = path.resolve(process.cwd(), filename)\n+    let pkgPath = path.resolve(process.cwd(), filename)\n     try {\n-      var data = fs.readFileSync(pkgPath, 'utf8')\n+      let data = fs.readFileSync(pkgPath, 'utf8')\n       pkg = JSON.parse(data)\n     } catch (err) {}\n   })\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 11028c8..a62d770 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -14,7 +14,7 @@\n const stringifyPackage = require('stringify-package')\n const writeFile = require('../write-file')\n \n-var configsToUpdate = {}\n+let configsToUpdate = {}\n \n function Bump (args, version) {\n   // reset the cache of updated config files each\n@@ -22,7 +22,7 @@\n   configsToUpdate = {}\n \n   if (args.skip.bump) return Promise.resolve()\n-  var newVersion = version\n+  let newVersion = version\n   return runLifecycleScript(args, 'prerelease')\n     .then(runLifecycleScript.bind(this, args, 'prebump'))\n     .then((stdout) => {\n@@ -31,7 +31,7 @@\n     })\n     .then((release) => {\n       if (!args.firstRelease) {\n-        var releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n+        let releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n         newVersion = semver.valid(releaseType) || semver.inc(version, releaseType, args.prerelease)\n         updateConfigs(args, newVersion)\n       } else {\n@@ -100,7 +100,7 @@\n   return Array.isArray(semver.prerelease(version))\n }\n \n-var TypeList = ['major', 'minor', 'patch'].reverse()\n+let TypeList = ['major', 'minor', 'patch'].reverse()\n \n /**\n  * extract the in-pre-release type in target version\n@@ -109,8 +109,8 @@\n  * @return {string}\n  */\n function getCurrentActiveType (version) {\n-  var typelist = TypeList\n-  for (var i = 0; i < typelist.length; i++) {\n+  let typelist = TypeList\n+  for (let i = 0; i < typelist.length; i++) {\n     if (semver[typelist[i]](version)) {\n       return typelist[i]\n     }\n@@ -163,13 +163,13 @@\n   Object.keys(configsToUpdate).forEach(function (configPath) {\n     try {\n       if (dotgit.ignore(configPath)) return\n-      var stat = fs.lstatSync(configPath)\n+      let stat = fs.lstatSync(configPath)\n       if (stat.isFile()) {\n-        var data = fs.readFileSync(configPath, 'utf8')\n-        var indent = detectIndent(data).indent\n-        var newline = detectNewline(data)\n-        var config = JSON.parse(data)\n-        var filename = path.basename(configPath)\n+        let data = fs.readFileSync(configPath, 'utf8')\n+        let indent = detectIndent(data).indent\n+        let newline = detectNewline(data)\n+        let config = JSON.parse(data)\n+        let filename = path.basename(configPath)\n         checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n         config.version = newVersion\n         writeFile(args, configPath, stringifyPackage(config, indent, newline))\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex ed383d5..da47f54 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -20,17 +20,17 @@\n function outputChangelog (args, newVersion) {\n   return new Promise((resolve, reject) => {\n     createIfMissing(args)\n-    var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n-    var oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n+    let header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n+    let oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n     // find the position of the last release and remove header:\n     const changelogSectionRegExp = /<a name=|##? \\[?[0-9]+\\.[0-9]+\\.[0-9]+\\]?/\n     if (oldContent.search(changelogSectionRegExp) !== -1) {\n       oldContent = oldContent.substring(oldContent.search(changelogSectionRegExp))\n     }\n-    var content = ''\n-    var context\n+    let content = ''\n+    let context\n     if (args.dryRun) context = { version: newVersion }\n-    var changelogStream = conventionalChangelog({\n+    let changelogStream = conventionalChangelog({\n       debug: args.verbose && console.info.bind(console, 'conventional-changelog'),\n       preset: args.preset || 'angular',\n       tagPrefix: args.tagPrefix\ndiff --git a/lib/lifecycles/commit.js b/lib/lifecycles/commit.js\nindex c273949..7c7aa6a 100644\n--- a/lib/lifecycles/commit.js\n+++ b/lib/lifecycles/commit.js\n@@ -18,10 +18,10 @@\n }\n \n function execCommit (args, newVersion) {\n-  var msg = 'committing %s'\n-  var paths = [args.infile]\n-  var verify = args.verify === false || args.n ? '--no-verify ' : ''\n-  var toAdd = ''\n+  let msg = 'committing %s'\n+  let paths = [args.infile]\n+  let verify = args.verify === false || args.n ? '--no-verify ' : ''\n+  let toAdd = ''\n   // commit any of the config files that we've updated\n   // the version # for.\n   Object.keys(bump.getUpdatedConfigs()).forEach(function (p) {\n@@ -31,6 +31,12 @@\n       toAdd += ' ' + path.relative(process.cwd(), p)\n     }\n   })\n+\n+  if (args.commitAll) {\n+    msg += ' and %s'\n+    paths.push('all staged files')\n+  }\n+\n   checkpoint(args, msg, paths)\n   return runExec(args, 'git add' + toAdd + ' ' + args.infile)\n     .then(() => {\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex f59aedf..a7b4019 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -17,7 +17,7 @@\n }\n \n function execTag (newVersion, pkgPrivate, args) {\n-  var tagOption\n+  let tagOption\n   if (args.sign) {\n     tagOption = '-s '\n   } else {\n@@ -26,7 +26,7 @@\n   checkpoint(args, 'tagging release %s%s', [args.tagPrefix, newVersion])\n   return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n     .then(() => {\n-      var message = 'git push --follow-tags origin master'\n+      let message = 'git push --follow-tags origin master'\n       if (pkgPrivate !== true) {\n         message += ' && npm publish'\n         if (args.prerelease !== undefined) {\ndiff --git a/lib/run-lifecycle-hook.js b/lib/run-lifecycle-hook.js\nindex 17efd33..9c0dc2c 100644\n--- a/lib/run-lifecycle-hook.js\n+++ b/lib/run-lifecycle-hook.js\n@@ -5,7 +5,7 @@\n \n module.exports = function (args, hookName, newVersion, hooks, cb) {\n   if (!hooks[hookName]) return Promise.resolve()\n-  var command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n+  let command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n   checkpoint(args, 'Running lifecycle hook \"%s\"', [hookName])\n   checkpoint(args, '- hook command: \"%s\"', [command], chalk.blue(figures.info))\n   return runExec(args, command)\ndiff --git a/lib/run-lifecycle-script.js b/lib/run-lifecycle-script.js\nindex a501448..7a9b2a2 100644\n--- a/lib/run-lifecycle-script.js\n+++ b/lib/run-lifecycle-script.js\n@@ -6,7 +6,7 @@\n module.exports = function (args, hookName) {\n   const scripts = args.scripts\n   if (!scripts || !scripts[hookName]) return Promise.resolve()\n-  var command = scripts[hookName]\n+  let command = scripts[hookName]\n   checkpoint(args, 'Running lifecycle script \"%s\"', [hookName])\n   checkpoint(args, '- execute command: \"%s\"', [command], chalk.blue(figures.info))\n   return runExec(args, command)\ndiff --git a/package.json b/package.json\nindex e7c39bf..8a19460 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,10 +1,10 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"5.0.1\",\n+  \"version\": \"5.0.2\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n-    \"pretest\": \"standard\",\n+    \"pretest\": \"eslint .\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n     \"test\": \"nyc mocha --timeout=20000 test.js\",\n     \"release\": \"bin/cli.js\"\n@@ -54,11 +54,16 @@\n   \"devDependencies\": {\n     \"chai\": \"^3.5.0\",\n     \"coveralls\": \"^3.0.1\",\n+    \"eslint\": \"^5.16.0\",\n+    \"eslint-config-standard\": \"^12.0.0\",\n+    \"eslint-plugin-import\": \"^2.16.0\",\n+    \"eslint-plugin-node\": \"^8.0.1\",\n+    \"eslint-plugin-promise\": \"^4.0.1\",\n+    \"eslint-plugin-standard\": \"^4.0.0\",\n     \"mocha\": \"^5.2.0\",\n     \"mock-git\": \"^1.0.3\",\n     \"mockery\": \"^2.0.0\",\n     \"nyc\": \"^13.3.0\",\n-    \"shelljs\": \"^0.7.8\",\n-    \"standard\": \"^12.0.1\"\n+    \"shelljs\": \"^0.7.8\"\n   }\n }\ndiff --git a/test.js b/test.js\nindex 88126d4..363d07f 100644\n--- a/test.js\n+++ b/test.js\n@@ -15,7 +15,7 @@\n \n require('chai').should()\n \n-var cliPath = path.resolve(__dirname, './bin/cli.js')\n+let cliPath = path.resolve(__dirname, './bin/cli.js')\n \n function branch (branch) {\n   shell.exec('git branch ' + branch)\n@@ -43,31 +43,31 @@\n \n function writePackageJson (version, option) {\n   option = option || {}\n-  var pkg = Object.assign(option, { version: version })\n+  let pkg = Object.assign(option, { version: version })\n   fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n }\n \n function writeBowerJson (version, option) {\n   option = option || {}\n-  var bower = Object.assign(option, { version: version })\n+  let bower = Object.assign(option, { version: version })\n   fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n }\n \n function writeManifestJson (version, option) {\n   option = option || {}\n-  var manifest = Object.assign(option, { version: version })\n+  let manifest = Object.assign(option, { version: version })\n   fs.writeFileSync('manifest.json', JSON.stringify(manifest), 'utf-8')\n }\n \n function writeNpmShrinkwrapJson (version, option) {\n   option = option || {}\n-  var shrinkwrap = Object.assign(option, { version: version })\n+  let shrinkwrap = Object.assign(option, { version: version })\n   fs.writeFileSync('npm-shrinkwrap.json', JSON.stringify(shrinkwrap), 'utf-8')\n }\n \n function writePackageLockJson (version, option) {\n   option = option || {}\n-  var pkgLock = Object.assign(option, { version: version })\n+  let pkgLock = Object.assign(option, { version: version })\n   fs.writeFileSync('package-lock.json', JSON.stringify(pkgLock), 'utf-8')\n }\n \n@@ -82,7 +82,7 @@\n \n function writeHook (hookName, causeError, script) {\n   shell.mkdir('-p', 'scripts')\n-  var content = script || 'console.error(\"' + hookName + ' ran\")'\n+  let content = script || 'console.error(\"' + hookName + ' ran\")'\n   content += causeError ? '\\nthrow new Error(\"' + hookName + '-failure\")' : ''\n   fs.writeFileSync('scripts/' + hookName + '.js', content, 'utf-8')\n   fs.chmodSync('scripts/' + hookName + '.js', '755')\n@@ -131,7 +131,7 @@\n \n       execCli().code.should.equal(0)\n \n-      var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n       content.should.not.match(/first commit/)\n     })\n@@ -143,7 +143,7 @@\n       commit('fix: patch release')\n       execCli('--first-release').code.should.equal(0)\n \n-      var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n       content.should.match(/first commit/)\n       shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n@@ -159,7 +159,7 @@\n       commit('fix: patch release')\n \n       execCli().code.should.equal(0)\n-      var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/1\\.0\\.1/)\n       content.should.not.match(/legacy header format/)\n     })\n@@ -177,8 +177,8 @@\n \n       execCli('--commit-all').code.should.equal(0)\n \n-      var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n-      var status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n+      let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      let status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n \n       status.should.equal('')\n       status.should.not.match(/STUFF.md/)\n@@ -195,7 +195,7 @@\n         .then(function (unmock) {\n           execCli('--sign').code.should.equal(0)\n \n-          var captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n+          let captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n             return line ? JSON.parse(line) : line\n           })\n           captured[captured.length - 3].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n@@ -209,7 +209,7 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n         .then(function (unmock) {\n-          var result = execCli()\n+          let result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/commit yourself/)\n \n@@ -221,7 +221,7 @@\n       // mock git by throwing on attempt to add\n       return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n         .then(function (unmock) {\n-          var result = execCli()\n+          let result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/addition is hard/)\n \n@@ -233,7 +233,7 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n         .then(function (unmock) {\n-          var result = execCli()\n+          let result = execCli()\n           result.code.should.equal(1)\n           result.stderr.should.match(/tag, you're it/)\n \n@@ -247,7 +247,7 @@\n         .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n-          var result = execCli()\n+          let result = execCli()\n           result.code.should.equal(0)\n           result.stderr.should.match(/haha, kidding, this is just a warning/)\n \n@@ -270,7 +270,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/prerelease ran/)\n       })\n@@ -287,7 +287,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/prerelease ran/)\n       })\n@@ -306,7 +306,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.stdout.should.match(/9\\.9\\.9/)\n         result.code.should.equal(0)\n       })\n@@ -325,7 +325,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/postbump ran/)\n       })\n@@ -342,7 +342,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/postbump-failure/)\n       })\n@@ -361,7 +361,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(0)\n         result.stderr.should.match(/precommit ran/)\n       })\n@@ -378,7 +378,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(1)\n         result.stderr.should.match(/precommit-failure/)\n       })\n@@ -395,7 +395,7 @@\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n         commit('feat: first commit')\n-        var result = execCli('--patch')\n+        let result = execCli('--patch')\n         result.code.should.equal(0)\n         shell.exec('git log --oneline -n1').should.match(/delivers #222/)\n       })\n@@ -450,11 +450,11 @@\n     })\n \n     describe('release-types', function () {\n-      var regularTypes = ['major', 'minor', 'patch']\n+      let regularTypes = ['major', 'minor', 'patch']\n \n       regularTypes.forEach(function (type) {\n         it('creates a ' + type + ' release', function () {\n-          var originVer = '1.0.0'\n+          let originVer = '1.0.0'\n           writePackageJson(originVer)\n           fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -462,7 +462,7 @@\n \n           return execCliAsync('--release-as ' + type)\n             .then(function () {\n-              var version = {\n+              let version = {\n                 major: semver.major(originVer),\n                 minor: semver.minor(originVer),\n                 patch: semver.patch(originVer)\n@@ -478,7 +478,7 @@\n       // this is for pre-releases\n       regularTypes.forEach(function (type) {\n         it('creates a pre' + type + ' release', function () {\n-          var originVer = '1.0.0'\n+          let originVer = '1.0.0'\n           writePackageJson(originVer)\n           fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -486,7 +486,7 @@\n \n           return execCliAsync('--release-as ' + type + ' --prerelease ' + type)\n             .then(function () {\n-              var version = {\n+              let version = {\n                 major: semver.major(originVer),\n                 minor: semver.minor(originVer),\n                 patch: semver.patch(originVer)\n@@ -502,7 +502,7 @@\n \n     describe('release-as-exact', function () {\n       it('releases as v100.0.0', function () {\n-        var originVer = '1.0.0'\n+        let originVer = '1.0.0'\n         writePackageJson(originVer)\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -515,7 +515,7 @@\n       })\n \n       it('releases as 200.0.0-amazing', function () {\n-        var originVer = '1.0.0'\n+        let originVer = '1.0.0'\n         writePackageJson(originVer)\n         fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n@@ -581,7 +581,7 @@\n \n     execCli().code.should.equal(0)\n \n-    var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n     content.should.match(/this is my fairly long commit message which is testing whether or not we allow for long commit messages/)\n   })\n \n@@ -601,45 +601,45 @@\n   it('appends line feed at end of package.json', function () {\n     execCli().code.should.equal(0)\n \n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves indentation of tabs in package.json', function () {\n-    var indentation = '\\t'\n-    var newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    let indentation = '\\t'\n+    let newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves indentation of spaces in package.json', function () {\n-    var indentation = '     '\n-    var newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    let indentation = '     '\n+    let newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves line feed in package.json', function () {\n-    var newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    let newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n   it('preserves carriage return + line feed in package.json', function () {\n-    var newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n+    let newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n     fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n \n     execCli().code.should.equal(0)\n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\r\\n'))\n   })\n \n@@ -653,7 +653,7 @@\n   })\n \n   it('does not print output when the --silent flag is passed', function () {\n-    var result = execCli('--silent')\n+    let result = execCli('--silent')\n     result.code.should.equal(0)\n     result.stdout.should.equal('')\n     result.stderr.should.equal('')\n@@ -662,13 +662,25 @@\n   it('does not display `npm publish` if the package is private', function () {\n     writePackageJson('1.0.0', { private: true })\n \n-    var result = execCli()\n+    let result = execCli()\n     result.code.should.equal(0)\n     result.stdout.should.not.match(/npm publish/)\n   })\n \n+  it('does not display `all staged files` without the --commit-all flag', function () {\n+    var result = execCli()\n+    result.code.should.equal(0)\n+    result.stdout.should.not.match(/and all staged files/)\n+  })\n+\n+  it('does display `all staged files` if the --commit-all flag is passed', function () {\n+    var result = execCli('--commit-all')\n+    result.code.should.equal(0)\n+    result.stdout.should.match(/and all staged files/)\n+  })\n+\n   it('includes merge commits', function () {\n-    var branchName = 'new-feature'\n+    let branchName = 'new-feature'\n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     branch(branchName)\n@@ -679,10 +691,10 @@\n \n     execCli().code.should.equal(0)\n \n-    var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n     content.should.match(/new feature from branch/)\n \n-    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    let pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.1.0\"', '}', ''].join('\\n'))\n   })\n \n@@ -694,7 +706,7 @@\n     })\n \n     commit('feat: first commit')\n-    var result = execCli()\n+    let result = execCli()\n     result.code.should.equal(1)\n     result.stderr.should.match(/scripts must be an object/)\n   })\n@@ -707,7 +719,7 @@\n     })\n \n     commit('feat: first commit')\n-    var result = execCli()\n+    let result = execCli()\n     result.code.should.equal(1)\n     result.stderr.should.match(/skip must be an object/)\n   })\n@@ -747,7 +759,7 @@\n     beforeEach(function () {\n       mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n       mockery.registerMock('conventional-changelog', function () {\n-        var readable = new stream.Readable({ objectMode: true })\n+        let readable = new stream.Readable({ objectMode: true })\n         readable._read = function () {\n         }\n         setImmediate(readable.emit.bind(readable), 'error', new Error('changelog err'))\n@@ -894,7 +906,7 @@\n       return execCliAsync('--skip.bump true --skip.changelog true')\n         .then(function () {\n           getPackageVersion().should.equal('1.0.0')\n-          var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n           content.should.equal(changelogContent)\n         })\n     })\n@@ -908,7 +920,7 @@\n       return execCliAsync('--skip.commit true')\n         .then(function () {\n           getPackageVersion().should.equal('1.1.0')\n-          var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          let content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n           content.should.match(/new feature from branch/)\n           // check last commit message\n           shell.exec('git log --oneline -n1').stdout.should.match(/feat: new feature from branch/)\n"
  }, {
    "begin time" : "Thu Feb 28 00:00:00 CST 2019",
    "end time" : "Sat Mar 16 00:00:00 CST 2019",
    "description" : "",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 6e6a36f..bef5182 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,15 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+## [5.0.1](https://github.com/conventional-changelog/standard-version/compare/v5.0.0...v5.0.1) (2019-02-28)\n+\n+\n+### Bug Fixes\n+\n+* make pattern for finding CHANGELOG sections work for non anchors ([#292](https://github.com/conventional-changelog/standard-version/issues/292)) ([b684c78](https://github.com/conventional-changelog/standard-version/commit/b684c78))\n+\n+\n+\n # [5.0.0](https://github.com/conventional-changelog/standard-version/compare/v4.4.0...v5.0.0) (2019-02-14)\n \n \ndiff --git a/package.json b/package.json\nindex 7f7e843..164781d 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"5.0.0\",\n+  \"version\": \"5.0.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n"
  }, {
    "begin time" : "Thu Feb 14 00:00:00 CST 2019",
    "end time" : "Thu Feb 28 00:00:00 CST 2019",
    "description" : "### Bug Fixes* make pattern for finding CHANGELOG sections work for non anchors ([#292](https://github.com/conventional-changelog/standard-version/issues/292)) ([b684c78](https://github.com/conventional-changelog/standard-version/commit/b684c78))",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c5af903..6e6a36f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,36 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+# [5.0.0](https://github.com/conventional-changelog/standard-version/compare/v4.4.0...v5.0.0) (2019-02-14)\n+\n+\n+### Bug Fixes\n+\n+* bin now enforces Node.js > 4 ([#274](https://github.com/conventional-changelog/standard-version/issues/274)) ([e1b5780](https://github.com/conventional-changelog/standard-version/commit/e1b5780))\n+* no --tag prerelease for private module ([#296](https://github.com/conventional-changelog/standard-version/issues/296)) ([27e2ab4](https://github.com/conventional-changelog/standard-version/commit/27e2ab4)), closes [#294](https://github.com/conventional-changelog/standard-version/issues/294)\n+* show correct pre-release tag in help output ([#259](https://github.com/conventional-changelog/standard-version/issues/259)) ([d90154a](https://github.com/conventional-changelog/standard-version/commit/d90154a))\n+\n+\n+### chore\n+\n+* update testing matrix ([1d46627](https://github.com/conventional-changelog/standard-version/commit/1d46627))\n+\n+\n+### Features\n+\n+* adds support for bumping for composer versions ([#262](https://github.com/conventional-changelog/standard-version/issues/262)) ([fee872f](https://github.com/conventional-changelog/standard-version/commit/fee872f))\n+* cli application accept path/preset option ([#279](https://github.com/conventional-changelog/standard-version/issues/279)) ([69c62cf](https://github.com/conventional-changelog/standard-version/commit/69c62cf))\n+* fallback to tags if no meta-information file found ([#275](https://github.com/conventional-changelog/standard-version/issues/275)) ([844cde6](https://github.com/conventional-changelog/standard-version/commit/844cde6))\n+* preserve formatting when writing to package.json ([#282](https://github.com/conventional-changelog/standard-version/issues/282)) ([96216da](https://github.com/conventional-changelog/standard-version/commit/96216da))\n+\n+\n+### BREAKING CHANGES\n+\n+* if no package.json, bower.json, etc., is found, we now fallback to git tags\n+* removed Node 4/5 from testing matrix\n+\n+\n+\n <a name=\"4.4.0\"></a>\n # [4.4.0](https://github.com/conventional-changelog/standard-version/compare/v4.3.0...v4.4.0) (2018-05-21)\n \ndiff --git a/README.md b/README.md\nindex f5ff0f7..956efb9 100644\n--- a/README.md\n+++ b/README.md\n@@ -230,6 +230,16 @@\n standard-version --dry-run\n ```\n \n+### Prefix Tags\n+\n+If you would like to prefix your tags with something, you can do so with the `-t` flag.\n+\n+```sh\n+standard-version -t @scope/package\\@\n+```\n+\n+This will prefix your tags to look something like `@scope/package@2.0.0`\n+\n ### CLI Help\n \n ```sh\ndiff --git a/command.js b/command.js\nindex 095f965..3406cd0 100755\n--- a/command.js\n+++ b/command.js\n@@ -77,6 +77,15 @@\n     default: defaults.gitTagFallback,\n     describe: `fallback to git tags for version, if no meta-information file is found (e.g., package.json)`\n   })\n+  .option('path', {\n+    type: 'string',\n+    describe: 'Only populate commits made under this path'\n+  })\n+  .option('preset', {\n+    type: 'string',\n+    default: defaults.preset,\n+    describe: 'Commit message guideline preset (default: angular)'\n+  })\n   .check((argv) => {\n     if (typeof argv.scripts !== 'object' || Array.isArray(argv.scripts)) {\n       throw Error('scripts must be an object')\ndiff --git a/defaults.json b/defaults.json\nindex b70e546..17035be 100644\n--- a/defaults.json\n+++ b/defaults.json\n@@ -10,5 +10,6 @@\n   \"scripts\": {},\n   \"skip\": {},\n   \"dryRun\": false,\n-  \"gitTagFallback\": true\n+  \"gitTagFallback\": true,\n+  \"preset\": \"angular\"\n }\ndiff --git a/index.js b/index.js\nindex d8432b0..8408def 100755\n--- a/index.js\n+++ b/index.js\n@@ -1,10 +1,10 @@\n-const latestSemverTag = require('./lib/latest-semver-tag')\n-const path = require('path')\n-const printError = require('./lib/print-error')\n-\n const bump = require('./lib/lifecycles/bump')\n const changelog = require('./lib/lifecycles/changelog')\n const commit = require('./lib/lifecycles/commit')\n+const fs = require('fs')\n+const latestSemverTag = require('./lib/latest-semver-tag')\n+const path = require('path')\n+const printError = require('./lib/print-error')\n const tag = require('./lib/lifecycles/tag')\n \n module.exports = function standardVersion (argv) {\n@@ -13,7 +13,8 @@\n     if (pkg) return\n     var pkgPath = path.resolve(process.cwd(), filename)\n     try {\n-      pkg = require(pkgPath)\n+      var data = fs.readFileSync(pkgPath, 'utf8')\n+      pkg = JSON.parse(data)\n     } catch (err) {}\n   })\n   let newVersion\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 7fa0857..11028c8 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -3,12 +3,15 @@\n const chalk = require('chalk')\n const checkpoint = require('../checkpoint')\n const conventionalRecommendedBump = require('conventional-recommended-bump')\n+const detectIndent = require('detect-indent')\n+const detectNewline = require('detect-newline')\n const figures = require('figures')\n const fs = require('fs')\n const DotGitignore = require('dotgitignore')\n const path = require('path')\n const runLifecycleScript = require('../run-lifecycle-script')\n const semver = require('semver')\n+const stringifyPackage = require('stringify-package')\n const writeFile = require('../write-file')\n \n var configsToUpdate = {}\n@@ -24,7 +27,7 @@\n     .then(runLifecycleScript.bind(this, args, 'prebump'))\n     .then((stdout) => {\n       if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n-      return bumpVersion(args.releaseAs)\n+      return bumpVersion(args.releaseAs, args)\n     })\n     .then((release) => {\n       if (!args.firstRelease) {\n@@ -125,7 +128,7 @@\n   return TypeList.indexOf(type)\n }\n \n-function bumpVersion (releaseAs, callback) {\n+function bumpVersion (releaseAs, args) {\n   return new Promise((resolve, reject) => {\n     if (releaseAs) {\n       return resolve({\n@@ -133,7 +136,9 @@\n       })\n     } else {\n       conventionalRecommendedBump({\n-        preset: 'angular'\n+        debug: args.verbose && console.info.bind(console, 'conventional-recommended-bump'),\n+        preset: args.preset || 'angular',\n+        path: args.path\n       }, function (err, release) {\n         if (err) return reject(err)\n         else return resolve(release)\n@@ -160,11 +165,14 @@\n       if (dotgit.ignore(configPath)) return\n       var stat = fs.lstatSync(configPath)\n       if (stat.isFile()) {\n-        var config = require(configPath)\n+        var data = fs.readFileSync(configPath, 'utf8')\n+        var indent = detectIndent(data).indent\n+        var newline = detectNewline(data)\n+        var config = JSON.parse(data)\n         var filename = path.basename(configPath)\n         checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n         config.version = newVersion\n-        writeFile(args, configPath, JSON.stringify(config, null, 2) + '\\n')\n+        writeFile(args, configPath, stringifyPackage(config, indent, newline))\n         // flag any config files that we modify the version # for\n         // as having been updated.\n         configsToUpdate[configPath] = true\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex 084914d..fb2e0f9 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -30,9 +30,10 @@\n     var context\n     if (args.dryRun) context = { version: newVersion }\n     var changelogStream = conventionalChangelog({\n-      preset: 'angular',\n+      debug: args.verbose && console.info.bind(console, 'conventional-changelog'),\n+      preset: args.preset || 'angular',\n       tagPrefix: args.tagPrefix\n-    }, context, { merges: null })\n+    }, context, { merges: null, path: args.path })\n       .on('error', function (err) {\n         return reject(err)\n       })\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex fc41acb..f59aedf 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -27,12 +27,14 @@\n   return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n     .then(() => {\n       var message = 'git push --follow-tags origin master'\n-      if (pkgPrivate !== true) message += ' && npm publish'\n-      if (args.prerelease !== undefined) {\n-        if (args.prerelease === '') {\n-          message += ' --tag prerelease'\n-        } else {\n-          message += ' --tag ' + args.prerelease\n+      if (pkgPrivate !== true) {\n+        message += ' && npm publish'\n+        if (args.prerelease !== undefined) {\n+          if (args.prerelease === '') {\n+            message += ' --tag prerelease'\n+          } else {\n+            message += ' --tag ' + args.prerelease\n+          }\n         }\n       }\n \ndiff --git a/package.json b/package.json\nindex 4e840f1..7f7e843 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"4.4.0\",\n+  \"version\": \"5.0.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -39,13 +39,16 @@\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n     \"chalk\": \"^2.4.1\",\n-    \"conventional-changelog\": \"^3.0.5\",\n+    \"conventional-changelog\": \"^3.0.6\",\n     \"conventional-recommended-bump\": \"^4.0.4\",\n+    \"detect-indent\": \"^5.0.0\",\n+    \"detect-newline\": \"^2.1.0\",\n     \"dotgitignore\": \"^1.0.3\",\n     \"figures\": \"^2.0.0\",\n     \"fs-access\": \"^1.0.0\",\n     \"git-semver-tags\": \"^2.0.2\",\n     \"semver\": \"^5.2.0\",\n+    \"stringify-package\": \"^1.0.0\",\n     \"yargs\": \"^12.0.2\"\n   },\n   \"devDependencies\": {\n@@ -54,7 +57,7 @@\n     \"mocha\": \"^5.2.0\",\n     \"mock-git\": \"^1.0.3\",\n     \"mockery\": \"^2.0.0\",\n-    \"nyc\": \"^13.1.0\",\n+    \"nyc\": \"^13.3.0\",\n     \"shelljs\": \"^0.7.8\",\n     \"standard\": \"^12.0.1\"\n   }\ndiff --git a/test.js b/test.js\nindex ec891f9..88126d4 100644\n--- a/test.js\n+++ b/test.js\n@@ -95,16 +95,6 @@\n   shell.cd('tmp')\n   shell.exec('git init')\n   commit('root-commit')\n-  ;['package.json',\n-    'manifest.json',\n-    'bower.json'\n-  ].forEach(metadata => {\n-    try {\n-      delete require.cache[require.resolve(path.join(process.cwd(), metadata))]\n-    } catch (err) {\n-      // we haven't loaded the metadata file yet.\n-    }\n-  })\n   writePackageJson('1.0.0')\n }\n \n@@ -440,6 +430,14 @@\n       commit('feat: first commit')\n       execCli('--prerelease alpha').stdout.should.include('--tag alpha')\n     })\n+\n+    it('does not advise use of --tag prerelease for private modules', function () {\n+      writePackageJson('1.0.0', { private: true })\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('feat: first commit')\n+      execCli('--prerelease').stdout.should.not.include('--tag prerelease')\n+    })\n   })\n \n   describe('manual-release', function () {\n@@ -607,6 +605,44 @@\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n \n+  it('preserves indentation of tabs in package.json', function () {\n+    var indentation = '\\t'\n+    var newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n+\n+    execCli().code.should.equal(0)\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n+  })\n+\n+  it('preserves indentation of spaces in package.json', function () {\n+    var indentation = '     '\n+    var newPkgJson = ['{', indentation + '\"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n+\n+    execCli().code.should.equal(0)\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', indentation + '\"version\": \"1.0.1\"', '}', ''].join('\\n'))\n+  })\n+\n+  it('preserves line feed in package.json', function () {\n+    var newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\n')\n+    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n+\n+    execCli().code.should.equal(0)\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n+  })\n+\n+  it('preserves carriage return + line feed in package.json', function () {\n+    var newPkgJson = ['{', '  \"version\": \"1.0.0\"', '}', ''].join('\\r\\n')\n+    fs.writeFileSync('package.json', newPkgJson, 'utf-8')\n+\n+    execCli().code.should.equal(0)\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\r\\n'))\n+  })\n+\n   it('does not run git hooks if the --no-verify flag is passed', function () {\n     writeGitPreCommitHook()\n \n"
  }, {
    "begin time" : "Mon May 21 00:00:00 CST 2018",
    "end time" : "Thu Feb 14 00:00:00 CST 2019",
    "description" : "### Bug Fixes* bin now enforces Node.js > 4 ([#274](https://github.com/conventional-changelog/standard-version/issues/274)) ([e1b5780](https://github.com/conventional-changelog/standard-version/commit/e1b5780))* no --tag prerelease for private module ([#296](https://github.com/conventional-changelog/standard-version/issues/296)) ([27e2ab4](https://github.com/conventional-changelog/standard-version/commit/27e2ab4)), closes [#294](https://github.com/conventional-changelog/standard-version/issues/294)* show correct pre-release tag in help output ([#259](https://github.com/conventional-changelog/standard-version/issues/259)) ([d90154a](https://github.com/conventional-changelog/standard-version/commit/d90154a))### chore* update testing matrix ([1d46627](https://github.com/conventional-changelog/standard-version/commit/1d46627))### Features* adds support for bumping for composer versions ([#262](https://github.com/conventional-changelog/standard-version/issues/262)) ([fee872f](https://github.com/conventional-changelog/standard-version/commit/fee872f))* cli application accept path/preset option ([#279](https://github.com/conventional-changelog/standard-version/issues/279)) ([69c62cf](https://github.com/conventional-changelog/standard-version/commit/69c62cf))* fallback to tags if no meta-information file found ([#275](https://github.com/conventional-changelog/standard-version/issues/275)) ([844cde6](https://github.com/conventional-changelog/standard-version/commit/844cde6))* preserve formatting when writing to package.json ([#282](https://github.com/conventional-changelog/standard-version/issues/282)) ([96216da](https://github.com/conventional-changelog/standard-version/commit/96216da))### BREAKING CHANGES* if no package.json, bower.json, etc., is found, we now fallback to git tags* removed Node 4/5 from testing matrix<a name=\"4.4.0\"></a>",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nindex bab1008..5960012 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,7 +1,7 @@\n language: node_js\n node_js:\n-  - \"4\"\n-  - \"5\"\n+  - \"6\"\n+  - \"10\"\n   - \"stable\"\n before_script:\n   - git config --global user.name 'Travis-CI'\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex cec6fb0..c5af903 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,23 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"4.4.0\"></a>\n+# [4.4.0](https://github.com/conventional-changelog/standard-version/compare/v4.3.0...v4.4.0) (2018-05-21)\n+\n+\n+### Bug Fixes\n+\n+* show full tag name in checkpoint ([#241](https://github.com/conventional-changelog/standard-version/issues/241)) ([b4ed4f9](https://github.com/conventional-changelog/standard-version/commit/b4ed4f9))\n+* use tagPrefix in CHANGELOG lifecycle step ([#243](https://github.com/conventional-changelog/standard-version/issues/243)) ([a56c7ac](https://github.com/conventional-changelog/standard-version/commit/a56c7ac))\n+\n+\n+### Features\n+\n+* add prerelease lifecycle script hook (closes [#217](https://github.com/conventional-changelog/standard-version/issues/217)) ([#234](https://github.com/conventional-changelog/standard-version/issues/234)) ([ba4e7f6](https://github.com/conventional-changelog/standard-version/commit/ba4e7f6))\n+* manifest.json support ([#236](https://github.com/conventional-changelog/standard-version/issues/236)) ([371d992](https://github.com/conventional-changelog/standard-version/commit/371d992))\n+\n+\n+\n <a name=\"4.3.0\"></a>\n # [4.3.0](https://github.com/conventional-changelog/standard-version/compare/v4.2.0...v4.3.0) (2018-01-03)\n \ndiff --git a/README.md b/README.md\nindex 41c059c..f5ff0f7 100644\n--- a/README.md\n+++ b/README.md\n@@ -8,23 +8,23 @@\n \n _Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n \n-> stop using `npm version`, use `standard-version` it rocks!\n \n-Automatic versioning and CHANGELOG generation, using GitHub's squash button and\n+Automate versioning and CHANGELOG generation, with [semver](https://semver.org/) and\n [conventional commit messages](https://conventionalcommits.org).\n \n _how it works:_\n \n 1. when you land commits on your `master` branch, select the _Squash and Merge_ option.\n 2. add a title and body that follows the [Conventional Commits Specification](https://conventionalcommits.org).\n-3. when you're ready to release to npm:\n+3. when you're ready to release:\n   1. `git checkout master; git pull origin master`\n   2. run `standard-version`\n   3. `git push --follow-tags origin master && npm publish`\n+     _(or, `docker push`, `gem push`, etc.)_\n \n `standard-version` does the following:\n \n-1. bumps the version in _package.json/bower.json_ (based on your commit history)\n+1. bumps the version in metadata files (package.json, composer.json, etc).\n 2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md_\n 3. commits _package.json (et al.)_ and _CHANGELOG.md_\n 4. tags a new release\n@@ -159,6 +159,9 @@\n own supplementary commands during the release. The following\n hooks are available and execute in the order documented:\n \n+* `prerelease`: executed before anything happens. If the `prerelease` script returns a\n+  non-zero exit code, versioning will be aborted, but it has no other effect on the\n+  process.\n * `prebump`/`postbump`: executed before and after the version is bumped. If the `prebump`\n   script returns a version #, it will be used rather than\n   the version calculated by `standard-version`.\n@@ -178,6 +181,19 @@\n }\n ```\n \n+As an example to change from using GitHub to track your items to using your projects Jira use a\n+`postchangelog` script to replace the url fragment containing 'https://github.com/`myproject`/issues/'\n+with a link to your Jira - assuming you have already installed [replace](https://www.npmjs.com/package/replace)\n+```json\n+{\n+  \"standard-version\": {\n+    \"scripts\": {\n+      \"postchangelog\": \"replace 'https://github.com/myproject/issues/' 'https://myjira/browse/' CHANGELOG.md\"\n+    }\n+  }\n+}\n+```\n+\n ### Skipping lifecycle steps\n \n You can skip any of the lifecycle steps (`bump`, `changelog`, `commit`, `tag`),\n@@ -229,18 +245,18 @@\n to the console.\n \n ```js\n-var standardVersion = require('standard-version')\n+const standardVersion = require('standard-version')\n \n // Options are the same as command line, except camelCase\n+// standardVersion returns a Promise\n standardVersion({\n   noVerify: true,\n   infile: 'docs/CHANGELOG.md',\n   silent: true\n-}, function (err) {\n-  if (err) {\n-    console.error(`standard-version failed with message: ${err.message}`)\n-  }\n+}).then(() => {\n   // standard-version is done\n+}).catch(err => {\n+    console.error(`standard-version failed with message: ${err.message}`)\n })\n ```\n \n@@ -292,7 +308,7 @@\n \n [`semantic-release`](https://github.com/semantic-release/semantic-release) is a fully automated library/system for versioning, changelog generation, git tagging, and publishing to the npm registry.\n \n-`standard-version` is different because it handles the versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you still have to ability to review things and correct mistakes if you want to.\n+`standard-version` is different because it handles the versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you still have the ability to review things and correct mistakes if you want to.\n \n They are both based on the same foundation of structured commit messages (using [Angular format](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md)), but `standard-version` is a good choice for folks who are not yet comfortable letting publishes go out automatically. In this way, you can view `standard-version` as an incremental step to adopting `semantic-release`.\n \ndiff --git a/appveyor.yml b/appveyor.yml\nindex ec5ba45..3b190c9 100644\n--- a/appveyor.yml\n+++ b/appveyor.yml\n@@ -1,6 +1,6 @@\n environment:\n   matrix:\n-    - nodejs_version: '6'\n+    - nodejs_version: '10'\n install:\n   - ps: Install-Product node $env:nodejs_version\n   - git config --global user.name 'Appveyor'\ndiff --git a/bin/cli.js b/bin/cli.js\nindex 70ef2d6..d430c82 100755\n--- a/bin/cli.js\n+++ b/bin/cli.js\n@@ -1,11 +1,11 @@\n #!/usr/bin/env node\n-var standardVersion = require('../index')\n-var cmdParser = require('../command')\n \n /* istanbul ignore if */\n-if (process.version.match(/v(\\d+)\\./)[1] < 4) {\n-  console.error('standard-version: Node v4 or greater is required. `standard-version` did not run.')\n+if (process.version.match(/v(\\d+)\\./)[1] < 6) {\n+  console.error('standard-version: Node v6 or greater is required. `standard-version` did not run.')\n } else {\n+  const standardVersion = require('../index')\n+  const cmdParser = require('../command')\n   standardVersion(cmdParser.argv)\n     .catch(() => {\n       process.exit(1)\ndiff --git a/command.js b/command.js\nindex c571494..095f965 100755\n--- a/command.js\n+++ b/command.js\n@@ -72,6 +72,11 @@\n     default: defaults.dryRun,\n     describe: 'See the commands that running standard-version would run'\n   })\n+  .option('git-tag-fallback', {\n+    type: 'boolean',\n+    default: defaults.gitTagFallback,\n+    describe: `fallback to git tags for version, if no meta-information file is found (e.g., package.json)`\n+  })\n   .check((argv) => {\n     if (typeof argv.scripts !== 'object' || Array.isArray(argv.scripts)) {\n       throw Error('scripts must be an object')\ndiff --git a/defaults.json b/defaults.json\nindex 2834fb3..b70e546 100644\n--- a/defaults.json\n+++ b/defaults.json\n@@ -9,5 +9,6 @@\n   \"tagPrefix\": \"v\",\n   \"scripts\": {},\n   \"skip\": {},\n-  \"dryRun\": false\n+  \"dryRun\": false,\n+  \"gitTagFallback\": true\n }\ndiff --git a/index.js b/index.js\nindex b5936ee..d8432b0 100755\n--- a/index.js\n+++ b/index.js\n@@ -1,3 +1,4 @@\n+const latestSemverTag = require('./lib/latest-semver-tag')\n const path = require('path')\n const printError = require('./lib/print-error')\n \n@@ -7,15 +8,33 @@\n const tag = require('./lib/lifecycles/tag')\n \n module.exports = function standardVersion (argv) {\n-  var pkgPath = path.resolve(process.cwd(), './package.json')\n-  var pkg = require(pkgPath)\n-  var newVersion = pkg.version\n-  var defaults = require('./defaults')\n-  var args = Object.assign({}, defaults, argv)\n+  let pkg\n+  bump.pkgFiles.forEach((filename) => {\n+    if (pkg) return\n+    var pkgPath = path.resolve(process.cwd(), filename)\n+    try {\n+      pkg = require(pkgPath)\n+    } catch (err) {}\n+  })\n+  let newVersion\n+  let defaults = require('./defaults')\n+  let args = Object.assign({}, defaults, argv)\n \n   return Promise.resolve()\n     .then(() => {\n-      return bump(args, pkg)\n+      if (!pkg && args.gitTagFallback) {\n+        return latestSemverTag()\n+      } else if (!pkg) {\n+        throw new Error('no package file found')\n+      } else {\n+        return pkg.version\n+      }\n+    })\n+    .then(version => {\n+      newVersion = version\n+    })\n+    .then(() => {\n+      return bump(args, newVersion)\n     })\n     .then((_newVersion) => {\n       // if bump runs, it calculaes the new version that we\n@@ -27,7 +46,7 @@\n       return commit(args, newVersion)\n     })\n     .then(() => {\n-      return tag(newVersion, pkg.private, args)\n+      return tag(newVersion, pkg ? pkg.private : false, args)\n     })\n     .catch((err) => {\n       printError(args, err.message)\ndiff --git a/lib/latest-semver-tag.js b/lib/latest-semver-tag.js\nnew file mode 100644\nindex 0000000..7c63ec4\n--- /dev/null\n+++ b/lib/latest-semver-tag.js\n@@ -0,0 +1,15 @@\n+const gitSemverTags = require('git-semver-tags')\n+const semver = require('semver')\n+\n+module.exports = function () {\n+  return new Promise((resolve, reject) => {\n+    gitSemverTags(function (err, tags) {\n+      if (err) return reject(err)\n+      else if (!tags.length) return resolve('1.0.0')\n+      // ensure that the largest semver tag is at the head.\n+      tags = tags.map(tag => { return semver.clean(tag) })\n+      tags.sort(semver.rcompare)\n+      return resolve(tags[0])\n+    })\n+  })\n+}\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 4ab091c..7fa0857 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -13,22 +13,23 @@\n \n var configsToUpdate = {}\n \n-function Bump (args, pkg) {\n+function Bump (args, version) {\n   // reset the cache of updated config files each\n   // time we perform the version bump step.\n   configsToUpdate = {}\n \n   if (args.skip.bump) return Promise.resolve()\n-  var newVersion = pkg.version\n-  return runLifecycleScript(args, 'prebump')\n+  var newVersion = version\n+  return runLifecycleScript(args, 'prerelease')\n+    .then(runLifecycleScript.bind(this, args, 'prebump'))\n     .then((stdout) => {\n       if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n       return bumpVersion(args.releaseAs)\n     })\n     .then((release) => {\n       if (!args.firstRelease) {\n-        var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n-        newVersion = semver.valid(releaseType) || semver.inc(pkg.version, releaseType, args.prerelease)\n+        var releaseType = getReleaseType(args.prerelease, release.releaseType, version)\n+        newVersion = semver.valid(releaseType) || semver.inc(version, releaseType, args.prerelease)\n         updateConfigs(args, newVersion)\n       } else {\n         checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n@@ -46,6 +47,19 @@\n   return configsToUpdate\n }\n \n+Bump.pkgFiles = [\n+  'package.json',\n+  'bower.json',\n+  'manifest.json',\n+  'composer.json'\n+]\n+\n+Bump.lockFiles = [\n+  'package-lock.json',\n+  'npm-shrinkwrap.json',\n+  'composer.lock'\n+]\n+\n function getReleaseType (prerelease, expectedReleaseType, currentVersion) {\n   if (isString(prerelease)) {\n     if (isInPrerelease(currentVersion)) {\n@@ -138,10 +152,9 @@\n  */\n function updateConfigs (args, newVersion) {\n   const dotgit = DotGitignore()\n-  configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n-  configsToUpdate[path.resolve(process.cwd(), './package-lock.json')] = false\n-  configsToUpdate[path.resolve(process.cwd(), './npm-shrinkwrap.json')] = false\n-  configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n+  Bump.pkgFiles.concat(Bump.lockFiles).forEach((filename) => {\n+    configsToUpdate[path.resolve(process.cwd(), filename)] = false\n+  })\n   Object.keys(configsToUpdate).forEach(function (configPath) {\n     try {\n       if (dotgit.ignore(configPath)) return\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex 136f830..084914d 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -28,11 +28,11 @@\n     }\n     var content = ''\n     var context\n-    if (args.dryRun) context = {version: newVersion}\n+    if (args.dryRun) context = { version: newVersion }\n     var changelogStream = conventionalChangelog({\n       preset: 'angular',\n       tagPrefix: args.tagPrefix\n-    }, context, {merges: null})\n+    }, context, { merges: null })\n       .on('error', function (err) {\n         return reject(err)\n       })\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex c7dc531..fc41acb 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -23,12 +23,18 @@\n   } else {\n     tagOption = '-a '\n   }\n-  checkpoint(args, 'tagging release %s', [newVersion])\n+  checkpoint(args, 'tagging release %s%s', [args.tagPrefix, newVersion])\n   return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n     .then(() => {\n       var message = 'git push --follow-tags origin master'\n       if (pkgPrivate !== true) message += ' && npm publish'\n-      if (args.prerelease !== undefined) message += ' --tag prerelease'\n+      if (args.prerelease !== undefined) {\n+        if (args.prerelease === '') {\n+          message += ' --tag prerelease'\n+        } else {\n+          message += ' --tag ' + args.prerelease\n+        }\n+      }\n \n       checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n     })\ndiff --git a/lib/run-exec.js b/lib/run-exec.js\nindex 4ce3cb0..ffcd17d 100644\n--- a/lib/run-exec.js\n+++ b/lib/run-exec.js\n@@ -12,7 +12,7 @@\n         printError(args, stderr || err.message)\n         return reject(err)\n       } else if (stderr) {\n-        printError(args, stderr, {level: 'warn', color: 'yellow'})\n+        printError(args, stderr, { level: 'warn', color: 'yellow' })\n       }\n       return resolve(stdout)\n     })\ndiff --git a/package.json b/package.json\nindex 833340e..7de0690 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"4.3.0\",\n+  \"version\": \"4.4.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -38,23 +38,23 @@\n   },\n   \"homepage\": \"https://github.com/conventional-changelog/standard-version#readme\",\n   \"dependencies\": {\n-    \"chalk\": \"^1.1.3\",\n-    \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-recommended-bump\": \"^1.0.0\",\n+    \"chalk\": \"^2.4.1\",\n+    \"conventional-changelog\": \"^3.0.5\",\n+    \"conventional-recommended-bump\": \"^4.0.4\",\n     \"dotgitignore\": \"^1.0.3\",\n-    \"figures\": \"^1.5.0\",\n+    \"figures\": \"^2.0.0\",\n     \"fs-access\": \"^1.0.0\",\n-    \"semver\": \"^5.1.0\",\n-    \"yargs\": \"^8.0.1\"\n+    \"semver\": \"^5.2.0\",\n+    \"yargs\": \"^12.0.2\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"^3.5.0\",\n-    \"coveralls\": \"^2.11.9\",\n-    \"mocha\": \"^3.1.0\",\n-    \"mock-git\": \"^1.0.2\",\n+    \"coveralls\": \"^3.0.1\",\n+    \"mocha\": \"^5.2.0\",\n+    \"mock-git\": \"^1.0.3\",\n     \"mockery\": \"^2.0.0\",\n-    \"nyc\": \"^11.0.2\",\n-    \"shelljs\": \"^0.7.3\",\n-    \"standard\": \"^10.0.0\"\n+    \"nyc\": \"^13.1.0\",\n+    \"shelljs\": \"^0.7.8\",\n+    \"standard\": \"^12.0.1\"\n   }\n }\ndiff --git a/renovate.json b/renovate.json\nnew file mode 100644\nindex 0000000..010732b\n--- /dev/null\n+++ b/renovate.json\n@@ -0,0 +1,3 @@\n+{\n+  \"enabled\": false\n+}\ndiff --git a/test.js b/test.js\nindex a2e0450..ec891f9 100644\n--- a/test.js\n+++ b/test.js\n@@ -2,16 +2,16 @@\n \n 'use strict'\n \n-var shell = require('shelljs')\n-var fs = require('fs')\n-var path = require('path')\n-var stream = require('stream')\n-var mockGit = require('mock-git')\n-var mockery = require('mockery')\n-var semver = require('semver')\n-var formatCommitMessage = require('./lib/format-commit-message')\n-var cli = require('./command')\n-var standardVersion = require('./index')\n+const shell = require('shelljs')\n+const fs = require('fs')\n+const path = require('path')\n+const stream = require('stream')\n+const mockGit = require('mock-git')\n+const mockery = require('mockery')\n+const semver = require('semver')\n+const formatCommitMessage = require('./lib/format-commit-message')\n+const cli = require('./command')\n+const standardVersion = require('./index')\n \n require('chai').should()\n \n@@ -43,17 +43,22 @@\n \n function writePackageJson (version, option) {\n   option = option || {}\n-  var pkg = Object.assign(option, {version: version})\n+  var pkg = Object.assign(option, { version: version })\n   fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n-  delete require.cache[require.resolve(path.join(process.cwd(), 'package.json'))]\n }\n \n function writeBowerJson (version, option) {\n   option = option || {}\n-  var bower = Object.assign(option, {version: version})\n+  var bower = Object.assign(option, { version: version })\n   fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n }\n \n+function writeManifestJson (version, option) {\n+  option = option || {}\n+  var manifest = Object.assign(option, { version: version })\n+  fs.writeFileSync('manifest.json', JSON.stringify(manifest), 'utf-8')\n+}\n+\n function writeNpmShrinkwrapJson (version, option) {\n   option = option || {}\n   var shrinkwrap = Object.assign(option, { version: version })\n@@ -90,6 +95,16 @@\n   shell.cd('tmp')\n   shell.exec('git init')\n   commit('root-commit')\n+  ;['package.json',\n+    'manifest.json',\n+    'bower.json'\n+  ].forEach(metadata => {\n+    try {\n+      delete require.cache[require.resolve(path.join(process.cwd(), metadata))]\n+    } catch (err) {\n+      // we haven't loaded the metadata file yet.\n+    }\n+  })\n   writePackageJson('1.0.0')\n }\n \n@@ -252,6 +267,42 @@\n   })\n \n   describe('lifecycle scripts', () => {\n+    describe('prerelease hook', function () {\n+      it('should run the prerelease hook when provided', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'prerelease': 'node scripts/prerelease'\n+            }\n+          }\n+        })\n+        writeHook('prerelease')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(0)\n+        result.stderr.should.match(/prerelease ran/)\n+      })\n+\n+      it('should abort if the hook returns a non-zero exit code', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'prerelease': 'node scripts/prerelease && exit 1'\n+            }\n+          }\n+        })\n+        writeHook('prerelease')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(1)\n+        result.stderr.should.match(/prerelease ran/)\n+      })\n+    })\n+\n     describe('prebump hook', function () {\n       it('should allow prebump hook to return an alternate version #', function () {\n         writePackageJson('1.0.0', {\n@@ -381,6 +432,14 @@\n       commit('feat: first commit')\n       execCli('--prerelease').stdout.should.include('--tag prerelease')\n     })\n+\n+    it('advises use of --tag alpha for publishing to npm when tagging alpha', function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('feat: first commit')\n+      execCli('--prerelease alpha').stdout.should.include('--tag alpha')\n+    })\n   })\n \n   describe('manual-release', function () {\n@@ -565,7 +624,7 @@\n   })\n \n   it('does not display `npm publish` if the package is private', function () {\n-    writePackageJson('1.0.0', {private: true})\n+    writePackageJson('1.0.0', { private: true })\n \n     var result = execCli()\n     result.code.should.equal(0)\n@@ -624,7 +683,7 @@\n \n   describe('with mocked conventionalRecommendedBump', function () {\n     beforeEach(function () {\n-      mockery.enable({warnOnUnregistered: false, useCleanCache: true})\n+      mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n       mockery.registerMock('conventional-recommended-bump', function (_, cb) {\n         cb(new Error('bump err'))\n       })\n@@ -640,7 +699,7 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n \n-      require('./index')({silent: true})\n+      require('./index')({ silent: true })\n         .catch((err) => {\n           err.message.should.match(/bump err/)\n           done()\n@@ -650,9 +709,9 @@\n \n   describe('with mocked conventionalChangelog', function () {\n     beforeEach(function () {\n-      mockery.enable({warnOnUnregistered: false, useCleanCache: true})\n+      mockery.enable({ warnOnUnregistered: false, useCleanCache: true })\n       mockery.registerMock('conventional-changelog', function () {\n-        var readable = new stream.Readable({objectMode: true})\n+        var readable = new stream.Readable({ objectMode: true })\n         readable._read = function () {\n         }\n         setImmediate(readable.emit.bind(readable), 'error', new Error('changelog err'))\n@@ -670,7 +729,7 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n \n-      require('./index')({silent: true})\n+      require('./index')({ silent: true })\n         .catch((err) => {\n           err.message.should.match(/changelog err/)\n           return done()\n@@ -683,7 +742,7 @@\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('feat: new feature!')\n \n-    require('./index')({silent: true})\n+    require('./index')({ silent: true })\n       .then(() => {\n         // check last commit message\n         shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n@@ -693,6 +752,19 @@\n       })\n   })\n \n+  describe('without a package file to bump', function () {\n+    it('should exit with error', function () {\n+      shell.rm('package.json')\n+      return require('./index')({\n+        silent: true,\n+        gitTagFallback: false\n+      })\n+        .catch((err) => {\n+          err.message.should.equal('no package file found')\n+        })\n+    })\n+  })\n+\n   describe('bower.json support', function () {\n     beforeEach(function () {\n       writeBowerJson('1.0.0')\n@@ -702,7 +774,7 @@\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      return require('./index')({silent: true})\n+      return require('./index')({ silent: true })\n         .then(() => {\n           JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.1.0')\n           getPackageVersion().should.equal('1.1.0')\n@@ -710,6 +782,23 @@\n     })\n   })\n \n+  describe('manifest.json support', function () {\n+    beforeEach(function () {\n+      writeManifestJson('1.0.0')\n+    })\n+\n+    it('bumps version # in manifest.json', function () {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      return require('./index')({ silent: true })\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('manifest.json', 'utf-8')).version.should.equal('1.1.0')\n+          getPackageVersion().should.equal('1.1.0')\n+        })\n+    })\n+  })\n+\n   describe('npm-shrinkwrap.json support', function () {\n     beforeEach(function () {\n       writeNpmShrinkwrapJson('1.0.0')\n@@ -719,7 +808,7 @@\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      require('./index')({silent: true})\n+      require('./index')({ silent: true })\n         .then(() => {\n           JSON.parse(fs.readFileSync('npm-shrinkwrap.json', 'utf-8')).version.should.equal('1.1.0')\n           getPackageVersion().should.equal('1.1.0')\n@@ -738,7 +827,7 @@\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      return require('./index')({silent: true})\n+      return require('./index')({ silent: true })\n         .then(() => {\n           JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal('1.1.0')\n           getPackageVersion().should.equal('1.1.0')\n@@ -802,11 +891,54 @@\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      return require('./index')({silent: true})\n+      return require('./index')({ silent: true })\n         .then(() => {\n           JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.0.0')\n           getPackageVersion().should.equal('1.1.0')\n         })\n     })\n   })\n+\n+  describe('.gitignore', () => {\n+    beforeEach(function () {\n+      writeBowerJson('1.0.0')\n+    })\n+\n+    it('does not update files present in .gitignore', () => {\n+      fs.writeFileSync('.gitignore', 'bower.json', 'utf-8')\n+\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      return require('./index')({ silent: true })\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.0.0')\n+          getPackageVersion().should.equal('1.1.0')\n+        })\n+    })\n+  })\n+\n+  describe('gitTagFallback', () => {\n+    it('defaults to 1.0.0 if no tags in git history', () => {\n+      shell.rm('package.json')\n+      commit('feat: first commit')\n+      return require('./index')({ silent: true })\n+        .then(() => {\n+          const output = shell.exec('git tag')\n+          output.stdout.should.include('v1.1.0')\n+        })\n+    })\n+\n+    it('bases version on last tag, if tags are found', () => {\n+      shell.rm('package.json')\n+      shell.exec('git tag -a v5.0.0 -m \"a release\"')\n+      shell.exec('git tag -a v3.0.0 -m \"another release\"')\n+      commit('feat: another commit')\n+      return require('./index')({ silent: true })\n+        .then(() => {\n+          const output = shell.exec('git tag')\n+          output.stdout.should.include('v5.1.0')\n+        })\n+    })\n+  })\n })\n"
  }, {
    "begin time" : "Wed Jan 03 00:00:00 CST 2018",
    "end time" : "Mon May 21 00:00:00 CST 2018",
    "description" : "### Bug Fixes* show full tag name in checkpoint ([#241](https://github.com/conventional-changelog/standard-version/issues/241)) ([b4ed4f9](https://github.com/conventional-changelog/standard-version/commit/b4ed4f9))* use tagPrefix in CHANGELOG lifecycle step ([#243](https://github.com/conventional-changelog/standard-version/issues/243)) ([a56c7ac](https://github.com/conventional-changelog/standard-version/commit/a56c7ac))### Features* add prerelease lifecycle script hook (closes [#217](https://github.com/conventional-changelog/standard-version/issues/217)) ([#234](https://github.com/conventional-changelog/standard-version/issues/234)) ([ba4e7f6](https://github.com/conventional-changelog/standard-version/commit/ba4e7f6))* manifest.json support ([#236](https://github.com/conventional-changelog/standard-version/issues/236)) ([371d992](https://github.com/conventional-changelog/standard-version/commit/371d992))<a name=\"4.3.0\"></a>",
    "hunks" : "diff --git a/.gitignore b/.gitignore\nindex 7e95d3c..7d21798 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -14,3 +14,4 @@\n \n # coverage\n coverage\n+package-lock.json\n\\ No newline at end of file\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c5242fb..cec6fb0 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,24 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"4.3.0\"></a>\n+# [4.3.0](https://github.com/conventional-changelog/standard-version/compare/v4.2.0...v4.3.0) (2018-01-03)\n+\n+\n+### Bug Fixes\n+\n+* recommend `--tag` prerelease for npm publish of prereleases ([#196](https://github.com/conventional-changelog/standard-version/issues/196)) ([709dae1](https://github.com/conventional-changelog/standard-version/commit/709dae1)), closes [#183](https://github.com/conventional-changelog/standard-version/issues/183)\n+* use the `skip` default value for skip cli arg ([#211](https://github.com/conventional-changelog/standard-version/issues/211)) ([3fdd7fa](https://github.com/conventional-changelog/standard-version/commit/3fdd7fa))\n+\n+\n+### Features\n+\n+* **format-commit-message:** support multiple %s in the message ([45fcad5](https://github.com/conventional-changelog/standard-version/commit/45fcad5))\n+* do not update/commit files in .gitignore ([#230](https://github.com/conventional-changelog/standard-version/issues/230)) ([4fd3bc2](https://github.com/conventional-changelog/standard-version/commit/4fd3bc2))\n+* publish only if commit+push succeed ([#229](https://github.com/conventional-changelog/standard-version/issues/229)) ([c5e1ee2](https://github.com/conventional-changelog/standard-version/commit/c5e1ee2))\n+\n+\n+\n <a name=\"4.2.0\"></a>\n # [4.2.0](https://github.com/conventional-changelog/standard-version/compare/v4.1.0...v4.2.0) (2017-06-12)\n \ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nindex 47ad11f..4ab091c 100644\n--- a/lib/lifecycles/bump.js\n+++ b/lib/lifecycles/bump.js\n@@ -1,8 +1,11 @@\n+'use strict'\n+\n const chalk = require('chalk')\n const checkpoint = require('../checkpoint')\n const conventionalRecommendedBump = require('conventional-recommended-bump')\n const figures = require('figures')\n const fs = require('fs')\n+const DotGitignore = require('dotgitignore')\n const path = require('path')\n const runLifecycleScript = require('../run-lifecycle-script')\n const semver = require('semver')\n@@ -134,12 +137,14 @@\n  * @return {string}\n  */\n function updateConfigs (args, newVersion) {\n+  const dotgit = DotGitignore()\n   configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n   configsToUpdate[path.resolve(process.cwd(), './package-lock.json')] = false\n   configsToUpdate[path.resolve(process.cwd(), './npm-shrinkwrap.json')] = false\n   configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n   Object.keys(configsToUpdate).forEach(function (configPath) {\n     try {\n+      if (dotgit.ignore(configPath)) return\n       var stat = fs.lstatSync(configPath)\n       if (stat.isFile()) {\n         var config = require(configPath)\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nindex 1eb1617..136f830 100644\n--- a/lib/lifecycles/changelog.js\n+++ b/lib/lifecycles/changelog.js\n@@ -30,7 +30,8 @@\n     var context\n     if (args.dryRun) context = {version: newVersion}\n     var changelogStream = conventionalChangelog({\n-      preset: 'angular'\n+      preset: 'angular',\n+      tagPrefix: args.tagPrefix\n     }, context, {merges: null})\n       .on('error', function (err) {\n         return reject(err)\ndiff --git a/package.json b/package.json\nindex eecc1d3..833340e 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"4.2.0\",\n+  \"version\": \"4.3.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -41,6 +41,7 @@\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n     \"conventional-recommended-bump\": \"^1.0.0\",\n+    \"dotgitignore\": \"^1.0.3\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n     \"semver\": \"^5.1.0\",\ndiff --git a/test.js b/test.js\nindex b18cf71..a2e0450 100644\n--- a/test.js\n+++ b/test.js\n@@ -590,6 +590,32 @@\n     var pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.1.0\"', '}', ''].join('\\n'))\n   })\n+\n+  it('exits with error code if \"scripts\" is not an object', () => {\n+    writePackageJson('1.0.0', {\n+      'standard-version': {\n+        scripts: 'echo hello'\n+      }\n+    })\n+\n+    commit('feat: first commit')\n+    var result = execCli()\n+    result.code.should.equal(1)\n+    result.stderr.should.match(/scripts must be an object/)\n+  })\n+\n+  it('exits with error code if \"skip\" is not an object', () => {\n+    writePackageJson('1.0.0', {\n+      'standard-version': {\n+        skip: true\n+      }\n+    })\n+\n+    commit('feat: first commit')\n+    var result = execCli()\n+    result.code.should.equal(1)\n+    result.stderr.should.match(/skip must be an object/)\n+  })\n })\n \n describe('standard-version', function () {\n@@ -672,15 +698,14 @@\n       writeBowerJson('1.0.0')\n     })\n \n-    it('bumps version # in bower.json', function (done) {\n+    it('bumps version # in bower.json', function () {\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      require('./index')({silent: true})\n+      return require('./index')({silent: true})\n         .then(() => {\n           JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.1.0')\n           getPackageVersion().should.equal('1.1.0')\n-          return done()\n         })\n     })\n   })\n@@ -706,17 +731,17 @@\n   describe('package-lock.json support', function () {\n     beforeEach(function () {\n       writePackageLockJson('1.0.0')\n+      fs.writeFileSync('.gitignore', '', 'utf-8')\n     })\n \n-    it('bumps version # in package-lock.json', function (done) {\n+    it('bumps version # in package-lock.json', function () {\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      require('./index')({silent: true})\n+      return require('./index')({silent: true})\n         .then(() => {\n           JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal('1.1.0')\n           getPackageVersion().should.equal('1.1.0')\n-          return done()\n         })\n     })\n   })\n@@ -765,4 +790,23 @@\n         })\n     })\n   })\n+\n+  describe('.gitignore', () => {\n+    beforeEach(function () {\n+      writeBowerJson('1.0.0')\n+    })\n+\n+    it('does not update files present in .gitignore', () => {\n+      fs.writeFileSync('.gitignore', 'bower.json', 'utf-8')\n+\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      return require('./index')({silent: true})\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.0.0')\n+          getPackageVersion().should.equal('1.1.0')\n+        })\n+    })\n+  })\n })\n"
  }, {
    "begin time" : "Mon Jun 12 00:00:00 CST 2017",
    "end time" : "Wed Jan 03 00:00:00 CST 2018",
    "description" : "### Bug Fixes* recommend `--tag` prerelease for npm publish of prereleases ([#196](https://github.com/conventional-changelog/standard-version/issues/196)) ([709dae1](https://github.com/conventional-changelog/standard-version/commit/709dae1)), closes [#183](https://github.com/conventional-changelog/standard-version/issues/183)* use the `skip` default value for skip cli arg ([#211](https://github.com/conventional-changelog/standard-version/issues/211)) ([3fdd7fa](https://github.com/conventional-changelog/standard-version/commit/3fdd7fa))### Features* **format-commit-message:** support multiple %s in the message ([45fcad5](https://github.com/conventional-changelog/standard-version/commit/45fcad5))* do not update/commit files in .gitignore ([#230](https://github.com/conventional-changelog/standard-version/issues/230)) ([4fd3bc2](https://github.com/conventional-changelog/standard-version/commit/4fd3bc2))* publish only if commit+push succeed ([#229](https://github.com/conventional-changelog/standard-version/issues/229)) ([c5e1ee2](https://github.com/conventional-changelog/standard-version/commit/c5e1ee2))<a name=\"4.2.0\"></a>",
    "hunks" : "diff --git a/README.md b/README.md\nindex 5e57f46..2148df4 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,11 +1,12 @@\n # Standard Version\n \n-[![Join the chat at https://gitter.im/conventional-changelog/standard-version](https://badges.gitter.im/conventional-changelog/standard-version.svg)](https://gitter.im/conventional-changelog/standard-version?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n-\n [![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg?branch=master)](https://travis-ci.org/conventional-changelog/standard-version)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n+[![community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n+\n+_Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n \n > stop using `npm version`, use `standard-version` it rocks!\n \ndiff --git a/command.js b/command.js\nindex 0fa0442..c571494 100755\n--- a/command.js\n+++ b/command.js\n@@ -65,7 +65,7 @@\n   })\n   .option('skip', {\n     describe: 'Map of steps in the release process that should be skipped',\n-    default: defaults.scripts\n+    default: defaults.skip\n   })\n   .option('dry-run', {\n     type: 'boolean',\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nindex b5bf7ae..1491801 100644\n--- a/lib/lifecycles/tag.js\n+++ b/lib/lifecycles/tag.js\n@@ -28,6 +28,7 @@\n     .then(() => {\n       var message = 'git push --follow-tags origin master'\n       if (pkgPrivate !== true) message += '; npm publish'\n+      if (args.prerelease !== undefined) message += ' --tag prerelease'\n \n       checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n     })\ndiff --git a/test.js b/test.js\nindex 001c858..b18cf71 100644\n--- a/test.js\n+++ b/test.js\n@@ -9,6 +9,7 @@\n var mockGit = require('mock-git')\n var mockery = require('mockery')\n var semver = require('semver')\n+var formatCommitMessage = require('./lib/format-commit-message')\n var cli = require('./command')\n var standardVersion = require('./index')\n \n@@ -101,6 +102,18 @@\n   return JSON.parse(fs.readFileSync('package.json', 'utf-8')).version\n }\n \n+describe('format-commit-message', function () {\n+  it('works for no %s', function () {\n+    formatCommitMessage('chore(release): 1.0.0', '1.0.0').should.equal('chore(release): 1.0.0')\n+  })\n+  it('works for one %s', function () {\n+    formatCommitMessage('chore(release): %s', '1.0.0').should.equal('chore(release): 1.0.0')\n+  })\n+  it('works for two %s', function () {\n+    formatCommitMessage('chore(release): %s \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v%s/CHANGELOG.md', '1.0.0').should.equal('chore(release): 1.0.0 \\n\\n* CHANGELOG: https://github.com/conventional-changelog/standard-version/blob/v1.0.0/CHANGELOG.md')\n+  })\n+})\n+\n describe('cli', function () {\n   beforeEach(initInTempFolder)\n   afterEach(finishTemp)\n@@ -360,6 +373,14 @@\n           getPackageVersion().should.equal('1.1.0-0')\n         })\n     })\n+\n+    it('advises use of --tag prerelease for publishing to npm', function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('feat: first commit')\n+      execCli('--prerelease').stdout.should.include('--tag prerelease')\n+    })\n   })\n \n   describe('manual-release', function () {\n"
  }, {
    "begin time" : "Tue Jun 06 00:00:00 CST 2017",
    "end time" : "Mon Jun 12 00:00:00 CST 2017",
    "description" : "### Features* add support for `package-lock.json` ([#190](https://github.com/conventional-changelog/standard-version/issues/190)) ([bc0fc53](https://github.com/conventional-changelog/standard-version/commit/bc0fc53))<a name=\"4.1.0\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4da1451..b145abe 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,21 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"4.1.0\"></a>\n+# [4.1.0](https://github.com/conventional-changelog/standard-version/compare/v4.0.0...v4.1.0) (2017-06-06)\n+\n+\n+### Features\n+\n+* **cli:** print error and don't run with node <4, closes [#124](https://github.com/conventional-changelog/standard-version/issues/124) ([d0d71a5](https://github.com/conventional-changelog/standard-version/commit/d0d71a5))\n+* add dry-run mode ([#187](https://github.com/conventional-changelog/standard-version/issues/187)) ([d073353](https://github.com/conventional-changelog/standard-version/commit/d073353))\n+* add prebump, postbump, precommit, lifecycle scripts ([#186](https://github.com/conventional-changelog/standard-version/issues/186)) ([dfd1d12](https://github.com/conventional-changelog/standard-version/commit/dfd1d12))\n+* add support for `npm-shrinkwrap.json` ([#185](https://github.com/conventional-changelog/standard-version/issues/185)) ([86af7fc](https://github.com/conventional-changelog/standard-version/commit/86af7fc))\n+* add support for skipping lifecycle steps, polish lifecycle work ([#188](https://github.com/conventional-changelog/standard-version/issues/188)) ([d31dcdb](https://github.com/conventional-changelog/standard-version/commit/d31dcdb))\n+* allow a version # to be provided for release-as, rather than just major, minor, patch. ([13eb9cd](https://github.com/conventional-changelog/standard-version/commit/13eb9cd))\n+\n+\n+\n <a name=\"4.0.0\"></a>\n # [4.0.0](https://github.com/conventional-changelog/standard-version/compare/v4.0.0-1...v4.0.0) (2016-12-02)\n \ndiff --git a/README.md b/README.md\nindex 9dc47ae..5e57f46 100644\n--- a/README.md\n+++ b/README.md\n@@ -156,18 +156,16 @@\n \n `standard-version` supports lifecycle scripts. These allow you to execute your\n own supplementary commands during the release. The following\n-hooks are available:\n+hooks are available and execute in the order documented:\n \n-* `prebump`: executed before the version bump is calculated. If the `prebump`\n+* `prebump`/`postbump`: executed before and after the version is bumped. If the `prebump`\n   script returns a version #, it will be used rather than\n   the version calculated by `standard-version`.\n-* `postbump`: executed after the version has been bumped and written to\n-  package.json. The flag `--new-version` is populated with the version that is\n-  being released.\n-* `precommit`: called after CHANGELOG.md and package.json have been updated,\n-  but before changes have been committed to git.\n+* `prechangelog`/`postchangelog`: executes before and after the CHANGELOG is generated.\n+* `precommit`/`postcommit`: called before and after the commit step.\n+* `pretag`/`posttag`: called before and after the tagging step.\n \n-Simply add the following to your package.json, to enable lifecycle scripts:\n+Simply add the following to your package.json to configure lifecycle scripts:\n \n ```json\n {\n@@ -179,6 +177,21 @@\n }\n ```\n \n+### Skipping lifecycle steps\n+\n+You can skip any of the lifecycle steps (`bump`, `changelog`, `commit`, `tag`),\n+by adding the following to your package.json:\n+\n+```json\n+{\n+  \"standard-version\": {\n+    \"skip\": {\n+      \"changelog\": true\n+    }\n+  }\n+}\n+```\n+\n ### Committing generated artifacts in the release commit\n \n If you want to commit generated artifacts in the release commit (e.g. [#96](https://github.com/conventional-changelog/standard-version/issues/96)), you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\ndiff --git a/command.js b/command.js\nindex 3c65226..0fa0442 100755\n--- a/command.js\n+++ b/command.js\n@@ -60,7 +60,11 @@\n     default: defaults.tagPrefix\n   })\n   .option('scripts', {\n-    describe: 'Scripts to execute for lifecycle events (prebump, precommit, etc.,)',\n+    describe: 'Provide scripts to execute for lifecycle events (prebump, precommit, etc.,)',\n+    default: defaults.scripts\n+  })\n+  .option('skip', {\n+    describe: 'Map of steps in the release process that should be skipped',\n     default: defaults.scripts\n   })\n   .option('dry-run', {\n@@ -71,6 +75,8 @@\n   .check((argv) => {\n     if (typeof argv.scripts !== 'object' || Array.isArray(argv.scripts)) {\n       throw Error('scripts must be an object')\n+    } else if (typeof argv.skip !== 'object' || Array.isArray(argv.skip)) {\n+      throw Error('skip must be an object')\n     } else {\n       return true\n     }\ndiff --git a/defaults.json b/defaults.json\nindex b737c0c..2834fb3 100644\n--- a/defaults.json\n+++ b/defaults.json\n@@ -8,5 +8,6 @@\n   \"silent\": false,\n   \"tagPrefix\": \"v\",\n   \"scripts\": {},\n+  \"skip\": {},\n   \"dryRun\": false\n }\ndiff --git a/index.js b/index.js\nindex 5b56f3c..b5936ee 100755\n--- a/index.js\n+++ b/index.js\n@@ -1,19 +1,10 @@\n-const conventionalRecommendedBump = require('conventional-recommended-bump')\n-const conventionalChangelog = require('conventional-changelog')\n const path = require('path')\n-\n-const chalk = require('chalk')\n-const figures = require('figures')\n-const fs = require('fs')\n-const accessSync = require('fs-access').sync\n-const semver = require('semver')\n-const util = require('util')\n-\n-const checkpoint = require('./lib/checkpoint')\n const printError = require('./lib/print-error')\n-const runExec = require('./lib/run-exec')\n-const runLifecycleScript = require('./lib/run-lifecycle-script')\n-const writeFile = require('./lib/write-file')\n+\n+const bump = require('./lib/lifecycles/bump')\n+const changelog = require('./lib/lifecycles/changelog')\n+const commit = require('./lib/lifecycles/commit')\n+const tag = require('./lib/lifecycles/tag')\n \n module.exports = function standardVersion (argv) {\n   var pkgPath = path.resolve(process.cwd(), './package.json')\n@@ -22,30 +13,17 @@\n   var defaults = require('./defaults')\n   var args = Object.assign({}, defaults, argv)\n \n-  return runLifecycleScript(args, 'prebump', null)\n-    .then((stdout) => {\n-      if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n-      return bumpVersion(args.releaseAs)\n+  return Promise.resolve()\n+    .then(() => {\n+      return bump(args, pkg)\n     })\n-    .then((release) => {\n-      if (!args.firstRelease) {\n-        var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n-        newVersion = semver.valid(releaseType) || semver.inc(pkg.version, releaseType, args.prerelease)\n-        updateConfigs(args, newVersion)\n-      } else {\n-        checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n-      }\n-\n-      return runLifecycleScript(args, 'postbump', newVersion, args)\n+    .then((_newVersion) => {\n+      // if bump runs, it calculaes the new version that we\n+      // should release at.\n+      if (_newVersion) newVersion = _newVersion\n+      return changelog(args, newVersion)\n     })\n     .then(() => {\n-      return outputChangelog(args, newVersion)\n-    })\n-    .then(() => {\n-      return runLifecycleScript(args, 'precommit', newVersion, args)\n-    })\n-    .then((message) => {\n-      if (message && message.length) args.message = message\n       return commit(args, newVersion)\n     })\n     .then(() => {\n@@ -56,203 +34,3 @@\n       throw err\n     })\n }\n-\n-/**\n- * attempt to update the version # in a collection of common config\n- * files, e.g., package.json, bower.json.\n- *\n- * @param args config object\n- * @param newVersion version # to update to.\n- * @return {string}\n- */\n-var configsToUpdate = {}\n-function updateConfigs (args, newVersion) {\n-  configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n-  configsToUpdate[path.resolve(process.cwd(), './npm-shrinkwrap.json')] = false\n-  configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n-  Object.keys(configsToUpdate).forEach(function (configPath) {\n-    try {\n-      var stat = fs.lstatSync(configPath)\n-      if (stat.isFile()) {\n-        var config = require(configPath)\n-        var filename = path.basename(configPath)\n-        checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n-        config.version = newVersion\n-        writeFile(args, configPath, JSON.stringify(config, null, 2) + '\\n')\n-        // flag any config files that we modify the version # for\n-        // as having been updated.\n-        configsToUpdate[configPath] = true\n-      }\n-    } catch (err) {\n-      if (err.code !== 'ENOENT') console.warn(err.message)\n-    }\n-  })\n-}\n-\n-function getReleaseType (prerelease, expectedReleaseType, currentVersion) {\n-  if (isString(prerelease)) {\n-    if (isInPrerelease(currentVersion)) {\n-      if (shouldContinuePrerelease(currentVersion, expectedReleaseType) ||\n-        getTypePriority(getCurrentActiveType(currentVersion)) > getTypePriority(expectedReleaseType)\n-      ) {\n-        return 'prerelease'\n-      }\n-    }\n-\n-    return 'pre' + expectedReleaseType\n-  } else {\n-    return expectedReleaseType\n-  }\n-}\n-\n-function isString (val) {\n-  return typeof val === 'string'\n-}\n-\n-/**\n- * if a version is currently in pre-release state,\n- * and if it current in-pre-release type is same as expect type,\n- * it should continue the pre-release with the same type\n- *\n- * @param version\n- * @param expectType\n- * @return {boolean}\n- */\n-function shouldContinuePrerelease (version, expectType) {\n-  return getCurrentActiveType(version) === expectType\n-}\n-\n-function isInPrerelease (version) {\n-  return Array.isArray(semver.prerelease(version))\n-}\n-\n-var TypeList = ['major', 'minor', 'patch'].reverse()\n-\n-/**\n- * extract the in-pre-release type in target version\n- *\n- * @param version\n- * @return {string}\n- */\n-function getCurrentActiveType (version) {\n-  var typelist = TypeList\n-  for (var i = 0; i < typelist.length; i++) {\n-    if (semver[typelist[i]](version)) {\n-      return typelist[i]\n-    }\n-  }\n-}\n-\n-/**\n- * calculate the priority of release type,\n- * major - 2, minor - 1, patch - 0\n- *\n- * @param type\n- * @return {number}\n- */\n-function getTypePriority (type) {\n-  return TypeList.indexOf(type)\n-}\n-\n-function bumpVersion (releaseAs, callback) {\n-  return new Promise((resolve, reject) => {\n-    if (releaseAs) {\n-      return resolve({\n-        releaseType: releaseAs\n-      })\n-    } else {\n-      conventionalRecommendedBump({\n-        preset: 'angular'\n-      }, function (err, release) {\n-        if (err) return reject(err)\n-        else return resolve(release)\n-      })\n-    }\n-  })\n-}\n-\n-function outputChangelog (args, newVersion) {\n-  return new Promise((resolve, reject) => {\n-    createIfMissing(args)\n-    var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n-    var oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n-    // find the position of the last release and remove header:\n-    if (oldContent.indexOf('<a name=') !== -1) {\n-      oldContent = oldContent.substring(oldContent.indexOf('<a name='))\n-    }\n-    var content = ''\n-    var context\n-    if (args.dryRun) context = {version: newVersion}\n-    var changelogStream = conventionalChangelog({\n-      preset: 'angular'\n-    }, context, {merges: null})\n-      .on('error', function (err) {\n-        return reject(err)\n-      })\n-\n-    changelogStream.on('data', function (buffer) {\n-      content += buffer.toString()\n-    })\n-\n-    changelogStream.on('end', function () {\n-      checkpoint(args, 'outputting changes to %s', [args.infile])\n-      if (args.dryRun) console.info(`\\n---\\n${chalk.gray(content.trim())}\\n---\\n`)\n-      else writeFile(args, args.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'))\n-      return resolve()\n-    })\n-  })\n-}\n-\n-function commit (args, newVersion) {\n-  var msg = 'committing %s'\n-  var paths = [args.infile]\n-  var verify = args.verify === false || args.n ? '--no-verify ' : ''\n-  var toAdd = ''\n-  // commit any of the config files that we've updated\n-  // the version # for.\n-  Object.keys(configsToUpdate).forEach(function (p) {\n-    if (configsToUpdate[p]) {\n-      msg += ' and %s'\n-      paths.unshift(path.basename(p))\n-      toAdd += ' ' + path.relative(process.cwd(), p)\n-    }\n-  })\n-  checkpoint(args, msg, paths)\n-  return runExec(args, 'git add' + toAdd + ' ' + args.infile)\n-    .then(() => {\n-      return runExec(args, 'git commit ' + verify + (args.sign ? '-S ' : '') + (args.commitAll ? '' : (args.infile + toAdd)) + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n-    })\n-}\n-\n-function formatCommitMessage (msg, newVersion) {\n-  return String(msg).indexOf('%s') !== -1 ? util.format(msg, newVersion) : msg\n-}\n-\n-function tag (newVersion, pkgPrivate, args) {\n-  var tagOption\n-  if (args.sign) {\n-    tagOption = '-s '\n-  } else {\n-    tagOption = '-a '\n-  }\n-  checkpoint(args, 'tagging release %s', [newVersion])\n-  return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n-    .then(() => {\n-      var message = 'git push --follow-tags origin master'\n-      if (pkgPrivate !== true) message += '; npm publish'\n-\n-      checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n-    })\n-}\n-\n-function createIfMissing (args) {\n-  try {\n-    accessSync(args.infile, fs.F_OK)\n-  } catch (err) {\n-    if (err.code === 'ENOENT') {\n-      checkpoint(args, 'created %s', [args.infile])\n-      args.outputUnreleased = true\n-      writeFile(args, args.infile, '\\n')\n-    }\n-  }\n-}\ndiff --git a/lib/checkpoint.js b/lib/checkpoint.js\nindex 516ab56..634c8b5 100644\n--- a/lib/checkpoint.js\n+++ b/lib/checkpoint.js\n@@ -2,10 +2,10 @@\n const figures = require('figures')\n const util = require('util')\n \n-module.exports = function (args, msg, vars, figure) {\n+module.exports = function (argv, msg, args, figure) {\n   const defaultFigure = args.dryRun ? chalk.yellow(figures.tick) : chalk.green(figures.tick)\n-  if (!args.silent) {\n-    console.info((figure || defaultFigure) + ' ' + util.format.apply(util, [msg].concat(vars.map(function (arg) {\n+  if (!argv.silent) {\n+    console.info((figure || defaultFigure) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n       return chalk.bold(arg)\n     }))))\n   }\ndiff --git a/lib/format-commit-message.js b/lib/format-commit-message.js\nnew file mode 100644\nindex 0000000..06b8702\n--- /dev/null\n+++ b/lib/format-commit-message.js\n@@ -0,0 +1,5 @@\n+const util = require('util')\n+\n+module.exports = function (msg, newVersion) {\n+  return String(msg).indexOf('%s') !== -1 ? util.format(msg, newVersion) : msg\n+}\ndiff --git a/lib/lifecycles/bump.js b/lib/lifecycles/bump.js\nnew file mode 100644\nindex 0000000..47ad11f\n--- /dev/null\n+++ b/lib/lifecycles/bump.js\n@@ -0,0 +1,160 @@\n+const chalk = require('chalk')\n+const checkpoint = require('../checkpoint')\n+const conventionalRecommendedBump = require('conventional-recommended-bump')\n+const figures = require('figures')\n+const fs = require('fs')\n+const path = require('path')\n+const runLifecycleScript = require('../run-lifecycle-script')\n+const semver = require('semver')\n+const writeFile = require('../write-file')\n+\n+var configsToUpdate = {}\n+\n+function Bump (args, pkg) {\n+  // reset the cache of updated config files each\n+  // time we perform the version bump step.\n+  configsToUpdate = {}\n+\n+  if (args.skip.bump) return Promise.resolve()\n+  var newVersion = pkg.version\n+  return runLifecycleScript(args, 'prebump')\n+    .then((stdout) => {\n+      if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n+      return bumpVersion(args.releaseAs)\n+    })\n+    .then((release) => {\n+      if (!args.firstRelease) {\n+        var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n+        newVersion = semver.valid(releaseType) || semver.inc(pkg.version, releaseType, args.prerelease)\n+        updateConfigs(args, newVersion)\n+      } else {\n+        checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n+      }\n+    })\n+    .then(() => {\n+      return runLifecycleScript(args, 'postbump')\n+    })\n+    .then(() => {\n+      return newVersion\n+    })\n+}\n+\n+Bump.getUpdatedConfigs = function () {\n+  return configsToUpdate\n+}\n+\n+function getReleaseType (prerelease, expectedReleaseType, currentVersion) {\n+  if (isString(prerelease)) {\n+    if (isInPrerelease(currentVersion)) {\n+      if (shouldContinuePrerelease(currentVersion, expectedReleaseType) ||\n+        getTypePriority(getCurrentActiveType(currentVersion)) > getTypePriority(expectedReleaseType)\n+      ) {\n+        return 'prerelease'\n+      }\n+    }\n+\n+    return 'pre' + expectedReleaseType\n+  } else {\n+    return expectedReleaseType\n+  }\n+}\n+\n+function isString (val) {\n+  return typeof val === 'string'\n+}\n+\n+/**\n+ * if a version is currently in pre-release state,\n+ * and if it current in-pre-release type is same as expect type,\n+ * it should continue the pre-release with the same type\n+ *\n+ * @param version\n+ * @param expectType\n+ * @return {boolean}\n+ */\n+function shouldContinuePrerelease (version, expectType) {\n+  return getCurrentActiveType(version) === expectType\n+}\n+\n+function isInPrerelease (version) {\n+  return Array.isArray(semver.prerelease(version))\n+}\n+\n+var TypeList = ['major', 'minor', 'patch'].reverse()\n+\n+/**\n+ * extract the in-pre-release type in target version\n+ *\n+ * @param version\n+ * @return {string}\n+ */\n+function getCurrentActiveType (version) {\n+  var typelist = TypeList\n+  for (var i = 0; i < typelist.length; i++) {\n+    if (semver[typelist[i]](version)) {\n+      return typelist[i]\n+    }\n+  }\n+}\n+\n+/**\n+ * calculate the priority of release type,\n+ * major - 2, minor - 1, patch - 0\n+ *\n+ * @param type\n+ * @return {number}\n+ */\n+function getTypePriority (type) {\n+  return TypeList.indexOf(type)\n+}\n+\n+function bumpVersion (releaseAs, callback) {\n+  return new Promise((resolve, reject) => {\n+    if (releaseAs) {\n+      return resolve({\n+        releaseType: releaseAs\n+      })\n+    } else {\n+      conventionalRecommendedBump({\n+        preset: 'angular'\n+      }, function (err, release) {\n+        if (err) return reject(err)\n+        else return resolve(release)\n+      })\n+    }\n+  })\n+}\n+\n+/**\n+ * attempt to update the version # in a collection of common config\n+ * files, e.g., package.json, bower.json.\n+ *\n+ * @param args config object\n+ * @param newVersion version # to update to.\n+ * @return {string}\n+ */\n+function updateConfigs (args, newVersion) {\n+  configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n+  configsToUpdate[path.resolve(process.cwd(), './package-lock.json')] = false\n+  configsToUpdate[path.resolve(process.cwd(), './npm-shrinkwrap.json')] = false\n+  configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n+  Object.keys(configsToUpdate).forEach(function (configPath) {\n+    try {\n+      var stat = fs.lstatSync(configPath)\n+      if (stat.isFile()) {\n+        var config = require(configPath)\n+        var filename = path.basename(configPath)\n+        checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n+        config.version = newVersion\n+        writeFile(args, configPath, JSON.stringify(config, null, 2) + '\\n')\n+        // flag any config files that we modify the version # for\n+        // as having been updated.\n+        configsToUpdate[configPath] = true\n+      }\n+    } catch (err) {\n+      if (err.code !== 'ENOENT') console.warn(err.message)\n+    }\n+  })\n+}\n+\n+module.exports = Bump\ndiff --git a/lib/lifecycles/changelog.js b/lib/lifecycles/changelog.js\nnew file mode 100644\nindex 0000000..1eb1617\n--- /dev/null\n+++ b/lib/lifecycles/changelog.js\n@@ -0,0 +1,62 @@\n+const accessSync = require('fs-access').sync\n+const chalk = require('chalk')\n+const checkpoint = require('../checkpoint')\n+const conventionalChangelog = require('conventional-changelog')\n+const fs = require('fs')\n+const runLifecycleScript = require('../run-lifecycle-script')\n+const writeFile = require('../write-file')\n+\n+module.exports = function (args, newVersion) {\n+  if (args.skip.changelog) return Promise.resolve()\n+  return runLifecycleScript(args, 'prechangelog')\n+    .then(() => {\n+      return outputChangelog(args, newVersion)\n+    })\n+    .then(() => {\n+      return runLifecycleScript(args, 'postchangelog')\n+    })\n+}\n+\n+function outputChangelog (args, newVersion) {\n+  return new Promise((resolve, reject) => {\n+    createIfMissing(args)\n+    var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n+    var oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n+    // find the position of the last release and remove header:\n+    if (oldContent.indexOf('<a name=') !== -1) {\n+      oldContent = oldContent.substring(oldContent.indexOf('<a name='))\n+    }\n+    var content = ''\n+    var context\n+    if (args.dryRun) context = {version: newVersion}\n+    var changelogStream = conventionalChangelog({\n+      preset: 'angular'\n+    }, context, {merges: null})\n+      .on('error', function (err) {\n+        return reject(err)\n+      })\n+\n+    changelogStream.on('data', function (buffer) {\n+      content += buffer.toString()\n+    })\n+\n+    changelogStream.on('end', function () {\n+      checkpoint(args, 'outputting changes to %s', [args.infile])\n+      if (args.dryRun) console.info(`\\n---\\n${chalk.gray(content.trim())}\\n---\\n`)\n+      else writeFile(args, args.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'))\n+      return resolve()\n+    })\n+  })\n+}\n+\n+function createIfMissing (args) {\n+  try {\n+    accessSync(args.infile, fs.F_OK)\n+  } catch (err) {\n+    if (err.code === 'ENOENT') {\n+      checkpoint(args, 'created %s', [args.infile])\n+      args.outputUnreleased = true\n+      writeFile(args, args.infile, '\\n')\n+    }\n+  }\n+}\ndiff --git a/lib/lifecycles/commit.js b/lib/lifecycles/commit.js\nnew file mode 100644\nindex 0000000..c273949\n--- /dev/null\n+++ b/lib/lifecycles/commit.js\n@@ -0,0 +1,39 @@\n+const bump = require('../lifecycles/bump')\n+const checkpoint = require('../checkpoint')\n+const formatCommitMessage = require('../format-commit-message')\n+const path = require('path')\n+const runExec = require('../run-exec')\n+const runLifecycleScript = require('../run-lifecycle-script')\n+\n+module.exports = function (args, newVersion) {\n+  if (args.skip.commit) return Promise.resolve()\n+  return runLifecycleScript(args, 'precommit')\n+    .then((message) => {\n+      if (message && message.length) args.message = message\n+      return execCommit(args, newVersion)\n+    })\n+    .then(() => {\n+      return runLifecycleScript(args, 'postcommit')\n+    })\n+}\n+\n+function execCommit (args, newVersion) {\n+  var msg = 'committing %s'\n+  var paths = [args.infile]\n+  var verify = args.verify === false || args.n ? '--no-verify ' : ''\n+  var toAdd = ''\n+  // commit any of the config files that we've updated\n+  // the version # for.\n+  Object.keys(bump.getUpdatedConfigs()).forEach(function (p) {\n+    if (bump.getUpdatedConfigs()[p]) {\n+      msg += ' and %s'\n+      paths.unshift(path.basename(p))\n+      toAdd += ' ' + path.relative(process.cwd(), p)\n+    }\n+  })\n+  checkpoint(args, msg, paths)\n+  return runExec(args, 'git add' + toAdd + ' ' + args.infile)\n+    .then(() => {\n+      return runExec(args, 'git commit ' + verify + (args.sign ? '-S ' : '') + (args.commitAll ? '' : (args.infile + toAdd)) + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n+    })\n+}\ndiff --git a/lib/lifecycles/tag.js b/lib/lifecycles/tag.js\nnew file mode 100644\nindex 0000000..b5bf7ae\n--- /dev/null\n+++ b/lib/lifecycles/tag.js\n@@ -0,0 +1,34 @@\n+const chalk = require('chalk')\n+const checkpoint = require('../checkpoint')\n+const figures = require('figures')\n+const formatCommitMessage = require('../format-commit-message')\n+const runExec = require('../run-exec')\n+const runLifecycleScript = require('../run-lifecycle-script')\n+\n+module.exports = function (newVersion, pkgPrivate, args) {\n+  if (args.skip.tag) return Promise.resolve()\n+  return runLifecycleScript(args, 'pretag')\n+    .then(() => {\n+      return execTag(newVersion, pkgPrivate, args)\n+    })\n+    .then(() => {\n+      return runLifecycleScript(args, 'posttag')\n+    })\n+}\n+\n+function execTag (newVersion, pkgPrivate, args) {\n+  var tagOption\n+  if (args.sign) {\n+    tagOption = '-s '\n+  } else {\n+    tagOption = '-a '\n+  }\n+  checkpoint(args, 'tagging release %s', [newVersion])\n+  return runExec(args, 'git tag ' + tagOption + args.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(args.message, newVersion) + '\"')\n+    .then(() => {\n+      var message = 'git push --follow-tags origin master'\n+      if (pkgPrivate !== true) message += '; npm publish'\n+\n+      checkpoint(args, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n+    })\n+}\ndiff --git a/lib/run-lifecycle-script.js b/lib/run-lifecycle-script.js\nindex f4c2baa..a501448 100644\n--- a/lib/run-lifecycle-script.js\n+++ b/lib/run-lifecycle-script.js\n@@ -3,11 +3,10 @@\n const figures = require('figures')\n const runExec = require('./run-exec')\n \n-module.exports = function (args, hookName, newVersion) {\n+module.exports = function (args, hookName) {\n   const scripts = args.scripts\n   if (!scripts || !scripts[hookName]) return Promise.resolve()\n   var command = scripts[hookName]\n-  if (newVersion) command += ' --new-version=\"' + newVersion + '\"'\n   checkpoint(args, 'Running lifecycle script \"%s\"', [hookName])\n   checkpoint(args, '- execute command: \"%s\"', [command], chalk.blue(figures.info))\n   return runExec(args, command)\ndiff --git a/package.json b/package.json\nindex 7f21bc8..5b7cc04 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"4.0.0\",\n+  \"version\": \"4.1.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n@@ -10,7 +10,9 @@\n     \"release\": \"bin/cli.js\"\n   },\n   \"nyc\": {\n-    \"exclude\": [\"tmp/**\"]\n+    \"exclude\": [\n+      \"tmp/**\"\n+    ]\n   },\n   \"repository\": {\n     \"type\": \"git\",\ndiff --git a/test.js b/test.js\nindex e1702fd..001c858 100644\n--- a/test.js\n+++ b/test.js\n@@ -59,6 +59,12 @@\n   fs.writeFileSync('npm-shrinkwrap.json', JSON.stringify(shrinkwrap), 'utf-8')\n }\n \n+function writePackageLockJson (version, option) {\n+  option = option || {}\n+  var pkgLock = Object.assign(option, { version: version })\n+  fs.writeFileSync('package-lock.json', JSON.stringify(pkgLock), 'utf-8')\n+}\n+\n function writeGitPreCommitHook () {\n   fs.writeFileSync('.git/hooks/pre-commit', '#!/bin/sh\\necho \"precommit ran\"\\nexit 1', 'utf-8')\n   fs.chmodSync('.git/hooks/pre-commit', '755')\n@@ -676,6 +682,24 @@\n     })\n   })\n \n+  describe('package-lock.json support', function () {\n+    beforeEach(function () {\n+      writePackageLockJson('1.0.0')\n+    })\n+\n+    it('bumps version # in package-lock.json', function (done) {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      require('./index')({silent: true})\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('package-lock.json', 'utf-8')).version.should.equal('1.1.0')\n+          getPackageVersion().should.equal('1.1.0')\n+          return done()\n+        })\n+    })\n+  })\n+\n   describe('dry-run', function () {\n     it('skips all non-idempotent steps', function (done) {\n       commit('feat: first commit')\n@@ -688,4 +712,36 @@\n       return done()\n     })\n   })\n+\n+  describe('skip', () => {\n+    it('allows bump and changelog generation to be skipped', function () {\n+      let changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n+\n+      commit('feat: first commit')\n+      return execCliAsync('--skip.bump true --skip.changelog true')\n+        .then(function () {\n+          getPackageVersion().should.equal('1.0.0')\n+          var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          content.should.equal(changelogContent)\n+        })\n+    })\n+\n+    it('allows the commit phase to be skipped', function () {\n+      let changelogContent = 'legacy header format<a name=\"1.0.0\">\\n'\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', changelogContent, 'utf-8')\n+\n+      commit('feat: new feature from branch')\n+      return execCliAsync('--skip.commit true')\n+        .then(function () {\n+          getPackageVersion().should.equal('1.1.0')\n+          var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+          content.should.match(/new feature from branch/)\n+          // check last commit message\n+          shell.exec('git log --oneline -n1').stdout.should.match(/feat: new feature from branch/)\n+        })\n+    })\n+  })\n })\n"
  }, {
    "begin time" : "Fri Dec 02 00:00:00 CST 2016",
    "end time" : "Tue Jun 06 00:00:00 CST 2017",
    "description" : "### Features* **cli:** print error and don't run with node <4, closes [#124](https://github.com/conventional-changelog/standard-version/issues/124) ([d0d71a5](https://github.com/conventional-changelog/standard-version/commit/d0d71a5))* add dry-run mode ([#187](https://github.com/conventional-changelog/standard-version/issues/187)) ([d073353](https://github.com/conventional-changelog/standard-version/commit/d073353))* add prebump, postbump, precommit, lifecycle scripts ([#186](https://github.com/conventional-changelog/standard-version/issues/186)) ([dfd1d12](https://github.com/conventional-changelog/standard-version/commit/dfd1d12))* add support for `npm-shrinkwrap.json` ([#185](https://github.com/conventional-changelog/standard-version/issues/185)) ([86af7fc](https://github.com/conventional-changelog/standard-version/commit/86af7fc))* add support for skipping lifecycle steps, polish lifecycle work ([#188](https://github.com/conventional-changelog/standard-version/issues/188)) ([d31dcdb](https://github.com/conventional-changelog/standard-version/commit/d31dcdb))* allow a version # to be provided for release-as, rather than just major, minor, patch. ([13eb9cd](https://github.com/conventional-changelog/standard-version/commit/13eb9cd))<a name=\"4.0.0\"></a>",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nindex ed30357..bab1008 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -2,7 +2,7 @@\n node_js:\n   - \"4\"\n   - \"5\"\n-  - \"node\"\n+  - \"stable\"\n before_script:\n   - git config --global user.name 'Travis-CI'\n   - git config --global user.email 'dummy@example.org'\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4f73185..4da1451 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -6,11 +6,6 @@\n # [4.0.0](https://github.com/conventional-changelog/standard-version/compare/v4.0.0-1...v4.0.0) (2016-12-02)\n \n \n-\n-<a name=\"4.0.0-1\"></a>\n-# [4.0.0-1](https://github.com/conventional-changelog/standard-version/compare/v3.0.0...v4.0.0-1) (2016-11-27)\n-\n-\n ### Bug Fixes\n \n * include merge commits in the changelog ([#139](https://github.com/conventional-changelog/standard-version/issues/139)) ([b6e1562](https://github.com/conventional-changelog/standard-version/commit/b6e1562))\ndiff --git a/README.md b/README.md\nindex 3e9e3bb..1440caf 100644\n--- a/README.md\n+++ b/README.md\n@@ -5,17 +5,17 @@\n [![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg?branch=master)](https://travis-ci.org/conventional-changelog/standard-version)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n-[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n+[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n \n > stop using `npm version`, use `standard-version` it rocks!\n \n-Automatic versioning and CHANGELOG management, using GitHub's new squash button and\n-the [recommended workflow](https://github.com/conventional-changelog/conventional-changelog-cli#recommended-workflow) for `conventional-changelog`.\n+Automatic versioning and CHANGELOG generation, using GitHub's squash button and\n+[conventional commit messages](https://conventionalcommits.org).\n \n _how it works:_\n \n 1. when you land commits on your `master` branch, select the _Squash and Merge_ option.\n-2. add a title and body that follows the [conventional-changelog-standard conventions](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md).\n+2. add a title and body that follows the [Conventional Commits Specification](https://conventionalcommits.org).\n 3. when you're ready to release to npm:\n   1. `git checkout master; git pull origin master`\n   2. run `standard-version`\n@@ -129,6 +129,8 @@\n ```bash\n # npm run script\n npm run release -- --release-as minor\n+# Or\n+npm run release -- --release-as 1.1.0\n ```\n \n you will get version `1.1.0` rather than the auto generated version `1.0.1`.\n@@ -150,6 +152,33 @@\n \n If you have your GPG key set up, add the `--sign` or `-s` flag to your `standard-version` command.\n \n+### Lifecycle scripts\n+\n+`standard-version` supports lifecycle scripts. These allow you to execute your\n+own supplementary commands during the release. The following\n+hooks are available:\n+\n+* `prebump`: executed before the version bump is calculated. If the `prebump`\n+  script returns a version #, it will be used rather than\n+  the version calculated by `standard-version`.\n+* `postbump`: executed after the version has been bumped and written to\n+  package.json. The flag `--new-version` is populated with the version that is\n+  being released.\n+* `precommit`: called after CHANGELOG.md and package.json have been updated,\n+  but before changes have been committed to git.\n+\n+Simply add the following to your package.json, to enable lifecycle scripts:\n+\n+```json\n+{\n+  \"standard-version\": {\n+    \"scripts\": {\n+      \"prebump\": \"echo 9.9.9\"\n+    }\n+  }\n+}\n+```\n+\n ### Committing generated artifacts in the release commit\n \n If you want to commit generated artifacts in the release commit (e.g. [#96](https://github.com/conventional-changelog/standard-version/issues/96)), you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n@@ -225,10 +254,10 @@\n \n ## Badges!\n \n-Tell your users that you adhere to the `standard-version` commit guidelines:\n+Tell your users that you adhere to the Conventional Commits specification:\n \n ```markdown\n-[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n+[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n ```\n \n ## FAQ\ndiff --git a/appveyor.yml b/appveyor.yml\nindex 538cdfb..ec5ba45 100644\n--- a/appveyor.yml\n+++ b/appveyor.yml\n@@ -1,10 +1,10 @@\n environment:\n   matrix:\n     - nodejs_version: '6'\n-    - nodejs_version: '5'\n-    - nodejs_version: '4'\n install:\n   - ps: Install-Product node $env:nodejs_version\n+  - git config --global user.name 'Appveyor'\n+  - git config --global user.email 'dummy@example.org'\n   - set CI=true\n   - npm -g install npm@latest\n   - set PATH=%APPDATA%\\npm;%PATH%\ndiff --git a/bin/cli.js b/bin/cli.js\nindex c80a2e1..70ef2d6 100755\n--- a/bin/cli.js\n+++ b/bin/cli.js\n@@ -2,8 +2,12 @@\n var standardVersion = require('../index')\n var cmdParser = require('../command')\n \n-standardVersion(cmdParser.argv, function (err) {\n-  if (err) {\n-    process.exit(1)\n-  }\n-})\n+/* istanbul ignore if */\n+if (process.version.match(/v(\\d+)\\./)[1] < 4) {\n+  console.error('standard-version: Node v4 or greater is required. `standard-version` did not run.')\n+} else {\n+  standardVersion(cmdParser.argv)\n+    .catch(() => {\n+      process.exit(1)\n+    })\n+}\ndiff --git a/command.js b/command.js\nindex 60bdfd0..0c41c6b 100755\n--- a/command.js\n+++ b/command.js\n@@ -7,7 +7,6 @@\n     describe: 'Specify the release type manually (like npm version <major|minor|patch>)',\n     requiresArg: true,\n     string: true,\n-    choices: ['major', 'minor', 'patch'],\n     global: true\n   })\n   .option('prerelease', {\n@@ -70,10 +69,22 @@\n     default: defaults.tagPrefix,\n     global: true\n   })\n+  .option('scripts', {\n+    describe: 'Scripts to execute for lifecycle events (prebump, precommit, etc.,)',\n+    default: {}\n+  })\n+  .check((argv) => {\n+    if (typeof argv.scripts !== 'object' || Array.isArray(argv.scripts)) {\n+      throw Error('hooks must be an object')\n+    } else {\n+      return true\n+    }\n+  })\n   .version()\n   .alias('version', 'v')\n   .help()\n   .alias('help', 'h')\n   .example('$0', 'Update changelog and tag release')\n   .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n+  .pkgConf('standard-version')\n   .wrap(97)\ndiff --git a/index.js b/index.js\nindex c7aa5ca..73e5dd1 100755\n--- a/index.js\n+++ b/index.js\n@@ -1,50 +1,60 @@\n-var conventionalRecommendedBump = require('conventional-recommended-bump')\n-var conventionalChangelog = require('conventional-changelog')\n-var path = require('path')\n+const conventionalRecommendedBump = require('conventional-recommended-bump')\n+const conventionalChangelog = require('conventional-changelog')\n+const path = require('path')\n \n-var chalk = require('chalk')\n-var figures = require('figures')\n-var exec = require('child_process').exec\n-var fs = require('fs')\n-var accessSync = require('fs-access').sync\n-var semver = require('semver')\n-var util = require('util')\n-var objectAssign = require('object-assign')\n+const chalk = require('chalk')\n+const figures = require('figures')\n+const fs = require('fs')\n+const accessSync = require('fs-access').sync\n+const semver = require('semver')\n+const util = require('util')\n \n-module.exports = function standardVersion (argv, done) {\n+const checkpoint = require('./lib/checkpoint')\n+const printError = require('./lib/print-error')\n+const runExec = require('./lib/run-exec')\n+const runLifecycleScript = require('./lib/run-lifecycle-script')\n+\n+module.exports = function standardVersion (argv) {\n   var pkgPath = path.resolve(process.cwd(), './package.json')\n   var pkg = require(pkgPath)\n+  var newVersion = pkg.version\n+  var scripts = argv.scripts || {}\n   var defaults = require('./defaults')\n-  var args = objectAssign({}, defaults, argv)\n+  var args = Object.assign({}, defaults, argv)\n \n-  bumpVersion(args.releaseAs, function (err, release) {\n-    if (err) {\n-      printError(args, err.message)\n-      return done(err)\n-    }\n-\n-    var newVersion = pkg.version\n-\n-    if (!args.firstRelease) {\n-      var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n-      newVersion = semver.inc(pkg.version, releaseType, args.prerelease)\n-      updateConfigs(args, newVersion)\n-    } else {\n-      checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n-    }\n-\n-    outputChangelog(args, function (err) {\n-      if (err) {\n-        return done(err)\n-      }\n-      commit(args, newVersion, function (err) {\n-        if (err) {\n-          return done(err)\n-        }\n-        return tag(newVersion, pkg.private, args, done)\n-      })\n+  return runLifecycleScript(args, 'prebump', null, scripts)\n+    .then((stdout) => {\n+      if (stdout && stdout.trim().length) args.releaseAs = stdout.trim()\n+      return bumpVersion(args.releaseAs)\n     })\n-  })\n+    .then((release) => {\n+      if (!args.firstRelease) {\n+        var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n+        newVersion = semver.valid(releaseType) || semver.inc(pkg.version, releaseType, args.prerelease)\n+        updateConfigs(args, newVersion)\n+      } else {\n+        checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n+      }\n+\n+      return runLifecycleScript(args, 'postbump', newVersion, scripts)\n+    })\n+    .then(() => {\n+      return outputChangelog(args)\n+    })\n+    .then(() => {\n+      return runLifecycleScript(args, 'precommit', newVersion, scripts)\n+    })\n+    .then((message) => {\n+      if (message && message.length) args.message = message\n+      return commit(args, newVersion)\n+    })\n+    .then(() => {\n+      return tag(newVersion, pkg.private, args)\n+    })\n+    .catch((err) => {\n+      printError(args, err.message)\n+      throw err\n+    })\n }\n \n /**\n@@ -58,6 +68,7 @@\n var configsToUpdate = {}\n function updateConfigs (args, newVersion) {\n   configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n+  configsToUpdate[path.resolve(process.cwd(), './npm-shrinkwrap.json')] = false\n   configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n   Object.keys(configsToUpdate).forEach(function (configPath) {\n     try {\n@@ -144,62 +155,52 @@\n }\n \n function bumpVersion (releaseAs, callback) {\n-  if (releaseAs) {\n-    callback(null, {\n-      releaseType: releaseAs\n-    })\n-  } else {\n-    conventionalRecommendedBump({\n-      preset: 'angular'\n-    }, function (err, release) {\n-      callback(err, release)\n-    })\n-  }\n-}\n-\n-function outputChangelog (argv, cb) {\n-  createIfMissing(argv)\n-  var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n-  var oldContent = fs.readFileSync(argv.infile, 'utf-8')\n-  // find the position of the last release and remove header:\n-  if (oldContent.indexOf('<a name=') !== -1) {\n-    oldContent = oldContent.substring(oldContent.indexOf('<a name='))\n-  }\n-  var content = ''\n-  var changelogStream = conventionalChangelog({\n-    preset: 'angular'\n-  }, undefined, {merges: null})\n-    .on('error', function (err) {\n-      return cb(err)\n-    })\n-\n-  changelogStream.on('data', function (buffer) {\n-    content += buffer.toString()\n-  })\n-\n-  changelogStream.on('end', function () {\n-    checkpoint(argv, 'outputting changes to %s', [argv.infile])\n-    fs.writeFileSync(argv.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'), 'utf-8')\n-    return cb()\n-  })\n-}\n-\n-function handledExec (argv, cmd, errorCb, successCb) {\n-  // Exec given cmd and handle possible errors\n-  exec(cmd, function (err, stdout, stderr) {\n-    // If exec returns content in stderr, but no error, print it as a warning\n-    // If exec returns an error, print it and exit with return code 1\n-    if (err) {\n-      printError(argv, stderr || err.message)\n-      return errorCb(err)\n-    } else if (stderr) {\n-      printError(argv, stderr, {level: 'warn', color: 'yellow'})\n+  return new Promise((resolve, reject) => {\n+    if (releaseAs) {\n+      return resolve({\n+        releaseType: releaseAs\n+      })\n+    } else {\n+      conventionalRecommendedBump({\n+        preset: 'angular'\n+      }, function (err, release) {\n+        if (err) return reject(err)\n+        else return resolve(release)\n+      })\n     }\n-    successCb()\n   })\n }\n \n-function commit (argv, newVersion, cb) {\n+function outputChangelog (argv) {\n+  return new Promise((resolve, reject) => {\n+    createIfMissing(argv)\n+    var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n+    var oldContent = fs.readFileSync(argv.infile, 'utf-8')\n+    // find the position of the last release and remove header:\n+    if (oldContent.indexOf('<a name=') !== -1) {\n+      oldContent = oldContent.substring(oldContent.indexOf('<a name='))\n+    }\n+    var content = ''\n+    var changelogStream = conventionalChangelog({\n+      preset: 'angular'\n+    }, undefined, {merges: null})\n+      .on('error', function (err) {\n+        return reject(err)\n+      })\n+\n+    changelogStream.on('data', function (buffer) {\n+      content += buffer.toString()\n+    })\n+\n+    changelogStream.on('end', function () {\n+      checkpoint(argv, 'outputting changes to %s', [argv.infile])\n+      fs.writeFileSync(argv.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'), 'utf-8')\n+      return resolve()\n+    })\n+  })\n+}\n+\n+function commit (argv, newVersion) {\n   var msg = 'committing %s'\n   var args = [argv.infile]\n   var verify = argv.verify === false || argv.n ? '--no-verify ' : ''\n@@ -214,18 +215,17 @@\n     }\n   })\n   checkpoint(argv, msg, args)\n-  handledExec(argv, 'git add' + toAdd + ' ' + argv.infile, cb, function () {\n-    handledExec(argv, 'git commit ' + verify + (argv.sign ? '-S ' : '') + (argv.commitAll ? '' : (argv.infile + toAdd)) + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n-      cb()\n+  return runExec(argv, 'git add' + toAdd + ' ' + argv.infile)\n+    .then(() => {\n+      return runExec(argv, 'git commit ' + verify + (argv.sign ? '-S ' : '') + (argv.commitAll ? '' : (argv.infile + toAdd)) + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"')\n     })\n-  })\n }\n \n function formatCommitMessage (msg, newVersion) {\n   return String(msg).indexOf('%s') !== -1 ? util.format(msg, newVersion) : msg\n }\n \n-function tag (newVersion, pkgPrivate, argv, cb) {\n+function tag (newVersion, pkgPrivate, argv) {\n   var tagOption\n   if (argv.sign) {\n     tagOption = '-s '\n@@ -233,13 +233,13 @@\n     tagOption = '-a '\n   }\n   checkpoint(argv, 'tagging release %s', [newVersion])\n-  handledExec(argv, 'git tag ' + tagOption + argv.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n-    var message = 'git push --follow-tags origin master'\n-    if (pkgPrivate !== true) message += '; npm publish'\n+  return runExec(argv, 'git tag ' + tagOption + argv.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"')\n+    .then(() => {\n+      var message = 'git push --follow-tags origin master'\n+      if (pkgPrivate !== true) message += '; npm publish'\n \n-    checkpoint(argv, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n-    cb()\n-  })\n+      checkpoint(argv, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n+    })\n }\n \n function createIfMissing (argv) {\n@@ -253,22 +253,3 @@\n     }\n   }\n }\n-\n-function checkpoint (argv, msg, args, figure) {\n-  if (!argv.silent) {\n-    console.info((figure || chalk.green(figures.tick)) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n-      return chalk.bold(arg)\n-    }))))\n-  }\n-}\n-\n-function printError (argv, msg, opts) {\n-  if (!argv.silent) {\n-    opts = objectAssign({\n-      level: 'error',\n-      color: 'red'\n-    }, opts)\n-\n-    console[opts.level](chalk[opts.color](msg))\n-  }\n-}\ndiff --git a/lib/checkpoint.js b/lib/checkpoint.js\nnew file mode 100644\nindex 0000000..ff7f5d1\n--- /dev/null\n+++ b/lib/checkpoint.js\n@@ -0,0 +1,11 @@\n+const chalk = require('chalk')\n+const figures = require('figures')\n+const util = require('util')\n+\n+module.exports = function (argv, msg, args, figure) {\n+  if (!argv.silent) {\n+    console.info((figure || chalk.green(figures.tick)) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n+      return chalk.bold(arg)\n+    }))))\n+  }\n+}\ndiff --git a/lib/print-error.js b/lib/print-error.js\nnew file mode 100644\nindex 0000000..983aeac\n--- /dev/null\n+++ b/lib/print-error.js\n@@ -0,0 +1,12 @@\n+const chalk = require('chalk')\n+\n+module.exports = function (argv, msg, opts) {\n+  if (!argv.silent) {\n+    opts = Object.assign({\n+      level: 'error',\n+      color: 'red'\n+    }, opts)\n+\n+    console[opts.level](chalk[opts.color](msg))\n+  }\n+}\ndiff --git a/lib/run-exec.js b/lib/run-exec.js\nnew file mode 100644\nindex 0000000..bfca976\n--- /dev/null\n+++ b/lib/run-exec.js\n@@ -0,0 +1,19 @@\n+const exec = require('child_process').exec\n+const printError = require('./print-error')\n+\n+module.exports = function (argv, cmd) {\n+  return new Promise((resolve, reject) => {\n+    // Exec given cmd and handle possible errors\n+    exec(cmd, function (err, stdout, stderr) {\n+      // If exec returns content in stderr, but no error, print it as a warning\n+      // If exec returns an error, print it and exit with return code 1\n+      if (err) {\n+        printError(argv, stderr || err.message)\n+        return reject(err)\n+      } else if (stderr) {\n+        printError(argv, stderr, {level: 'warn', color: 'yellow'})\n+      }\n+      return resolve(stdout)\n+    })\n+  })\n+}\ndiff --git a/lib/run-lifecycle-hook.js b/lib/run-lifecycle-hook.js\nnew file mode 100644\nindex 0000000..caaeeba\n--- /dev/null\n+++ b/lib/run-lifecycle-hook.js\n@@ -0,0 +1,12 @@\n+const chalk = require('chalk')\n+const checkpoint = require('./checkpoint')\n+const figures = require('figures')\n+const runExec = require('./run-exec')\n+\n+module.exports = function (argv, hookName, newVersion, hooks, cb) {\n+  if (!hooks[hookName]) return Promise.resolve()\n+  var command = hooks[hookName] + ' --new-version=\"' + newVersion + '\"'\n+  checkpoint(argv, 'Running lifecycle hook \"%s\"', [hookName])\n+  checkpoint(argv, '- hook command: \"%s\"', [command], chalk.blue(figures.info))\n+  return runExec(argv, command)\n+}\ndiff --git a/lib/run-lifecycle-script.js b/lib/run-lifecycle-script.js\nnew file mode 100644\nindex 0000000..2ad322b\n--- /dev/null\n+++ b/lib/run-lifecycle-script.js\n@@ -0,0 +1,13 @@\n+const chalk = require('chalk')\n+const checkpoint = require('./checkpoint')\n+const figures = require('figures')\n+const runExec = require('./run-exec')\n+\n+module.exports = function (argv, hookName, newVersion, scripts, cb) {\n+  if (!scripts[hookName]) return Promise.resolve()\n+  var command = scripts[hookName]\n+  if (newVersion) command += ' --new-version=\"' + newVersion + '\"'\n+  checkpoint(argv, 'Running lifecycle script \"%s\"', [hookName])\n+  checkpoint(argv, '- execute command: \"%s\"', [command], chalk.blue(figures.info))\n+  return runExec(argv, command)\n+}\ndiff --git a/package.json b/package.json\nindex dd128ff..7f21bc8 100644\n--- a/package.json\n+++ b/package.json\n@@ -9,6 +9,9 @@\n     \"test\": \"nyc mocha --timeout=20000 test.js\",\n     \"release\": \"bin/cli.js\"\n   },\n+  \"nyc\": {\n+    \"exclude\": [\"tmp/**\"]\n+  },\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n@@ -35,22 +38,20 @@\n   \"dependencies\": {\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-recommended-bump\": \"^0.3.0\",\n+    \"conventional-recommended-bump\": \"^1.0.0\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n-    \"object-assign\": \"^4.1.0\",\n     \"semver\": \"^5.1.0\",\n-    \"yargs\": \"^6.0.0\"\n+    \"yargs\": \"^8.0.1\"\n   },\n   \"devDependencies\": {\n-    \"bluebird\": \"^3.4.6\",\n     \"chai\": \"^3.5.0\",\n     \"coveralls\": \"^2.11.9\",\n     \"mocha\": \"^3.1.0\",\n     \"mock-git\": \"^1.0.2\",\n     \"mockery\": \"^2.0.0\",\n-    \"nyc\": \"^10.0.0\",\n+    \"nyc\": \"^11.0.2\",\n     \"shelljs\": \"^0.7.3\",\n-    \"standard\": \"^8.0.0\"\n+    \"standard\": \"^10.0.0\"\n   }\n }\ndiff --git a/test.js b/test.js\nindex af217bc..77db31d 100644\n--- a/test.js\n+++ b/test.js\n@@ -2,7 +2,6 @@\n \n 'use strict'\n \n-var objectAssign = require('object-assign')\n var shell = require('shelljs')\n var fs = require('fs')\n var path = require('path')\n@@ -10,11 +9,10 @@\n var mockGit = require('mock-git')\n var mockery = require('mockery')\n var semver = require('semver')\n-var Promise = require('bluebird')\n var cli = require('./command')\n var standardVersion = require('./index')\n \n-var should = require('chai').should()\n+require('chai').should()\n \n var cliPath = path.resolve(__dirname, './bin/cli.js')\n \n@@ -39,27 +37,45 @@\n }\n \n function execCliAsync (argString) {\n-  return Promise.promisify(standardVersion)(cli.parse('standard-version ' + argString + ' --silent'))\n+  return standardVersion(cli.parse('standard-version ' + argString + ' --silent'))\n }\n \n function writePackageJson (version, option) {\n   option = option || {}\n-  var pkg = objectAssign(option, {version: version})\n+  var pkg = Object.assign(option, {version: version})\n   fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n   delete require.cache[require.resolve(path.join(process.cwd(), 'package.json'))]\n }\n \n function writeBowerJson (version, option) {\n   option = option || {}\n-  var bower = objectAssign(option, { version: version })\n+  var bower = Object.assign(option, {version: version})\n   fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n }\n \n+function writeNpmShrinkwrapJson (version, option) {\n+  option = option || {}\n+  var shrinkwrap = Object.assign(option, { version: version })\n+  fs.writeFileSync('npm-shrinkwrap.json', JSON.stringify(shrinkwrap), 'utf-8')\n+}\n+\n function writeGitPreCommitHook () {\n   fs.writeFileSync('.git/hooks/pre-commit', '#!/bin/sh\\necho \"precommit ran\"\\nexit 1', 'utf-8')\n   fs.chmodSync('.git/hooks/pre-commit', '755')\n }\n \n+function writePostBumpHook (causeError) {\n+  writeHook('postbump', causeError)\n+}\n+\n+function writeHook (hookName, causeError, script) {\n+  shell.mkdir('-p', 'scripts')\n+  var content = script || 'console.error(\"' + hookName + ' ran\")'\n+  content += causeError ? '\\nthrow new Error(\"' + hookName + '-failure\")' : ''\n+  fs.writeFileSync('scripts/' + hookName + '.js', content, 'utf-8')\n+  fs.chmodSync('scripts/' + hookName + '.js', '755')\n+}\n+\n function initInTempFolder () {\n   shell.rm('-rf', 'tmp')\n   shell.config.silent = true\n@@ -216,6 +232,116 @@\n     })\n   })\n \n+  describe('lifecycle scripts', () => {\n+    describe('prebump hook', function () {\n+      it('should allow prebump hook to return an alternate version #', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'prebump': 'node scripts/prebump'\n+            }\n+          }\n+        })\n+        writeHook('prebump', false, 'console.log(\"9.9.9\")')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.stdout.should.match(/9\\.9\\.9/)\n+        result.code.should.equal(0)\n+      })\n+    })\n+\n+    describe('postbump hook', function () {\n+      it('should run the postbump hook when provided', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'postbump': 'node scripts/postbump'\n+            }\n+          }\n+        })\n+        writePostBumpHook()\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(0)\n+        result.stderr.should.match(/postbump ran/)\n+      })\n+\n+      it('should run the postbump and exit with error when postbump fails', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'postbump': 'node scripts/postbump'\n+            }\n+          }\n+        })\n+        writePostBumpHook(true)\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(1)\n+        result.stderr.should.match(/postbump-failure/)\n+      })\n+    })\n+\n+    describe('precommit hook', function () {\n+      it('should run the precommit hook when provided', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'precommit': 'node scripts/precommit'\n+            }\n+          }\n+        })\n+        writeHook('precommit')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(0)\n+        result.stderr.should.match(/precommit ran/)\n+      })\n+\n+      it('should run the precommit hook and exit with error when precommit fails', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'precommit': 'node scripts/precommit'\n+            }\n+          }\n+        })\n+        writeHook('precommit', true)\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(1)\n+        result.stderr.should.match(/precommit-failure/)\n+      })\n+\n+      it('should allow an alternate commit message to be provided by precommit script', function () {\n+        writePackageJson('1.0.0', {\n+          'standard-version': {\n+            'scripts': {\n+              'precommit': 'node scripts/precommit'\n+            }\n+          }\n+        })\n+        writeHook('precommit', false, 'console.log(\"releasing %s delivers #222\")')\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('feat: first commit')\n+        var result = execCli('--patch')\n+        result.code.should.equal(0)\n+        shell.exec('git log --oneline -n1').should.match(/delivers #222/)\n+      })\n+    })\n+  })\n+\n   describe('pre-release', function () {\n     it('works fine without specifying a tag id when prereleasing', function () {\n       writePackageJson('1.0.0')\n@@ -290,6 +416,34 @@\n       })\n     })\n \n+    describe('release-as-exact', function () {\n+      it('releases as v100.0.0', function () {\n+        var originVer = '1.0.0'\n+        writePackageJson(originVer)\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('fix: first commit')\n+\n+        return execCliAsync('--release-as v100.0.0')\n+          .then(function () {\n+            getPackageVersion().should.equal('100.0.0')\n+          })\n+      })\n+\n+      it('releases as 200.0.0-amazing', function () {\n+        var originVer = '1.0.0'\n+        writePackageJson(originVer)\n+        fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+        commit('fix: first commit')\n+\n+        return execCliAsync('--release-as 200.0.0-amazing')\n+          .then(function () {\n+            getPackageVersion().should.equal('200.0.0-amazing')\n+          })\n+      })\n+    })\n+\n     it('creates a prerelease with a new minor version after two prerelease patches', function () {\n       writePackageJson('1.0.0')\n       fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n@@ -433,11 +587,11 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n \n-      require('./index')({silent: true}, function (err) {\n-        should.exist(err)\n-        err.message.should.match(/bump err/)\n-        done()\n-      })\n+      require('./index')({silent: true})\n+        .catch((err) => {\n+          err.message.should.match(/bump err/)\n+          done()\n+        })\n     })\n   })\n \n@@ -463,11 +617,11 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n \n-      require('./index')({silent: true}, function (err) {\n-        should.exist(err)\n-        err.message.should.match(/changelog err/)\n-        done()\n-      })\n+      require('./index')({silent: true})\n+        .catch((err) => {\n+          err.message.should.match(/changelog err/)\n+          return done()\n+        })\n     })\n   })\n \n@@ -476,15 +630,14 @@\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('feat: new feature!')\n \n-    require('./index')({silent: true}, function (err) {\n-      should.not.exist(err)\n-\n-      // check last commit message\n-      shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-      // check annotated tag message\n-      shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n-      done()\n-    })\n+    require('./index')({silent: true})\n+      .then(() => {\n+        // check last commit message\n+        shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+        // check annotated tag message\n+        shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+        done()\n+      })\n   })\n \n   describe('bower.json support', function () {\n@@ -492,16 +645,34 @@\n       writeBowerJson('1.0.0')\n     })\n \n-    it('bumps verson # in bower.json', function (done) {\n+    it('bumps version # in bower.json', function (done) {\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('feat: new feature!')\n-      require('./index')({silent: true}, function (err) {\n-        if (err) return done(err)\n-        JSON.parse(fs.readFileSync('package.json', 'utf-8')).version.should.equal('1.1.0')\n-        getPackageVersion().should.equal('1.1.0')\n-        done()\n-      })\n+      require('./index')({silent: true})\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('bower.json', 'utf-8')).version.should.equal('1.1.0')\n+          getPackageVersion().should.equal('1.1.0')\n+          return done()\n+        })\n+    })\n+  })\n+\n+  describe('npm-shrinkwrap.json support', function () {\n+    beforeEach(function () {\n+      writeNpmShrinkwrapJson('1.0.0')\n+    })\n+\n+    it('bumps version # in npm-shrinkwrap.json', function (done) {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      require('./index')({silent: true})\n+        .then(() => {\n+          JSON.parse(fs.readFileSync('npm-shrinkwrap.json', 'utf-8')).version.should.equal('1.1.0')\n+          getPackageVersion().should.equal('1.1.0')\n+          return done()\n+        })\n     })\n   })\n })\n"
  }, {
    "begin time" : "Thu Oct 06 00:00:00 CST 2016",
    "end time" : "Fri Dec 02 00:00:00 CST 2016",
    "description" : "### Bug Fixes* include merge commits in the changelog ([#139](https://github.com/conventional-changelog/standard-version/issues/139)) ([b6e1562](https://github.com/conventional-changelog/standard-version/commit/b6e1562))* should print message before we bump version ([2894bbc](https://github.com/conventional-changelog/standard-version/commit/2894bbc))* support a wording change made to git status in git v2.9.1 ([#140](https://github.com/conventional-changelog/standard-version/issues/140)) ([80004ec](https://github.com/conventional-changelog/standard-version/commit/80004ec))### Features* add support for bumping version # in bower.json ([#148](https://github.com/conventional-changelog/standard-version/issues/148)) ([b788c5f](https://github.com/conventional-changelog/standard-version/commit/b788c5f))* make tag prefix configurable ([#143](https://github.com/conventional-changelog/standard-version/issues/143)) ([70b20c8](https://github.com/conventional-changelog/standard-version/commit/70b20c8))* support releasing a custom version, including pre-releases ([#129](https://github.com/conventional-changelog/standard-version/issues/129)) ([068008d](https://github.com/conventional-changelog/standard-version/commit/068008d))### BREAKING CHANGES* merge commits are now included in the CHANGELOG.<a name=\"3.0.0\"></a>",
    "hunks" : "diff --git a/.gitignore b/.gitignore\nindex 3588495..7e95d3c 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,3 +11,6 @@\n /.settings\n /.idea\n /.vscode\n+\n+# coverage\n+coverage\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 0a5af4b..6c9768b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,58 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"4.0.0-1\"></a>\n+# [4.0.0-1](https://github.com/conventional-changelog/standard-version/compare/v3.0.0...v4.0.0-1) (2016-11-27)\n+\n+\n+### Bug Fixes\n+\n+* include merge commits in the changelog ([#139](https://github.com/conventional-changelog/standard-version/issues/139)) ([b6e1562](https://github.com/conventional-changelog/standard-version/commit/b6e1562))\n+* should print message before we bump version ([2894bbc](https://github.com/conventional-changelog/standard-version/commit/2894bbc))\n+* support a wording change made to git status in git v2.9.1 ([#140](https://github.com/conventional-changelog/standard-version/issues/140)) ([80004ec](https://github.com/conventional-changelog/standard-version/commit/80004ec))\n+\n+\n+### Features\n+\n+* add support for bumping version # in bower.json ([#148](https://github.com/conventional-changelog/standard-version/issues/148)) ([b788c5f](https://github.com/conventional-changelog/standard-version/commit/b788c5f))\n+* make tag prefix configurable ([#143](https://github.com/conventional-changelog/standard-version/issues/143)) ([70b20c8](https://github.com/conventional-changelog/standard-version/commit/70b20c8))\n+* support releasing a custom version, including pre-releases ([#129](https://github.com/conventional-changelog/standard-version/issues/129)) ([068008d](https://github.com/conventional-changelog/standard-version/commit/068008d))\n+\n+\n+### BREAKING CHANGES\n+\n+* merge commits are now included in the CHANGELOG.\n+\n+\n+<a name=\"3.0.0\"></a>\n+# [3.0.0](https://github.com/conventional-changelog/standard-version/compare/v2.3.0...v3.0.0) (2016-10-06)\n+\n+\n+### Bug Fixes\n+\n+* check the private field in package.json([#102](https://github.com/conventional-changelog/standard-version/issues/102)) ([#103](https://github.com/conventional-changelog/standard-version/issues/103)) ([2ce4160](https://github.com/conventional-changelog/standard-version/commit/2ce4160))\n+* **err:** don't fail on stderr output, but print the output to stderr ([#110](https://github.com/conventional-changelog/standard-version/issues/110)) ([f7a4915](https://github.com/conventional-changelog/standard-version/commit/f7a4915)), closes [#91](https://github.com/conventional-changelog/standard-version/issues/91)\n+\n+\n+### Chores\n+\n+* package.json engines field >=4.0, drop Node 0.10 and 0.12 ([28ff65a](https://github.com/conventional-changelog/standard-version/commit/28ff65a))\n+\n+\n+### Features\n+\n+* **options:** add --silent flag and option for squelching output ([2a3fa61](https://github.com/conventional-changelog/standard-version/commit/2a3fa61))\n+* added support for commitAll option in CLI ([#121](https://github.com/conventional-changelog/standard-version/issues/121)) ([a903f4d](https://github.com/conventional-changelog/standard-version/commit/a903f4d))\n+* separate cli and defaults from base functionality ([34a6a4e](https://github.com/conventional-changelog/standard-version/commit/34a6a4e))\n+\n+\n+### BREAKING CHANGES\n+\n+* drop support for Node < 4.0 to enable usage of\n+new tools and packages.\n+\n+\n+\n <a name=\"2.4.0\"></a>\n # [2.4.0](https://github.com/conventional-changelog/standard-version/compare/v2.3.1...v2.4.0) (2016-07-13)\n \ndiff --git a/README.md b/README.md\nindex 9edfeb7..3e9e3bb 100644\n--- a/README.md\n+++ b/README.md\n@@ -23,9 +23,9 @@\n \n `standard-version` does the following:\n \n-1. bumps the version in _package.json_ (based on your commit history)\n+1. bumps the version in _package.json/bower.json_ (based on your commit history)\n 2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md_\n-3. commits _package.json_ and _CHANGELOG.md_\n+3. commits _package.json (et al.)_ and _CHANGELOG.md_\n 4. tags a new release\n \n ## Installation\n@@ -77,7 +77,7 @@\n standard-version --first-release\n ```\n \n-This will tag a release **without bumping the version in package.json**.\n+This will tag a release **without bumping the version in package.json (_et al._)**.\n \n When ready, push the git tag and `npm publish` your first release. \\o/\n \n@@ -96,6 +96,45 @@\n \n After you cut a release, you can push the new git tag and `npm publish` (or `npm publish --tag next`) when you're ready.\n \n+### Release as a pre-release\n+\n+Use the flag `--prerelease` to generate pre-releases:\n+\n+Suppose the last version of your code is `1.0.0`, and your code to be committed has patched changes. Run:\n+\n+```bash\n+# npm run script\n+npm run release -- --prerelease\n+```\n+you will get version `1.0.1-0`.\n+\n+If you want to name the pre-release, you specify the name via `--prerelease <name>`.\n+\n+For example, suppose your pre-release should contain the `alpha` prefix:\n+\n+```bash\n+# npm run script\n+npm run release -- --prerelease alpha\n+```\n+\n+this will tag the version `1.0.1-alpha.0`\n+\n+### Release as a target type imperatively like `npm version`\n+\n+To forgo the automated version bump use `--release-as` with the argument `major`, `minor` or `patch`:\n+\n+Suppose the last version of your code is `1.0.0`, you've only landed `fix:` commits, but\n+you would like your next release to be a `minor`. Simply do:\n+\n+```bash\n+# npm run script\n+npm run release -- --release-as minor\n+```\n+\n+you will get version `1.1.0` rather than the auto generated version `1.0.1`.\n+\n+> **NOTE:** you can combine `--release-as` and `--prerelease` to generate a release. This is useful when publishing experimental feature(s).\n+\n ### Prevent Git Hooks\n \n If you use git hooks, like pre-commit, to test your code before committing, you can prevent hooks from being verified during the commit step by passing the `--no-verify` option:\n@@ -111,6 +150,15 @@\n \n If you have your GPG key set up, add the `--sign` or `-s` flag to your `standard-version` command.\n \n+### Committing generated artifacts in the release commit\n+\n+If you want to commit generated artifacts in the release commit (e.g. [#96](https://github.com/conventional-changelog/standard-version/issues/96)), you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n+\n+```json\n+\"prerelease\": \"webpack -p --bail\",\n+\"release\": \"git add <file(s) to commit> && standard-version -a\"\n+```\n+\n ### CLI Help\n \n ```sh\ndiff --git a/bin/cli.js b/bin/cli.js\nnew file mode 100755\nindex 0000000..c80a2e1\n--- /dev/null\n+++ b/bin/cli.js\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env node\n+var standardVersion = require('../index')\n+var cmdParser = require('../command')\n+\n+standardVersion(cmdParser.argv, function (err) {\n+  if (err) {\n+    process.exit(1)\n+  }\n+})\ndiff --git a/cli.js b/cli.js\ndeleted file mode 100644\nindex a23f874..0000000\n--- a/cli.js\n+++ /dev/null\n@@ -1,58 +0,0 @@\n-#!/usr/bin/env node\n-var standardVersion = require('./index')\n-var defaults = require('./defaults')\n-\n-var argv = require('yargs')\n-  .usage('Usage: $0 [options]')\n-  .option('infile', {\n-    alias: 'i',\n-    describe: 'Read the CHANGELOG from this file',\n-    default: defaults.infile,\n-    global: true\n-  })\n-  .option('message', {\n-    alias: 'm',\n-    describe: 'Commit message, replaces %s with new version',\n-    type: 'string',\n-    default: defaults.message,\n-    global: true\n-  })\n-  .option('first-release', {\n-    alias: 'f',\n-    describe: 'Is this the first release?',\n-    type: 'boolean',\n-    default: defaults.firstRelease,\n-    global: true\n-  })\n-  .option('sign', {\n-    alias: 's',\n-    describe: 'Should the git commit and tag be signed?',\n-    type: 'boolean',\n-    default: defaults.sign,\n-    global: true\n-  })\n-  .option('no-verify', {\n-    alias: 'n',\n-    describe: 'Bypass pre-commit or commit-msg git hooks during the commit phase',\n-    type: 'boolean',\n-    default: defaults.noVerify,\n-    global: true\n-  })\n-  .option('silent', {\n-    describe: 'Don\\'t print logs and errors',\n-    type: 'boolean',\n-    default: defaults.silent,\n-    global: true\n-  })\n-  .help()\n-  .alias('help', 'h')\n-  .example('$0', 'Update changelog and tag release')\n-  .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n-  .wrap(97)\n-  .argv\n-\n-standardVersion(argv, function (err) {\n-  if (err) {\n-    process.exit(1)\n-  }\n-})\ndiff --git a/command.js b/command.js\nnew file mode 100755\nindex 0000000..60bdfd0\n--- /dev/null\n+++ b/command.js\n@@ -0,0 +1,79 @@\n+var defaults = require('./defaults')\n+\n+module.exports = require('yargs')\n+  .usage('Usage: $0 [options]')\n+  .option('release-as', {\n+    alias: 'r',\n+    describe: 'Specify the release type manually (like npm version <major|minor|patch>)',\n+    requiresArg: true,\n+    string: true,\n+    choices: ['major', 'minor', 'patch'],\n+    global: true\n+  })\n+  .option('prerelease', {\n+    alias: 'p',\n+    describe: 'make a pre-release with optional option value to specify a tag id',\n+    string: true,\n+    global: true\n+  })\n+  .option('infile', {\n+    alias: 'i',\n+    describe: 'Read the CHANGELOG from this file',\n+    default: defaults.infile,\n+    global: true\n+  })\n+  .option('message', {\n+    alias: 'm',\n+    describe: 'Commit message, replaces %s with new version',\n+    type: 'string',\n+    default: defaults.message,\n+    global: true\n+  })\n+  .option('first-release', {\n+    alias: 'f',\n+    describe: 'Is this the first release?',\n+    type: 'boolean',\n+    default: defaults.firstRelease,\n+    global: true\n+  })\n+  .option('sign', {\n+    alias: 's',\n+    describe: 'Should the git commit and tag be signed?',\n+    type: 'boolean',\n+    default: defaults.sign,\n+    global: true\n+  })\n+  .option('no-verify', {\n+    alias: 'n',\n+    describe: 'Bypass pre-commit or commit-msg git hooks during the commit phase',\n+    type: 'boolean',\n+    default: defaults.noVerify,\n+    global: true\n+  })\n+  .option('commit-all', {\n+    alias: 'a',\n+    describe: 'Commit all staged changes, not just files affected by standard-version',\n+    type: 'boolean',\n+    default: defaults.commitAll,\n+    global: true\n+  })\n+  .option('silent', {\n+    describe: 'Don\\'t print logs and errors',\n+    type: 'boolean',\n+    default: defaults.silent,\n+    global: true\n+  })\n+  .option('tag-prefix', {\n+    alias: 't',\n+    describe: 'Set a custom prefix for the git tag to be created',\n+    type: 'string',\n+    default: defaults.tagPrefix,\n+    global: true\n+  })\n+  .version()\n+  .alias('version', 'v')\n+  .help()\n+  .alias('help', 'h')\n+  .example('$0', 'Update changelog and tag release')\n+  .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n+  .wrap(97)\ndiff --git a/defaults.json b/defaults.json\nindex 196733e..26ef43c 100644\n--- a/defaults.json\n+++ b/defaults.json\n@@ -4,5 +4,7 @@\n   \"firstRelease\": false,\n   \"sign\": false,\n   \"noVerify\": false,\n-  \"silent\": false\n+  \"commitAll\": false,\n+  \"silent\": false,\n+  \"tagPrefix\": \"v\"\n }\ndiff --git a/index.js b/index.js\nindex e4212df..c7aa5ca 100755\n--- a/index.js\n+++ b/index.js\n@@ -15,41 +15,148 @@\n   var pkgPath = path.resolve(process.cwd(), './package.json')\n   var pkg = require(pkgPath)\n   var defaults = require('./defaults')\n+  var args = objectAssign({}, defaults, argv)\n \n-  argv = objectAssign(defaults, argv)\n-\n-  conventionalRecommendedBump({\n-    preset: 'angular'\n-  }, function (err, release) {\n+  bumpVersion(args.releaseAs, function (err, release) {\n     if (err) {\n-      printError(argv, err.message)\n+      printError(args, err.message)\n       return done(err)\n     }\n \n     var newVersion = pkg.version\n-    if (!argv.firstRelease) {\n-      newVersion = semver.inc(pkg.version, release.releaseType)\n-      checkpoint(argv, 'bumping version in package.json from %s to %s', [pkg.version, newVersion])\n-      pkg.version = newVersion\n-      fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n', 'utf-8')\n+\n+    if (!args.firstRelease) {\n+      var releaseType = getReleaseType(args.prerelease, release.releaseType, pkg.version)\n+      newVersion = semver.inc(pkg.version, releaseType, args.prerelease)\n+      updateConfigs(args, newVersion)\n     } else {\n-      checkpoint(argv, 'skip version bump on first release', [], chalk.red(figures.cross))\n+      checkpoint(args, 'skip version bump on first release', [], chalk.red(figures.cross))\n     }\n \n-    outputChangelog(argv, function (err) {\n+    outputChangelog(args, function (err) {\n       if (err) {\n         return done(err)\n       }\n-      commit(argv, newVersion, function (err) {\n+      commit(args, newVersion, function (err) {\n         if (err) {\n           return done(err)\n         }\n-        return tag(newVersion, pkg.private, argv, done)\n+        return tag(newVersion, pkg.private, args, done)\n       })\n     })\n   })\n }\n \n+/**\n+ * attempt to update the version # in a collection of common config\n+ * files, e.g., package.json, bower.json.\n+ *\n+ * @param argv config object\n+ * @param newVersion version # to update to.\n+ * @return {string}\n+ */\n+var configsToUpdate = {}\n+function updateConfigs (args, newVersion) {\n+  configsToUpdate[path.resolve(process.cwd(), './package.json')] = false\n+  configsToUpdate[path.resolve(process.cwd(), './bower.json')] = false\n+  Object.keys(configsToUpdate).forEach(function (configPath) {\n+    try {\n+      var stat = fs.lstatSync(configPath)\n+      if (stat.isFile()) {\n+        var config = require(configPath)\n+        var filename = path.basename(configPath)\n+        checkpoint(args, 'bumping version in ' + filename + ' from %s to %s', [config.version, newVersion])\n+        config.version = newVersion\n+        fs.writeFileSync(configPath, JSON.stringify(config, null, 2) + '\\n', 'utf-8')\n+        // flag any config files that we modify the version # for\n+        // as having been updated.\n+        configsToUpdate[configPath] = true\n+      }\n+    } catch (err) {\n+      if (err.code !== 'ENOENT') console.warn(err.message)\n+    }\n+  })\n+}\n+\n+function getReleaseType (prerelease, expectedReleaseType, currentVersion) {\n+  if (isString(prerelease)) {\n+    if (isInPrerelease(currentVersion)) {\n+      if (shouldContinuePrerelease(currentVersion, expectedReleaseType) ||\n+        getTypePriority(getCurrentActiveType(currentVersion)) > getTypePriority(expectedReleaseType)\n+      ) {\n+        return 'prerelease'\n+      }\n+    }\n+\n+    return 'pre' + expectedReleaseType\n+  } else {\n+    return expectedReleaseType\n+  }\n+}\n+\n+function isString (val) {\n+  return typeof val === 'string'\n+}\n+\n+/**\n+ * if a version is currently in pre-release state,\n+ * and if it current in-pre-release type is same as expect type,\n+ * it should continue the pre-release with the same type\n+ *\n+ * @param version\n+ * @param expectType\n+ * @return {boolean}\n+ */\n+function shouldContinuePrerelease (version, expectType) {\n+  return getCurrentActiveType(version) === expectType\n+}\n+\n+function isInPrerelease (version) {\n+  return Array.isArray(semver.prerelease(version))\n+}\n+\n+var TypeList = ['major', 'minor', 'patch'].reverse()\n+\n+/**\n+ * extract the in-pre-release type in target version\n+ *\n+ * @param version\n+ * @return {string}\n+ */\n+function getCurrentActiveType (version) {\n+  var typelist = TypeList\n+  for (var i = 0; i < typelist.length; i++) {\n+    if (semver[typelist[i]](version)) {\n+      return typelist[i]\n+    }\n+  }\n+}\n+\n+/**\n+ * calculate the priority of release type,\n+ * major - 2, minor - 1, patch - 0\n+ *\n+ * @param type\n+ * @return {number}\n+ */\n+function getTypePriority (type) {\n+  return TypeList.indexOf(type)\n+}\n+\n+function bumpVersion (releaseAs, callback) {\n+  if (releaseAs) {\n+    callback(null, {\n+      releaseType: releaseAs\n+    })\n+  } else {\n+    conventionalRecommendedBump({\n+      preset: 'angular'\n+    }, function (err, release) {\n+      callback(err, release)\n+    })\n+  }\n+}\n+\n function outputChangelog (argv, cb) {\n   createIfMissing(argv)\n   var header = '# Change Log\\n\\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\\n'\n@@ -61,7 +168,7 @@\n   var content = ''\n   var changelogStream = conventionalChangelog({\n     preset: 'angular'\n-  })\n+  }, undefined, {merges: null})\n     .on('error', function (err) {\n       return cb(err)\n     })\n@@ -96,14 +203,19 @@\n   var msg = 'committing %s'\n   var args = [argv.infile]\n   var verify = argv.verify === false || argv.n ? '--no-verify ' : ''\n-  if (!argv.firstRelease) {\n-    msg += ' and %s'\n-    args.unshift('package.json')\n-  }\n+  var toAdd = ''\n+  // commit any of the config files that we've updated\n+  // the version # for.\n+  Object.keys(configsToUpdate).forEach(function (p) {\n+    if (configsToUpdate[p]) {\n+      msg += ' and %s'\n+      args.unshift(path.basename(p))\n+      toAdd += ' ' + path.relative(process.cwd(), p)\n+    }\n+  })\n   checkpoint(argv, msg, args)\n-\n-  handledExec(argv, 'git add package.json ' + argv.infile, cb, function () {\n-    handledExec(argv, 'git commit ' + verify + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n+  handledExec(argv, 'git add' + toAdd + ' ' + argv.infile, cb, function () {\n+    handledExec(argv, 'git commit ' + verify + (argv.sign ? '-S ' : '') + (argv.commitAll ? '' : (argv.infile + toAdd)) + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n       cb()\n     })\n   })\n@@ -121,7 +233,7 @@\n     tagOption = '-a '\n   }\n   checkpoint(argv, 'tagging release %s', [newVersion])\n-  handledExec(argv, 'git tag ' + tagOption + 'v' + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n+  handledExec(argv, 'git tag ' + tagOption + argv.tagPrefix + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n     var message = 'git push --follow-tags origin master'\n     if (pkgPrivate !== true) message += '; npm publish'\n \ndiff --git a/package.json b/package.json\nindex ed27aba..adf2a97 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,19 +1,20 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"2.4.0\",\n+  \"version\": \"4.0.0-1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n-  \"bin\": \"cli.js\",\n+  \"bin\": \"bin/cli.js\",\n   \"scripts\": {\n     \"pretest\": \"standard\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n-    \"test\": \"nyc mocha --timeout=20000 test.js\"\n+    \"test\": \"nyc mocha --timeout=20000 test.js\",\n+    \"release\": \"bin/cli.js\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n   },\n   \"engines\": {\n-    \"node\" : \">=4.0\"\n+    \"node\": \">=4.0\"\n   },\n   \"keywords\": [\n     \"conventional-changelog\",\n@@ -42,12 +43,13 @@\n     \"yargs\": \"^6.0.0\"\n   },\n   \"devDependencies\": {\n+    \"bluebird\": \"^3.4.6\",\n     \"chai\": \"^3.5.0\",\n     \"coveralls\": \"^2.11.9\",\n     \"mocha\": \"^3.1.0\",\n     \"mock-git\": \"^1.0.2\",\n-    \"mockery\": \"^1.7.0\",\n-    \"nyc\": \"^8.1.0\",\n+    \"mockery\": \"^2.0.0\",\n+    \"nyc\": \"^10.0.0\",\n     \"shelljs\": \"^0.7.3\",\n     \"standard\": \"^8.0.0\"\n   }\ndiff --git a/test.js b/test.js\nindex 6ade1a2..af217bc 100644\n--- a/test.js\n+++ b/test.js\n@@ -2,30 +2,57 @@\n \n 'use strict'\n \n-var extend = Object.assign || require('util')._extend\n+var objectAssign = require('object-assign')\n var shell = require('shelljs')\n var fs = require('fs')\n var path = require('path')\n var stream = require('stream')\n var mockGit = require('mock-git')\n var mockery = require('mockery')\n+var semver = require('semver')\n+var Promise = require('bluebird')\n+var cli = require('./command')\n+var standardVersion = require('./index')\n \n var should = require('chai').should()\n \n-var cliPath = path.resolve(__dirname, './cli.js')\n+var cliPath = path.resolve(__dirname, './bin/cli.js')\n+\n+function branch (branch) {\n+  shell.exec('git branch ' + branch)\n+}\n+\n+function checkout (branch) {\n+  shell.exec('git checkout ' + branch)\n+}\n \n function commit (msg) {\n   shell.exec('git commit --allow-empty -m\"' + msg + '\"')\n }\n \n+function merge (msg, branch) {\n+  shell.exec('git merge --no-ff -m\"' + msg + '\" ' + branch)\n+}\n+\n function execCli (argString) {\n   return shell.exec('node ' + cliPath + (argString != null ? ' ' + argString : ''))\n }\n \n+function execCliAsync (argString) {\n+  return Promise.promisify(standardVersion)(cli.parse('standard-version ' + argString + ' --silent'))\n+}\n+\n function writePackageJson (version, option) {\n   option = option || {}\n-  var pkg = extend(option, {version: version})\n+  var pkg = objectAssign(option, {version: version})\n   fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n+  delete require.cache[require.resolve(path.join(process.cwd(), 'package.json'))]\n+}\n+\n+function writeBowerJson (version, option) {\n+  option = option || {}\n+  var bower = objectAssign(option, { version: version })\n+  fs.writeFileSync('bower.json', JSON.stringify(bower), 'utf-8')\n }\n \n function writeGitPreCommitHook () {\n@@ -48,6 +75,10 @@\n   shell.rm('-rf', 'tmp')\n }\n \n+function getPackageVersion () {\n+  return JSON.parse(fs.readFileSync('package.json', 'utf-8')).version\n+}\n+\n describe('cli', function () {\n   beforeEach(initInTempFolder)\n   afterEach(finishTemp)\n@@ -92,6 +123,29 @@\n       content.should.match(/1\\.0\\.1/)\n       content.should.not.match(/legacy header format/)\n     })\n+\n+    it('commits all staged files', function () {\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('fix: patch release')\n+\n+      fs.writeFileSync('STUFF.md', 'stuff\\n', 'utf-8')\n+\n+      shell.exec('git add STUFF.md')\n+\n+      execCli('--commit-all').code.should.equal(0)\n+\n+      var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+      var status = shell.exec('git status --porcelain') // see http://unix.stackexchange.com/questions/155046/determine-if-git-working-directory-is-clean-from-a-script\n+\n+      status.should.equal('')\n+      status.should.not.match(/STUFF.md/)\n+\n+      content.should.match(/1\\.0\\.1/)\n+      content.should.not.match(/legacy header format/)\n+    })\n   })\n \n   describe('with mocked git', function () {\n@@ -104,7 +158,7 @@\n           var captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n             return line ? JSON.parse(line) : line\n           })\n-          captured[captured.length - 3].should.deep.equal(['commit', '-S', 'package.json', 'CHANGELOG.md', '-m', 'chore(release): 1.0.1'])\n+          captured[captured.length - 3].should.deep.equal(['commit', '-S', 'CHANGELOG.md', 'package.json', '-m', 'chore(release): 1.0.1'])\n           captured[captured.length - 2].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'])\n \n           unmock()\n@@ -162,6 +216,126 @@\n     })\n   })\n \n+  describe('pre-release', function () {\n+    it('works fine without specifying a tag id when prereleasing', function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('feat: first commit')\n+      return execCliAsync('--prerelease')\n+        .then(function () {\n+          // it's a feature commit, so it's minor type\n+          getPackageVersion().should.equal('1.1.0-0')\n+        })\n+    })\n+  })\n+\n+  describe('manual-release', function () {\n+    it('throws error when not specifying a release type', function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('fix: first commit')\n+      execCli('--release-as').code.should.above(0)\n+    })\n+\n+    describe('release-types', function () {\n+      var regularTypes = ['major', 'minor', 'patch']\n+\n+      regularTypes.forEach(function (type) {\n+        it('creates a ' + type + ' release', function () {\n+          var originVer = '1.0.0'\n+          writePackageJson(originVer)\n+          fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+          commit('fix: first commit')\n+\n+          return execCliAsync('--release-as ' + type)\n+            .then(function () {\n+              var version = {\n+                major: semver.major(originVer),\n+                minor: semver.minor(originVer),\n+                patch: semver.patch(originVer)\n+              }\n+\n+              version[type] += 1\n+\n+              getPackageVersion().should.equal(version.major + '.' + version.minor + '.' + version.patch)\n+            })\n+        })\n+      })\n+\n+      // this is for pre-releases\n+      regularTypes.forEach(function (type) {\n+        it('creates a pre' + type + ' release', function () {\n+          var originVer = '1.0.0'\n+          writePackageJson(originVer)\n+          fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+          commit('fix: first commit')\n+\n+          return execCliAsync('--release-as ' + type + ' --prerelease ' + type)\n+            .then(function () {\n+              var version = {\n+                major: semver.major(originVer),\n+                minor: semver.minor(originVer),\n+                patch: semver.patch(originVer)\n+              }\n+\n+              version[type] += 1\n+\n+              getPackageVersion().should.equal(version.major + '.' + version.minor + '.' + version.patch + '-' + type + '.0')\n+            })\n+        })\n+      })\n+    })\n+\n+    it('creates a prerelease with a new minor version after two prerelease patches', function () {\n+      writePackageJson('1.0.0')\n+      fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n+\n+      commit('fix: first patch')\n+      return execCliAsync('--release-as patch --prerelease dev')\n+        .then(function () {\n+          getPackageVersion().should.equal('1.0.1-dev.0')\n+        })\n+\n+        // second\n+        .then(function () {\n+          commit('fix: second patch')\n+          return execCliAsync('--prerelease dev')\n+        })\n+        .then(function () {\n+          getPackageVersion().should.equal('1.0.1-dev.1')\n+        })\n+\n+        // third\n+        .then(function () {\n+          commit('feat: first new feat')\n+          return execCliAsync('--release-as minor --prerelease dev')\n+        })\n+        .then(function () {\n+          getPackageVersion().should.equal('1.1.0-dev.0')\n+        })\n+\n+        .then(function () {\n+          commit('fix: third patch')\n+          return execCliAsync('--release-as minor --prerelease dev')\n+        })\n+        .then(function () {\n+          getPackageVersion().should.equal('1.1.0-dev.1')\n+        })\n+\n+        .then(function () {\n+          commit('fix: forth patch')\n+          return execCliAsync('--prerelease dev')\n+        })\n+        .then(function () {\n+          getPackageVersion().should.equal('1.1.0-dev.2')\n+        })\n+    })\n+  })\n+\n   it('handles commit messages longer than 80 characters', function () {\n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n@@ -216,6 +390,25 @@\n     result.code.should.equal(0)\n     result.stdout.should.not.match(/npm publish/)\n   })\n+\n+  it('includes merge commits', function () {\n+    var branchName = 'new-feature'\n+    commit('feat: first commit')\n+    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+    branch(branchName)\n+    checkout(branchName)\n+    commit('Implementing new feature')\n+    checkout('master')\n+    merge('feat: new feature from branch', branchName)\n+\n+    execCli().code.should.equal(0)\n+\n+    var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n+    content.should.match(/new feature from branch/)\n+\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', '  \"version\": \"1.1.0\"', '}', ''].join('\\n'))\n+  })\n })\n \n describe('standard-version', function () {\n@@ -293,4 +486,22 @@\n       done()\n     })\n   })\n+\n+  describe('bower.json support', function () {\n+    beforeEach(function () {\n+      writeBowerJson('1.0.0')\n+    })\n+\n+    it('bumps verson # in bower.json', function (done) {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+      require('./index')({silent: true}, function (err) {\n+        if (err) return done(err)\n+        JSON.parse(fs.readFileSync('package.json', 'utf-8')).version.should.equal('1.1.0')\n+        getPackageVersion().should.equal('1.1.0')\n+        done()\n+      })\n+    })\n+  })\n })\n"
  }, {
    "begin time" : "Wed Jul 13 00:00:00 CST 2016",
    "end time" : "Thu Oct 06 00:00:00 CST 2016",
    "description" : "### Bug Fixes* check the private field in package.json([#102](https://github.com/conventional-changelog/standard-version/issues/102)) ([#103](https://github.com/conventional-changelog/standard-version/issues/103)) ([2ce4160](https://github.com/conventional-changelog/standard-version/commit/2ce4160))* **err:** don't fail on stderr output, but print the output to stderr ([#110](https://github.com/conventional-changelog/standard-version/issues/110)) ([f7a4915](https://github.com/conventional-changelog/standard-version/commit/f7a4915)), closes [#91](https://github.com/conventional-changelog/standard-version/issues/91)### Chores* package.json engines field >=4.0, drop Node 0.10 and 0.12 ([28ff65a](https://github.com/conventional-changelog/standard-version/commit/28ff65a))### Features* **options:** add --silent flag and option for squelching output ([2a3fa61](https://github.com/conventional-changelog/standard-version/commit/2a3fa61))* added support for commitAll option in CLI ([#121](https://github.com/conventional-changelog/standard-version/issues/121)) ([a903f4d](https://github.com/conventional-changelog/standard-version/commit/a903f4d))* separate cli and defaults from base functionality ([34a6a4e](https://github.com/conventional-changelog/standard-version/commit/34a6a4e))### BREAKING CHANGES* drop support for Node < 4.0 to enable usage ofnew tools and packages.<a name=\"2.4.0\"></a>",
    "hunks" : "diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..c0db00a\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,9 @@\n+# EditorConfig is awesome: http://EditorConfig.org\n+\n+root = true\n+\n+[*]\n+trim_trailing_whitespace=true\n+indent_style = space\n+indent_size = 2\n+insert_final_newline = true\ndiff --git a/.gitignore b/.gitignore\nindex c9106a7..3588495 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,2 +1,13 @@\n+# OS\n+.DS_Store\n+\n+# node.js & npm\n node_modules\n .nyc_output\n+npm-debug.log\n+\n+# Editor files\n+/.project\n+/.settings\n+/.idea\n+/.vscode\ndiff --git a/.travis.yml b/.travis.yml\nindex 91eedc5..ed30357 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,7 +1,5 @@\n language: node_js\n node_js:\n-  - \"0.10\"\n-  - \"0.12\"\n   - \"4\"\n   - \"5\"\n   - \"node\"\ndiff --git a/README.md b/README.md\nindex 35ef574..9edfeb7 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,6 +1,8 @@\n # Standard Version\n \n-[![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg)](https://travis-ci.org/conventional-changelog/standard-version)\n+[![Join the chat at https://gitter.im/conventional-changelog/standard-version](https://badges.gitter.im/conventional-changelog/standard-version.svg)](https://gitter.im/conventional-changelog/standard-version?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n+\n+[![Build Status](https://travis-ci.org/conventional-changelog/standard-version.svg?branch=master)](https://travis-ci.org/conventional-changelog/standard-version)\n [![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n@@ -62,7 +64,7 @@\n \n This has the benefit of allowing you to use `standard-version` on any repo/package without adding a dev dependency to each one.\n \n-## Usage\n+## CLI Usage\n \n ### First Release\n \n@@ -105,6 +107,10 @@\n standard-version --no-verify\n ```\n \n+### Signing commits and tags\n+\n+If you have your GPG key set up, add the `--sign` or `-s` flag to your `standard-version` command.\n+\n ### CLI Help\n \n ```sh\n@@ -114,6 +120,27 @@\n standard-version --help\n ```\n \n+## Code usage\n+\n+Use the `silent` option to stop `standard-version` from printing anything\n+to the console.\n+\n+```js\n+var standardVersion = require('standard-version')\n+\n+// Options are the same as command line, except camelCase\n+standardVersion({\n+  noVerify: true,\n+  infile: 'docs/CHANGELOG.md',\n+  silent: true\n+}, function (err) {\n+  if (err) {\n+    console.error(`standard-version failed with message: ${err.message}`)\n+  }\n+  // standard-version is done\n+})\n+```\n+\n ## Commit Message Convention, at a Glance\n \n _patches:_\ndiff --git a/appveyor.yml b/appveyor.yml\nindex e3bafae..538cdfb 100644\n--- a/appveyor.yml\n+++ b/appveyor.yml\n@@ -3,7 +3,6 @@\n     - nodejs_version: '6'\n     - nodejs_version: '5'\n     - nodejs_version: '4'\n-    - nodejs_version: '0.12'\n install:\n   - ps: Install-Product node $env:nodejs_version\n   - set CI=true\ndiff --git a/cli.js b/cli.js\nnew file mode 100644\nindex 0000000..a23f874\n--- /dev/null\n+++ b/cli.js\n@@ -0,0 +1,58 @@\n+#!/usr/bin/env node\n+var standardVersion = require('./index')\n+var defaults = require('./defaults')\n+\n+var argv = require('yargs')\n+  .usage('Usage: $0 [options]')\n+  .option('infile', {\n+    alias: 'i',\n+    describe: 'Read the CHANGELOG from this file',\n+    default: defaults.infile,\n+    global: true\n+  })\n+  .option('message', {\n+    alias: 'm',\n+    describe: 'Commit message, replaces %s with new version',\n+    type: 'string',\n+    default: defaults.message,\n+    global: true\n+  })\n+  .option('first-release', {\n+    alias: 'f',\n+    describe: 'Is this the first release?',\n+    type: 'boolean',\n+    default: defaults.firstRelease,\n+    global: true\n+  })\n+  .option('sign', {\n+    alias: 's',\n+    describe: 'Should the git commit and tag be signed?',\n+    type: 'boolean',\n+    default: defaults.sign,\n+    global: true\n+  })\n+  .option('no-verify', {\n+    alias: 'n',\n+    describe: 'Bypass pre-commit or commit-msg git hooks during the commit phase',\n+    type: 'boolean',\n+    default: defaults.noVerify,\n+    global: true\n+  })\n+  .option('silent', {\n+    describe: 'Don\\'t print logs and errors',\n+    type: 'boolean',\n+    default: defaults.silent,\n+    global: true\n+  })\n+  .help()\n+  .alias('help', 'h')\n+  .example('$0', 'Update changelog and tag release')\n+  .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n+  .wrap(97)\n+  .argv\n+\n+standardVersion(argv, function (err) {\n+  if (err) {\n+    process.exit(1)\n+  }\n+})\ndiff --git a/defaults.json b/defaults.json\nnew file mode 100644\nindex 0000000..196733e\n--- /dev/null\n+++ b/defaults.json\n@@ -0,0 +1,8 @@\n+{\n+  \"infile\": \"CHANGELOG.md\",\n+  \"message\": \"chore(release): %s\",\n+  \"firstRelease\": false,\n+  \"sign\": false,\n+  \"noVerify\": false,\n+  \"silent\": false\n+}\ndiff --git a/index.js b/index.js\nindex 6bed6ed..e4212df 100755\n--- a/index.js\n+++ b/index.js\n@@ -1,84 +1,54 @@\n-#!/usr/bin/env node\n var conventionalRecommendedBump = require('conventional-recommended-bump')\n var conventionalChangelog = require('conventional-changelog')\n var path = require('path')\n-var argv = require('yargs')\n-  .usage('Usage: $0 [options]')\n-  .option('infile', {\n-    alias: 'i',\n-    describe: 'Read the CHANGELOG from this file',\n-    default: 'CHANGELOG.md',\n-    global: true\n-  })\n-  .option('message', {\n-    alias: 'm',\n-    describe: 'Commit message, replaces %s with new version',\n-    type: 'string',\n-    default: 'chore(release): %s',\n-    global: true\n-  })\n-  .option('first-release', {\n-    alias: 'f',\n-    describe: 'Is this the first release?',\n-    type: 'boolean',\n-    default: false,\n-    global: true\n-  })\n-  .option('sign', {\n-    alias: 's',\n-    describe: 'Should the git commit and tag be signed?',\n-    type: 'boolean',\n-    default: false,\n-    global: true\n-  })\n-  .option('no-verify', {\n-    alias: 'n',\n-    describe: 'Bypass pre-commit or commit-msg git hooks during the commit phase',\n-    type: 'boolean',\n-    default: false,\n-    global: true\n-  })\n-  .help()\n-  .alias('help', 'h')\n-  .example('$0', 'Update changelog and tag release')\n-  .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n-  .wrap(97)\n-  .argv\n \n var chalk = require('chalk')\n var figures = require('figures')\n var exec = require('child_process').exec\n var fs = require('fs')\n var accessSync = require('fs-access').sync\n-var pkgPath = path.resolve(process.cwd(), './package.json')\n-var pkg = require(pkgPath)\n var semver = require('semver')\n var util = require('util')\n+var objectAssign = require('object-assign')\n \n-conventionalRecommendedBump({\n-  preset: 'angular'\n-}, function (err, release) {\n-  if (err) {\n-    console.error(chalk.red(err.message))\n-    return\n-  }\n+module.exports = function standardVersion (argv, done) {\n+  var pkgPath = path.resolve(process.cwd(), './package.json')\n+  var pkg = require(pkgPath)\n+  var defaults = require('./defaults')\n \n-  var newVersion = pkg.version\n-  if (!argv.firstRelease) {\n-    newVersion = semver.inc(pkg.version, release.releaseAs)\n-    checkpoint('bumping version in package.json from %s to %s', [pkg.version, newVersion])\n-    pkg.version = newVersion\n-    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n', 'utf-8')\n-  } else {\n-    checkpoint('skip version bump on first release', [], chalk.red(figures.cross))\n-  }\n+  argv = objectAssign(defaults, argv)\n \n-  outputChangelog(argv, function () {\n-    commit(argv, newVersion, function () {\n-      return tag(newVersion, argv)\n+  conventionalRecommendedBump({\n+    preset: 'angular'\n+  }, function (err, release) {\n+    if (err) {\n+      printError(argv, err.message)\n+      return done(err)\n+    }\n+\n+    var newVersion = pkg.version\n+    if (!argv.firstRelease) {\n+      newVersion = semver.inc(pkg.version, release.releaseType)\n+      checkpoint(argv, 'bumping version in package.json from %s to %s', [pkg.version, newVersion])\n+      pkg.version = newVersion\n+      fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n', 'utf-8')\n+    } else {\n+      checkpoint(argv, 'skip version bump on first release', [], chalk.red(figures.cross))\n+    }\n+\n+    outputChangelog(argv, function (err) {\n+      if (err) {\n+        return done(err)\n+      }\n+      commit(argv, newVersion, function (err) {\n+        if (err) {\n+          return done(err)\n+        }\n+        return tag(newVersion, pkg.private, argv, done)\n+      })\n     })\n   })\n-})\n+}\n \n function outputChangelog (argv, cb) {\n   createIfMissing(argv)\n@@ -92,22 +62,36 @@\n   var changelogStream = conventionalChangelog({\n     preset: 'angular'\n   })\n-  .on('error', function (err) {\n-    console.error(chalk.red(err.message))\n-    process.exit(1)\n-  })\n+    .on('error', function (err) {\n+      return cb(err)\n+    })\n \n   changelogStream.on('data', function (buffer) {\n     content += buffer.toString()\n   })\n \n   changelogStream.on('end', function () {\n-    checkpoint('outputting changes to %s', [argv.infile])\n+    checkpoint(argv, 'outputting changes to %s', [argv.infile])\n     fs.writeFileSync(argv.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'), 'utf-8')\n     return cb()\n   })\n }\n \n+function handledExec (argv, cmd, errorCb, successCb) {\n+  // Exec given cmd and handle possible errors\n+  exec(cmd, function (err, stdout, stderr) {\n+    // If exec returns content in stderr, but no error, print it as a warning\n+    // If exec returns an error, print it and exit with return code 1\n+    if (err) {\n+      printError(argv, stderr || err.message)\n+      return errorCb(err)\n+    } else if (stderr) {\n+      printError(argv, stderr, {level: 'warn', color: 'yellow'})\n+    }\n+    successCb()\n+  })\n+}\n+\n function commit (argv, newVersion, cb) {\n   var msg = 'committing %s'\n   var args = [argv.infile]\n@@ -116,21 +100,11 @@\n     msg += ' and %s'\n     args.unshift('package.json')\n   }\n-  checkpoint(msg, args)\n+  checkpoint(argv, msg, args)\n \n-  function handleExecError (err, stderr) {\n-    // If exec returns an error or content in stderr, log it and exit with return code 1\n-    var errMessage = stderr || (err && err.message)\n-    if (errMessage) {\n-      console.log(chalk.red(errMessage))\n-      process.exit(1)\n-    }\n-  }\n-  exec('git add package.json ' + argv.infile, function (err, stdout, stderr) {\n-    handleExecError(err, stderr)\n-    exec('git commit ' + verify + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n-      handleExecError(err, stderr)\n-      return cb()\n+  handledExec(argv, 'git add package.json ' + argv.infile, cb, function () {\n+    handledExec(argv, 'git commit ' + verify + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n+      cb()\n     })\n   })\n }\n@@ -139,26 +113,20 @@\n   return String(msg).indexOf('%s') !== -1 ? util.format(msg, newVersion) : msg\n }\n \n-function tag (newVersion, argv) {\n+function tag (newVersion, pkgPrivate, argv, cb) {\n   var tagOption\n   if (argv.sign) {\n     tagOption = '-s '\n   } else {\n     tagOption = '-a '\n   }\n-  checkpoint('tagging release %s', [newVersion])\n-  exec('git tag ' + tagOption + 'v' + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n-    var errMessage = null\n-    if (err) errMessage = err.message\n-    if (stderr) errMessage = stderr\n-    if (errMessage) {\n-      console.log(chalk.red(errMessage))\n-      process.exit(1)\n-    } else {\n-      checkpoint('Run `%s` to publish', [\n-        'git push --follow-tags origin master; npm publish'\n-      ], chalk.blue(figures.info))\n-    }\n+  checkpoint(argv, 'tagging release %s', [newVersion])\n+  handledExec(argv, 'git tag ' + tagOption + 'v' + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', cb, function () {\n+    var message = 'git push --follow-tags origin master'\n+    if (pkgPrivate !== true) message += '; npm publish'\n+\n+    checkpoint(argv, 'Run `%s` to publish', [message], chalk.blue(figures.info))\n+    cb()\n   })\n }\n \n@@ -167,15 +135,28 @@\n     accessSync(argv.infile, fs.F_OK)\n   } catch (err) {\n     if (err.code === 'ENOENT') {\n-      checkpoint('created %s', [argv.infile])\n+      checkpoint(argv, 'created %s', [argv.infile])\n       argv.outputUnreleased = true\n       fs.writeFileSync(argv.infile, '\\n', 'utf-8')\n     }\n   }\n }\n \n-function checkpoint (msg, args, figure) {\n-  console.info((figure || chalk.green(figures.tick)) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n-    return chalk.bold(arg)\n-  }))))\n-};\n+function checkpoint (argv, msg, args, figure) {\n+  if (!argv.silent) {\n+    console.info((figure || chalk.green(figures.tick)) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n+      return chalk.bold(arg)\n+    }))))\n+  }\n+}\n+\n+function printError (argv, msg, opts) {\n+  if (!argv.silent) {\n+    opts = objectAssign({\n+      level: 'error',\n+      color: 'red'\n+    }, opts)\n+\n+    console[opts.level](chalk[opts.color](msg))\n+  }\n+}\ndiff --git a/package.json b/package.json\nindex 2e09f6c..4f627c9 100644\n--- a/package.json\n+++ b/package.json\n@@ -2,7 +2,7 @@\n   \"name\": \"standard-version\",\n   \"version\": \"2.4.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n-  \"bin\": \"index.js\",\n+  \"bin\": \"cli.js\",\n   \"scripts\": {\n     \"pretest\": \"standard\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n@@ -12,6 +12,9 @@\n     \"type\": \"git\",\n     \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n   },\n+  \"engines\": {\n+    \"node\" : \">=4.0\"\n+  },\n   \"keywords\": [\n     \"conventional-changelog\",\n     \"recommended\",\n@@ -31,19 +34,21 @@\n   \"dependencies\": {\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-recommended-bump\": \"^0.2.1\",\n+    \"conventional-recommended-bump\": \"^0.3.0\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n+    \"object-assign\": \"^4.1.0\",\n     \"semver\": \"^5.1.0\",\n-    \"yargs\": \"^4.6.0\"\n+    \"yargs\": \"^5.0.0\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"^3.5.0\",\n     \"coveralls\": \"^2.11.9\",\n-    \"mocha\": \"^2.5.1\",\n+    \"mocha\": \"^3.1.0\",\n     \"mock-git\": \"^1.0.2\",\n-    \"nyc\": \"^7.0.0\",\n-    \"shelljs\": \"^0.7.0\",\n-    \"standard\": \"^7.0.1\"\n+    \"mockery\": \"^1.7.0\",\n+    \"nyc\": \"^8.1.0\",\n+    \"shelljs\": \"^0.7.3\",\n+    \"standard\": \"^8.0.0\"\n   }\n }\ndiff --git a/test.js b/test.js\nindex 19316a1..6ade1a2 100644\n--- a/test.js\n+++ b/test.js\n@@ -2,13 +2,17 @@\n \n 'use strict'\n \n+var extend = Object.assign || require('util')._extend\n var shell = require('shelljs')\n var fs = require('fs')\n var path = require('path')\n+var stream = require('stream')\n var mockGit = require('mock-git')\n-var cliPath = path.resolve(__dirname, './index.js')\n+var mockery = require('mockery')\n \n-require('chai').should()\n+var should = require('chai').should()\n+\n+var cliPath = path.resolve(__dirname, './cli.js')\n \n function commit (msg) {\n   shell.exec('git commit --allow-empty -m\"' + msg + '\"')\n@@ -18,10 +22,10 @@\n   return shell.exec('node ' + cliPath + (argString != null ? ' ' + argString : ''))\n }\n \n-function writePackageJson (version) {\n-  fs.writeFileSync('package.json', JSON.stringify({\n-    version: version\n-  }), 'utf-8')\n+function writePackageJson (version, option) {\n+  option = option || {}\n+  var pkg = extend(option, {version: version})\n+  fs.writeFileSync('package.json', JSON.stringify(pkg), 'utf-8')\n }\n \n function writeGitPreCommitHook () {\n@@ -29,25 +33,27 @@\n   fs.chmodSync('.git/hooks/pre-commit', '755')\n }\n \n-describe('cli', function () {\n-  beforeEach(function () {\n-    shell.rm('-rf', 'tmp')\n-    shell.config.silent = true\n-    shell.mkdir('tmp')\n-    shell.cd('tmp')\n-    shell.exec('git init')\n-    commit('root-commit')\n-  })\n+function initInTempFolder () {\n+  shell.rm('-rf', 'tmp')\n+  shell.config.silent = true\n+  shell.mkdir('tmp')\n+  shell.cd('tmp')\n+  shell.exec('git init')\n+  commit('root-commit')\n+  writePackageJson('1.0.0')\n+}\n \n-  afterEach(function () {\n-    shell.cd('../')\n-    shell.rm('-rf', 'tmp')\n-  })\n+function finishTemp () {\n+  shell.cd('../')\n+  shell.rm('-rf', 'tmp')\n+}\n+\n+describe('cli', function () {\n+  beforeEach(initInTempFolder)\n+  afterEach(finishTemp)\n \n   describe('CHANGELOG.md does not exist', function () {\n     it('populates changelog with commits since last tag by default', function () {\n-      writePackageJson('1.0.0')\n-\n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('fix: patch release')\n@@ -75,7 +81,6 @@\n \n   describe('CHANGELOG.md exists', function () {\n     it('appends the new release above the last release, removing the old header', function () {\n-      writePackageJson('1.0.0')\n       fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n       commit('feat: first commit')\n@@ -94,8 +99,6 @@\n       // mock git with file that writes args to gitcapture.log\n       return mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n         .then(function (unmock) {\n-          writePackageJson('1.0.0')\n-\n           execCli('--sign').code.should.equal(0)\n \n           var captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n@@ -112,11 +115,9 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n         .then(function (unmock) {\n-          writePackageJson('1.0.0')\n-\n           var result = execCli()\n           result.code.should.equal(1)\n-          result.stdout.should.match(/commit yourself/)\n+          result.stderr.should.match(/commit yourself/)\n \n           unmock()\n         })\n@@ -126,11 +127,9 @@\n       // mock git by throwing on attempt to add\n       return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n         .then(function (unmock) {\n-          writePackageJson('1.0.0')\n-\n           var result = execCli()\n           result.code.should.equal(1)\n-          result.stdout.should.match(/addition is hard/)\n+          result.stderr.should.match(/addition is hard/)\n \n           unmock()\n         })\n@@ -140,11 +139,23 @@\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n         .then(function (unmock) {\n+          var result = execCli()\n+          result.code.should.equal(1)\n+          result.stderr.should.match(/tag, you're it/)\n+\n+          unmock()\n+        })\n+    })\n+\n+    it('doesn\\'t fail fast on stderr output from git', function () {\n+      // mock git by throwing on attempt to commit\n+      return mockGit('console.error(\"haha, kidding, this is just a warning\"); process.exit(0);', 'add')\n+        .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n           var result = execCli()\n-          result.code.should.equal(1)\n-          result.stdout.should.match(/tag, you're it/)\n+          result.code.should.equal(0)\n+          result.stderr.should.match(/haha, kidding, this is just a warning/)\n \n           unmock()\n         })\n@@ -152,8 +163,6 @@\n   })\n \n   it('handles commit messages longer than 80 characters', function () {\n-    writePackageJson('1.0.0')\n-\n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('fix: this is my fairly long commit message which is testing whether or not we allow for long commit messages')\n@@ -165,8 +174,6 @@\n   })\n \n   it('formats the commit and tag messages appropriately', function () {\n-    writePackageJson('1.0.0')\n-\n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('feat: new feature!')\n@@ -180,8 +187,6 @@\n   })\n \n   it('appends line feed at end of package.json', function () {\n-    writePackageJson('1.0.0')\n-\n     execCli().code.should.equal(0)\n \n     var pkgJson = fs.readFileSync('package.json', 'utf-8')\n@@ -189,7 +194,6 @@\n   })\n \n   it('does not run git hooks if the --no-verify flag is passed', function () {\n-    writePackageJson('1.0.0')\n     writeGitPreCommitHook()\n \n     commit('feat: first commit')\n@@ -197,4 +201,96 @@\n     commit('feat: second commit')\n     execCli('-n').code.should.equal(0)\n   })\n+\n+  it('does not print output when the --silent flag is passed', function () {\n+    var result = execCli('--silent')\n+    result.code.should.equal(0)\n+    result.stdout.should.equal('')\n+    result.stderr.should.equal('')\n+  })\n+\n+  it('does not display `npm publish` if the package is private', function () {\n+    writePackageJson('1.0.0', {private: true})\n+\n+    var result = execCli()\n+    result.code.should.equal(0)\n+    result.stdout.should.not.match(/npm publish/)\n+  })\n+})\n+\n+describe('standard-version', function () {\n+  beforeEach(initInTempFolder)\n+  afterEach(finishTemp)\n+\n+  describe('with mocked conventionalRecommendedBump', function () {\n+    beforeEach(function () {\n+      mockery.enable({warnOnUnregistered: false, useCleanCache: true})\n+      mockery.registerMock('conventional-recommended-bump', function (_, cb) {\n+        cb(new Error('bump err'))\n+      })\n+    })\n+\n+    afterEach(function () {\n+      mockery.deregisterMock('conventional-recommended-bump')\n+      mockery.disable()\n+    })\n+\n+    it('should exit on bump error', function (done) {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+\n+      require('./index')({silent: true}, function (err) {\n+        should.exist(err)\n+        err.message.should.match(/bump err/)\n+        done()\n+      })\n+    })\n+  })\n+\n+  describe('with mocked conventionalChangelog', function () {\n+    beforeEach(function () {\n+      mockery.enable({warnOnUnregistered: false, useCleanCache: true})\n+      mockery.registerMock('conventional-changelog', function () {\n+        var readable = new stream.Readable({objectMode: true})\n+        readable._read = function () {\n+        }\n+        setImmediate(readable.emit.bind(readable), 'error', new Error('changelog err'))\n+        return readable\n+      })\n+    })\n+\n+    afterEach(function () {\n+      mockery.deregisterMock('conventional-changelog')\n+      mockery.disable()\n+    })\n+\n+    it('should exit on changelog error', function (done) {\n+      commit('feat: first commit')\n+      shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+      commit('feat: new feature!')\n+\n+      require('./index')({silent: true}, function (err) {\n+        should.exist(err)\n+        err.message.should.match(/changelog err/)\n+        done()\n+      })\n+    })\n+  })\n+\n+  it('formats the commit and tag messages appropriately', function (done) {\n+    commit('feat: first commit')\n+    shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n+    commit('feat: new feature!')\n+\n+    require('./index')({silent: true}, function (err) {\n+      should.not.exist(err)\n+\n+      // check last commit message\n+      shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+      // check annotated tag message\n+      shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+      done()\n+    })\n+  })\n })\n"
  }, {
    "begin time" : "Wed Jun 15 00:00:00 CST 2016",
    "end time" : "Wed Jul 13 00:00:00 CST 2016",
    "description" : "### Bug Fixes* **index.js:** use blue figures.info for last checkpoint ([#64](https://github.com/conventional-changelog/standard-version/issues/64)) ([e600b42](https://github.com/conventional-changelog/standard-version/commit/e600b42))### Features* **changelogStream:** use more default opts ([#67](https://github.com/conventional-changelog/standard-version/issues/67)) ([3e0aa84](https://github.com/conventional-changelog/standard-version/commit/3e0aa84))<a name=\"2.3.1\"></a>",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nindex bcf6c98..91eedc5 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -2,6 +2,8 @@\n node_js:\n   - \"0.10\"\n   - \"0.12\"\n+  - \"4\"\n+  - \"5\"\n   - \"node\"\n before_script:\n   - git config --global user.name 'Travis-CI'\ndiff --git a/appveyor.yml b/appveyor.yml\nnew file mode 100644\nindex 0000000..e3bafae\n--- /dev/null\n+++ b/appveyor.yml\n@@ -0,0 +1,20 @@\n+environment:\n+  matrix:\n+    - nodejs_version: '6'\n+    - nodejs_version: '5'\n+    - nodejs_version: '4'\n+    - nodejs_version: '0.12'\n+install:\n+  - ps: Install-Product node $env:nodejs_version\n+  - set CI=true\n+  - npm -g install npm@latest\n+  - set PATH=%APPDATA%\\npm;%PATH%\n+  - npm install\n+matrix:\n+  fast_finish: true\n+build: off\n+version: '{build}'\n+test_script:\n+  - node --version\n+  - npm --version\n+  - npm test\ndiff --git a/index.js b/index.js\nindex 3c593d8..6bed6ed 100755\n--- a/index.js\n+++ b/index.js\n@@ -70,7 +70,7 @@\n     pkg.version = newVersion\n     fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n', 'utf-8')\n   } else {\n-    console.log(chalk.red(figures.cross) + ' skip version bump on first release')\n+    checkpoint('skip version bump on first release', [], chalk.red(figures.cross))\n   }\n \n   outputChangelog(argv, function () {\n@@ -90,11 +90,7 @@\n   }\n   var content = ''\n   var changelogStream = conventionalChangelog({\n-    preset: 'angular',\n-    outputUnreleased: true,\n-    pkg: {\n-      path: path.resolve(process.cwd(), './package.json')\n-    }\n+    preset: 'angular'\n   })\n   .on('error', function (err) {\n     console.error(chalk.red(err.message))\n@@ -159,9 +155,9 @@\n       console.log(chalk.red(errMessage))\n       process.exit(1)\n     } else {\n-      checkpoint('Run `%s` to publish.', [\n+      checkpoint('Run `%s` to publish', [\n         'git push --follow-tags origin master; npm publish'\n-      ])\n+      ], chalk.blue(figures.info))\n     }\n   })\n }\n@@ -178,8 +174,8 @@\n   }\n }\n \n-function checkpoint (msg, args) {\n-  console.info(chalk.green(figures.tick) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n+function checkpoint (msg, args, figure) {\n+  console.info((figure || chalk.green(figures.tick)) + ' ' + util.format.apply(util, [msg].concat(args.map(function (arg) {\n     return chalk.bold(arg)\n   }))))\n };\ndiff --git a/package.json b/package.json\nindex bc9013b..8a18375 100644\n--- a/package.json\n+++ b/package.json\n@@ -31,7 +31,6 @@\n   \"dependencies\": {\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-changelog-angular\": \"^1.1.0\",\n     \"conventional-recommended-bump\": \"^0.2.1\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n@@ -43,7 +42,7 @@\n     \"coveralls\": \"^2.11.9\",\n     \"mocha\": \"^2.5.1\",\n     \"mock-git\": \"^1.0.2\",\n-    \"nyc\": \"^6.4.2\",\n+    \"nyc\": \"^7.0.0\",\n     \"shelljs\": \"^0.7.0\",\n     \"standard\": \"^7.0.1\"\n   }\n"
  }, {
    "begin time" : "Thu Jun 02 00:00:00 CST 2016",
    "end time" : "Wed Jun 15 00:00:00 CST 2016",
    "description" : "### Bug Fixes* **commit:** fix windows by separating add and commit exec ([#55](https://github.com/conventional-changelog/standard-version/issues/55)) ([f361c46](https://github.com/conventional-changelog/standard-version/commit/f361c46)), closes [#55](https://github.com/conventional-changelog/standard-version/issues/55) [#49](https://github.com/conventional-changelog/standard-version/issues/49)<a name=\"2.3.0\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 740ee7c..242b19a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,22 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"2.3.0\"></a>\n+# [2.3.0](https://github.com/conventional-changelog/standard-version/compare/v2.2.1...v2.3.0) (2016-06-02)\n+\n+\n+### Bug Fixes\n+\n+* append line feed to end of package.json ([#42](https://github.com/conventional-changelog/standard-version/issues/42))([178e001](https://github.com/conventional-changelog/standard-version/commit/178e001))\n+\n+\n+### Features\n+\n+* **index.js:** add checkpoint for publish script after tag successfully ([#47](https://github.com/conventional-changelog/standard-version/issues/47))([e414ed7](https://github.com/conventional-changelog/standard-version/commit/e414ed7))\n+* add a --no-verify option to prevent git hooks from being verified ([#44](https://github.com/conventional-changelog/standard-version/issues/44))([026d844](https://github.com/conventional-changelog/standard-version/commit/026d844))\n+\n+\n+\n <a name=\"2.2.1\"></a>\n ## [2.2.1](https://github.com/conventional-changelog/standard-version/compare/v2.2.0...v2.2.1) (2016-05-02)\n \ndiff --git a/index.js b/index.js\nindex 5bec43e..3c593d8 100755\n--- a/index.js\n+++ b/index.js\n@@ -121,15 +121,21 @@\n     args.unshift('package.json')\n   }\n   checkpoint(msg, args)\n-  exec('git add package.json ' + argv.infile + ';git commit ' + verify + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n-    var errMessage = null\n-    if (err) errMessage = err.message\n-    if (stderr) errMessage = stderr\n+\n+  function handleExecError (err, stderr) {\n+    // If exec returns an error or content in stderr, log it and exit with return code 1\n+    var errMessage = stderr || (err && err.message)\n     if (errMessage) {\n       console.log(chalk.red(errMessage))\n       process.exit(1)\n     }\n-    return cb()\n+  }\n+  exec('git add package.json ' + argv.infile, function (err, stdout, stderr) {\n+    handleExecError(err, stderr)\n+    exec('git commit ' + verify + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n+      handleExecError(err, stderr)\n+      return cb()\n+    })\n   })\n }\n \ndiff --git a/package.json b/package.json\nindex b084612..ad24dc1 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"2.2.1\",\n+  \"version\": \"2.3.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"index.js\",\n   \"scripts\": {\ndiff --git a/test.js b/test.js\nindex c041469..19316a1 100644\n--- a/test.js\n+++ b/test.js\n@@ -14,6 +14,10 @@\n   shell.exec('git commit --allow-empty -m\"' + msg + '\"')\n }\n \n+function execCli (argString) {\n+  return shell.exec('node ' + cliPath + (argString != null ? ' ' + argString : ''))\n+}\n+\n function writePackageJson (version) {\n   fs.writeFileSync('package.json', JSON.stringify({\n     version: version\n@@ -48,7 +52,7 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('fix: patch release')\n \n-      shell.exec(cliPath).code.should.equal(0)\n+      execCli().code.should.equal(0)\n \n       var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n@@ -60,7 +64,7 @@\n \n       commit('feat: first commit')\n       commit('fix: patch release')\n-      shell.exec(cliPath + ' --first-release').code.should.equal(0)\n+      execCli('--first-release').code.should.equal(0)\n \n       var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n@@ -78,7 +82,7 @@\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n       commit('fix: patch release')\n \n-      shell.exec(cliPath).code.should.equal(0)\n+      execCli().code.should.equal(0)\n       var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/1\\.0\\.1/)\n       content.should.not.match(/legacy header format/)\n@@ -88,11 +92,11 @@\n   describe('with mocked git', function () {\n     it('--sign signs the commit and tag', function () {\n       // mock git with file that writes args to gitcapture.log\n-      mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n+      return mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n         .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n-          shell.exec(cliPath + ' --sign').code.should.equal(0)\n+          execCli('--sign').code.should.equal(0)\n \n           var captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n             return line ? JSON.parse(line) : line\n@@ -106,11 +110,11 @@\n \n     it('exits with error code if git commit fails', function () {\n       // mock git by throwing on attempt to commit\n-      mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n+      return mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n         .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n-          var result = shell.exec(cliPath)\n+          var result = execCli()\n           result.code.should.equal(1)\n           result.stdout.should.match(/commit yourself/)\n \n@@ -118,13 +122,27 @@\n         })\n     })\n \n+    it('exits with error code if git add fails', function () {\n+      // mock git by throwing on attempt to add\n+      return mockGit('console.error(\"addition is hard\"); process.exit(128);', 'add')\n+        .then(function (unmock) {\n+          writePackageJson('1.0.0')\n+\n+          var result = execCli()\n+          result.code.should.equal(1)\n+          result.stdout.should.match(/addition is hard/)\n+\n+          unmock()\n+        })\n+    })\n+\n     it('exits with error code if git tag fails', function () {\n       // mock git by throwing on attempt to commit\n       return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n         .then(function (unmock) {\n           writePackageJson('1.0.0')\n \n-          var result = shell.exec(cliPath)\n+          var result = execCli()\n           result.code.should.equal(1)\n           result.stdout.should.match(/tag, you're it/)\n \n@@ -140,7 +158,7 @@\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('fix: this is my fairly long commit message which is testing whether or not we allow for long commit messages')\n \n-    shell.exec(cliPath).code.should.equal(0)\n+    execCli().code.should.equal(0)\n \n     var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n     content.should.match(/this is my fairly long commit message which is testing whether or not we allow for long commit messages/)\n@@ -153,7 +171,7 @@\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n     commit('feat: new feature!')\n \n-    shell.exec(cliPath).code.should.equal(0)\n+    execCli().code.should.equal(0)\n \n     // check last commit message\n     shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n@@ -164,7 +182,7 @@\n   it('appends line feed at end of package.json', function () {\n     writePackageJson('1.0.0')\n \n-    shell.exec(cliPath).code.should.equal(0)\n+    execCli().code.should.equal(0)\n \n     var pkgJson = fs.readFileSync('package.json', 'utf-8')\n     pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n@@ -175,8 +193,8 @@\n     writeGitPreCommitHook()\n \n     commit('feat: first commit')\n-    shell.exec(cliPath + ' --no-verify').code.should.equal(0)\n+    execCli('--no-verify').code.should.equal(0)\n     commit('feat: second commit')\n-    shell.exec(cliPath + ' -n').code.should.equal(0)\n+    execCli('-n').code.should.equal(0)\n   })\n })\n"
  }, {
    "begin time" : "Mon May 02 00:00:00 CST 2016",
    "end time" : "Thu Jun 02 00:00:00 CST 2016",
    "description" : "### Bug Fixes* append line feed to end of package.json ([#42](https://github.com/conventional-changelog/standard-version/issues/42))([178e001](https://github.com/conventional-changelog/standard-version/commit/178e001))### Features* **index.js:** add checkpoint for publish script after tag successfully ([#47](https://github.com/conventional-changelog/standard-version/issues/47))([e414ed7](https://github.com/conventional-changelog/standard-version/commit/e414ed7))* add a --no-verify option to prevent git hooks from being verified ([#44](https://github.com/conventional-changelog/standard-version/issues/44))([026d844](https://github.com/conventional-changelog/standard-version/commit/026d844))<a name=\"2.2.1\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex dd05e96..740ee7c 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,32 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"2.2.1\"></a>\n+## [2.2.1](https://github.com/conventional-changelog/standard-version/compare/v2.2.0...v2.2.1) (2016-05-02)\n+\n+\n+### Bug Fixes\n+\n+* upgrade to version of nyc that works with new shelljs([c7ac6e2](https://github.com/conventional-changelog/standard-version/commit/c7ac6e2))\n+\n+\n+\n+<a name=\"2.2.0\"></a>\n+# [2.2.0](https://github.com/conventional-changelog/standard-version/compare/v2.1.2...v2.2.0) (2016-05-01)\n+\n+\n+### Bug Fixes\n+\n+* format the annotated tag message ([#28](https://github.com/conventional-changelog/standard-version/issues/28))([8f02736](https://github.com/conventional-changelog/standard-version/commit/8f02736))\n+* upgraded dependencies, switched back to angular format (fixes [#27](https://github.com/conventional-changelog/standard-version/issues/27)), pinned shelljs to version that works with nyc ([#30](https://github.com/conventional-changelog/standard-version/issues/30))([3f51e94](https://github.com/conventional-changelog/standard-version/commit/3f51e94))\n+\n+\n+### Features\n+\n+* add --sign flag to sign git commit and tag ([#29](https://github.com/conventional-changelog/standard-version/issues/29))([de758bc](https://github.com/conventional-changelog/standard-version/commit/de758bc))\n+\n+\n+\n <a name=\"2.1.2\"></a>\n ## [2.1.2](https://github.com/conventional-changelog/standard-version/compare/v2.1.1...v2.1.2) (2016-04-11)\n \ndiff --git a/index.js b/index.js\nindex a0f6d93..632b9a8 100755\n--- a/index.js\n+++ b/index.js\n@@ -24,6 +24,13 @@\n     default: false,\n     global: true\n   })\n+  .option('sign', {\n+    alias: 's',\n+    describe: 'Should the git commit and tag be signed?',\n+    type: 'boolean',\n+    default: false,\n+    global: true\n+  })\n   .help()\n   .alias('help', 'h')\n   .example('$0', 'Update changelog and tag release')\n@@ -54,7 +61,7 @@\n     newVersion = semver.inc(pkg.version, release.releaseAs)\n     checkpoint('bumping version in package.json from %s to %s', [pkg.version, newVersion])\n     pkg.version = newVersion\n-    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2), 'utf-8')\n+    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n', 'utf-8')\n   } else {\n     console.log(chalk.red(figures.cross) + ' skip version bump on first release')\n   }\n@@ -76,7 +83,7 @@\n   }\n   var content = ''\n   var changelogStream = conventionalChangelog({\n-    preset: 'standard',\n+    preset: 'angular',\n     outputUnreleased: true,\n     pkg: {\n       path: path.resolve(process.cwd(), './package.json')\n@@ -106,7 +113,7 @@\n     args.unshift('package.json')\n   }\n   checkpoint(msg, args)\n-  exec('git add package.json ' + argv.infile + ';git commit package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n+  exec('git add package.json ' + argv.infile + ';git commit ' + (argv.sign ? '-S ' : '') + 'package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n     var errMessage = null\n     if (err) errMessage = err.message\n     if (stderr) errMessage = stderr\n@@ -123,14 +130,24 @@\n }\n \n function tag (newVersion, argv) {\n+  var tagOption\n+  if (argv.sign) {\n+    tagOption = '-s '\n+  } else {\n+    tagOption = '-a '\n+  }\n   checkpoint('tagging release %s', [newVersion])\n-  exec('git tag -a v' + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n+  exec('git tag ' + tagOption + 'v' + newVersion + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n     var errMessage = null\n     if (err) errMessage = err.message\n     if (stderr) errMessage = stderr\n     if (errMessage) {\n       console.log(chalk.red(errMessage))\n       process.exit(1)\n+    } else {\n+      checkpoint('Run `%s` to publish.', [\n+        'git push --follow-tags origin master; npm publish'\n+      ])\n     }\n   })\n }\ndiff --git a/package.json b/package.json\nindex b64a3ef..b084612 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,12 +1,12 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"2.1.2\",\n+  \"version\": \"2.2.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"index.js\",\n   \"scripts\": {\n     \"pretest\": \"standard\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n-    \"test\": \"nyc mocha --timeout=10000 test.js\"\n+    \"test\": \"nyc mocha --timeout=20000 test.js\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n@@ -31,19 +31,20 @@\n   \"dependencies\": {\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-changelog-standard\": \"^1.2.1\",\n-    \"conventional-recommended-bump\": \"^0.2.0\",\n+    \"conventional-changelog-angular\": \"^1.1.0\",\n+    \"conventional-recommended-bump\": \"^0.2.1\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n     \"semver\": \"^5.1.0\",\n-    \"yargs\": \"^4.3.2\"\n+    \"yargs\": \"^4.6.0\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"^3.5.0\",\n     \"coveralls\": \"^2.11.9\",\n-    \"mocha\": \"^2.4.5\",\n-    \"nyc\": \"^6.2.1\",\n+    \"mocha\": \"^2.5.1\",\n+    \"mock-git\": \"^1.0.2\",\n+    \"nyc\": \"^6.4.2\",\n     \"shelljs\": \"^0.7.0\",\n-    \"standard\": \"^6.0.8\"\n+    \"standard\": \"^7.0.1\"\n   }\n }\ndiff --git a/test.js b/test.js\nindex 672c197..5c97cbf 100644\n--- a/test.js\n+++ b/test.js\n@@ -5,6 +5,7 @@\n var shell = require('shelljs')\n var fs = require('fs')\n var path = require('path')\n+var mockGit = require('mock-git')\n var cliPath = path.resolve(__dirname, './index.js')\n \n require('chai').should()\n@@ -13,6 +14,12 @@\n   shell.exec('git commit --allow-empty -m\"' + msg + '\"')\n }\n \n+function writePackageJson (version) {\n+  fs.writeFileSync('package.json', JSON.stringify({\n+    version: version\n+  }), 'utf-8')\n+}\n+\n describe('cli', function () {\n   beforeEach(function () {\n     shell.rm('-rf', 'tmp')\n@@ -30,9 +37,7 @@\n \n   describe('CHANGELOG.md does not exist', function () {\n     it('populates changelog with commits since last tag by default', function () {\n-      fs.writeFileSync('package.json', JSON.stringify({\n-        version: '1.0.0'\n-      }), 'utf-8')\n+      writePackageJson('1.0.0')\n \n       commit('feat: first commit')\n       shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n@@ -46,9 +51,7 @@\n     })\n \n     it('includes all commits if --first-release is true', function () {\n-      fs.writeFileSync('package.json', JSON.stringify({\n-        version: '1.0.1'\n-      }), 'utf-8')\n+      writePackageJson('1.0.1')\n \n       commit('feat: first commit')\n       commit('fix: patch release')\n@@ -63,9 +66,7 @@\n \n   describe('CHANGELOG.md exists', function () {\n     it('appends the new release above the last release, removing the old header', function () {\n-      fs.writeFileSync('package.json', JSON.stringify({\n-        version: '1.0.0'\n-      }), 'utf-8')\n+      writePackageJson('1.0.0')\n       fs.writeFileSync('CHANGELOG.md', 'legacy header format<a name=\"1.0.0\">\\n', 'utf-8')\n \n       commit('feat: first commit')\n@@ -79,10 +80,56 @@\n     })\n   })\n \n+  describe('with mocked git', function () {\n+    it('--sign signs the commit and tag', function () {\n+      // mock git with file that writes args to gitcapture.log\n+      mockGit('require(\"fs\").appendFileSync(\"gitcapture.log\", JSON.stringify(process.argv.splice(2)) + \"\\\\n\")')\n+        .then(function (unmock) {\n+          writePackageJson('1.0.0')\n+\n+          shell.exec(cliPath + ' --sign').code.should.equal(0)\n+\n+          var captured = shell.cat('gitcapture.log').stdout.split('\\n').map(function (line) {\n+            return line ? JSON.parse(line) : line\n+          })\n+          captured[captured.length - 3].should.deep.equal(['commit', '-S', 'package.json', 'CHANGELOG.md', '-m', 'chore(release): 1.0.1'])\n+          captured[captured.length - 2].should.deep.equal(['tag', '-s', 'v1.0.1', '-m', 'chore(release): 1.0.1'])\n+\n+          unmock()\n+        })\n+    })\n+\n+    it('exits with error code if git commit fails', function () {\n+      // mock git by throwing on attempt to commit\n+      mockGit('console.error(\"commit yourself\"); process.exit(128);', 'commit')\n+        .then(function (unmock) {\n+          writePackageJson('1.0.0')\n+\n+          var result = shell.exec(cliPath)\n+          result.code.should.equal(1)\n+          result.stdout.should.match(/commit yourself/)\n+\n+          unmock()\n+        })\n+    })\n+\n+    it('exits with error code if git tag fails', function () {\n+      // mock git by throwing on attempt to commit\n+      return mockGit('console.error(\"tag, you\\'re it\"); process.exit(128);', 'tag')\n+        .then(function (unmock) {\n+          writePackageJson('1.0.0')\n+\n+          var result = shell.exec(cliPath)\n+          result.code.should.equal(1)\n+          result.stdout.should.match(/tag, you're it/)\n+\n+          unmock()\n+        })\n+    })\n+  })\n+\n   it('handles commit messages longer than 80 characters', function () {\n-    fs.writeFileSync('package.json', JSON.stringify({\n-      version: '1.0.0'\n-    }), 'utf-8')\n+    writePackageJson('1.0.0')\n \n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n@@ -95,9 +142,7 @@\n   })\n \n   it('formats the commit and tag messages appropriately', function () {\n-    fs.writeFileSync('package.json', JSON.stringify({\n-      version: '1.0.0'\n-    }), 'utf-8')\n+    writePackageJson('1.0.0')\n \n     commit('feat: first commit')\n     shell.exec('git tag -a v1.0.0 -m \"my awesome first release\"')\n@@ -106,8 +151,17 @@\n     shell.exec(cliPath).code.should.equal(0)\n \n     // check last commit message\n-    shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\)\\: 1\\.1\\.0/)\n+    shell.exec('git log --oneline -n1').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n     // check annotated tag message\n-    shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\)\\: 1\\.1\\.0/)\n+    shell.exec('git tag -l -n1 v1.1.0').stdout.should.match(/chore\\(release\\): 1\\.1\\.0/)\n+  })\n+\n+  it('appends line feed at end of package.json', function () {\n+    writePackageJson('1.0.0')\n+\n+    shell.exec(cliPath).code.should.equal(0)\n+\n+    var pkgJson = fs.readFileSync('package.json', 'utf-8')\n+    pkgJson.should.equal(['{', '  \"version\": \"1.0.1\"', '}', ''].join('\\n'))\n   })\n })\n"
  }, {
    "begin time" : "Mon Apr 11 00:00:00 CST 2016",
    "end time" : "Sun May 01 00:00:00 CST 2016",
    "description" : "### Bug Fixes* format the annotated tag message ([#28](https://github.com/conventional-changelog/standard-version/issues/28))([8f02736](https://github.com/conventional-changelog/standard-version/commit/8f02736))* upgraded dependencies, switched back to angular format (fixes [#27](https://github.com/conventional-changelog/standard-version/issues/27)), pinned shelljs to version that works with nyc ([#30](https://github.com/conventional-changelog/standard-version/issues/30))([3f51e94](https://github.com/conventional-changelog/standard-version/commit/3f51e94))### Features* add --sign flag to sign git commit and tag ([#29](https://github.com/conventional-changelog/standard-version/issues/29))([de758bc](https://github.com/conventional-changelog/standard-version/commit/de758bc))<a name=\"2.1.2\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ade7bc5..dd05e96 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,16 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n+<a name=\"2.1.2\"></a>\n+## [2.1.2](https://github.com/conventional-changelog/standard-version/compare/v2.1.1...v2.1.2) (2016-04-11)\n+\n+\n+### Bug Fixes\n+\n+* we had too many \\n characters ([#17](https://github.com/conventional-changelog/standard-version/issues/17)) ([67a01cd](https://github.com/conventional-changelog/standard-version/commit/67a01cd))\n+\n+\n+\n <a name=\"2.1.1\"></a>\n ## [2.1.1](https://github.com/conventional-changelog/standard-version/compare/v2.1.0...v2.1.1) (2016-04-10)\n \ndiff --git a/README.md b/README.md\nindex 73782a3..a4bbe9d 100644\n--- a/README.md\n+++ b/README.md\n@@ -7,40 +7,36 @@\n \n > stop using `npm version`, use `standard-version` it rocks!\n \n-Automatic release and CHANGELOG management, using GitHub's new squash button and\n-the workflow outlined in [conventional-changelog-standard](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md).\n+Automatic versioning and CHANGELOG management, using GitHub's new squash button and\n+the [recommended workflow](https://github.com/conventional-changelog/conventional-changelog-cli#recommended-workflow) for `conventional-changelog`.\n \n _how it works:_\n \n 1. when you land commits on your `master` branch, select the _Squash and Merge_ option.\n 2. add a title and body that follows the [conventional-changelog-standard conventions](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md).\n 3. when you're ready to release to npm:\n-  1. checkout `master`.\n-  2. run `standard-version`.\n-  3. `git push --tags; git push origin master; npm publish`.\n+  1. `git checkout master; git pull origin master`\n+  2. run `standard-version`\n+  3. `git push --follow-tags origin master; npm publish`\n \n `standard-version` does the following:\n \n-1. bumps the version in package.json (based on your commit history).\n-2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md._\n-3. commits _package.json_ and _CHANGELOG.md_.\n-4. tags a new release.\n-\n-## Initial CHANGELOG.md Generation\n-\n-When you're generating your changelog for the first time, simply do:\n-\n-`standard-version --first-release`\n+1. bumps the version in _package.json_ (based on your commit history)\n+2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md_\n+3. commits _package.json_ and _CHANGELOG.md_\n+4. tags a new release\n \n ## Installation\n \n-`npm i standard-version -g`\n+### As `npm run` script\n \n-_Or, add it as a development dependency like so:_\n+Install and add to `devDependencies`:\n \n-`npm i standard-version --save-dev`\n+```\n+npm i --save-dev standard-version\n+```\n \n-_And add this to your _package.json:_\n+Add an [`npm run` script](https://docs.npmjs.com/cli/run-script) to your _package.json_:\n \n ```json\n {\n@@ -50,12 +46,69 @@\n }\n ```\n \n+Now you can use `npm run release` in place of `npm version`.\n+\n+This has the benefit of making your repo/package more portable, so that other developers can cut releases without having to globally install `standard-version` on their machine.\n+\n+### As global bin\n+\n+Install globally (add to your `PATH`):\n+\n+```\n+npm i -g standard-version\n+```\n+\n+Now you can use `standard-version` in place of `npm version`.\n+\n+This has the benefit of allowing you to use `standard-version` on any repo/package without adding a dev dependency to each one.\n+\n+## Usage\n+\n+### First Release\n+\n+To generate your changelog for your first release, simply do:\n+\n+```sh\n+# npm run script\n+npm run release -- --first-release\n+# or global bin\n+standard-version --first-release\n+```\n+\n+This will tag a release **without bumping the version in package.json**.\n+\n+When ready, push the git tag and `npm publish` your first release. \\o/\n+\n+### Cut a Release\n+\n+If you typically use `npm version` to cut a new release, do this instead:\n+\n+```sh\n+# npm run script\n+npm run release\n+# or global bin\n+standard-version\n+```\n+\n+As long as your git commit messages are conventional and accurate, you no longer need to specify the semver type - and you get CHANGELOG generation for free! \\o/\n+\n+After you cut a release, you can push the new git tag and `npm publish` (or `npm publish --tag next`) when you're ready.\n+\n+### CLI Help\n+\n+```sh\n+# npm run script\n+npm run release -- --help\n+# or global bin\n+standard-version --help\n+```\n+\n ## Commit Message Convention, at a Glance\n \n _patches:_\n \n ```sh\n--m \"fix(parsing): fixed a bug in our parser\"\n+git commit -a -m \"fix(parsing): fixed a bug in our parser\"\n ```\n \n _features:_\n@@ -92,6 +145,28 @@\n [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n ```\n \n+## FAQ\n+\n+### How is `standard-version` different from `semantic-release`?\n+\n+[`semantic-release`](https://github.com/semantic-release/semantic-release) is a fully automated library/system for versioning, changelog generation, git tagging, and publishing to the npm registry.\n+\n+`standard-version` is different because it handles the versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you still have to ability to review things and correct mistakes if you want to.\n+\n+They are both based on the same foundation of structured commit messages (using [Angular format](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md)), but `standard-version` is a good choice for folks who are not yet comfortable letting publishes go out automatically. In this way, you can view `standard-version` as an incremental step to adopting `semantic-release`.\n+\n+We think they are both fantastic tools, and we encourage folks to use `semantic-release` instead of `standard-version` if it makes sense for them.\n+\n+### Should I always squash commits when merging PRs?\n+\n+The instructions to squash commits when merging pull requests assumes that **one PR equals, at most, one feature or fix**.\n+\n+If you have multiple features or fixes landing in a single PR and each commit uses a structured message, then you can do a standard merge when accepting the PR. This will preserve the commit history from your branch after the merge.\n+\n+Although this will allow each commit to be included as separate entries in your CHANGELOG, the entries will **not** be able to reference the PR that pulled the changes in because the preserved commit messages do not include the PR number.\n+\n+For this reason, we recommend keeping the scope of each PR to one general feature or fix. In practice, this allows you to use unstructured commit messages when committing each little change and then squash them into a single commit with a structured message (referencing the PR number) once they have been reviewed and accepted.\n+\n ## License\n \n ISC\ndiff --git a/index.js b/index.js\nindex 4095c8d..5a18542 100755\n--- a/index.js\n+++ b/index.js\n@@ -93,7 +93,7 @@\n \n   changelogStream.on('end', function () {\n     checkpoint('outputting changes to %s', [argv.infile])\n-    fs.writeFileSync(argv.infile, header + '\\n' + content + oldContent, 'utf-8')\n+    fs.writeFileSync(argv.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'), 'utf-8')\n     return cb()\n   })\n }\ndiff --git a/package.json b/package.json\nindex 223805e..b64a3ef 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"2.1.1\",\n+  \"version\": \"2.1.2\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"index.js\",\n   \"scripts\": {\n@@ -19,7 +19,8 @@\n     \"automatic\",\n     \"workflow\",\n     \"version\",\n-    \"angular\"\n+    \"angular\",\n+    \"standard\"\n   ],\n   \"author\": \"Ben Coe <ben@npmjs.com>\",\n   \"license\": \"ISC\",\n@@ -42,7 +43,7 @@\n     \"coveralls\": \"^2.11.9\",\n     \"mocha\": \"^2.4.5\",\n     \"nyc\": \"^6.2.1\",\n-    \"shelljs\": \"^0.6.0\",\n+    \"shelljs\": \"^0.7.0\",\n     \"standard\": \"^6.0.8\"\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/test.js b/test.js\nindex 7b537dd..e0ec097 100644\n--- a/test.js\n+++ b/test.js\n@@ -57,7 +57,7 @@\n       var content = fs.readFileSync('CHANGELOG.md', 'utf-8')\n       content.should.match(/patch release/)\n       content.should.match(/first commit/)\n-      shell.exec('git tag').output.should.match(/1\\.0\\.1/)\n+      shell.exec('git tag').stdout.should.match(/1\\.0\\.1/)\n     })\n   })\n \n"
  }, {
    "begin time" : "Sun Apr 10 00:00:00 CST 2016",
    "end time" : "Mon Apr 11 00:00:00 CST 2016",
    "description" : "### Bug Fixes* we had too many \\n characters ([#17](https://github.com/conventional-changelog/standard-version/issues/17)) ([67a01cd](https://github.com/conventional-changelog/standard-version/commit/67a01cd))<a name=\"2.1.1\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex b3e587e..ade7bc5 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,15 +2,47 @@\n \n All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n \n-<a name=\"1.1.0\"></a>\n-# [1.1.0](https://github.com/conventional-changelog/standard-verison/compare/v1.0.0...v1.1.0) (2016-04-08)\n+<a name=\"2.1.1\"></a>\n+## [2.1.1](https://github.com/conventional-changelog/standard-version/compare/v2.1.0...v2.1.1) (2016-04-10)\n+\n+\n+### Bug Fixes\n+\n+* **docs:** had a bad URL in package.json, which was breaking all of our links ([caa6359](https://github.com/conventional-changelog/standard-version/commit/caa6359))\n+\n+\n+\n+<a name=\"2.1.0\"></a>\n+# [2.1.0](https://github.com/conventional-changelog/standard-version/compare/v2.0.0...v2.1.0) (2016-04-10)\n \n \n ### Features\n \n-* **cli:** use conventional default commit message with version ([9fadc5f](https://github.com/conventional-changelog/standard-verison/commit/9fadc5f))\n-* **rebrand:** rebrand recommended-workflow to standard-version (#9) ([1f673c0](https://github.com/conventional-changelog/standard-verison/commit/1f673c0))\n-* **tests:** adds test suite, fixed several Node 0.10 issues along the way ([03bd86c](https://github.com/conventional-changelog/standard-verison/commit/03bd86c))\n+* adds support for GitHub links (see [#13](https://github.com/conventional-changelog/standard-version/issues/13)), great idea [@bcoe](https://github.com/bcoe)! ([7bf6597](https://github.com/conventional-changelog/standard-version/commit/7bf6597))\n+\n+\n+\n+<a name=\"2.0.0\"></a>\n+# [2.0.0](https://github.com/conventional-changelog/standard-version/compare/v1.1.0...v2.0.0) (2016-04-09)\n+\n+\n+* feat(conventional-changelog-standard): Move to conventional-changelog-standard style. This style lifts the character limit on commit messages, and puts us in a position to make more opinionated decisions in the future. ([c7ccadb](https://github.com/conventional-changelog/standard-version/commit/c7ccadb))\n+\n+\n+### BREAKING CHANGES\n+\n+* we no longer accept the preset configuration option.\n+\n+\n+<a name=\"1.1.0\"></a>\n+# [1.1.0](https://github.com/conventional-changelog/standard-version/compare/v1.0.0...v1.1.0) (2016-04-08)\n+\n+\n+### Features\n+\n+* **cli:** use conventional default commit message with version ([9fadc5f](https://github.com/conventional-changelog/standard-version/commit/9fadc5f))\n+* **rebrand:** rebrand recommended-workflow to standard-version (#9) ([1f673c0](https://github.com/conventional-changelog/standard-version/commit/1f673c0))\n+* **tests:** adds test suite, fixed several Node 0.10 issues along the way ([03bd86c](https://github.com/conventional-changelog/standard-version/commit/03bd86c))\n \n \n \n@@ -21,6 +53,3 @@\n ### Features\n \n * **initial-release:** adds flag for generating CHANGELOG.md on the first release. ([b812b44](https://github.com/bcoe/conventional-recommended-workflow/commit/b812b44))\n-\n-\n-\ndiff --git a/README.md b/README.md\nindex 5ed8dad..250f574 100644\n--- a/README.md\n+++ b/README.md\n@@ -5,7 +5,7 @@\n [![Coverage Status](https://coveralls.io/repos/conventional-changelog/standard-version/badge.svg?branch=)](https://coveralls.io/r/conventional-changelog/standard-version?branch=master)\n [![Standard Version](https://img.shields.io/badge/standard-version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n \n-> stop using `npm version`, use `standard-version` it makes your life way easier.\n+> stop using `npm version`, use `standard-version` it rocks!\n \n Automatic release and CHANGELOG management, using GitHub's new squash button and\n the workflow outlined in [conventional-changelog-standard](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md).\n@@ -22,7 +22,7 @@\n `standard-version` does the following:\n \n 1. bumps the version in package.json (based on your commit history).\n-2. runs `conventional-changelog` and updates _CHANGELOG.md._\n+2. uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) to update _CHANGELOG.md._\n 3. commits _package.json_ and _CHANGELOG.md_.\n 4. tags a new release.\n \n@@ -36,13 +36,11 @@\n \n `npm i standard-version -g`\n \n-## Automating\n-\n-Do this:\n+_Or, add it as a development dependency like so:_\n \n `npm i standard-version --save-dev`\n \n-Add this to your _package.json_\n+_And add this to your _package.json:_\n \n ```json\n {\n@@ -69,8 +67,8 @@\n _breaking changes:_\n \n ```sh\n-git commit -a -m \"feat(new-parser):\n-BREAKING CHANGE: swapping out our old parser for a new one\"\n+git commit -a -m \"feat(new-parser): introduces a new parsing library\n+BREAKING CHANGE: new library does not support foo-construct\"\n ```\n \n _other changes:_\n@@ -81,6 +79,11 @@\n git commit -a -m \"docs: fixed up the docs a bit\"\n ```\n \n+_but wait, there's more!_\n+\n+Github usernames (`@bcoe`) and issue references (#133) will be swapped out for the\n+appropriate URLs in your CHANGELOG.\n+\n ## Badges!\n \n Tell your users that you adhere to the `standard-version` commit guidelines:\ndiff --git a/package.json b/package.json\nindex d627b94..223805e 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"1.1.0\",\n+  \"version\": \"2.1.1\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"index.js\",\n   \"scripts\": {\n@@ -10,7 +10,7 @@\n   },\n   \"repository\": {\n     \"type\": \"git\",\n-    \"url\": \"git+https://github.com/conventional-changelog/standard-verison.git\"\n+    \"url\": \"git+https://github.com/conventional-changelog/standard-version.git\"\n   },\n   \"keywords\": [\n     \"conventional-changelog\",\n@@ -30,7 +30,7 @@\n   \"dependencies\": {\n     \"chalk\": \"^1.1.3\",\n     \"conventional-changelog\": \"^1.1.0\",\n-    \"conventional-changelog-standard\": \"^1.1.0\",\n+    \"conventional-changelog-standard\": \"^1.2.1\",\n     \"conventional-recommended-bump\": \"^0.2.0\",\n     \"figures\": \"^1.5.0\",\n     \"fs-access\": \"^1.0.0\",\n@@ -45,4 +45,4 @@\n     \"shelljs\": \"^0.6.0\",\n     \"standard\": \"^6.0.8\"\n   }\n-}\n+}\n\\ No newline at end of file\n"
  }, {
    "begin time" : "Sat Apr 09 00:00:00 CST 2016",
    "end time" : "Sun Apr 10 00:00:00 CST 2016",
    "description" : "### Features* adds support for GitHub links (see [#13](https://github.com/conventional-changelog/standard-version/issues/13)), great idea [@bcoe](https://github.com/bcoe)! ([7bf6597](https://github.com/conventional-changelog/standard-version/commit/7bf6597))<a name=\"2.0.0\"></a>",
    "hunks" : "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex bdd388d..b3e587e 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,3 +1,19 @@\n+# Change Log\n+\n+All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n+\n+<a name=\"1.1.0\"></a>\n+# [1.1.0](https://github.com/conventional-changelog/standard-verison/compare/v1.0.0...v1.1.0) (2016-04-08)\n+\n+\n+### Features\n+\n+* **cli:** use conventional default commit message with version ([9fadc5f](https://github.com/conventional-changelog/standard-verison/commit/9fadc5f))\n+* **rebrand:** rebrand recommended-workflow to standard-version (#9) ([1f673c0](https://github.com/conventional-changelog/standard-verison/commit/1f673c0))\n+* **tests:** adds test suite, fixed several Node 0.10 issues along the way ([03bd86c](https://github.com/conventional-changelog/standard-verison/commit/03bd86c))\n+\n+\n+\n <a name=\"1.0.0\"></a>\n # 1.0.0 (2016-04-04)\n \ndiff --git a/package.json b/package.json\nindex 8a75e30..b007606 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"standard-version\",\n-  \"version\": \"1.0.0\",\n+  \"version\": \"1.1.0\",\n   \"description\": \"replacement for `npm version` with automatic CHANGELOG generation\",\n   \"bin\": \"index.js\",\n   \"scripts\": {\n@@ -44,4 +44,4 @@\n     \"shelljs\": \"^0.6.0\",\n     \"standard\": \"^6.0.8\"\n   }\n-}\n+}\n\\ No newline at end of file\n"
  }, {
    "begin time" : "Mon Apr 04 00:00:00 CST 2016",
    "end time" : "Fri Apr 08 00:00:00 CST 2016",
    "description" : "### Features* **cli:** use conventional default commit message with version ([9fadc5f](https://github.com/conventional-changelog/standard-version/commit/9fadc5f))* **rebrand:** rebrand recommended-workflow to standard-version (#9) ([1f673c0](https://github.com/conventional-changelog/standard-version/commit/1f673c0))* **tests:** adds test suite, fixed several Node 0.10 issues along the way ([03bd86c](https://github.com/conventional-changelog/standard-version/commit/03bd86c))<a name=\"1.0.0\"></a>",
    "hunks" : "diff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000..ab16803\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,5 @@\n+language: node_js\n+node_js:\n+  - \"0.10\"\n+  - \"0.12\"\n+  - \"node\"\ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nnew file mode 100644\nindex 0000000..bdd388d\n--- /dev/null\n+++ b/CHANGELOG.md\n@@ -0,0 +1,10 @@\n+<a name=\"1.0.0\"></a>\n+# 1.0.0 (2016-04-04)\n+\n+\n+### Features\n+\n+* **initial-release:** adds flag for generating CHANGELOG.md on the first release. ([b812b44](https://github.com/bcoe/conventional-recommended-workflow/commit/b812b44))\n+\n+\n+\ndiff --git a/README.md b/README.md\nindex 6ec1485..35c0033 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,5 +1,8 @@\n # Conventional Recommended Workflow\n \n+[![Build Status](https://travis-ci.org/bcoe/conventional-recommended-workflow.svg)](https://travis-ci.org/bcoe/conventional-recommended-workflow)\n+[![NPM version](https://img.shields.io/npm/v/conventional-recommended-workflow.svg)](https://www.npmjs.com/package/conventional-recommended-workflow)\n+\n Automatic CHANGELOG.md generation, using GitHub's new squash button and\n the workflow outlined in [conventional-changelog-cli](https://github.com/stevemao/conventional-changelog-cli).\n \n@@ -19,6 +22,12 @@\n 3. commits _package.json_ and _CHANGELOG.md_.\n 4. tags a new release.\n \n+## Initial CHANGELOG.md Generation\n+\n+When you're generating your changelog for the first time, simply do:\n+\n+`conventional-recommended-workflow --first-release`\n+\n ## Installation\n \n `npm i conventional-recommended-workflow`\ndiff --git a/index.js b/index.js\nindex 7203ee0..7378f46 100755\n--- a/index.js\n+++ b/index.js\n@@ -3,26 +3,38 @@\n var conventionalRecommendedBump = require('conventional-recommended-bump')\n var path = require('path')\n var argv = require('yargs')\n-  .usage('$0 [options]')\n+  .usage('Usage: $0 [options]')\n   .option('infile', {\n     alias: 'i',\n     describe: 'Read the CHANGELOG from this file',\n-    default: 'CHANGELOG.md'\n+    default: 'CHANGELOG.md',\n+    global: true\n   })\n   .option('preset', {\n     alias: 'p',\n-    describe: 'Name of the preset you want to use. Must be one of the following: angular, atom, codemirror, ember, eslint, express, jquery, jscs or jshint',\n-    default: 'angular'\n+    describe: 'Name of the preset you want to use. Must be one of the following:\\nangular, atom, codemirror, ember, eslint, express, jquery, jscs, or jshint',\n+    default: 'angular',\n+    global: true\n   })\n   .option('message', {\n     alias: 'm',\n-    describe: 'commit message',\n+    describe: 'Commit message, replaces %s with new version',\n     type: 'string',\n-    default: 'see changelog for details'\n+    default: 'chore(release): %s',\n+    global: true\n+  })\n+  .option('first-release', {\n+    alias: 'f',\n+    describe: 'Is this the first release?',\n+    type: 'boolean',\n+    default: false,\n+    global: true\n   })\n   .help()\n-  .alias('h', 'help')\n-  .example('$0 -m \"see changelog for details\"', 'update changelog and tag release')\n+  .alias('help', 'h')\n+  .example('$0', 'Update changelog and tag release')\n+  .example('$0 -m \"%s: see changelog for details\"', 'Update changelog and tag release with custom commit message')\n+  .wrap(97)\n   .argv\n \n var addStream = require('add-stream')\n@@ -34,6 +46,7 @@\n var semver = require('semver')\n var tempfile = require('tempfile')\n var rimraf = require('rimraf')\n+var util = require('util')\n \n conventionalRecommendedBump({\n   preset: argv.preset\n@@ -43,13 +56,19 @@\n     return\n   }\n \n-  var newVersion = semver.inc(pkg.version, release.releaseAs)\n-  console.log(chalk.bold('1.') + ' bump version ' + chalk.bold(release.releaseAs) + ' in package.json (' + pkg.version + ' → ' + chalk.green(newVersion) + ')')\n-  pkg.version = newVersion\n-  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2), 'utf-8')\n+  var newVersion = pkg.version\n+  if (!argv.firstRelease) {\n+    newVersion = semver.inc(pkg.version, release.releaseAs)\n+\n+    console.log(chalk.bold('1.') + ' bump version ' + chalk.bold(release.releaseAs) + ' in package.json (' + pkg.version + ' → ' + chalk.green(newVersion) + ')')\n+    pkg.version = newVersion\n+    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2), 'utf-8')\n+  } else {\n+    console.log(chalk.yellow('skip package.json update on first release'))\n+  }\n \n   outputChangelog(argv, function () {\n-    commit(argv, function () {\n+    commit(argv, newVersion, function () {\n       return tag(newVersion, argv)\n     })\n   })\n@@ -64,7 +83,14 @@\n     .on('error', function (err) {\n       console.warn(chalk.yellow(err.message))\n     })\n-  var changelogStream = conventionalChangelog({preset: argv.preset})\n+\n+  var changelogStream = conventionalChangelog({\n+    preset: argv.preset,\n+    outputUnreleased: true,\n+    pkg: {\n+      path: path.resolve(process.cwd(), './package.json')\n+    }\n+  })\n     .on('error', function (err) {\n       console.error(chalk.red(err.message))\n       process.exit(1)\n@@ -84,9 +110,9 @@\n     })\n }\n \n-function commit (argv, cb) {\n+function commit (argv, newVersion, cb) {\n   console.log(chalk.bold('3.') + ' commit ' + chalk.bold('package.json') + ' and ' + chalk.bold(argv.infile))\n-  exec('git commit package.json ' + argv.infile + ' -m \"' + argv.message + '\"', function (err, stdout, stderr) {\n+  exec('git add package.json ' + argv.infile + ';git commit package.json ' + argv.infile + ' -m \"' + formatCommitMessage(argv.message, newVersion) + '\"', function (err, stdout, stderr) {\n     var errMessage = null\n     if (err) errMessage = err.message\n     if (stderr) errMessage = stderr\n@@ -98,6 +124,10 @@\n   })\n }\n \n+function formatCommitMessage (msg, newVersion) {\n+  return String(msg).indexOf('%s') !== -1 ? util.format(msg, newVersion) : msg\n+}\n+\n function tag (newVersion, argv) {\n   console.log(chalk.bold('4.') + ' tag release (' + chalk.green(newVersion) + ')')\n   exec('git tag -a v' + newVersion + ' -m \"' + argv.message + '\"', function (err, stdout, stderr) {\n@@ -117,6 +147,7 @@\n   } catch (err) {\n     if (err.code === 'ENOENT') {\n       console.log(chalk.green('creating ') + argv.infile)\n+      argv.outputUnreleased = true\n       fs.writeFileSync(argv.infile, '', 'utf-8')\n     }\n   }\n"
  } ]
} ]