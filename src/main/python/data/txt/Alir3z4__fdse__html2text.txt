repo name: Alir3z4/html2text
=====================================================================
start time: Thu Sep 26 00:00:00 CST 2019
end time: Thu Jan 16 00:00:00 CST 2020
description: 
=========
----
* Add type annotations.
* Add support for Python 3.8.
* Performance improvements when ``wrap_links`` is ``False`` (the default).
* Configure setuptools using setup.cfg.

commit message: 
commit db793dc0db46a235351e9e6e96bde4bc79112141 1569494160 -----sp :: Document bug fixes in upcoming release
commit 831136636eab882b1ef267d4eede14a19a7cdb99 1569498453 -----sp :: Remove unused and unmaintained requirements-dev.txt file
commit 0005069dcae2ba4812f52cd16b8d27d89fb3352b 1570895438 -----sp :: Simplify expression to avoid unnecessary loop
commit a80aad87149962d52b9135ca6daf6182f40224cd 1570895671 -----sp :: Use relative imports internally
commit 10171cfdbc99cafc29f65db1fdaa4f6df87f6518 1570897121 -----sp :: Use mypy to do static type checking of html2text
commit 951363496f1bfe55cc341292a461f76213daf5bb 1570897576 -----sp :: Xenial is now the default on Travis
commit c5017c4651e726d8313f077943896ffabbf3b6dc 1570898312 -----sp :: Update PyPy3 on Travis
+commit bbaf73742898ef0ae620a35fee4db2af408c8737 1570899778 -----sp :: Test on upcoming Python 3.8
+commit 3af173803d23dad8dd5369602dab19a656757d00 1572308520 -----sp :: Test on Python 3.8 final
+commit 2d2c7023e6498611e567fb68727ca4628c187b77 1572378171 -----sp :: Use setuptools declarative syntax through setup.cfg

hunks: 
diff --git a/.gitignore b/.gitignore
index a219c12..047a2c1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,3 +11,4 @@
 .vscode
 .tox/
 htmlcov/
+.mypy_cache/
diff --git a/.travis.yml b/.travis.yml
index 8e1904e..10b062e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1,3 @@
-dist: xenial
 language: python
 cache: pip
 
@@ -9,6 +8,8 @@
     - python: "3.7"
       env: TOXENV=flake8
     - python: "3.7"
+      env: TOXENV=mypy
+    - python: "3.7"
       env: TOXENV=isort
     - python: "3.5"
       env: TOXENV=py35
@@ -16,7 +17,9 @@
       env: TOXENV=py36
     - python: "3.7"
       env: TOXENV=py37
-    - python: "pypy3.5-6.0"
+    - python: 3.8
+      env: TOXENV=py38
+    - python: "pypy3"
       env: TOXENV=pypy3
 
 install:
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 5e41f16..1ecf567 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,4 +1,10 @@
-0000.0.00
+UNRELEASED
+==========
+----
+
+* Add type annotations.
+
+2019.9.26
 =========
 ----
 
diff --git a/html2text/__init__.py b/html2text/__init__.py
index bf3ce0f..d8e41a1 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -5,9 +5,12 @@
 import re
 import urllib.parse as urlparse
 from textwrap import wrap
+from typing import Dict, List, Optional, Tuple, Union
 
-from html2text import config
-from html2text.utils import (
+from . import config
+from .elements import AnchorElement, ListElement
+from .typing import OutCallback
+from .utils import (
     dumb_css_parser,
     element_style,
     escape_md,
@@ -23,7 +26,7 @@
     unifiable_n,
 )
 
-__version__ = (2019, 8, 11)
+__version__ = (2019, 9, 26)
 
 
 # TODO:
@@ -31,7 +34,12 @@
 
 
 class HTML2Text(html.parser.HTMLParser):
-    def __init__(self, out=None, baseurl="", bodywidth=config.BODY_WIDTH):
+    def __init__(
+        self,
+        out: Optional[OutCallback] = None,
+        baseurl: str = "",
+        bodywidth: int = config.BODY_WIDTH,
+    ) -> None:
         """
         Input parameters:
             out: possible custom replacement for self.outtextf (which
@@ -82,20 +90,20 @@
             self.out = out
 
         # empty list to store output characters before they are "joined"
-        self.outtextlist = []
+        self.outtextlist = []  # type: List[str]
 
         self.quiet = 0
         self.p_p = 0  # number of newline character to print before next output
         self.outcount = 0
         self.start = True
         self.space = False
-        self.a = []
-        self.astack = []
-        self.maybe_automatic_link = None
+        self.a = []  # type: List[AnchorElement]
+        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]
+        self.maybe_automatic_link = None  # type: Optional[str]
         self.empty_link = False
         self.absolute_url_matcher = re.compile(r"^[a-zA-Z+]+://")
         self.acount = 0
-        self.list = []
+        self.list = []  # type: List[ListElement]
         self.blockquote = 0
         self.pre = False
         self.startpre = False
@@ -105,42 +113,47 @@
         self.lastWasNL = False
         self.lastWasList = False
         self.style = 0
-        self.style_def = {}
-        self.tag_stack = []
+        self.style_def = {}  # type: Dict[str, Dict[str, str]]
+        self.tag_stack = (
+            []
+        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]
         self.emphasis = 0
         self.drop_white_space = 0
         self.inheader = False
-        self.abbr_title = None  # current abbreviation definition
-        self.abbr_data = None  # last inner HTML (for abbr being defined)
-        self.abbr_list = {}  # stack of abbreviations to write later
+        # Current abbreviation definition
+        self.abbr_title = None  # type: Optional[str]
+        # Last inner HTML (for abbr being defined)
+        self.abbr_data = None  # type: Optional[str]
+        # Stack of abbreviations to write later
+        self.abbr_list = {}  # type: Dict[str, str]
         self.baseurl = baseurl
         self.stressed = False
         self.preceding_stressed = False
-        self.preceding_data = None
-        self.current_tag = None
+        self.preceding_data = ""
+        self.current_tag = ""
 
         config.UNIFIABLE["nbsp"] = "&nbsp_place_holder;"
 
-    def feed(self, data):
+    def feed(self, data: str) -> None:
         data = data.replace("</' + 'script>", "</ignore>")
         super().feed(data)
 
-    def handle(self, data):
+    def handle(self, data: str) -> str:
         self.feed(data)
         self.feed("")
-        markdown = self.optwrap(self.close())
+        markdown = self.optwrap(self.finish())
         if self.pad_tables:
             return pad_tables_in_text(markdown)
         else:
             return markdown
 
-    def outtextf(self, s):
+    def outtextf(self, s: str) -> None:
         self.outtextlist.append(s)
         if s:
             self.lastWasNL = s[-1] == "\n"
 
-    def close(self):
-        super().close()
+    def finish(self) -> str:
+        self.close()
 
         self.pbr()
         self.o("", force="end")
@@ -159,10 +172,10 @@
 
         return outtext
 
-    def handle_charref(self, c):
+    def handle_charref(self, c: str) -> None:
         self.handle_data(self.charref(c), True)
 
-    def handle_entityref(self, c):
+    def handle_entityref(self, c: str) -> None:
         ref = self.entityref(c)
 
         # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should
@@ -174,13 +187,13 @@
         if ref:
             self.handle_data(ref, True)
 
-    def handle_starttag(self, tag, attrs):
-        self.handle_tag(tag, attrs, start=True)
+    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:
+        self.handle_tag(tag, dict(attrs), start=True)
 
-    def handle_endtag(self, tag):
-        self.handle_tag(tag, None, start=False)
+    def handle_endtag(self, tag: str) -> None:
+        self.handle_tag(tag, {}, start=False)
 
-    def previousIndex(self, attrs):
+    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:
         """
         :type attrs: dict
 
@@ -193,12 +206,12 @@
 
         match = False
         for i, a in enumerate(self.a):
-            if "href" in a and a["href"] == attrs["href"]:
-                if "title" in a or "title" in attrs:
+            if "href" in a.attrs and a.attrs["href"] == attrs["href"]:
+                if "title" in a.attrs or "title" in attrs:
                     if (
-                        "title" in a
+                        "title" in a.attrs
                         and "title" in attrs
-                        and a["title"] == attrs["title"]
+                        and a.attrs["title"] == attrs["title"]
                     ):
                         match = True
                 else:
@@ -208,7 +221,9 @@
                 return i
         return None
 
-    def handle_emphasis(self, start, tag_style, parent_style):
+    def handle_emphasis(
+        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]
+    ) -> None:
         """
         Handles various text emphases
         """
@@ -279,13 +294,10 @@
             if strikethrough:
                 self.quiet -= 1
 
-    def handle_tag(self, tag, attrs, start):
+    def handle_tag(
+        self, tag: str, attrs: Dict[str, Optional[str]], start: bool
+    ) -> None:
         self.current_tag = tag
-        # attrs is None for endtags
-        if attrs is None:
-            attrs = {}
-        else:
-            attrs = dict(attrs)
 
         if self.tag_callback is not None:
             if self.tag_callback(self, tag, attrs, start) is True:
@@ -308,7 +320,7 @@
             # need the attributes of the parent nodes in order to get a
             # complete style description for the current element. we assume
             # that google docs export well formed html.
-            parent_style = {}
+            parent_style = {}  # type: Dict[str, str]
             if start:
                 if self.tag_stack:
                     parent_style = self.tag_stack[-1][2]
@@ -377,8 +389,10 @@
                 self.blockquote -= 1
                 self.p()
 
-        def no_preceding_space(self):
-            return self.preceding_data and re.match(r"[^\s]", self.preceding_data[-1])
+        def no_preceding_space(self: HTML2Text) -> bool:
+            return bool(
+                self.preceding_data and re.match(r"[^\s]", self.preceding_data[-1])
+            )
 
         if tag in ["em", "i", "u"] and not self.ignore_emphasis:
             if start and no_preceding_space(self):
@@ -427,6 +441,7 @@
                     self.abbr_title = attrs["title"]
             else:
                 if self.abbr_title is not None:
+                    assert self.abbr_data is not None
                     self.abbr_list[self.abbr_data] = self.abbr_title
                     self.abbr_title = None
                 self.abbr_data = None
@@ -438,7 +453,7 @@
                 self.o(self.close_quote)
             self.quote = not self.quote
 
-        def link_url(self, link, title=""):
+        def link_url(self: HTML2Text, link: str, title: str = "") -> None:
             url = urlparse.urljoin(self.baseurl, link)
             title = ' "{}"'.format(title) if title.strip() else ""
             self.o("]({url}{title})".format(url=escape_md(url), title=title))
@@ -463,31 +478,28 @@
                     if self.maybe_automatic_link and not self.empty_link:
                         self.maybe_automatic_link = None
                     elif a:
+                        assert a["href"] is not None
                         if self.empty_link:
                             self.o("[")
                             self.empty_link = False
                             self.maybe_automatic_link = None
                         if self.inline_links:
-                            try:
-                                title = a["title"] if a["title"] else ""
-                                title = escape_md(title)
-                            except KeyError:
-                                link_url(self, a["href"], "")
-                            else:
-                                link_url(self, a["href"], title)
+                            title = a.get("title") or ""
+                            title = escape_md(title)
+                            link_url(self, a["href"], title)
                         else:
                             i = self.previousIndex(a)
                             if i is not None:
-                                a = self.a[i]
+                                a_props = self.a[i]
                             else:
                                 self.acount += 1
-                                a["count"] = self.acount
-                                a["outcount"] = self.outcount
-                                self.a.append(a)
-                            self.o("][" + str(a["count"]) + "]")
+                                a_props = AnchorElement(a, self.acount, self.outcount)
+                                self.a.append(a_props)
+                            self.o("][" + str(a_props.count) + "]")
 
         if tag == "img" and start and not self.ignore_images:
             if "src" in attrs:
+                assert attrs["src"] is not None
                 if not self.images_to_alt:
                     attrs["href"] = attrs["src"]
                 alt = attrs.get("alt") or self.default_image_alt
@@ -499,8 +511,10 @@
                 ):
                     self.o("<img src='" + attrs["src"] + "' ")
                     if "width" in attrs:
+                        assert attrs["width"] is not None
                         self.o("width='" + attrs["width"] + "' ")
                     if "height" in attrs:
+                        assert attrs["height"] is not None
                         self.o("height='" + attrs["height"] + "' ")
                     if alt:
                         self.o("alt='" + alt + "' ")
@@ -537,13 +551,12 @@
                     else:
                         i = self.previousIndex(attrs)
                         if i is not None:
-                            attrs = self.a[i]
+                            a_props = self.a[i]
                         else:
                             self.acount += 1
-                            attrs["count"] = self.acount
-                            attrs["outcount"] = self.outcount
-                            self.a.append(attrs)
-                        self.o("[" + str(attrs["count"]) + "]")
+                            a_props = AnchorElement(attrs, self.acount, self.outcount)
+                            self.a.append(a_props)
+                        self.o("[" + str(a_props.count) + "]")
 
         if tag == "dl" and start:
             self.p()
@@ -564,7 +577,7 @@
                 else:
                     list_style = tag
                 numbering_start = list_numbering_start(attrs)
-                self.list.append({"name": list_style, "num": numbering_start})
+                self.list.append(ListElement(list_style, numbering_start))
             else:
                 if self.list:
                     self.list.pop()
@@ -580,18 +593,18 @@
                 if self.list:
                     li = self.list[-1]
                 else:
-                    li = {"name": "ul", "num": 0}
+                    li = ListElement("ul", 0)
                 if self.google_doc:
                     nest_count = self.google_nest_count(tag_style)
                 else:
                     nest_count = len(self.list)
                 # TODO: line up <ol><li>s > 9 correctly.
                 self.o("  " * nest_count)
-                if li["name"] == "ul":
+                if li.name == "ul":
                     self.o(self.ul_item_mark + " ")
-                elif li["name"] == "ol":
-                    li["num"] += 1
-                    self.o(str(li["num"]) + ". ")
+                elif li.name == "ol":
+                    li.num += 1
+                    self.o(str(li.num) + ". ")
                 self.start = True
 
         if tag in ["table", "tr", "td", "th"]:
@@ -658,21 +671,23 @@
             self.p()
 
     # TODO: Add docstring for these one letter functions
-    def pbr(self):
+    def pbr(self) -> None:
         "Pretty print has a line break"
         if self.p_p == 0:
             self.p_p = 1
 
-    def p(self):
+    def p(self) -> None:
         "Set pretty print to 1 or 2 lines"
         self.p_p = 1 if self.single_line_break else 2
 
-    def soft_br(self):
+    def soft_br(self) -> None:
         "Soft breaks"
         self.pbr()
         self.br_toggle = "  "
 
-    def o(self, data, puredata=False, force=False):
+    def o(
+        self, data: str, puredata: bool = False, force: Union[bool, str] = False
+    ) -> None:
         """
         Deal with indentation and whitespace
         """
@@ -717,8 +732,7 @@
                 if not self.list:
                     bq += "    "
                 # else: list content is already partially indented
-                for i in range(len(self.list)):
-                    bq += "    "
+                bq += "    " * len(self.list)
                 data = data.replace("\n", "\n" + bq)
 
             if self.startpre:
@@ -756,15 +770,16 @@
 
                 newa = []
                 for link in self.a:
-                    if self.outcount > link["outcount"]:
+                    if self.outcount > link.outcount:
                         self.out(
                             "   ["
-                            + str(link["count"])
+                            + str(link.count)
                             + "]: "
-                            + urlparse.urljoin(self.baseurl, link["href"])
+                            + urlparse.urljoin(self.baseurl, link.attrs["href"])
                         )
-                        if "title" in link:
-                            self.out(" (" + link["title"] + ")")
+                        if "title" in link.attrs:
+                            assert link.attrs["title"] is not None
+                            self.out(" (" + link.attrs["title"] + ")")
                         self.out("\n")
                     else:
                         newa.append(link)
@@ -783,7 +798,7 @@
             self.out(data)
             self.outcount += 1
 
-    def handle_data(self, data, entity_char=False):
+    def handle_data(self, data: str, entity_char: bool = False) -> None:
         if not data:
             # Data may be empty for some HTML entities. For example,
             # LEFT-TO-RIGHT MARK.
@@ -826,7 +841,7 @@
         self.preceding_data = data
         self.o(data, puredata=True)
 
-    def charref(self, name):
+    def charref(self, name: str) -> str:
         if name[0] in ["x", "X"]:
             c = int(name[1:], 16)
         else:
@@ -840,7 +855,7 @@
             except ValueError:  # invalid unicode
                 return ""
 
-    def entityref(self, c):
+    def entityref(self, c: str) -> str:
         if not self.unicode_snob and c in config.UNIFIABLE:
             return config.UNIFIABLE[c]
         try:
@@ -849,7 +864,7 @@
             return "&" + c + ";"
         return config.UNIFIABLE[c] if c == "nbsp" else ch
 
-    def google_nest_count(self, style):
+    def google_nest_count(self, style: Dict[str, str]) -> int:
         """
         Calculate the nesting count of google doc lists
 
@@ -863,7 +878,7 @@
 
         return nest_count
 
-    def optwrap(self, text):
+    def optwrap(self, text: str) -> str:
         """
         Wrap all paragraphs in the provided text.
 
@@ -924,7 +939,7 @@
         return result
 
 
-def html2text(html, baseurl="", bodywidth=None):
+def html2text(html: str, baseurl: str = "", bodywidth: Optional[int] = None) -> str:
     if bodywidth is None:
         bodywidth = config.BODY_WIDTH
     h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
diff --git a/html2text/__main__.py b/html2text/__main__.py
index 6a5a4f8..4e28416 100644
--- a/html2text/__main__.py
+++ b/html2text/__main__.py
@@ -1,3 +1,3 @@
-from html2text.cli import main
+from .cli import main
 
 main()
diff --git a/html2text/cli.py b/html2text/cli.py
index 15a91f6..30a362e 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -1,10 +1,10 @@
 import argparse
 import sys
 
-from html2text import HTML2Text, __version__, config
+from . import HTML2Text, __version__, config
 
 
-def main():
+def main() -> None:
     baseurl = ""
 
     class bcolors:
@@ -259,7 +259,7 @@
         data = sys.stdin.buffer.read()
 
     try:
-        data = data.decode(args.encoding, args.decode_errors)
+        html = data.decode(args.encoding, args.decode_errors)
     except UnicodeDecodeError as err:
         warning = bcolors.WARNING + "Warning:" + bcolors.ENDC
         warning += " Use the " + bcolors.OKGREEN
@@ -303,4 +303,4 @@
     h.open_quote = args.open_quote
     h.close_quote = args.close_quote
 
-    sys.stdout.write(h.handle(data))
+    sys.stdout.write(h.handle(html))
diff --git a/html2text/elements.py b/html2text/elements.py
new file mode 100644
index 0000000..2533ec0
--- /dev/null
+++ b/html2text/elements.py
@@ -0,0 +1,18 @@
+from typing import Dict, Optional
+
+
+class AnchorElement:
+    __slots__ = ["attrs", "count", "outcount"]
+
+    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):
+        self.attrs = attrs
+        self.count = count
+        self.outcount = outcount
+
+
+class ListElement:
+    __slots__ = ["name", "num"]
+
+    def __init__(self, name: str, num: int):
+        self.name = name
+        self.num = num
diff --git a/html2text/py.typed b/html2text/py.typed
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/html2text/py.typed
diff --git a/html2text/typing.py b/html2text/typing.py
new file mode 100644
index 0000000..6e17fed
--- /dev/null
+++ b/html2text/typing.py
@@ -0,0 +1,3 @@
+class OutCallback:
+    def __call__(self, s: str) -> None:
+        ...
diff --git a/html2text/utils.py b/html2text/utils.py
index f982321..e6256d1 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -1,6 +1,7 @@
 import html.entities
+from typing import Dict, List, Optional
 
-from html2text import config
+from . import config
 
 unifiable_n = {
     html.entities.name2codepoint[k]: v
@@ -9,7 +10,7 @@
 }
 
 
-def hn(tag):
+def hn(tag: str) -> int:
     if tag[0] == "h" and len(tag) == 2:
         n = tag[1]
         if "0" < n <= "9":
@@ -17,7 +18,7 @@
     return 0
 
 
-def dumb_property_dict(style):
+def dumb_property_dict(style: str) -> Dict[str, str]:
     """
     :returns: A hash of css attributes
     """
@@ -27,7 +28,7 @@
     }
 
 
-def dumb_css_parser(data):
+def dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:
     """
     :type data: str
 
@@ -44,16 +45,20 @@
 
     # parse the css. reverted from dictionary comprehension in order to
     # support older pythons
-    elements = [x.split("{") for x in data.split("}") if "{" in x.strip()]
+    pairs = [x.split("{") for x in data.split("}") if "{" in x.strip()]
     try:
-        elements = {a.strip(): dumb_property_dict(b) for a, b in elements}
+        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}
     except ValueError:
         elements = {}  # not that important
 
     return elements
 
 
-def element_style(attrs, style_def, parent_style):
+def element_style(
+    attrs: Dict[str, Optional[str]],
+    style_def: Dict[str, Dict[str, str]],
+    parent_style: Dict[str, str],
+) -> Dict[str, str]:
     """
     :type attrs: dict
     :type style_def: dict
@@ -64,17 +69,19 @@
     """
     style = parent_style.copy()
     if "class" in attrs:
+        assert attrs["class"] is not None
         for css_class in attrs["class"].split():
             css_style = style_def.get("." + css_class, {})
             style.update(css_style)
     if "style" in attrs:
+        assert attrs["style"] is not None
         immediate_style = dumb_property_dict(attrs["style"])
         style.update(immediate_style)
 
     return style
 
 
-def google_list_style(style):
+def google_list_style(style: Dict[str, str]) -> str:
     """
     Finds out whether this is an ordered or unordered list
 
@@ -90,7 +97,7 @@
     return "ol"
 
 
-def google_has_height(style):
+def google_has_height(style: Dict[str, str]) -> bool:
     """
     Check if the style of the element has the 'height' attribute
     explicitly defined
@@ -102,7 +109,7 @@
     return "height" in style
 
 
-def google_text_emphasis(style):
+def google_text_emphasis(style: Dict[str, str]) -> List[str]:
     """
     :type style: dict
 
@@ -120,7 +127,7 @@
     return emphasis
 
 
-def google_fixed_width_font(style):
+def google_fixed_width_font(style: Dict[str, str]) -> bool:
     """
     Check if the css of the current element defines a fixed width font
 
@@ -134,7 +141,7 @@
     return "courier new" == font_family or "consolas" == font_family
 
 
-def list_numbering_start(attrs):
+def list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:
     """
     Extract numbering from list element attributes
 
@@ -143,6 +150,7 @@
     :rtype: int or None
     """
     if "start" in attrs:
+        assert attrs["start"] is not None
         try:
             return int(attrs["start"]) - 1
         except ValueError:
@@ -151,7 +159,7 @@
     return 0
 
 
-def skipwrap(para, wrap_links, wrap_list_items):
+def skipwrap(para: str, wrap_links: bool, wrap_list_items: bool) -> bool:
     # If it appears to contain a link
     # don't wrap
     if (len(config.RE_LINK.findall(para)) > 0) and not wrap_links:
@@ -182,7 +190,7 @@
     )
 
 
-def escape_md(text):
+def escape_md(text: str) -> str:
     """
     Escapes markdown-sensitive characters within other markdown
     constructs.
@@ -190,7 +198,7 @@
     return config.RE_MD_CHARS_MATCHER.sub(r"\\\1", text)
 
 
-def escape_md_section(text, snob=False):
+def escape_md_section(text: str, snob: bool = False) -> str:
     """
     Escapes markdown-sensitive characters across whole document sections.
     """
@@ -206,7 +214,7 @@
     return text
 
 
-def reformat_table(lines, right_margin):
+def reformat_table(lines: List[str], right_margin: int) -> List[str]:
     """
     Given the lines of a table
     padds the cells and returns the new lines
@@ -249,12 +257,13 @@
     return new_lines
 
 
-def pad_tables_in_text(text, right_margin=1):
+def pad_tables_in_text(text: str, right_margin: int = 1) -> str:
     """
     Provide padding for tables in the text
     """
     lines = text.split("\n")
-    table_buffer, table_started = [], False
+    table_buffer = []  # type: List[str]
+    table_started = False
     new_lines = []
     for line in lines:
         # Toggle table started
diff --git a/requirements-dev.txt b/requirements-dev.txt
deleted file mode 100644
index 488eb7d..0000000
--- a/requirements-dev.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-coverage==4.4.2
-pypandoc==1.4
-wheel==0.30.0
-flake8==3.5.0
diff --git a/setup.cfg b/setup.cfg
index eea7375..3efd047 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,3 +1,43 @@
+[metadata]
+name = html2text
+version = attr: html2text.__version__
+description = Turn HTML into equivalent Markdown-structured text.
+long_description = file: README.md
+long_description_content_type = text/markdown
+url = https://github.com/Alir3z4/html2text/
+author = Aaron Swartz
+author_email = me@aaronsw.com
+maintainer = Alireza Savand
+maintainer_email = alireza.savand@gmail.com
+license = GNU GPL 3
+classifiers =
+    Development Status :: 5 - Production/Stable
+    Intended Audience :: Developers
+    License :: OSI Approved :: GNU General Public License (GPL)
+    Operating System :: OS Independent
+    Programming Language :: Python
+    Programming Language :: Python :: 3
+    Programming Language :: Python :: 3.5
+    Programming Language :: Python :: 3.6
+    Programming Language :: Python :: 3.7
+    Programming Language :: Python :: 3.8
+    Programming Language :: Python :: 3 :: Only
+    Programming Language :: Python :: Implementation :: CPython
+    Programming Language :: Python :: Implementation :: PyPy
+platform = OS Independent
+
+[options]
+zip_safe = False
+packages = html2text
+python_requires = >=3.5
+
+[options.entry_points]
+console_scripts =
+    html2text = html2text.cli:main
+
+[options.package_data]
+html2text = py.typed
+
 [flake8]
 max_line_length = 88
 ignore =
@@ -9,3 +49,6 @@
 include_trailing_comma = True
 line_length = 88
 multi_line_output = 3
+
+[mypy]
+python_version = 3.5
diff --git a/setup.py b/setup.py
index 6c934ca..6068493 100644
--- a/setup.py
+++ b/setup.py
@@ -1,39 +1,3 @@
 from setuptools import setup
 
-
-def readall(f):
-    with open(f) as fp:
-        return fp.read()
-
-
-setup(
-    name="html2text",
-    version=".".join(map(str, __import__("html2text").__version__)),
-    description="Turn HTML into equivalent Markdown-structured text.",
-    long_description=readall("README.md"),
-    long_description_content_type="text/markdown",
-    author="Aaron Swartz",
-    author_email="me@aaronsw.com",
-    maintainer="Alireza Savand",
-    maintainer_email="alireza.savand@gmail.com",
-    url="https://github.com/Alir3z4/html2text/",
-    platforms="OS Independent",
-    classifiers=[
-        "Development Status :: 5 - Production/Stable",
-        "Intended Audience :: Developers",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 3",
-        "Programming Language :: Python :: 3.5",
-        "Programming Language :: Python :: 3.6",
-        "Programming Language :: Python :: 3.7",
-        "Programming Language :: Python :: 3 :: Only",
-        "Programming Language :: Python :: Implementation :: CPython",
-        "Programming Language :: Python :: Implementation :: PyPy",
-    ],
-    python_requires=">=3.5",
-    entry_points={"console_scripts": ["html2text = html2text.cli:main"]},
-    license="GNU GPL 3",
-    packages=["html2text"],
-)
+setup()
diff --git a/tox.ini b/tox.ini
index e4711da..fb4403c 100644
--- a/tox.ini
+++ b/tox.ini
@@ -3,7 +3,8 @@
     black
     flake8
     isort
-    py{35,36,37,py3}
+    mypy
+    py{35,36,37,38,py3}
 minversion = 1.9
 
 [testenv]
@@ -36,3 +37,8 @@
 deps =
     isort
 skip_install = true
+
+[testenv:mypy]
+commands = mypy --strict html2text
+deps = mypy
+skip_install = true

=====================================================================
start time: Sun Aug 11 00:00:00 CST 2019
end time: Thu Sep 26 00:00:00 CST 2019
description: 
=========
----
* Fix long blockquotes wrapping.
* Remove the trailing whitespaces that were added after wrapping list items & blockquotes.
* Remove support for Python ≤ 3.4. Now requires Python 3.5+.
* Fix memory leak when processing a document containing a ``<abbr>`` tag.
* Fix ``AttributeError`` when reading text from stdin.
* Fix ``UnicodeEncodeError`` when writing output to stdout.

commit message: 
commit 01f8db6bb53f782db7f49302d8b1b04a3961d735 1565456551 -----sp :: Use bool in HTML2Text.o() rather than int 0/1
commit 41d4de84f3a270fe4468033d14785cfa365c099e 1565457165 -----sp :: Simplify the return of boolean expressions
commit 34e34acb5257bb2fe9addcdefd8fcb0e09341541 1565457314 -----sp :: Remove unused temporary variables that are immediately returned
commit f43c6725f5747b2ef012a888e70cb3a441c3630e 1565457445 -----sp :: Simplify hn() function
commit c4bc42f27551ac910014b663fac1894e4bb56bdd 1565457480 -----sp :: Remove unnecessary duplicate call to name2cp()
commit 1d21d5f5ed2b4ee8c3ddff2cb14aef09fb37d102 1565552278 -----sp :: Update version to 2019.8.11
commit 5f895e90b51deae15b901a3950548dcb8cdfd7ec 1565552507 -----sp :: Leave blank place for new changelog
+commit da9e86ffd41ddfb0a2084823f084c49b2db62ca0 1565552572 -----sp :: Fix long blockquotes wrapping (#272)
commit e9c2615a0c4886c153793bc69ae7e9a1d4690c23 1565552630 -----sp :: Update changelog for #272
+commit b361467894fb277563b4547ec9d4df49f5e0c6e3 1565554445 -----sp :: Remove support for Python ≤ 3.4
commit 23429aee1ba3d6a463a4db1f1664877186e43f59 1565559240 -----sp :: Simplify pareviousIndex by using enumerate()
commit f7c0dcc02e603cab9fab9b6b9222e38192be233b 1565655081 -----sp :: Simplify entityref()
commit 30cf8823dbad7c45161861b70c0155f4427158c8 1565655475 -----sp :: Use bool for handle_tag() start argument
commit a2dbf25f78087900b955cdc7f8c7c98b40a0041a 1565741690 -----sp :: Remove unnecessary parenthesis
commit 0a2b456f1c383adb93c7a2e42b1bdbe0c7424f89 1565741899 -----sp :: Specify a target version for black in tox.ini
+commit 7e31444392d1e1ed790ba0e8afecf3a8074d1190 1565742120 -----sp :: Fix memory link when processing an abbr tag
commit 4377506e792ff81dce5e3eb758f56086b1c0c45a 1569397696 -----sp :: Correct nested list syntax in changelog
+commit 30402ae4a0c305c713613751765d76e1186da327 1569399221 -----sp :: Correct typo in changelog: "memory link" → "memory leak"
commit b8576ea2972a6b7b17c9d63b8215ccb072afb286 1569416643 -----sp :: Merge pull request #281 from jdufresne/enum

hunks: 
diff --git a/.travis.yml b/.travis.yml
index 14b9f19..8e1904e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,18 +10,12 @@
       env: TOXENV=flake8
     - python: "3.7"
       env: TOXENV=isort
-    - python: "2.7"
-      env: TOXENV=py27
-    - python: "3.4"
-      env: TOXENV=py34
     - python: "3.5"
       env: TOXENV=py35
     - python: "3.6"
       env: TOXENV=py36
     - python: "3.7"
       env: TOXENV=py37
-    - python: "pypy2.7-6.0"
-      env: TOXENV=pypy
     - python: "pypy3.5-6.0"
       env: TOXENV=pypy3
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 08907de..8bc9254 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,5 +1,15 @@
-0000.0.0
-========
+0000.0.00
+=========
+----
+
+* Fix long blockquotes wrapping.
+* Remove the trailing whitespaces that were added after wrapping list items & blockquotes.
+* Remove support for Python ≤ 3.4. Now requires Python 3.5+.
+* Fix memory leak when processing a document containing a ``<abbr>`` tag.
+
+
+2019.8.11
+=========
 ----
 
 * Add support for wrapping list items.
@@ -10,13 +20,16 @@
 * Add ``__main__.py`` module to allow running the CLI using ``python -m html2text ...``.
 * Fix #238: correct spacing when a HTML entity follows a non-stressed tags which follow a stressed tag.
 * Remove unused or deprecated:
+
   * ``html2text.compat.escape()``
   * ``html2text.config.RE_UNESCAPE``
   * ``html2text.HTML2Text.replaceEntities()``
   * ``html2text.HTML2Text.unescape()``
   * ``html2text.unescape()``
+
 * Fix #208: handle LEFT-TO-RIGHT MARK after a stressed tag.
 
+
 2018.1.9
 ========
 ----
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index eed042b..3602610 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -65,8 +65,6 @@
     - google_fixed_width_font   :check for fixed width font
     - list_numbering_start      :extract numbering from list elem attrs
     - skipwrap                  :skip wrap for give para or not?
-    - wrapwrite                 :write to buffer
-    - wrap_read                 :read from buffer
     - escape_md                 :escape md sensitive within other md
     - escape_md_section         :escape md sensitive across whole doc
 
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 021b7bc..bf3ce0f 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -1,13 +1,12 @@
-# coding: utf-8
 """html2text: Turn HTML into equivalent Markdown-structured text."""
-from __future__ import division, unicode_literals
 
+import html.entities
+import html.parser
 import re
-import sys
+import urllib.parse as urlparse
 from textwrap import wrap
 
 from html2text import config
-from html2text.compat import HTMLParser, urlparse
 from html2text.utils import (
     dumb_css_parser,
     element_style,
@@ -19,27 +18,19 @@
     google_text_emphasis,
     hn,
     list_numbering_start,
-    name2cp,
     pad_tables_in_text,
     skipwrap,
     unifiable_n,
 )
 
-try:
-    chr = unichr
-    nochr = unicode("")
-except NameError:
-    # python3 uses chr
-    nochr = str("")
-
-__version__ = (2018, 1, 9)
+__version__ = (2019, 8, 11)
 
 
 # TODO:
 # Support decoded entities with UNIFIABLE.
 
 
-class HTML2Text(HTMLParser.HTMLParser):
+class HTML2Text(html.parser.HTMLParser):
     def __init__(self, out=None, baseurl="", bodywidth=config.BODY_WIDTH):
         """
         Input parameters:
@@ -47,10 +38,7 @@
                  appends lines of text).
             baseurl: base URL of the document we process
         """
-        kwargs = {}
-        if sys.version_info >= (3, 4):
-            kwargs["convert_charrefs"] = False
-        HTMLParser.HTMLParser.__init__(self, **kwargs)
+        super().__init__(convert_charrefs=False)
 
         # Config options
         self.split_next_td = False
@@ -135,7 +123,7 @@
 
     def feed(self, data):
         data = data.replace("</' + 'script>", "</ignore>")
-        HTMLParser.HTMLParser.feed(self, data)
+        super().feed(data)
 
     def handle(self, data):
         self.feed(data)
@@ -152,17 +140,17 @@
             self.lastWasNL = s[-1] == "\n"
 
     def close(self):
-        HTMLParser.HTMLParser.close(self)
+        super().close()
 
         self.pbr()
         self.o("", force="end")
 
-        outtext = nochr.join(self.outtextlist)
+        outtext = "".join(self.outtextlist)
 
         if self.unicode_snob:
-            nbsp = chr(name2cp("nbsp"))
+            nbsp = html.entities.html5["nbsp;"]
         else:
-            nbsp = chr(32)
+            nbsp = " "
         outtext = outtext.replace("&nbsp_place_holder;", nbsp)
 
         # Clear self.outtextlist to avoid memory leak of its content to
@@ -187,10 +175,10 @@
             self.handle_data(ref, True)
 
     def handle_starttag(self, tag, attrs):
-        self.handle_tag(tag, attrs, 1)
+        self.handle_tag(tag, attrs, start=True)
 
     def handle_endtag(self, tag):
-        self.handle_tag(tag, None, 0)
+        self.handle_tag(tag, None, start=False)
 
     def previousIndex(self, attrs):
         """
@@ -202,11 +190,9 @@
         """
         if "href" not in attrs:
             return None
-        i = -1
-        for a in self.a:
-            i += 1
-            match = False
 
+        match = False
+        for i, a in enumerate(self.a):
             if "href" in a and a["href"] == attrs["href"]:
                 if "title" in a or "title" in attrs:
                     if (
@@ -220,6 +206,7 @@
 
             if match:
                 return i
+        return None
 
     def handle_emphasis(self, start, tag_style, parent_style):
         """
@@ -442,7 +429,7 @@
                 if self.abbr_title is not None:
                     self.abbr_list[self.abbr_data] = self.abbr_title
                     self.abbr_title = None
-                self.abbr_data = ""
+                self.abbr_data = None
 
         if tag == "q":
             if not self.quote:
@@ -569,7 +556,7 @@
 
         if tag in ["ol", "ul"]:
             # Google Docs create sub lists as top level lists
-            if (not self.list) and (not self.lastWasList):
+            if not self.list and not self.lastWasList:
                 self.p()
             if start:
                 if self.google_doc:
@@ -581,7 +568,7 @@
             else:
                 if self.list:
                     self.list.pop()
-                    if (not self.google_doc) and (not self.list):
+                    if not self.google_doc and not self.list:
                         self.o("\n")
             self.lastWasList = True
         else:
@@ -856,16 +843,11 @@
     def entityref(self, c):
         if not self.unicode_snob and c in config.UNIFIABLE:
             return config.UNIFIABLE[c]
-        else:
-            try:
-                name2cp(c)
-            except KeyError:
-                return "&" + c + ";"
-            else:
-                if c == "nbsp":
-                    return config.UNIFIABLE[c]
-                else:
-                    return chr(name2cp(c))
+        try:
+            ch = html.entities.html5[c + ";"]
+        except KeyError:
+            return "&" + c + ";"
+        return config.UNIFIABLE[c] if c == "nbsp" else ch
 
     def google_nest_count(self, style):
         """
@@ -904,7 +886,13 @@
                 if not skipwrap(para, self.wrap_links, self.wrap_list_items):
                     indent = ""
                     if para.startswith("  " + self.ul_item_mark):
-                        indent = "    "  # For list items.
+                        # list item continuation: add a double indent to the
+                        # new lines
+                        indent = "    "
+                    elif para.startswith("> "):
+                        # blockquote continuation: add the greater than symbol
+                        # to the new lines
+                        indent = "> "
                     wrapped = wrap(
                         para,
                         self.body_width,
@@ -912,9 +900,12 @@
                         subsequent_indent=indent,
                     )
                     result += "\n".join(wrapped)
-                    if indent or para.endswith("  "):
+                    if para.endswith("  "):
                         result += "  \n"
                         newlines = 1
+                    elif indent:
+                        result += "\n"
+                        newlines = 1
                     else:
                         result += "\n\n"
                         newlines = 2
diff --git a/html2text/cli.py b/html2text/cli.py
index 2088ef0..15a91f6 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -1,7 +1,7 @@
 import argparse
+import sys
 
 from html2text import HTML2Text, __version__, config
-from html2text.utils import wrap_read, wrapwrite
 
 
 def main():
@@ -256,7 +256,7 @@
         with open(args.filename, "rb") as fp:
             data = fp.read()
     else:
-        data = wrap_read()
+        data = sys.stdin.buffer.read()
 
     try:
         data = data.decode(args.encoding, args.decode_errors)
@@ -303,4 +303,4 @@
     h.open_quote = args.open_quote
     h.close_quote = args.close_quote
 
-    wrapwrite(h.handle(data))
+    sys.stdout.write(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
deleted file mode 100644
index a3226d5..0000000
--- a/html2text/compat.py
+++ /dev/null
@@ -1,12 +0,0 @@
-import sys
-
-if sys.version_info[0] == 2:
-    import htmlentitydefs
-    import urlparse
-    import HTMLParser
-else:
-    import urllib.parse as urlparse
-    import html.entities as htmlentitydefs
-    import html.parser as HTMLParser
-
-__all__ = ["HTMLParser", "htmlentitydefs", "urlparse"]
diff --git a/html2text/config.py b/html2text/config.py
index ff96f71..2bb38b6 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -1,5 +1,3 @@
-from __future__ import unicode_literals
-
 import re
 
 # Use Unicode characters instead of their ascii pseudo-replacements
diff --git a/html2text/utils.py b/html2text/utils.py
index 829c4dd..f982321 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -1,40 +1,31 @@
-import sys
+import html.entities
 
 from html2text import config
-from html2text.compat import htmlentitydefs
 
-
-def name2cp(k):
-    """Return sname to codepoint"""
-    if k == "apos":
-        return ord("'")
-    return htmlentitydefs.name2codepoint[k]
-
-
-unifiable_n = {name2cp(k): v for k, v in config.UNIFIABLE.items() if k != "nbsp"}
+unifiable_n = {
+    html.entities.name2codepoint[k]: v
+    for k, v in config.UNIFIABLE.items()
+    if k != "nbsp"
+}
 
 
 def hn(tag):
     if tag[0] == "h" and len(tag) == 2:
-        try:
-            n = int(tag[1])
-            if n in range(1, 10):
-                return n
-        except ValueError:
-            return 0
+        n = tag[1]
+        if "0" < n <= "9":
+            return int(n)
+    return 0
 
 
 def dumb_property_dict(style):
     """
     :returns: A hash of css attributes
     """
-    out = {
+    return {
         x.strip().lower(): y.strip().lower()
         for x, y in [z.split(":", 1) for z in style.split(";") if ":" in z]
     }
 
-    return out
-
 
 def dumb_css_parser(data):
     """
@@ -108,10 +99,7 @@
 
     :rtype: bool
     """
-    if "height" in style:
-        return True
-
-    return False
+    return "height" in style
 
 
 def google_text_emphasis(style):
@@ -143,10 +131,7 @@
     font_family = ""
     if "font-family" in style:
         font_family = style["font-family"]
-    if "courier new" == font_family or "consolas" == font_family:
-        return True
-
-    return False
+    return "courier new" == font_family or "consolas" == font_family
 
 
 def list_numbering_start(attrs):
@@ -191,30 +176,10 @@
     # If the text begins with a single -, *, or +, followed by a space,
     # or an integer, followed by a ., followed by a space (in either
     # case optionally proceeded by whitespace), it's a list; don't wrap.
-    if config.RE_ORDERED_LIST_MATCHER.match(
-        stripped
-    ) or config.RE_UNORDERED_LIST_MATCHER.match(stripped):
-        return True
-
-    return False
-
-
-def wrapwrite(text):
-    text = text.encode("utf-8")
-    try:  # Python3
-        sys.stdout.buffer.write(text)
-    except AttributeError:
-        sys.stdout.write(text)
-
-
-def wrap_read():
-    """
-    :rtype: str
-    """
-    try:
-        return sys.stdin.read()
-    except AttributeError:
-        return sys.stdin.buffer.read()
+    return bool(
+        config.RE_ORDERED_LIST_MATCHER.match(stripped)
+        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)
+    )
 
 
 def escape_md(text):
@@ -306,5 +271,4 @@
             table_buffer.append(line)
         else:
             new_lines.append(line)
-    new_text = "\n".join(new_lines)
-    return new_text
+    return "\n".join(new_lines)
diff --git a/setup.cfg b/setup.cfg
index 9596a78..eea7375 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,6 +1,3 @@
-[bdist_wheel]
-universal = 1
-
 [flake8]
 max_line_length = 88
 ignore =
diff --git a/setup.py b/setup.py
index 0326ce7..6c934ca 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,3 @@
-# coding: utf-8
 from setuptools import setup
 
 
@@ -25,17 +24,15 @@
         "License :: OSI Approved :: GNU General Public License (GPL)",
         "Operating System :: OS Independent",
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2",
-        "Programming Language :: Python :: 2.7",
         "Programming Language :: Python :: 3",
-        "Programming Language :: Python :: 3.4",
         "Programming Language :: Python :: 3.5",
         "Programming Language :: Python :: 3.6",
         "Programming Language :: Python :: 3.7",
+        "Programming Language :: Python :: 3 :: Only",
         "Programming Language :: Python :: Implementation :: CPython",
         "Programming Language :: Python :: Implementation :: PyPy",
     ],
-    python_requires=">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
+    python_requires=">=3.5",
     entry_points={"console_scripts": ["html2text = html2text.cli:main"]},
     license="GNU GPL 3",
     packages=["html2text"],
diff --git a/test/blockquote_example.html b/test/blockquote_example.html
index 1749fb0..ccb3e44 100644
--- a/test/blockquote_example.html
+++ b/test/blockquote_example.html
@@ -1,3 +1,3 @@
 <blockquote>
-The time has come, the Walrus said, to speak of many things.
+"The time has come", the Walrus said, "To talk of many things: Of shoes - and ships - and sealing wax - Of cabbages - and kings- And why the sea is boiling hot - And whether pigs have wings."
 </blockquote>
diff --git a/test/blockquote_example.md b/test/blockquote_example.md
index 6985965..ae26479 100644
--- a/test/blockquote_example.md
+++ b/test/blockquote_example.md
@@ -1,2 +1,4 @@
-> The time has come, the Walrus said, to speak of many things.
+> "The time has come", the Walrus said, "To talk of many things: Of shoes -
+> and ships - and sealing wax - Of cabbages - and kings- And why the sea is
+> boiling hot - And whether pigs have wings."
 
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 1b41c2a..7bdd679 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -1,4 +1,3 @@
-import codecs
 import glob
 import os
 import re
@@ -189,7 +188,7 @@
     result = get_baseline(fn)
     out = subprocess.check_output(cmd)
 
-    actual = out.decode("utf8")
+    actual = out.decode()
 
     actual = cleanup_eol(actual)
 
@@ -210,10 +209,9 @@
 
 def get_baseline(fn):
     name = get_baseline_name(fn)
-    with codecs.open(name, mode="r", encoding="utf8") as f:
+    with open(name, encoding="utf-8") as f:
         out = f.read()
-    out = cleanup_eol(out)
-    return out
+    return cleanup_eol(out)
 
 
 def test_tag_callback():
diff --git a/test/test_memleak.py b/test/test_memleak.py
index caf0520..45a3ff6 100644
--- a/test/test_memleak.py
+++ b/test/test_memleak.py
@@ -17,3 +17,10 @@
     h2t.handle(INSTR)
     # And even less when the input is empty.
     assert h2t.handle("") == "\n\n"
+
+
+def test_abbr_data():
+    h2t = html2text.HTML2Text()
+    result = h2t.handle('<p>foo <abbr title="Three Letter Acronym">TLA</abbr> bar</p>')
+    assert result == "foo TLA bar\n\n  *[TLA]: Three Letter Acronym\n\n"
+    assert h2t.abbr_data is None
diff --git a/test/wrap_list_items_example.md b/test/wrap_list_items_example.md
index 0708078..cf80e16 100644
--- a/test/wrap_list_items_example.md
+++ b/test/wrap_list_items_example.md
@@ -1,14 +1,14 @@
   * One two three four five six seven eight nine ten eleven twelve thirteen
-    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.
   * One two three four five six seven eight nine ten eleven twelve thirteen
-    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.
 
 Text between lists.
 
   * One two three four five six seven eight nine ten eleven twelve thirteen
-    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.
   * One two three four five six seven eight nine ten eleven twelve thirteen
-    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.
 
 Text after list.
 
diff --git a/tox.ini b/tox.ini
index b8de567..e4711da 100644
--- a/tox.ini
+++ b/tox.ini
@@ -3,7 +3,7 @@
     black
     flake8
     isort
-    py{27,34,35,36,37,py,py3}
+    py{35,36,37,py3}
 minversion = 1.9
 
 [testenv]
@@ -16,7 +16,7 @@
 [testenv:black]
 basepython = python3
 commands =
-    black --check --diff .
+    black --target-version py35 --check --diff .
 deps =
     black
 skip_install = true

=====================================================================
start time: Tue Jan 09 00:00:00 CST 2018
end time: Sun Aug 11 00:00:00 CST 2019
description: 
=========
----
* Add support for wrapping list items.
* Fix #201: handle &lrm;/&rlm; marks mid-text within stressed tags or right after stressed tags.
* Feature #213: ``images_as_html`` config option to always generate an ``img`` html tag. preserves "height", "width" and "alt" if possible.
* Remove support for end-of-life Pythons. Now requires Python 2.7 or 3.4+.
* Remove support for retrieving HTML over the network.
* Add ``__main__.py`` module to allow running the CLI using ``python -m html2text ...``.
* Fix #238: correct spacing when a HTML entity follows a non-stressed tags which follow a stressed tag.
* Remove unused or deprecated:
  * ``html2text.compat.escape()``
  * ``html2text.config.RE_UNESCAPE``
  * ``html2text.HTML2Text.replaceEntities()``
  * ``html2text.HTML2Text.unescape()``
  * ``html2text.unescape()``
* Fix #208: handle LEFT-TO-RIGHT MARK after a stressed tag.

commit message: 
commit 82544d4f7b4b584addcb1e44962a9749ccd245f4 1515470224 -----sp :: Document the new options related to the <q> tag
commit 28118498810240bddc92db89ba1d6c167f74b2af 1515471787 -----sp :: Merge pull request #193 from kurtmckee/support-the-q-tag
commit eb9a3482198b16ae7c649dc0853daf4c03ebf3bc 1515472124 -----sp :: Update ChangeLog.rst
commit d903cf6e5653f68e449f0aa1edfc2e0cab704a55 1515473293 -----sp :: Update versions to latest
commit bef7ec082173c52fa8ea89c17ee67398e96ed74b 1515564199 -----sp :: update version to the correct one
commit be182cb4337ed69f0103a3c4b1b194a515d02591 1530242184 -----sp :: Add usage documentation for emphasis_mark and strong_mark
commit c32dffab3ee918cf802973c7c7ec166b37fe7b73 1530970451 -----sp :: Merge pull request #203 from elebow/add-usage-docs-em-strong-marks
commit 40a9c616ee28befb678f6338130d3beda07a9931+ 1533200859 -----sp :: Fix handling &lrm; and &rlm; marks
commit f62100c32451803d559d79c7bbd3000a30429878 1533201220 -----sp :: Update AUTHORS
commit f8fda1de84014e776ac4f5391c10f5fefc03fd83+ 1540075400 -----sp :: Add support for wrapping list items
commit 4a73e6472faba50d5a95fa3b4736bb180ab07a9a 1540239391 -----sp :: `images_as_html` control
commit 5a64a5d0de3e3b2b4f6a152f833831fdae8e3b3c 1543825905 -----sp :: Add missing space in decoding error message
commit 45a71e0a2b23eb1ad9b13e5af032f90ab7d98740 1543827071 -----sp :: Simplify decoding
commit ced1b06eb75f09342f75f23152298a87d9d5e64d 1546864824 -----sp :: Travis CI: Add Python 3.7 to testing
commit b7495c9aef98b086c5cb4b29284094bc20c90ea7 1546865655 -----sp :: Drop Python 3.2 support to satisfy Cython
commit cf2c47f256350b7d124142b8dd622d8cb1acb246 1546889723 -----sp :: Merge pull request #221 from cclauss/patch-1
commit d595ac239e2b5d2571f5c8573fb20f0b19ef174b 1546889821 -----sp :: Merge pull request #219 from jwilk-forks/decode
commit 2e8dba3228e3e50876ec8cdd14c903f0835b1f6c 1546889853 -----sp :: Merge pull request #218 from jwilk-forks/spelling
commit 13cdc9b2d874193f205e5883548ca8f76b8ec24d+ 1546890013 -----sp :: Merge pull request #215 from jvanasco/feature-images_as_html
commit 1a3eea49d468b5084ae8a3543f4c56f4962b1693 1546890096 -----sp :: Merge branch 'master' into lrm
commit 724be22c2697b4349d087dc20cd563b8f1e87afd 1546890128 -----sp :: Merge pull request #206 from Unit03/lrm
commit 2880e95bafec1ab2ef66639cf4634a4934b6ec08 1546890605 -----sp :: Merge branch 'master' into master
commit a9a613311bc3576cf5b3e5fdd0ed379865c42a95 1546890640 -----sp :: Merge pull request #214 from GermainZ/master
commit bf9360f987c3013e1b4294d340fc6097925712a6 1550829935 -----sp :: Fix change log version name
commit 53497e7279c6008b083392476e2d5aff0b5af3c4 1550887540 -----sp :: Use HTTPS in docs and comments where available
commit 224fcb66133388fcc3cd46cf707b76913c99d450 1550889215 -----sp :: Mark wheel as universal
commit d955dd65d14989c1ae5ac168fddc7c18edd08fa1 1550889722 -----sp :: Correct capitalization of PyPI as spelled on https://pypi.org/
commit 2973cd71497eef9d433b90252e182abcf09f6327 1550890198 -----sp :: Update all pypi.python.org URLs to pypi.org
commit 680b2c9bb6e8be013087e8a300f79bd195d1d4c6 1550941800 -----sp :: Fix flake8 warnings to get Travis to be green
commit 9e8f74482d7f7406bd905dccb4f0396d30bbe09b 1550944806 -----sp :: Drop support for EOL Pythons
commit c7c2ef5229251af2c88610cb8a886f1a3ce6ec22 1550945242 -----sp :: Remove unused py from requirements-dev.txt
commit a28342fc11bb1848d16df473a6899f26c0a86e70 1551119915 -----sp :: Merge pull request #224 from jdufresne/eol
commit 03145451af214bbffacfa9b022e542ef85799d26 1551119954 -----sp :: Merge pull request #223 from marksweb/fix/196
commit bacce9c8297e9af986f402b46aa6543ce0c948b2 1551119980 -----sp :: Merge pull request #225 from jdufresne/https
commit a80ef0c48496a1d3860188f9ecae3477d94dbc06 1551120016 -----sp :: Merge pull request #226 from jdufresne/universal
commit 5c6a37238b1a641222dc195c1663d242197fa8db 1551120034 -----sp :: Merge pull request #227 from jdufresne/pypi
commit aaef1f4c04bda7b991f507a3016ebe96cc4c9ca8 1551120090 -----sp :: Merge branch 'master' into new-pypi
commit 5a97a2a89bd73a8c42b6746e352ee1dbf1f3199d 1551120098 -----sp :: Merge pull request #228 from jdufresne/new-pypi
commit 287da08a0247dff5d6a8ef77833fb996a1f6fbd6 1551120281 -----sp :: Merge branch 'master' into py
commit 77d99cce73ab8fcb589252c2c551cb31cc1b0d0d 1551120286 -----sp :: Merge pull request #234 from jdufresne/py
commit de2020633cd4b163cd7266e5f54aeca0872f124c 1551124633 -----sp :: Fix flake8 warning by using a short link
commit 1435436f7bc18d99f5b36f44d345496c282eddba 1551130036 -----sp :: Remove unused and unnecessary logging from tests
commit 22b2a43ad6118f041b40ef79fabf83d98a665acf 1551143708 -----sp :: Remove unnecessary `description-file = README.md` from setup.cfg
commit b6965a73874107640260019cfeb7256eed5cbc15+ 1551150331 -----sp :: Remove long deprecated support for retrieving HTML over the network
commit 5877371302cd604767052e4fc77db837e6a8076f+ 1551155418 -----sp :: Add a __main__.py file to the package
commit 69136508fa33e91cf773929022838c5131a9ca13 1551155859 -----sp :: Remove unused options from setup.py
commit 17b4f29b8a89a21d9cee74c4fb1896bec6909df9 1551156213 -----sp :: Remove unused get_dump_name()
commit 61d668fe50daaa3c16912f6a11947830f26e568e 1551192864 -----sp :: Enable pip cache in Travis CI
commit 2d3ef004c473475275fb5a4c7ec5db2b40841120 1551193709 -----sp :: Use False (not 0) in config.py
commit 46ecef3afb05d281f377de2ef07d4c17cc29ae6e 1551279918 -----sp :: Fix extra space after a stressed tag followed by an entity
commit bf87d8a2442c230c7f0559fcc08d0b79af451aa2 1551280195 -----sp :: Add tox.ini to easily test all platforms locally
commit e0c29574a8958a720c0e12550c40d39d5d41db69 1551280359 -----sp :: Add myself as a contributor
commit 685d3f3d73a71c48fce88741465d70362566c35e 1551281003 -----sp :: Merge pull request #248 from jdufresne/contrib
commit 975819b47d27dcfaf766acf4a5192878f75c5662 1551295739 -----sp :: Run all argument-less tests as a func test
commit 6de63e14b7caed03fbd9858d9e9ee49293c02bc7 1551319738 -----sp :: Correct fixed-space literal rst syntax
commit b616e5b7f372538ab3afaaaf94d6969ddd2cf93c 1551320525 -----sp :: Correct default tox matrix
commit 5443b50490cb11f3b964674b80e7f92d38be0d08+ 1551320722 -----sp :: Remove unused unescape() function and related support code
commit c8c2bccd4176088a453245af7ff09742fa8cfbb8 1551324546 -----sp :: Simplify subprocess call in tests with subprocess.check_output()
commit 0fbb8343d6988b0523fba493f7c9ba2b9d471226 1551332275 -----sp :: Remove unused method unknown_decl
commit c84c168e535b42e3434c3a6d4f23b5ba45fcb297 1551404920 -----sp :: Fix ticket number in changelog
commit 52bfc27e6a69e6f5e171b6035419c3c1457d864c 1551462863 -----sp :: Merge pull request #254 from jdufresne/unused
commit 57de7529195e0127a0cfbf1567859754f0e71620+ 1551552578 -----sp :: Handle LEFT-TO-RIGHT MARK after a `<b>` tag
commit fd669a7ea37e675f87c36d379489fb78cebd4d37 1551553185 -----sp :: Use pytest to run the test suite
commit ca32fb8ecec7f0f60fdb864e13c96a8c58f00b9f 1551554212 -----sp :: Remove 'pragma' comments for a more accurate coverage report
commit ce7fb974a7be23318ebe99af678a7b6e04d8a6bf 1551556211 -----sp :: Replace 0/1 with False/True when used as a bool
commit 74a89a909aaa0ea8ae98d30a51b5c518b178ff03 1551630274 -----sp :: Remove shebang from __init__.py
commit 26e986679b9070f7a52e7cc1446970166ae8bbf8 1551630577 -----sp :: Introduce isort for automated consistent sorting of Python imports
commit 8194cda63b77b1d4538cff0a4146d75858ac3d97 1551630863 -----sp :: Introduce black to automate Python code formatting
commit 3c7057405050a8c403e4a48dde6d7ae12cb8ebef 1551880375 -----sp :: Merge pull request #260 from jdufresne/bool
commit 41cf5689120f9228d640f2a7fc12d2663a0a1310 1551880409 -----sp :: Merge pull request #255 from jdufresne/fix-lrm
commit 352a621cf611b9c781f2a51be1964113e9ce126a 1551880451 -----sp :: Merge pull request #258 from jdufresne/pragma
commit ace000a67f7a49621454d395e9a676681150e777 1551880671 -----sp :: Merge branch 'master' into black
commit 0f5968fd6e0291c36d7568ca6d1d233fb1bc4811 1551880920 -----sp :: Fix the black formatting
commit ef80616dc4f235f51c5ac405d1a2e9584636fe30 1551881218 -----sp :: Merge pull request #259 from jdufresne/black
commit c453f221fc2ecd1cc43f25c57c022718edab77d2 1551923930 -----sp :: Remove unnecessary coerce to unicode()
commit 788c52f29ac3df3df0f710509ef3a4995228d328 1551924234 -----sp :: Use dict comprehension to build unifiable_n data structure
commit 6cbe2b6c0af6a270ad0157e0aec7c0763c30905e 1561592552 -----sp :: Fix description of --no-wrap-links in help message
commit 83e27aa5cf6bf7642fbb47b859dd0e86b30a5755 1561593099 -----sp :: Pass extra tox cli args to tox
commit 3697acd58137bec34ef7dc812f69f3b14990a9bb 1563101709 -----sp :: Merge pull request #270 from jdufresne/posargs

hunks: 
diff --git a/.coveragerc b/.coveragerc
deleted file mode 100644
index 11441c9..0000000
--- a/.coveragerc
+++ /dev/null
@@ -1,23 +0,0 @@
-[run]
-branch=True
-parallel=True
-cover_pylib=False
-source=./html2text
-
-[report]
-# Regexes for lines to exclude from consideration
-exclude_lines =
-    # Have to re-enable the standard pragma
-    pragma: no cover
-
-    # Don't complain about missing debug-only code:
-    def __repr__
-    if self\.debug
-
-    # Don't complain if tests don't hit defensive assertion code:
-    raise AssertionError
-    raise NotImplementedError
-
-    # Don't complain if non-runnable code isn't run:
-    if 0:
-    if __name__ == .__main__.:
diff --git a/.gitignore b/.gitignore
index 3881b4c..a219c12 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,5 @@
 *.py[co]
 *.bak
-test/*output.md
 build
 dist
 *.egg-info
@@ -10,3 +9,5 @@
 env/
 .c9/
 .vscode
+.tox/
+htmlcov/
diff --git a/.travis.yml b/.travis.yml
index e6ecf19..14b9f19 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,27 +1,34 @@
+dist: xenial
 language: python
-python:
-  - "2.6"
-  - "2.7"
-  - "pypy"
-  - "pypy3"
-  - "3.2"
-  - "3.3"
-  - "3.4"
-  - "3.5"
-  - "3.6"
-before_install:
-  # Python 3.2 needs setuptools < 30 - support for Py3.2 was dropped after that version
-  - if [[ $TRAVIS_PYTHON_VERSION == '3.2' || $TRAVIS_PYTHON_VERSION == 'pypy3' ]]; then pip install -U 'setuptools<30'; fi
+cache: pip
+
+matrix:
+  include:
+    - python: "3.7"
+      env: TOXENV=black
+    - python: "3.7"
+      env: TOXENV=flake8
+    - python: "3.7"
+      env: TOXENV=isort
+    - python: "2.7"
+      env: TOXENV=py27
+    - python: "3.4"
+      env: TOXENV=py34
+    - python: "3.5"
+      env: TOXENV=py35
+    - python: "3.6"
+      env: TOXENV=py36
+    - python: "3.7"
+      env: TOXENV=py37
+    - python: "pypy2.7-6.0"
+      env: TOXENV=pypy
+    - python: "pypy3.5-6.0"
+      env: TOXENV=pypy3
+
 install:
-    - pip install coveralls==0.5
-before_script:
-  - if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi
-  # flake8 doesn't support Python 2.6
-  - if [[ $TRAVIS_PYTHON_VERSION != '2.6' ]]; then pip install flake8==3.3.0;flake8 .; fi
-  - export COVERAGE_PROCESS_START=$PWD/.coveragerc
+  - pip install tox
 script:
-  - PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text --rcfile=.coveragerc setup.py test -v
-  - coverage combine
-  - coverage report
+  - tox
 after_success:
-    coveralls --rcfile=.coveragerc
+  - pip install coveralls
+  - coveralls
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 488eeec..3ec70c5 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -27,6 +27,10 @@
 * Jonathan Sundqvist <sundqvist.jonathan@gmail.com>
 * Simon Meers <gh: DrMeers>
 * Kurt McKee <contactme@kurtmckee.org>
+* Germain Z. <gh: GermainZ>
+* Jacek Kołodziej <kolodziejj@gmail.com>
+* Jonathan Vanasco <jonathan@findmeon.com>
+* Jon Dufresne <jon.dufresne@gmail.com>
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 2f362d1..08907de 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,9 +1,29 @@
-0000.00.00
-==========
+0000.0.0
+========
 ----
 
-* Add support for the <kbd> tag.
-* Add support for the <q> tag.
+* Add support for wrapping list items.
+* Fix #201: handle &lrm;/&rlm; marks mid-text within stressed tags or right after stressed tags.
+* Feature #213: ``images_as_html`` config option to always generate an ``img`` html tag. preserves "height", "width" and "alt" if possible.
+* Remove support for end-of-life Pythons. Now requires Python 2.7 or 3.4+.
+* Remove support for retrieving HTML over the network.
+* Add ``__main__.py`` module to allow running the CLI using ``python -m html2text ...``.
+* Fix #238: correct spacing when a HTML entity follows a non-stressed tags which follow a stressed tag.
+* Remove unused or deprecated:
+  * ``html2text.compat.escape()``
+  * ``html2text.config.RE_UNESCAPE``
+  * ``html2text.HTML2Text.replaceEntities()``
+  * ``html2text.HTML2Text.unescape()``
+  * ``html2text.unescape()``
+* Fix #208: handle LEFT-TO-RIGHT MARK after a stressed tag.
+
+2018.1.9
+========
+----
+
+* Fix #188: Non-ASCII in title attribute causes encode error.
+* Feature #194: Add support for the <kbd> tag.
+* Feature #193: Add support for the <q> tag.
 
 
 2017.10.4
@@ -16,7 +36,7 @@
 * Feature #164: Housekeeping: Add flake8 to the travis build, cleanup existing flake8 violations, add py3.6 and pypy3 to the travis build
 * Fix #109: Fix for unexpanded &lt; &gt; &amp;
 * Fix #143: Fix line wrapping for the lines starting with bold
-* Adds support for numeric bold text indication in `font-weight`,
+* Adds support for numeric bold text indication in ``font-weight``,
   as used by Google (and presumably others.)
 * Fix #173 and #142: Stripping whitespace in crucial markdown and adding whitespace as necessary
 * Don't drop any cell data on tables uneven row lengths (e.g. colspan in use)
@@ -67,8 +87,8 @@
 =========
 ----
 
-* Fix #38: Long links wrapping controlled by `--no-wrap-links`.
-* Note: `--no-wrap-links` implies `--reference-links`
+* Fix #38: Long links wrapping controlled by ``--no-wrap-links``.
+* Note: ``--no-wrap-links`` implies ``--reference-links``
 * Feature #83: Add callback-on-tag.
 * Fix #87: Decode errors can be handled via command line.
 * Feature #95: Docs, decode errors spelling mistake.
@@ -130,7 +150,7 @@
 =========
 ----
 
-* Fix #38: Anchor tags with empty text or with `<img>` tags inside are no longer stripped.
+* Fix #38: Anchor tags with empty text or with ``<img>`` tags inside are no longer stripped.
 
 
 2014.12.29
@@ -157,8 +177,8 @@
 =========
 ----
 
-* Feature: Update `README.md` with usage examples.
-* Fix #35: Remove `py_modules` from `setup.py`.
+* Feature: Update ``README.md`` with usage examples.
+* Fix #35: Remove ``py_modules`` from ``setup.py``.
 * Fix #36: Excludes tests from being installed as a separate module.
 * Fix #37: Don't hardcode the path to the installed binary.
 * Fix: Readme typo in running cli.
@@ -174,7 +194,7 @@
 ----
 
 * Feature #29, #27: Add simple table support with bypass option.
-* Fix #20: Replace project website with: http://alir3z4.github.io/html2text/ .
+* Fix #20: Replace project website with: https://alir3z4.github.io/html2text/ .
 
 
 2014.9.8
diff --git a/MANIFEST.in b/MANIFEST.in
index 6217360..28e2838 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -2,4 +2,5 @@
 include README.md
 include ChangeLog.rst
 include AUTHORS.rst
+include tox.ini
 recursive-include test *.html *.md *.py
diff --git a/README.md b/README.md
index 56572c4..d7d19ed 100644
--- a/README.md
+++ b/README.md
@@ -1,18 +1,18 @@
 # html2text
 
-[![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2text)
+[![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](https://travis-ci.org/Alir3z4/html2text)
 [![Coverage Status](https://coveralls.io/repos/Alir3z4/html2text/badge.png)](https://coveralls.io/r/Alir3z4/html2text)
-[![Downloads](http://badge.kloud51.com/pypi/d/html2text.png)](https://pypi.python.org/pypi/html2text/)
-[![Version](http://badge.kloud51.com/pypi/v/html2text.png)](https://pypi.python.org/pypi/html2text/)
-[![Wheel?](http://badge.kloud51.com/pypi/wheel/html2text.png)](https://pypi.python.org/pypi/html2text/)
-[![Format](http://badge.kloud51.com/pypi/format/html2text.png)](https://pypi.python.org/pypi/html2text/)
-[![License](http://badge.kloud51.com/pypi/license/html2text.png)](https://pypi.python.org/pypi/html2text/)
+[![Downloads](http://badge.kloud51.com/pypi/d/html2text.png)](https://pypi.org/project/html2text/)
+[![Version](http://badge.kloud51.com/pypi/v/html2text.png)](https://pypi.org/project/html2text/)
+[![Wheel?](http://badge.kloud51.com/pypi/wheel/html2text.png)](https://pypi.org/project/html2text/)
+[![Format](http://badge.kloud51.com/pypi/format/html2text.png)](https://pypi.org/project/html2text/)
+[![License](http://badge.kloud51.com/pypi/license/html2text.png)](https://pypi.org/project/html2text/)
 
 
 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
 
 
-Usage: `html2text [(filename|url) [encoding]]`
+Usage: `html2text [filename [encoding]]`
 
 | Option                                                 | Description
 |--------------------------------------------------------|---------------------------------------------------
@@ -44,17 +44,17 @@
 >>> h = html2text.HTML2Text()
 >>> # Ignore converting links from HTML
 >>> h.ignore_links = True
->>> print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")
+>>> print h.handle("<p>Hello, <a href='https://www.google.com/earth/'>world</a>!")
 Hello, world!
 
->>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
+>>> print(h.handle("<p>Hello, <a href='https://www.google.com/earth/'>world</a>!"))
 
 Hello, world!
 
 >>> # Don't Ignore links anymore, I like links
 >>> h.ignore_links = False
->>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
-Hello, [world](http://earth.google.com/)!
+>>> print(h.handle("<p>Hello, <a href='https://www.google.com/earth/'>world</a>!"))
+Hello, [world](https://www.google.com/earth/)!
 
 ```
 
@@ -64,7 +64,7 @@
 ## How to install
 
 `html2text` is available on pypi
-https://pypi.python.org/pypi/html2text
+https://pypi.org/project/html2text/
 
 ```
 $ pip install html2text
@@ -73,11 +73,10 @@
 
 ## How to run unit tests
 
-    PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
+    tox
 
 To see the coverage results:
-    
-    coverage combine
+
     coverage html
 
 then open the `./htmlcov/index.html` file in your browser.
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index 1b52af3..eed042b 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -26,6 +26,7 @@
     - GOOGLE_LIST_INDENT no of pixels to indent nested lists
     - IGNORE_ANCHORS
     - IGNORE_IMAGES
+    - IMAGES_AS_HTML always generate HTML tags for images; preserves `height`, `width`, `alt` if possible.
     - IMAGES_TO_ALT
     - IMAGES_WITH_SIZE
     - IGNORE_EMPHASIS
@@ -35,7 +36,6 @@
     - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
     - RE_SPACE for finding space-only lines
-    - RE_UNESCAPE for finding html entities like &nbsp;
     - RE_ORDERED_LIST_MATCHER for matching ordered lists in MD
     - RE_UNORDERED_LIST_MATCHER for matching unordered list matcher in MD
     - RE_MD_CHARS_MATCHER for matching Md \,[,],( and )
@@ -86,6 +86,7 @@
 |`--ignore-images`                                       | Do not include any formatting for images
 |`--images-to-alt`                                       | Discard image data, only keep alt text
 |`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
+|`--images-as-html`                                      | Always write image tags as raw html; preserves "height", "width" and "alt" if possible.
 |`-g`, `--google-doc`                                    | Convert an html-exported Google Document
 |`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
 |`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
@@ -128,11 +129,8 @@
     - soft_br
     - o
     - handle_data
-    - unknown_decl
     - charref
     - entityref
-    - replaceEntities
-    - unescape
     - google_nest_count
     - optwrap
 
diff --git a/docs/index.md b/docs/index.md
index 9852923..5e299d8 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -3,7 +3,7 @@
 
 1. [About](about.md)
 2. [Authors](../AUTHORS.rst)
-3. [What is markdown](http://daringfireball.net/projects/markdown/)
+3. [What is markdown](https://daringfireball.net/projects/markdown/)
 4. [How it works](how_it_works.md)
 5. [Usage](usage.md)
 6. [Contributing](contributing.md)
diff --git a/docs/test.md b/docs/test.md
index 1ff19d9..22c6411 100644
--- a/docs/test.md
+++ b/docs/test.md
@@ -6,12 +6,10 @@
 Run the tests
 -------------
 
-`PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v`
+`tox`
 
 Coverage results can be seen with
 
-`coverage combine`
-
 `coverage html`
 
 and then opening the `./htmlcov/index.html` file with your browser.
diff --git a/docs/usage.md b/docs/usage.md
index cc80f1c..a1758d3 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -72,6 +72,7 @@
     - GOOGLE_LIST_INDENT no of pixels to indent nested lists
     - IGNORE_ANCHORS
     - IGNORE_IMAGES
+    - IMAGES_AS_HTML always generate HTML tags for images; preserves `height`, `width`, `alt` if possible.
     - IMAGES_TO_ALT
     - IMAGES_WITH_SIZE
     - IGNORE_EMPHASIS
@@ -81,7 +82,6 @@
     - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
     - RE_SPACE for finding space-only lines
-    - RE_UNESCAPE for finding html entities like &nbsp;
     - RE_ORDERED_LIST_MATCHER for matching ordered lists in MD
     - RE_UNORDERED_LIST_MATCHER for matching unordered list matcher in MD
     - RE_MD_CHARS_MATCHER for matching Md \,[,],( and )
@@ -94,11 +94,17 @@
     - USE_AUTOMATIC_LINKS to convert <a href='http://xyz'>http://xyz</a> to <http://xyz>
     - MARK_CODE to wrap 'pre' blocks with [code]...[/code] tags
     - WRAP_LINKS to decide if links have to be wrapped during text wrapping (implies INLINE_LINKS = False)
+    - WRAP_LIST_ITEMS to decide if list items have to be wrapped during text wrapping
     - DECODE_ERRORS to handle decoding errors. 'strict', 'ignore', 'replace' are the acceptable values.
     - DEFAULT_IMAGE_ALT takes a string as value and is used whenever an image tag is missing an `alt` value. The default for this is an empty string '' to avoid backward breakage
     - OPEN_QUOTE is the character used to open a quote when replacing the `<q>` tag. It defaults to `"`.
     - CLOSE_QUOTE is the character used to close a quote when replacing the `<q>` tag. It defaults to `"`.
 
+Options that are not in the config.py file:
+
+    - emphasis_mark is the character used when replacing the `<em>` tag. It defaults to `_`.
+    - strong_mark is the characer used when replacing the `<strong>` tag. It defaults to `**`.
+
 To alter any option the procedure is to create a parser with
 `parser = html2text.HTML2Text()` and to set the option on the parser.
 example: `parser.unicode_snob = True` to set the UNICODE_SNOB option.
@@ -115,6 +121,7 @@
 | `--ignore-links`                                       | Do not include any formatting for links
 |`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
 |`--ignore-images`                                       | Do not include any formatting for images
+|`--images-as-html`                                      | Always write image tags as raw html; preserves "height", "width" and "alt" if possible.
 |`--images-to-alt`                                       | Discard image data, only keep alt text
 |`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
 |`-g`, `--google-doc`                                    | Convert an html-exported Google Document
@@ -130,11 +137,12 @@
 | `--ignore-emphasis`                                    | Ignore all emphasis formatting in the html.
 | `-e`, `--asterisk-emphasis`                            | Use asterisk rather than underscore to emphasize text
 | `--unicode-snob`                                       | Use unicode throughout instead of ASCII
-| `--no-automatic-links`                                 | Do not use automatic links like <http://google.com>
+| `--no-automatic-links`                                 | Do not use automatic links like <https://www.google.com/>
 | `--no-skip-internal-links`                             | Turn off skipping of internal links
 | `--links-after-para`                                   | Put the links after the paragraph and not at end of document
 | `--mark-code`                                          | Mark code with [code]...[/code] blocks
 | `--no-wrap-links`                                      | Do not wrap links during text wrapping. Implies `--reference-links`
+| `--wrap-list-items`                                    | Wrap list items during text wrapping.
 | `--decode-errors`=`HANDLER`                            | What to do in case an error is encountered. `ignore`, `strict`, `replace` etc.
 | `--pad-tables`                                         | Use padding to make tables look good.
 | `--default-image-alt`=`Image_Here`                     | Inserts the given `alt` text whenever images are missing `alt` values.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 46ae36f..42d68b1 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -1,44 +1,38 @@
-#!/usr/bin/env python
 # coding: utf-8
 """html2text: Turn HTML into equivalent Markdown-structured text."""
-from __future__ import division
-from __future__ import unicode_literals
+from __future__ import division, unicode_literals
+
 import re
 import sys
+from textwrap import wrap
 
-try:
-    from textwrap import wrap
-except ImportError:  # pragma: no cover
-    pass
-
-from html2text.compat import urlparse, HTMLParser
 from html2text import config
-
+from html2text.compat import HTMLParser, urlparse
 from html2text.utils import (
-    name2cp,
-    unifiable_n,
-    google_text_emphasis,
-    google_fixed_width_font,
-    element_style,
-    hn,
-    google_has_height,
-    escape_md,
-    google_list_style,
-    list_numbering_start,
     dumb_css_parser,
+    element_style,
+    escape_md,
     escape_md_section,
+    google_fixed_width_font,
+    google_has_height,
+    google_list_style,
+    google_text_emphasis,
+    hn,
+    list_numbering_start,
+    name2cp,
+    pad_tables_in_text,
     skipwrap,
-    pad_tables_in_text
+    unifiable_n,
 )
 
 try:
     chr = unichr
-    nochr = unicode('')
+    nochr = unicode("")
 except NameError:
     # python3 uses chr
-    nochr = str('')
+    nochr = str("")
 
-__version__ = (2017, 10, 4)
+__version__ = (2018, 1, 9)
 
 
 # TODO:
@@ -46,7 +40,7 @@
 
 
 class HTML2Text(HTMLParser.HTMLParser):
-    def __init__(self, out=None, baseurl='', bodywidth=config.BODY_WIDTH):
+    def __init__(self, out=None, baseurl="", bodywidth=config.BODY_WIDTH):
         """
         Input parameters:
             out: possible custom replacement for self.outtextf (which
@@ -55,7 +49,7 @@
         """
         kwargs = {}
         if sys.version_info >= (3, 4):
-            kwargs['convert_charrefs'] = False
+            kwargs["convert_charrefs"] = False
         HTMLParser.HTMLParser.__init__(self, **kwargs)
 
         # Config options
@@ -72,19 +66,21 @@
         self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli
         self.ignore_links = config.IGNORE_ANCHORS  # covered in cli
         self.ignore_images = config.IGNORE_IMAGES  # covered in cli
+        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli
         self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli
         self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli
         self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli
         self.bypass_tables = config.BYPASS_TABLES  # covered in cli
         self.ignore_tables = config.IGNORE_TABLES  # covered in cli
         self.google_doc = False  # covered in cli
-        self.ul_item_mark = '*'  # covered in cli
-        self.emphasis_mark = '_'  # covered in cli
-        self.strong_mark = '**'
+        self.ul_item_mark = "*"  # covered in cli
+        self.emphasis_mark = "_"  # covered in cli
+        self.strong_mark = "**"
         self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli
         self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli
         self.hide_strikethrough = False  # covered in cli
         self.mark_code = config.MARK_CODE
+        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli
         self.wrap_links = config.WRAP_LINKS  # covered in cli
         self.pad_tables = config.PAD_TABLES  # covered in cli
         self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli
@@ -92,9 +88,9 @@
         self.open_quote = config.OPEN_QUOTE  # covered in cli
         self.close_quote = config.CLOSE_QUOTE  # covered in cli
 
-        if out is None:  # pragma: no cover
+        if out is None:
             self.out = self.outtextf
-        else:  # pragma: no cover
+        else:
             self.out = out
 
         # empty list to store output characters before they are "joined"
@@ -103,22 +99,22 @@
         self.quiet = 0
         self.p_p = 0  # number of newline character to print before next output
         self.outcount = 0
-        self.start = 1
-        self.space = 0
+        self.start = True
+        self.space = False
         self.a = []
         self.astack = []
         self.maybe_automatic_link = None
         self.empty_link = False
-        self.absolute_url_matcher = re.compile(r'^[a-zA-Z+]+://')
+        self.absolute_url_matcher = re.compile(r"^[a-zA-Z+]+://")
         self.acount = 0
         self.list = []
         self.blockquote = 0
-        self.pre = 0
-        self.startpre = 0
+        self.pre = False
+        self.startpre = False
         self.code = False
         self.quote = False
-        self.br_toggle = ''
-        self.lastWasNL = 0
+        self.br_toggle = ""
+        self.lastWasNL = False
         self.lastWasList = False
         self.style = 0
         self.style_def = {}
@@ -135,11 +131,7 @@
         self.preceding_data = None
         self.current_tag = None
 
-        try:
-            del unifiable_n[name2cp('nbsp')]
-        except KeyError:
-            pass
-        config.UNIFIABLE['nbsp'] = '&nbsp_place_holder;'
+        config.UNIFIABLE["nbsp"] = "&nbsp_place_holder;"
 
     def feed(self, data):
         data = data.replace("</' + 'script>", "</ignore>")
@@ -157,24 +149,21 @@
     def outtextf(self, s):
         self.outtextlist.append(s)
         if s:
-            self.lastWasNL = s[-1] == '\n'
+            self.lastWasNL = s[-1] == "\n"
 
     def close(self):
         HTMLParser.HTMLParser.close(self)
 
         self.pbr()
-        self.o('', 0, 'end')
+        self.o("", 0, "end")
 
         outtext = nochr.join(self.outtextlist)
 
         if self.unicode_snob:
-            nbsp = chr(name2cp('nbsp'))
+            nbsp = chr(name2cp("nbsp"))
         else:
             nbsp = chr(32)
-        try:
-            outtext = outtext.replace(unicode('&nbsp_place_holder;'), nbsp)
-        except NameError:
-            outtext = outtext.replace('&nbsp_place_holder;', nbsp)
+        outtext = outtext.replace("&nbsp_place_holder;", nbsp)
 
         # Clear self.outtextlist to avoid memory leak of its content to
         # the next handling.
@@ -186,7 +175,16 @@
         self.handle_data(self.charref(c), True)
 
     def handle_entityref(self, c):
-        self.handle_data(self.entityref(c), True)
+        ref = self.entityref(c)
+
+        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should
+        # not contribute to the final output).
+        # self.handle_data cannot handle a zero-length string right after a
+        # stressed tag or mid-text within a stressed tag (text get split and
+        # self.stressed/self.preceding_stressed gets switched after the first
+        # part of that text).
+        if ref:
+            self.handle_data(ref, True)
 
     def handle_starttag(self, tag, attrs):
         self.handle_tag(tag, attrs, 1)
@@ -202,18 +200,20 @@
         self.a list. If the set of attributes is not found, returns None
         :rtype: int
         """
-        if 'href' not in attrs:  # pragma: no cover
+        if "href" not in attrs:
             return None
         i = -1
         for a in self.a:
             i += 1
-            match = 0
+            match = False
 
-            if 'href' in a and a['href'] == attrs['href']:
-                if 'title' in a or 'title' in attrs:
-                    if 'title' in a and \
-                        'title' in attrs and \
-                            a['title'] == attrs['title']:
+            if "href" in a and a["href"] == attrs["href"]:
+                if "title" in a or "title" in attrs:
+                    if (
+                        "title" in a
+                        and "title" in attrs
+                        and a["title"] == attrs["title"]
+                    ):
                         match = True
                 else:
                     match = True
@@ -229,20 +229,21 @@
         parent_emphasis = google_text_emphasis(parent_style)
 
         # handle Google's text emphasis
-        strikethrough = 'line-through' in \
-                        tag_emphasis and self.hide_strikethrough
+        strikethrough = "line-through" in tag_emphasis and self.hide_strikethrough
 
         # google and others may mark a font's weight as `bold` or `700`
         bold = False
         for bold_marker in config.BOLD_TEXT_STYLE_VALUES:
-            bold = (bold_marker in tag_emphasis
-                    and bold_marker not in parent_emphasis)
+            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis
             if bold:
                 break
 
-        italic = 'italic' in tag_emphasis and 'italic' not in parent_emphasis
-        fixed = google_fixed_width_font(tag_style) and not \
-            google_fixed_width_font(parent_style) and not self.pre
+        italic = "italic" in tag_emphasis and "italic" not in parent_emphasis
+        fixed = (
+            google_fixed_width_font(tag_style)
+            and not google_fixed_width_font(parent_style)
+            and not self.pre
+        )
 
         if start:
             # crossed-out text must be handled before other attributes
@@ -258,20 +259,20 @@
                 self.o(self.strong_mark)
                 self.drop_white_space += 1
             if fixed:
-                self.o('`')
+                self.o("`")
                 self.drop_white_space += 1
                 self.code = True
         else:
             if bold or italic or fixed:
                 # there must not be whitespace before closing emphasis mark
                 self.emphasis -= 1
-                self.space = 0
+                self.space = False
             if fixed:
                 if self.drop_white_space:
                     # empty emphasis, drop it
                     self.drop_white_space -= 1
                 else:
-                    self.o('`')
+                    self.o("`")
                 self.code = False
             if bold:
                 if self.drop_white_space:
@@ -305,9 +306,12 @@
 
         # first thing inside the anchor tag is another tag
         # that produces some output
-        if (start and self.maybe_automatic_link is not None and
-                tag not in ['p', 'div', 'style', 'dl', 'dt'] and
-                (tag != "img" or self.ignore_images)):
+        if (
+            start
+            and self.maybe_automatic_link is not None
+            and tag not in ["p", "div", "style", "dl", "dt"]
+            and (tag != "img" or self.ignore_images)
+        ):
             self.o("[")
             self.maybe_automatic_link = None
             self.empty_link = False
@@ -324,8 +328,9 @@
                 tag_style = element_style(attrs, self.style_def, parent_style)
                 self.tag_stack.append((tag, attrs, tag_style))
             else:
-                dummy, attrs, tag_style = self.tag_stack.pop() \
-                    if self.tag_stack else (None, {}, {})
+                dummy, attrs, tag_style = (
+                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})
+                )
                 if self.tag_stack:
                     parent_style = self.tag_stack[-1][2]
 
@@ -333,18 +338,18 @@
             self.p()
             if start:
                 self.inheader = True
-                self.o(hn(tag) * "#" + ' ')
+                self.o(hn(tag) * "#" + " ")
             else:
                 self.inheader = False
                 return  # prevent redundant emphasis marks on headers
 
-        if tag in ['p', 'div']:
+        if tag in ["p", "div"]:
             if self.google_doc:
                 if start and google_has_height(tag_style):
                     self.p()
                 else:
                     self.soft_br()
-            elif self.astack and tag == 'div':
+            elif self.astack and tag == "div":
                 pass
             else:
                 self.p()
@@ -360,7 +365,7 @@
             self.o("* * *")
             self.p()
 
-        if tag in ["head", "style", 'script']:
+        if tag in ["head", "style", "script"]:
             if start:
                 self.quiet += 1
             else:
@@ -378,20 +383,19 @@
         if tag == "blockquote":
             if start:
                 self.p()
-                self.o('> ', 0, 1)
-                self.start = 1
+                self.o("> ", 0, 1)
+                self.start = True
                 self.blockquote += 1
             else:
                 self.blockquote -= 1
                 self.p()
 
         def no_preceding_space(self):
-            return (self.preceding_data
-                    and re.match(r'[^\s]', self.preceding_data[-1]))
+            return self.preceding_data and re.match(r"[^\s]", self.preceding_data[-1])
 
-        if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
+        if tag in ["em", "i", "u"] and not self.ignore_emphasis:
             if start and no_preceding_space(self):
-                emphasis = ' ' + self.emphasis_mark
+                emphasis = " " + self.emphasis_mark
             else:
                 emphasis = self.emphasis_mark
 
@@ -399,9 +403,9 @@
             if start:
                 self.stressed = True
 
-        if tag in ['strong', 'b'] and not self.ignore_emphasis:
+        if tag in ["strong", "b"] and not self.ignore_emphasis:
             if start and no_preceding_space(self):
-                strong = ' ' + self.strong_mark
+                strong = " " + self.strong_mark
             else:
                 strong = self.strong_mark
 
@@ -409,11 +413,11 @@
             if start:
                 self.stressed = True
 
-        if tag in ['del', 'strike', 's']:
+        if tag in ["del", "strike", "s"]:
             if start and no_preceding_space(self):
-                strike = ' ~~'
+                strike = " ~~"
             else:
-                strike = '~~'
+                strike = "~~"
 
             self.o(strike)
             if start:
@@ -425,20 +429,20 @@
                 self.handle_emphasis(start, tag_style, parent_style)
 
         if tag in ["kbd", "code", "tt"] and not self.pre:
-            self.o('`')  # TODO: `` `this` ``
+            self.o("`")  # TODO: `` `this` ``
             self.code = not self.code
 
         if tag == "abbr":
             if start:
                 self.abbr_title = None
-                self.abbr_data = ''
-                if ('title' in attrs):
-                    self.abbr_title = attrs['title']
+                self.abbr_data = ""
+                if "title" in attrs:
+                    self.abbr_title = attrs["title"]
             else:
                 if self.abbr_title is not None:
                     self.abbr_list[self.abbr_data] = self.abbr_title
                     self.abbr_title = None
-                self.abbr_data = ''
+                self.abbr_data = ""
 
         if tag == "q":
             if not self.quote:
@@ -449,21 +453,21 @@
 
         def link_url(self, link, title=""):
             url = urlparse.urljoin(self.baseurl, link)
-            title = ' "{0}"'.format(title) if title.strip() else ''
-            self.o(']({url}{title})'.format(url=escape_md(url),
-                                            title=title))
+            title = ' "{}"'.format(title) if title.strip() else ""
+            self.o("]({url}{title})".format(url=escape_md(url), title=title))
 
         if tag == "a" and not self.ignore_links:
             if start:
-                if 'href' in attrs and \
-                    attrs['href'] is not None and not \
-                        (self.skip_internal_links and
-                            attrs['href'].startswith('#')):
+                if (
+                    "href" in attrs
+                    and attrs["href"] is not None
+                    and not (self.skip_internal_links and attrs["href"].startswith("#"))
+                ):
                     self.astack.append(attrs)
-                    self.maybe_automatic_link = attrs['href']
+                    self.maybe_automatic_link = attrs["href"]
                     self.empty_link = True
                     if self.protect_links:
-                        attrs['href'] = '<' + attrs['href'] + '>'
+                        attrs["href"] = "<" + attrs["href"] + ">"
                 else:
                     self.astack.append(None)
             else:
@@ -478,33 +482,34 @@
                             self.maybe_automatic_link = None
                         if self.inline_links:
                             try:
-                                title = a['title'] if a['title'] else ''
+                                title = a["title"] if a["title"] else ""
                                 title = escape_md(title)
                             except KeyError:
-                                link_url(self, a['href'], '')
+                                link_url(self, a["href"], "")
                             else:
-                                link_url(self, a['href'], title)
+                                link_url(self, a["href"], title)
                         else:
                             i = self.previousIndex(a)
                             if i is not None:
                                 a = self.a[i]
                             else:
                                 self.acount += 1
-                                a['count'] = self.acount
-                                a['outcount'] = self.outcount
+                                a["count"] = self.acount
+                                a["outcount"] = self.outcount
                                 self.a.append(a)
-                            self.o("][" + str(a['count']) + "]")
+                            self.o("][" + str(a["count"]) + "]")
 
         if tag == "img" and start and not self.ignore_images:
-            if 'src' in attrs:
+            if "src" in attrs:
                 if not self.images_to_alt:
-                    attrs['href'] = attrs['src']
-                alt = attrs.get('alt') or self.default_image_alt
+                    attrs["href"] = attrs["src"]
+                alt = attrs.get("alt") or self.default_image_alt
 
                 # If we have images_with_size, write raw html including width,
                 # height, and alt attributes
-                if self.images_with_size and \
-                        ("width" in attrs or "height" in attrs):
+                if self.images_as_html or (
+                    self.images_with_size and ("width" in attrs or "height" in attrs)
+                ):
                     self.o("<img src='" + attrs["src"] + "' ")
                     if "width" in attrs:
                         self.o("width='" + attrs["width"] + "' ")
@@ -518,8 +523,11 @@
                 # If we have a link to create, output the start
                 if self.maybe_automatic_link is not None:
                     href = self.maybe_automatic_link
-                    if self.images_to_alt and escape_md(alt) == href and \
-                            self.absolute_url_matcher.match(href):
+                    if (
+                        self.images_to_alt
+                        and escape_md(alt) == href
+                        and self.absolute_url_matcher.match(href)
+                    ):
                         self.o("<" + escape_md(alt) + ">")
                         self.empty_link = False
                         return
@@ -535,16 +543,9 @@
                 else:
                     self.o("![" + escape_md(alt) + "]")
                     if self.inline_links:
-                        href = attrs.get('href') or ''
+                        href = attrs.get("href") or ""
                         self.o(
-                            "(" +
-                            escape_md(
-                                urlparse.urljoin(
-                                    self.baseurl,
-                                    href
-                                )
-                            ) +
-                            ")"
+                            "(" + escape_md(urlparse.urljoin(self.baseurl, href)) + ")"
                         )
                     else:
                         i = self.previousIndex(attrs)
@@ -552,18 +553,18 @@
                             attrs = self.a[i]
                         else:
                             self.acount += 1
-                            attrs['count'] = self.acount
-                            attrs['outcount'] = self.outcount
+                            attrs["count"] = self.acount
+                            attrs["outcount"] = self.outcount
                             self.a.append(attrs)
-                        self.o("[" + str(attrs['count']) + "]")
+                        self.o("[" + str(attrs["count"]) + "]")
 
-        if tag == 'dl' and start:
+        if tag == "dl" and start:
             self.p()
-        if tag == 'dt' and not start:
+        if tag == "dt" and not start:
             self.pbr()
-        if tag == 'dd' and start:
-            self.o('    ')
-        if tag == 'dd' and not start:
+        if tag == "dd" and start:
+            self.o("    ")
+        if tag == "dd" and not start:
             self.pbr()
 
         if tag in ["ol", "ul"]:
@@ -576,42 +577,39 @@
                 else:
                     list_style = tag
                 numbering_start = list_numbering_start(attrs)
-                self.list.append({
-                    'name': list_style,
-                    'num': numbering_start
-                })
+                self.list.append({"name": list_style, "num": numbering_start})
             else:
                 if self.list:
                     self.list.pop()
                     if (not self.google_doc) and (not self.list):
-                        self.o('\n')
+                        self.o("\n")
             self.lastWasList = True
         else:
             self.lastWasList = False
 
-        if tag == 'li':
+        if tag == "li":
             self.pbr()
             if start:
                 if self.list:
                     li = self.list[-1]
                 else:
-                    li = {'name': 'ul', 'num': 0}
+                    li = {"name": "ul", "num": 0}
                 if self.google_doc:
                     nest_count = self.google_nest_count(tag_style)
                 else:
                     nest_count = len(self.list)
                 # TODO: line up <ol><li>s > 9 correctly.
                 self.o("  " * nest_count)
-                if li['name'] == "ul":
+                if li["name"] == "ul":
                     self.o(self.ul_item_mark + " ")
-                elif li['name'] == "ol":
-                    li['num'] += 1
-                    self.o(str(li['num']) + ". ")
-                self.start = 1
+                elif li["name"] == "ol":
+                    li["num"] += 1
+                    self.o(str(li["num"]) + ". ")
+                self.start = True
 
         if tag in ["table", "tr", "td", "th"]:
             if self.ignore_tables:
-                if tag == 'tr':
+                if tag == "tr":
                     if start:
                         pass
                     else:
@@ -624,14 +622,14 @@
                     self.soft_br()
                 if tag in ["td", "th"]:
                     if start:
-                        self.o('<{0}>\n\n'.format(tag))
+                        self.o("<{}>\n\n".format(tag))
                     else:
-                        self.o('\n</{0}>'.format(tag))
+                        self.o("\n</{}>".format(tag))
                 else:
                     if start:
-                        self.o('<{0}>'.format(tag))
+                        self.o("<{}>".format(tag))
                     else:
-                        self.o('</{0}>'.format(tag))
+                        self.o("</{}>".format(tag))
 
             else:
                 if tag == "table":
@@ -664,10 +662,10 @@
 
         if tag == "pre":
             if start:
-                self.startpre = 1
-                self.pre = 1
+                self.startpre = True
+                self.pre = True
             else:
-                self.pre = 0
+                self.pre = False
                 if self.mark_code:
                     self.out("\n[/code]")
             self.p()
@@ -685,7 +683,7 @@
     def soft_br(self):
         "Soft breaks"
         self.pbr()
-        self.br_toggle = '  '
+        self.br_toggle = "  "
 
     def o(self, data, puredata=0, force=0):
         """
@@ -701,16 +699,16 @@
                 lstripped_data = data.lstrip()
                 if self.drop_white_space and not (self.pre or self.code):
                     data = lstripped_data
-                if lstripped_data != '':
+                if lstripped_data != "":
                     self.drop_white_space = 0
 
             if puredata and not self.pre:
                 # This is a very dangerous call ... it could mess up
                 # all handling of &nbsp; when not handled properly
                 # (see entityref)
-                data = re.sub(r'\s+', r' ', data)
-                if data and data[0] == ' ':
-                    self.space = 1
+                data = re.sub(r"\s+", r" ", data)
+                if data and data[0] == " ":
+                    self.space = True
                     data = data[1:]
             if not data and not force:
                 return
@@ -724,7 +722,7 @@
                     self.out("\n[code]")
                     self.p_p = 0
 
-            bq = (">" * self.blockquote)
+            bq = ">" * self.blockquote
             if not (force and data and data[0] == ">") and self.blockquote:
                 bq += " "
 
@@ -737,44 +735,49 @@
                 data = data.replace("\n", "\n" + bq)
 
             if self.startpre:
-                self.startpre = 0
+                self.startpre = False
                 if self.list:
                     # use existing initial indentation
                     data = data.lstrip("\n")
 
             if self.start:
-                self.space = 0
+                self.space = False
                 self.p_p = 0
-                self.start = 0
+                self.start = False
 
-            if force == 'end':
+            if force == "end":
                 # It's the end.
                 self.p_p = 0
                 self.out("\n")
-                self.space = 0
+                self.space = False
 
             if self.p_p:
-                self.out((self.br_toggle + '\n' + bq) * self.p_p)
-                self.space = 0
-                self.br_toggle = ''
+                self.out((self.br_toggle + "\n" + bq) * self.p_p)
+                self.space = False
+                self.br_toggle = ""
 
             if self.space:
                 if not self.lastWasNL:
-                    self.out(' ')
-                self.space = 0
+                    self.out(" ")
+                self.space = False
 
-            if self.a and ((self.p_p == 2 and self.links_each_paragraph) or
-                           force == "end"):
+            if self.a and (
+                (self.p_p == 2 and self.links_each_paragraph) or force == "end"
+            ):
                 if force == "end":
                     self.out("\n")
 
                 newa = []
                 for link in self.a:
-                    if self.outcount > link['outcount']:
-                        self.out("   [" + str(link['count']) + "]: " +
-                                 urlparse.urljoin(self.baseurl, link['href']))
-                        if 'title' in link:
-                            self.out(" (" + link['title'] + ")")
+                    if self.outcount > link["outcount"]:
+                        self.out(
+                            "   ["
+                            + str(link["count"])
+                            + "]: "
+                            + urlparse.urljoin(self.baseurl, link["href"])
+                        )
+                        if "title" in link:
+                            self.out(" (" + link["title"] + ")")
                         self.out("\n")
                     else:
                         newa.append(link)
@@ -794,16 +797,23 @@
             self.outcount += 1
 
     def handle_data(self, data, entity_char=False):
+        if not data:
+            # Data may be empty for some HTML entities. For example,
+            # LEFT-TO-RIGHT MARK.
+            return
+
         if self.stressed:
             data = data.strip()
             self.stressed = False
             self.preceding_stressed = True
-        elif (self.preceding_stressed
-              and re.match(r'[^\s.!?]', data[0])
-              and not hn(self.current_tag)
-              and self.current_tag not in ['a', 'code', 'pre']):
-            # should match a letter or common punctuation
-            data = ' ' + data
+        elif self.preceding_stressed:
+            if (
+                re.match(r"[^\s.!?]", data[0])
+                and not hn(self.current_tag)
+                and self.current_tag not in ["a", "code", "pre"]
+            ):
+                # should match a letter or common punctuation
+                data = " " + data
             self.preceding_stressed = False
 
         if self.style:
@@ -811,8 +821,11 @@
 
         if self.maybe_automatic_link is not None:
             href = self.maybe_automatic_link
-            if (href == data and self.absolute_url_matcher.match(href) and
-                    self.use_automatic_links):
+            if (
+                href == data
+                and self.absolute_url_matcher.match(href)
+                and self.use_automatic_links
+            ):
                 self.o("<" + data + ">")
                 self.empty_link = False
                 return
@@ -826,48 +839,34 @@
         self.preceding_data = data
         self.o(data, 1)
 
-    def unknown_decl(self, data):  # pragma: no cover
-        # TODO: what is this doing here?
-        pass
-
     def charref(self, name):
-        if name[0] in ['x', 'X']:
+        if name[0] in ["x", "X"]:
             c = int(name[1:], 16)
         else:
             c = int(name)
 
-        if not self.unicode_snob and c in unifiable_n.keys():
+        if not self.unicode_snob and c in unifiable_n:
             return unifiable_n[c]
         else:
             try:
                 return chr(c)
             except ValueError:  # invalid unicode
-                return ''
+                return ""
 
     def entityref(self, c):
-        if not self.unicode_snob and c in config.UNIFIABLE.keys():
+        if not self.unicode_snob and c in config.UNIFIABLE:
             return config.UNIFIABLE[c]
         else:
             try:
                 name2cp(c)
             except KeyError:
-                return "&" + c + ';'
+                return "&" + c + ";"
             else:
-                if c == 'nbsp':
+                if c == "nbsp":
                     return config.UNIFIABLE[c]
                 else:
                     return chr(name2cp(c))
 
-    def replaceEntities(self, s):
-        s = s.group(1)
-        if s[0] == "#":
-            return self.charref(s[1:])
-        else:
-            return self.entityref(s)
-
-    def unescape(self, s):
-        return config.RE_UNESCAPE.sub(self.replaceEntities, s)
-
     def google_nest_count(self, style):
         """
         Calculate the nesting count of google doc lists
@@ -877,9 +876,8 @@
         :rtype: int
         """
         nest_count = 0
-        if 'margin-left' in style:
-            nest_count = int(style['margin-left'][:-2]) \
-                // self.google_list_indent
+        if "margin-left" in style:
+            nest_count = int(style["margin-left"][:-2]) // self.google_list_indent
 
         return nest_count
 
@@ -894,8 +892,7 @@
         if not self.body_width:
             return text
 
-        assert wrap, "Requires Python 2.3."
-        result = ''
+        result = ""
         newlines = 0
         # I cannot think of a better solution for now.
         # To avoid the non-wrap behaviour for entire paras
@@ -904,11 +901,18 @@
             self.inline_links = False
         for para in text.split("\n"):
             if len(para) > 0:
-                if not skipwrap(para, self.wrap_links):
-                    result += "\n".join(
-                        wrap(para, self.body_width, break_long_words=False)
+                if not skipwrap(para, self.wrap_links, self.wrap_list_items):
+                    indent = ""
+                    if para.startswith("  " + self.ul_item_mark):
+                        indent = "    "  # For list items.
+                    wrapped = wrap(
+                        para,
+                        self.body_width,
+                        break_long_words=False,
+                        subsequent_indent=indent,
                     )
-                    if para.endswith('  '):
+                    result += "\n".join(wrapped)
+                    if indent or para.endswith("  "):
                         result += "  \n"
                         newlines = 1
                     else:
@@ -929,22 +933,9 @@
         return result
 
 
-def html2text(html, baseurl='', bodywidth=None):
+def html2text(html, baseurl="", bodywidth=None):
     if bodywidth is None:
         bodywidth = config.BODY_WIDTH
     h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
 
     return h.handle(html)
-
-
-def unescape(s, unicode_snob=False):
-    h = HTML2Text()
-    h.unicode_snob = unicode_snob
-
-    return h.unescape(s)
-
-
-if __name__ == "__main__":
-    from html2text.cli import main
-
-    main()
diff --git a/html2text/__main__.py b/html2text/__main__.py
new file mode 100644
index 0000000..6a5a4f8
--- /dev/null
+++ b/html2text/__main__.py
@@ -0,0 +1,3 @@
+from html2text.cli import main
+
+main()
diff --git a/html2text/cli.py b/html2text/cli.py
index 0451e02..2088ef0 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -1,324 +1,306 @@
-import optparse
-import warnings
+import argparse
 
-from html2text.compat import urllib
-from html2text import HTML2Text, config, __version__
-from html2text.utils import wrapwrite, wrap_read
+from html2text import HTML2Text, __version__, config
+from html2text.utils import wrap_read, wrapwrite
 
 
 def main():
-    baseurl = ''
+    baseurl = ""
 
-    class bcolors:  # pragma: no cover
-        HEADER = '\033[95m'
-        OKBLUE = '\033[94m'
-        OKGREEN = '\033[92m'
-        WARNING = '\033[93m'
-        FAIL = '\033[91m'
-        ENDC = '\033[0m'
-        BOLD = '\033[1m'
-        UNDERLINE = '\033[4m'
+    class bcolors:
+        HEADER = "\033[95m"
+        OKBLUE = "\033[94m"
+        OKGREEN = "\033[92m"
+        WARNING = "\033[93m"
+        FAIL = "\033[91m"
+        ENDC = "\033[0m"
+        BOLD = "\033[1m"
+        UNDERLINE = "\033[4m"
 
-    p = optparse.OptionParser(
-        '%prog [(filename|url) [encoding]]',
-        version='%prog ' + ".".join(map(str, __version__))
-    )
-    p.add_option(
+    p = argparse.ArgumentParser()
+    p.add_argument(
         "--default-image-alt",
         dest="default_image_alt",
-        action="store",
-        type="str",
         default=config.DEFAULT_IMAGE_ALT,
-        help="The default alt string for images with missing ones")
-    p.add_option(
+        help="The default alt string for images with missing ones",
+    )
+    p.add_argument(
         "--pad-tables",
         dest="pad_tables",
         action="store_true",
         default=config.PAD_TABLES,
-        help="pad the cells to equal column width in tables"
+        help="pad the cells to equal column width in tables",
     )
-    p.add_option(
+    p.add_argument(
         "--no-wrap-links",
         dest="wrap_links",
         action="store_false",
         default=config.WRAP_LINKS,
-        help="wrap links during conversion"
+        help="don't wrap links during conversion",
     )
-    p.add_option(
+    p.add_argument(
+        "--wrap-list-items",
+        dest="wrap_list_items",
+        action="store_true",
+        default=config.WRAP_LIST_ITEMS,
+        help="wrap list items during conversion",
+    )
+    p.add_argument(
         "--ignore-emphasis",
         dest="ignore_emphasis",
         action="store_true",
         default=config.IGNORE_EMPHASIS,
-        help="don't include any formatting for emphasis"
+        help="don't include any formatting for emphasis",
     )
-    p.add_option(
+    p.add_argument(
         "--reference-links",
         dest="inline_links",
         action="store_false",
         default=config.INLINE_LINKS,
-        help="use reference style links instead of inline links"
+        help="use reference style links instead of inline links",
     )
-    p.add_option(
+    p.add_argument(
         "--ignore-links",
         dest="ignore_links",
         action="store_true",
         default=config.IGNORE_ANCHORS,
-        help="don't include any formatting for links")
-    p.add_option(
+        help="don't include any formatting for links",
+    )
+    p.add_argument(
         "--protect-links",
         dest="protect_links",
         action="store_true",
         default=config.PROTECT_LINKS,
-        help=("protect links from line breaks surrounding them " +
-              "with angle brackets"))
-    p.add_option(
+        help="protect links from line breaks surrounding them with angle brackets",
+    )
+    p.add_argument(
         "--ignore-images",
         dest="ignore_images",
         action="store_true",
         default=config.IGNORE_IMAGES,
-        help="don't include any formatting for images"
+        help="don't include any formatting for images",
     )
-    p.add_option(
+    p.add_argument(
+        "--images-as-html",
+        dest="images_as_html",
+        action="store_true",
+        default=config.IMAGES_AS_HTML,
+        help=(
+            "Always write image tags as raw html; preserves `height`, `width` and "
+            "`alt` if possible."
+        ),
+    )
+    p.add_argument(
         "--images-to-alt",
         dest="images_to_alt",
         action="store_true",
         default=config.IMAGES_TO_ALT,
-        help="Discard image data, only keep alt text"
+        help="Discard image data, only keep alt text",
     )
-    p.add_option(
+    p.add_argument(
         "--images-with-size",
         dest="images_with_size",
         action="store_true",
         default=config.IMAGES_WITH_SIZE,
-        help="Write image tags with height and width attrs as raw html to "
-             "retain dimensions"
+        help=(
+            "Write image tags with height and width attrs as raw html to retain "
+            "dimensions"
+        ),
     )
-    p.add_option(
-        "-g", "--google-doc",
+    p.add_argument(
+        "-g",
+        "--google-doc",
         action="store_true",
         dest="google_doc",
         default=False,
-        help="convert an html-exported Google Document"
+        help="convert an html-exported Google Document",
     )
-    p.add_option(
-        "-d", "--dash-unordered-list",
+    p.add_argument(
+        "-d",
+        "--dash-unordered-list",
         action="store_true",
         dest="ul_style_dash",
         default=False,
-        help="use a dash rather than a star for unordered list items"
+        help="use a dash rather than a star for unordered list items",
     )
-    p.add_option(
-        "-e", "--asterisk-emphasis",
+    p.add_argument(
+        "-e",
+        "--asterisk-emphasis",
         action="store_true",
         dest="em_style_asterisk",
         default=False,
-        help="use an asterisk rather than an underscore for emphasized text"
+        help="use an asterisk rather than an underscore for emphasized text",
     )
-    p.add_option(
-        "-b", "--body-width",
+    p.add_argument(
+        "-b",
+        "--body-width",
         dest="body_width",
-        action="store",
-        type="int",
+        type=int,
         default=config.BODY_WIDTH,
-        help="number of characters per output line, 0 for no wrap"
+        help="number of characters per output line, 0 for no wrap",
     )
-    p.add_option(
-        "-i", "--google-list-indent",
+    p.add_argument(
+        "-i",
+        "--google-list-indent",
         dest="list_indent",
-        action="store",
-        type="int",
+        type=int,
         default=config.GOOGLE_LIST_INDENT,
-        help="number of pixels Google indents nested lists"
+        help="number of pixels Google indents nested lists",
     )
-    p.add_option(
-        "-s", "--hide-strikethrough",
+    p.add_argument(
+        "-s",
+        "--hide-strikethrough",
         action="store_true",
         dest="hide_strikethrough",
         default=False,
-        help="hide strike-through text. only relevant when -g is "
-             "specified as well"
+        help="hide strike-through text. only relevant when -g is " "specified as well",
     )
-    p.add_option(
+    p.add_argument(
         "--escape-all",
         action="store_true",
         dest="escape_snob",
         default=False,
-        help="Escape all special characters.  Output is less readable, but "
-             "avoids corner case formatting issues."
+        help=(
+            "Escape all special characters.  Output is less readable, but avoids "
+            "corner case formatting issues."
+        ),
     )
-    p.add_option(
+    p.add_argument(
         "--bypass-tables",
         action="store_true",
         dest="bypass_tables",
         default=config.BYPASS_TABLES,
-        help="Format tables in HTML rather than Markdown syntax."
+        help="Format tables in HTML rather than Markdown syntax.",
     )
-    p.add_option(
+    p.add_argument(
         "--ignore-tables",
         action="store_true",
         dest="ignore_tables",
         default=config.IGNORE_TABLES,
-        help="Ignore table-related tags (table, th, td, tr) "
-             "while keeping rows."
+        help="Ignore table-related tags (table, th, td, tr) " "while keeping rows.",
     )
-    p.add_option(
+    p.add_argument(
         "--single-line-break",
         action="store_true",
         dest="single_line_break",
         default=config.SINGLE_LINE_BREAK,
         help=(
-            "Use a single line break after a block element rather than two "
-            "line breaks. NOTE: Requires --body-width=0"
-        )
+            "Use a single line break after a block element rather than two line "
+            "breaks. NOTE: Requires --body-width=0"
+        ),
     )
-    p.add_option(
+    p.add_argument(
         "--unicode-snob",
         action="store_true",
         dest="unicode_snob",
         default=config.UNICODE_SNOB,
-        help="Use unicode throughout document"
+        help="Use unicode throughout document",
     )
-    p.add_option(
+    p.add_argument(
         "--no-automatic-links",
         action="store_false",
         dest="use_automatic_links",
         default=config.USE_AUTOMATIC_LINKS,
-        help="Do not use automatic links wherever applicable"
+        help="Do not use automatic links wherever applicable",
     )
-    p.add_option(
+    p.add_argument(
         "--no-skip-internal-links",
         action="store_false",
         dest="skip_internal_links",
         default=config.SKIP_INTERNAL_LINKS,
-        help="Do not skip internal links"
+        help="Do not skip internal links",
     )
-    p.add_option(
+    p.add_argument(
         "--links-after-para",
         action="store_true",
         dest="links_each_paragraph",
         default=config.LINKS_EACH_PARAGRAPH,
-        help="Put links after each paragraph instead of document"
+        help="Put links after each paragraph instead of document",
     )
-    p.add_option(
+    p.add_argument(
         "--mark-code",
         action="store_true",
         dest="mark_code",
         default=config.MARK_CODE,
-        help="Mark program code blocks with [code]...[/code]"
+        help="Mark program code blocks with [code]...[/code]",
     )
-    p.add_option(
+    p.add_argument(
         "--decode-errors",
         dest="decode_errors",
-        action="store",
-        type="string",
         default=config.DECODE_ERRORS,
-        help="What to do in case of decode errors.'ignore', 'strict' and "
-             "'replace' are acceptable values"
+        help=(
+            "What to do in case of decode errors.'ignore', 'strict' and 'replace' are "
+            "acceptable values"
+        ),
     )
-    p.add_option(
+    p.add_argument(
         "--open-quote",
         dest="open_quote",
-        action="store",
-        type="str",
         default=config.OPEN_QUOTE,
         help="The character used to open quotes",
     )
-    p.add_option(
+    p.add_argument(
         "--close-quote",
         dest="close_quote",
-        action="store",
-        type="str",
         default=config.CLOSE_QUOTE,
         help="The character used to close quotes",
     )
-    (options, args) = p.parse_args()
+    p.add_argument(
+        "--version", action="version", version=".".join(map(str, __version__))
+    )
+    p.add_argument("filename", nargs="?")
+    p.add_argument("encoding", nargs="?", default="utf-8")
+    args = p.parse_args()
 
-    # process input
-    encoding = "utf-8"
-    if len(args) == 2:
-        encoding = args[1]
-    elif len(args) > 2:
-        p.error('Too many arguments')
-
-    if len(args) > 0 and args[0] != '-':  # pragma: no cover
-        file_ = args[0]
-
-        if file_.startswith('http://') or file_.startswith('https://'):
-            warnings.warn(
-                "Support for retrieving html over network is set for "
-                "deprecation by version (2017, 1, x)",
-                DeprecationWarning
-            )
-            baseurl = file_
-            j = urllib.urlopen(baseurl)
-            data = j.read()
-            if encoding is None:
-                try:
-                    from feedparser import _getCharacterEncoding as enc
-                except ImportError:
-                    def enc(x, y):
-                        return ('utf-8', 1)
-                encoding = enc(j.headers, data)[0]
-                if encoding == 'us-ascii':
-                    encoding = 'utf-8'
-        else:
-            data = open(file_, 'rb').read()
-            if encoding is None:
-                try:
-                    from chardet import detect
-                except ImportError:
-                    def detect(x):
-                        return {'encoding': 'utf-8'}
-                encoding = detect(data)['encoding']
+    if args.filename and args.filename != "-":
+        with open(args.filename, "rb") as fp:
+            data = fp.read()
     else:
         data = wrap_read()
 
-    if hasattr(data, 'decode'):
-        try:
-            try:
-                data = data.decode(encoding, errors=options.decode_errors)
-            except TypeError:
-                # python 2.6.x does not have the errors option
-                data = data.decode(encoding)
-        except UnicodeDecodeError as err:
-            warning = bcolors.WARNING + "Warning:" + bcolors.ENDC
-            warning += ' Use the ' + bcolors.OKGREEN
-            warning += '--decode-errors=ignore' + bcolors.ENDC + 'flag.'
-            print(warning)
-            raise err
+    try:
+        data = data.decode(args.encoding, args.decode_errors)
+    except UnicodeDecodeError as err:
+        warning = bcolors.WARNING + "Warning:" + bcolors.ENDC
+        warning += " Use the " + bcolors.OKGREEN
+        warning += "--decode-errors=ignore" + bcolors.ENDC + " flag."
+        print(warning)
+        raise err
 
     h = HTML2Text(baseurl=baseurl)
     # handle options
-    if options.ul_style_dash:
-        h.ul_item_mark = '-'
-    if options.em_style_asterisk:
-        h.emphasis_mark = '*'
-        h.strong_mark = '__'
+    if args.ul_style_dash:
+        h.ul_item_mark = "-"
+    if args.em_style_asterisk:
+        h.emphasis_mark = "*"
+        h.strong_mark = "__"
 
-    h.body_width = options.body_width
-    h.google_list_indent = options.list_indent
-    h.ignore_emphasis = options.ignore_emphasis
-    h.ignore_links = options.ignore_links
-    h.protect_links = options.protect_links
-    h.ignore_images = options.ignore_images
-    h.images_to_alt = options.images_to_alt
-    h.images_with_size = options.images_with_size
-    h.google_doc = options.google_doc
-    h.hide_strikethrough = options.hide_strikethrough
-    h.escape_snob = options.escape_snob
-    h.bypass_tables = options.bypass_tables
-    h.ignore_tables = options.ignore_tables
-    h.single_line_break = options.single_line_break
-    h.inline_links = options.inline_links
-    h.unicode_snob = options.unicode_snob
-    h.use_automatic_links = options.use_automatic_links
-    h.skip_internal_links = options.skip_internal_links
-    h.links_each_paragraph = options.links_each_paragraph
-    h.mark_code = options.mark_code
-    h.wrap_links = options.wrap_links
-    h.pad_tables = options.pad_tables
-    h.default_image_alt = options.default_image_alt
-    h.open_quote = options.open_quote
-    h.close_quote = options.close_quote
+    h.body_width = args.body_width
+    h.google_list_indent = args.list_indent
+    h.ignore_emphasis = args.ignore_emphasis
+    h.ignore_links = args.ignore_links
+    h.protect_links = args.protect_links
+    h.ignore_images = args.ignore_images
+    h.images_as_html = args.images_as_html
+    h.images_to_alt = args.images_to_alt
+    h.images_with_size = args.images_with_size
+    h.google_doc = args.google_doc
+    h.hide_strikethrough = args.hide_strikethrough
+    h.escape_snob = args.escape_snob
+    h.bypass_tables = args.bypass_tables
+    h.ignore_tables = args.ignore_tables
+    h.single_line_break = args.single_line_break
+    h.inline_links = args.inline_links
+    h.unicode_snob = args.unicode_snob
+    h.use_automatic_links = args.use_automatic_links
+    h.skip_internal_links = args.skip_internal_links
+    h.links_each_paragraph = args.links_each_paragraph
+    h.mark_code = args.mark_code
+    h.wrap_links = args.wrap_links
+    h.wrap_list_items = args.wrap_list_items
+    h.pad_tables = args.pad_tables
+    h.default_image_alt = args.default_image_alt
+    h.open_quote = args.open_quote
+    h.close_quote = args.close_quote
 
     wrapwrite(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
index f669f98..a3226d5 100644
--- a/html2text/compat.py
+++ b/html2text/compat.py
@@ -1,21 +1,12 @@
 import sys
 
-
 if sys.version_info[0] == 2:
     import htmlentitydefs
     import urlparse
     import HTMLParser
-    import urllib
-    from cgi import escape as html_escape
 else:
     import urllib.parse as urlparse
     import html.entities as htmlentitydefs
     import html.parser as HTMLParser
-    import urllib.request as urllib
-    from html import escape
 
-    def html_escape(s):
-        return escape(s, quote=False)
-
-
-__all__ = ['HTMLParser', 'html_escape', 'htmlentitydefs', 'urllib', 'urlparse']
+__all__ = ["HTMLParser", "htmlentitydefs", "urlparse"]
diff --git a/html2text/config.py b/html2text/config.py
index 6ccf387..ff96f71 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -3,18 +3,18 @@
 import re
 
 # Use Unicode characters instead of their ascii pseudo-replacements
-UNICODE_SNOB = 0
+UNICODE_SNOB = False
 
 # Marker to use for marking tables for padding post processing
 TABLE_MARKER_FOR_PAD = "special_marker_for_table_padding"
 # Escape all special characters.  Output is less readable, but avoids
 # corner case formatting issues.
-ESCAPE_SNOB = 0
+ESCAPE_SNOB = False
 
 # Put the links after each paragraph instead of at the end.
-LINKS_EACH_PARAGRAPH = 0
+LINKS_EACH_PARAGRAPH = False
 
-# Wrap long lines at position. 0 for no wrapping. (Requires Python 2.3.)
+# Wrap long lines at position. 0 for no wrapping.
 BODY_WIDTH = 78
 
 # Don't show internal links (href="#local-anchor") -- corresponding link
@@ -30,20 +30,24 @@
 # WRAP_LINKS = True
 WRAP_LINKS = True
 
+# Wrap list items.
+WRAP_LIST_ITEMS = False
+
 # Number of pixels Google indents nested lists
 GOOGLE_LIST_INDENT = 36
 
 # Values Google and others may use to indicate bold text
-BOLD_TEXT_STYLE_VALUES = ('bold', '700', '800', '900')
+BOLD_TEXT_STYLE_VALUES = ("bold", "700", "800", "900")
 
 IGNORE_ANCHORS = False
 IGNORE_IMAGES = False
+IMAGES_AS_HTML = False
 IMAGES_TO_ALT = False
 IMAGES_WITH_SIZE = False
 IGNORE_EMPHASIS = False
 MARK_CODE = False
-DECODE_ERRORS = 'strict'
-DEFAULT_IMAGE_ALT = ''
+DECODE_ERRORS = "strict"
+DEFAULT_IMAGE_ALT = ""
 PAD_TABLES = False
 
 # Convert links with same href and text to <href> format
@@ -51,82 +55,93 @@
 USE_AUTOMATIC_LINKS = True
 
 # For checking space-only lines on line 771
-RE_SPACE = re.compile(r'\s\+')
+RE_SPACE = re.compile(r"\s\+")
 
-RE_UNESCAPE = re.compile(r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));")
-RE_ORDERED_LIST_MATCHER = re.compile(r'\d+\.\s')
-RE_UNORDERED_LIST_MATCHER = re.compile(r'[-\*\+]\s')
+RE_ORDERED_LIST_MATCHER = re.compile(r"\d+\.\s")
+RE_UNORDERED_LIST_MATCHER = re.compile(r"[-\*\+]\s")
 RE_MD_CHARS_MATCHER = re.compile(r"([\\\[\]\(\)])")
 RE_MD_CHARS_MATCHER_ALL = re.compile(r"([`\*_{}\[\]\(\)#!])")
 
 # to find links in the text
 RE_LINK = re.compile(r"(\[.*?\] ?\(.*?\))|(\[.*?\]:.*?)")
 
-RE_MD_DOT_MATCHER = re.compile(r"""
+RE_MD_DOT_MATCHER = re.compile(
+    r"""
     ^             # start of line
     (\s*\d+)      # optional whitespace and a number
     (\.)          # dot
     (?=\s)        # lookahead assert whitespace
-    """, re.MULTILINE | re.VERBOSE)
-RE_MD_PLUS_MATCHER = re.compile(r"""
+    """,
+    re.MULTILINE | re.VERBOSE,
+)
+RE_MD_PLUS_MATCHER = re.compile(
+    r"""
     ^
     (\s*)
     (\+)
     (?=\s)
-    """, flags=re.MULTILINE | re.VERBOSE)
-RE_MD_DASH_MATCHER = re.compile(r"""
+    """,
+    flags=re.MULTILINE | re.VERBOSE,
+)
+RE_MD_DASH_MATCHER = re.compile(
+    r"""
     ^
     (\s*)
     (-)
     (?=\s|\-)     # followed by whitespace (bullet list, or spaced out hr)
                   # or another dash (header or hr)
-    """, flags=re.MULTILINE | re.VERBOSE)
-RE_SLASH_CHARS = r'\`*_{}[]()#+-.!'
-RE_MD_BACKSLASH_MATCHER = re.compile(r'''
+    """,
+    flags=re.MULTILINE | re.VERBOSE,
+)
+RE_SLASH_CHARS = r"\`*_{}[]()#+-.!"
+RE_MD_BACKSLASH_MATCHER = re.compile(
+    r"""
     (\\)          # match one slash
     (?=[%s])      # followed by a char that requires escaping
-    ''' % re.escape(RE_SLASH_CHARS),
-    flags=re.VERBOSE)
+    """
+    % re.escape(RE_SLASH_CHARS),
+    flags=re.VERBOSE,
+)
 
 UNIFIABLE = {
-    'rsquo': "'",
-    'lsquo': "'",
-    'rdquo': '"',
-    'ldquo': '"',
-    'copy': '(C)',
-    'mdash': '--',
-    'nbsp': ' ',
-    'rarr': '->',
-    'larr': '<-',
-    'middot': '*',
-    'ndash': '-',
-    'oelig': 'oe',
-    'aelig': 'ae',
-    'agrave': 'a',
-    'aacute': 'a',
-    'acirc': 'a',
-    'atilde': 'a',
-    'auml': 'a',
-    'aring': 'a',
-    'egrave': 'e',
-    'eacute': 'e',
-    'ecirc': 'e',
-    'euml': 'e',
-    'igrave': 'i',
-    'iacute': 'i',
-    'icirc': 'i',
-    'iuml': 'i',
-    'ograve': 'o',
-    'oacute': 'o',
-    'ocirc': 'o',
-    'otilde': 'o',
-    'ouml': 'o',
-    'ugrave': 'u',
-    'uacute': 'u',
-    'ucirc': 'u',
-    'uuml': 'u',
-    'lrm': '',
-    'rlm': ''
+    "rsquo": "'",
+    "lsquo": "'",
+    "rdquo": '"',
+    "ldquo": '"',
+    "copy": "(C)",
+    "mdash": "--",
+    "nbsp": " ",
+    "rarr": "->",
+    "larr": "<-",
+    "middot": "*",
+    "ndash": "-",
+    "oelig": "oe",
+    "aelig": "ae",
+    "agrave": "a",
+    "aacute": "a",
+    "acirc": "a",
+    "atilde": "a",
+    "auml": "a",
+    "aring": "a",
+    "egrave": "e",
+    "eacute": "e",
+    "ecirc": "e",
+    "euml": "e",
+    "igrave": "i",
+    "iacute": "i",
+    "icirc": "i",
+    "iuml": "i",
+    "ograve": "o",
+    "oacute": "o",
+    "ocirc": "o",
+    "otilde": "o",
+    "ouml": "o",
+    "ugrave": "u",
+    "uacute": "u",
+    "ucirc": "u",
+    "uuml": "u",
+    "lrm": "",
+    "rlm": "",
 }
 
 # Format tables in HTML rather than Markdown syntax
diff --git a/html2text/utils.py b/html2text/utils.py
index d382e00..829c4dd 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -6,21 +6,19 @@
 
 def name2cp(k):
     """Return sname to codepoint"""
-    if k == 'apos':
+    if k == "apos":
         return ord("'")
     return htmlentitydefs.name2codepoint[k]
 
 
-unifiable_n = {}
-for k in config.UNIFIABLE.keys():
-    unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
+unifiable_n = {name2cp(k): v for k, v in config.UNIFIABLE.items() if k != "nbsp"}
 
 
 def hn(tag):
-    if tag[0] == 'h' and len(tag) == 2:
+    if tag[0] == "h" and len(tag) == 2:
         try:
             n = int(tag[1])
-            if n in range(1, 10):  # pragma: no branch
+            if n in range(1, 10):
                 return n
         except ValueError:
             return 0
@@ -30,12 +28,10 @@
     """
     :returns: A hash of css attributes
     """
-    out = dict([(x.strip().lower(), y.strip().lower()) for x, y in
-                [z.split(':', 1) for z in
-                 style.split(';') if ':' in z
-                 ]
-                ]
-               )
+    out = {
+        x.strip().lower(): y.strip().lower()
+        for x, y in [z.split(":", 1) for z in style.split(";") if ":" in z]
+    }
 
     return out
 
@@ -49,19 +45,18 @@
     :rtype: dict
     """
     # remove @import sentences
-    data += ';'
-    importIndex = data.find('@import')
+    data += ";"
+    importIndex = data.find("@import")
     while importIndex != -1:
-        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
-        importIndex = data.find('@import')
+        data = data[0:importIndex] + data[data.find(";", importIndex) + 1 :]
+        importIndex = data.find("@import")
 
     # parse the css. reverted from dictionary comprehension in order to
     # support older pythons
-    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
+    elements = [x.split("{") for x in data.split("}") if "{" in x.strip()]
     try:
-        elements = dict([(a.strip(), dumb_property_dict(b))
-                         for a, b in elements])
-    except ValueError:  # pragma: no cover
+        elements = {a.strip(): dumb_property_dict(b) for a, b in elements}
+    except ValueError:
         elements = {}  # not that important
 
     return elements
@@ -77,12 +72,12 @@
     :rtype: dict
     """
     style = parent_style.copy()
-    if 'class' in attrs:
-        for css_class in attrs['class'].split():
-            css_style = style_def.get('.' + css_class, {})
+    if "class" in attrs:
+        for css_class in attrs["class"].split():
+            css_style = style_def.get("." + css_class, {})
             style.update(css_style)
-    if 'style' in attrs:
-        immediate_style = dumb_property_dict(attrs['style'])
+    if "style" in attrs:
+        immediate_style = dumb_property_dict(attrs["style"])
         style.update(immediate_style)
 
     return style
@@ -96,12 +91,12 @@
 
     :rtype: str
     """
-    if 'list-style-type' in style:
-        list_style = style['list-style-type']
-        if list_style in ['disc', 'circle', 'square', 'none']:
-            return 'ul'
+    if "list-style-type" in style:
+        list_style = style["list-style-type"]
+        if list_style in ["disc", "circle", "square", "none"]:
+            return "ul"
 
-    return 'ol'
+    return "ol"
 
 
 def google_has_height(style):
@@ -113,7 +108,7 @@
 
     :rtype: bool
     """
-    if 'height' in style:
+    if "height" in style:
         return True
 
     return False
@@ -127,12 +122,12 @@
     :rtype: list
     """
     emphasis = []
-    if 'text-decoration' in style:
-        emphasis.append(style['text-decoration'])
-    if 'font-style' in style:
-        emphasis.append(style['font-style'])
-    if 'font-weight' in style:
-        emphasis.append(style['font-weight'])
+    if "text-decoration" in style:
+        emphasis.append(style["text-decoration"])
+    if "font-style" in style:
+        emphasis.append(style["font-style"])
+    if "font-weight" in style:
+        emphasis.append(style["font-weight"])
 
     return emphasis
 
@@ -145,10 +140,10 @@
 
     :rtype: bool
     """
-    font_family = ''
-    if 'font-family' in style:
-        font_family = style['font-family']
-    if 'courier new' == font_family or 'consolas' == font_family:
+    font_family = ""
+    if "font-family" in style:
+        font_family = style["font-family"]
+    if "courier new" == font_family or "consolas" == font_family:
         return True
 
     return False
@@ -162,23 +157,23 @@
 
     :rtype: int or None
     """
-    if 'start' in attrs:
+    if "start" in attrs:
         try:
-            return int(attrs['start']) - 1
+            return int(attrs["start"]) - 1
         except ValueError:
             pass
 
     return 0
 
 
-def skipwrap(para, wrap_links):
+def skipwrap(para, wrap_links, wrap_list_items):
     # If it appears to contain a link
     # don't wrap
     if (len(config.RE_LINK.findall(para)) > 0) and not wrap_links:
         return True
     # If the text begins with four spaces or one tab, it's a code block;
     # don't wrap
-    if para[0:4] == '    ' or para[0] == '\t':
+    if para[0:4] == "    " or para[0] == "\t":
         return True
 
     # If the text begins with only two "--", possibly preceded by
@@ -190,28 +185,29 @@
     # I'm not sure what this is for; I thought it was to detect lists,
     # but there's a <br>-inside-<span> case in one of the tests that
     # also depends upon it.
-    if stripped[0:1] in ('-', '*') and not stripped[0:2] == '**':
-        return True
+    if stripped[0:1] in ("-", "*") and not stripped[0:2] == "**":
+        return not wrap_list_items
 
     # If the text begins with a single -, *, or +, followed by a space,
     # or an integer, followed by a ., followed by a space (in either
     # case optionally proceeded by whitespace), it's a list; don't wrap.
-    if config.RE_ORDERED_LIST_MATCHER.match(stripped) or \
-            config.RE_UNORDERED_LIST_MATCHER.match(stripped):
+    if config.RE_ORDERED_LIST_MATCHER.match(
+        stripped
+    ) or config.RE_UNORDERED_LIST_MATCHER.match(stripped):
         return True
 
     return False
 
 
 def wrapwrite(text):
-    text = text.encode('utf-8')
+    text = text.encode("utf-8")
     try:  # Python3
         sys.stdout.buffer.write(text)
     except AttributeError:
         sys.stdout.write(text)
 
 
-def wrap_read():  # pragma: no cover
+def wrap_read():
     """
     :rtype: str
     """
@@ -251,38 +247,40 @@
     padds the cells and returns the new lines
     """
     # find the maximum width of the columns
-    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split('|')]
+    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split("|")]
     max_cols = len(max_width)
     for line in lines:
-        cols = [x.rstrip() for x in line.split('|')]
+        cols = [x.rstrip() for x in line.split("|")]
         num_cols = len(cols)
 
         # don't drop any data if colspan attributes result in unequal lengths
         if num_cols < max_cols:
-            cols += [''] * (max_cols - num_cols)
+            cols += [""] * (max_cols - num_cols)
         elif max_cols < num_cols:
-            max_width += [
-                len(x) + right_margin for x in
-                cols[-(num_cols - max_cols):]
-            ]
+            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]
             max_cols = num_cols
 
-        max_width = [max(len(x) + right_margin, old_len)
-                     for x, old_len in zip(cols, max_width)]
+        max_width = [
+            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)
+        ]
 
     # reformat
     new_lines = []
     for line in lines:
-        cols = [x.rstrip() for x in line.split('|')]
-        if set(line.strip()) == set('-|'):
-            filler = '-'
-            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
-                        for x, M in zip(cols, max_width)]
+        cols = [x.rstrip() for x in line.split("|")]
+        if set(line.strip()) == set("-|"):
+            filler = "-"
+            new_cols = [
+                x.rstrip() + (filler * (M - len(x.rstrip())))
+                for x, M in zip(cols, max_width)
+            ]
         else:
-            filler = ' '
-            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
-                        for x, M in zip(cols, max_width)]
-        new_lines.append('|'.join(new_cols))
+            filler = " "
+            new_cols = [
+                x.rstrip() + (filler * (M - len(x.rstrip())))
+                for x, M in zip(cols, max_width)
+            ]
+        new_lines.append("|".join(new_cols))
     return new_lines
 
 
@@ -290,23 +288,23 @@
     """
     Provide padding for tables in the text
     """
-    lines = text.split('\n')
+    lines = text.split("\n")
     table_buffer, table_started = [], False
     new_lines = []
     for line in lines:
         # Toggle table started
-        if (config.TABLE_MARKER_FOR_PAD in line):
+        if config.TABLE_MARKER_FOR_PAD in line:
             table_started = not table_started
             if not table_started:
                 table = reformat_table(table_buffer, right_margin)
                 new_lines.extend(table)
                 table_buffer = []
-                new_lines.append('')
+                new_lines.append("")
             continue
         # Process lines
         if table_started:
             table_buffer.append(line)
         else:
             new_lines.append(line)
-    new_text = '\n'.join(new_lines)
+    new_text = "\n".join(new_lines)
     return new_text
diff --git a/requirements-dev.txt b/requirements-dev.txt
index 800eda1..488eb7d 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -1,5 +1,4 @@
-coverage==4.4.1
-py==1.4.34
+coverage==4.4.2
 pypandoc==1.4
 wheel==0.30.0
-flake8==3.4.1
+flake8==3.5.0
diff --git a/setup.cfg b/setup.cfg
index b88034e..9596a78 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,2 +1,14 @@
-[metadata]
-description-file = README.md
+[bdist_wheel]
+universal = 1
+
+[flake8]
+max_line_length = 88
+ignore =
+    E203
+    W503
+
+[isort]
+combine_as_imports = True
+include_trailing_comma = True
+line_length = 88
+multi_line_output = 3
diff --git a/setup.py b/setup.py
index 2541f54..0326ce7 100644
--- a/setup.py
+++ b/setup.py
@@ -1,92 +1,42 @@
 # coding: utf-8
-import sys
-
-from setuptools import setup, Command, find_packages
+from setuptools import setup
 
 
-def read_md_convert(f):
-    return convert(f, 'rst')
-
-
-def read_md_open(f):
-    return open(f, 'r').read()
-
-
-try:
-    from pypandoc import convert
-    read_md = read_md_convert
-except ImportError:
-    read_md = read_md_open
-
-requires_list = []
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
-else:
-    if sys.version_info <= (2, 6):
-        requires_list.append("unittest2")
-
-
-class RunTests(Command):
-    """
-    New setup.py command to run all tests for the package.
-    """
-    description = "run all tests for the package"
-
-    user_options = []
-
-    def initialize_options(self):
-        pass
-
-    def finalize_options(self):
-        pass
-
-    def run(self):
-        tests = unittest.TestLoader().discover('.')
-        runner = unittest.TextTestRunner()
-        results = runner.run(tests)
-        sys.exit(not results.wasSuccessful())
+def readall(f):
+    with open(f) as fp:
+        return fp.read()
 
 
 setup(
     name="html2text",
-    version=".".join(map(str, __import__('html2text').__version__)),
+    version=".".join(map(str, __import__("html2text").__version__)),
     description="Turn HTML into equivalent Markdown-structured text.",
-    long_description=read_md('README.md'),
+    long_description=readall("README.md"),
+    long_description_content_type="text/markdown",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
-    maintainer='Alireza Savand',
-    maintainer_email='alireza.savand@gmail.com',
-    url='https://github.com/Alir3z4/html2text/',
-    cmdclass={'test': RunTests},
-    platforms='OS Independent',
+    maintainer="Alireza Savand",
+    maintainer_email="alireza.savand@gmail.com",
+    url="https://github.com/Alir3z4/html2text/",
+    platforms="OS Independent",
     classifiers=[
-        'Development Status :: 5 - Production/Stable',
-        'Intended Audience :: Developers',
-        'License :: OSI Approved :: GNU General Public License (GPL)',
-        'Operating System :: OS Independent',
-        'Programming Language :: Python',
-        'Programming Language :: Python :: 2',
-        'Programming Language :: Python :: 2.4',
-        'Programming Language :: Python :: 2.5',
-        'Programming Language :: Python :: 2.6',
-        'Programming Language :: Python :: 2.7',
-        'Programming Language :: Python :: 3',
-        'Programming Language :: Python :: 3.0',
-        'Programming Language :: Python :: 3.2',
-        'Programming Language :: Python :: 3.3',
-        'Programming Language :: Python :: 3.4',
-        'Programming Language :: Python :: 3.5',
-        'Programming Language :: Python :: 3.6',
+        "Development Status :: 5 - Production/Stable",
+        "Intended Audience :: Developers",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2",
+        "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3",
+        "Programming Language :: Python :: 3.4",
+        "Programming Language :: Python :: 3.5",
+        "Programming Language :: Python :: 3.6",
+        "Programming Language :: Python :: 3.7",
+        "Programming Language :: Python :: Implementation :: CPython",
+        "Programming Language :: Python :: Implementation :: PyPy",
     ],
-    entry_points="""
-        [console_scripts]
-        html2text=html2text.cli:main
-    """,
-    license='GNU GPL 3',
-    requires=requires_list,
-    packages=find_packages(exclude=['test']),
-    include_package_data=True,
-    zip_safe=False,
+    python_requires=">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
+    entry_points={"console_scripts": ["html2text = html2text.cli:main"]},
+    license="GNU GPL 3",
+    packages=["html2text"],
 )
diff --git a/sitecustomize.py b/sitecustomize.py
deleted file mode 100644
index 973a265..0000000
--- a/sitecustomize.py
+++ /dev/null
@@ -1,9 +0,0 @@
-import os
-
-import coverage
-
-
-here = os.getcwd()
-config_file = os.path.join(here, '.coveragerc')
-os.environ['COVERAGE_PROCESS_START'] = config_file
-coverage.process_startup()
diff --git a/test/images_as_html.html b/test/images_as_html.html
new file mode 100644
index 0000000..de52f95
--- /dev/null
+++ b/test/images_as_html.html
@@ -0,0 +1,10 @@
+<img src='image_without_dimensions.jpg' discarded='An image without dimensions' style='ignored-style' />
+
+<img src='image_with_width.jpg' alt='An image with a width attr' width='300' data-ignored='ignored data' />
+
+<img src='image_with_width.jpg' alt='An image with a height attr' height='300' data-ignored='ignored data' />
+
+<img src='image_with_width_and_height.jpg' alt='An image with width and height' width='300' height='300' id='ignored-id' />
+<img src='image_with_width_and_height.jpg' width='300' height='300' id='ignored-id' />
+<img src='image_with_width_and_height.jpg' id='ignored-id' />
+<img id='ignored-id' />
diff --git a/test/images_as_html.md b/test/images_as_html.md
new file mode 100644
index 0000000..91f1cc1
--- /dev/null
+++ b/test/images_as_html.md
@@ -0,0 +1,7 @@
+<img src='image_without_dimensions.jpg' /> <img src='image_with_width.jpg'
+width='300' alt='An image with a width attr' /> <img
+src='image_with_width.jpg' height='300' alt='An image with a height attr' />
+<img src='image_with_width_and_height.jpg' width='300' height='300' alt='An
+image with width and height' /> <img src='image_with_width_and_height.jpg'
+width='300' height='300' /> <img src='image_with_width_and_height.jpg' />
+
diff --git a/test/lrm_after_b.html b/test/lrm_after_b.html
new file mode 100644
index 0000000..89932aa
--- /dev/null
+++ b/test/lrm_after_b.html
@@ -0,0 +1 @@
+<b>b</b>&#8206;
diff --git a/test/lrm_after_b.md b/test/lrm_after_b.md
new file mode 100644
index 0000000..9c875b2
--- /dev/null
+++ b/test/lrm_after_b.md
@@ -0,0 +1,2 @@
+**b**
+
diff --git a/test/lrm_after_i.html b/test/lrm_after_i.html
new file mode 100644
index 0000000..ab65a67
--- /dev/null
+++ b/test/lrm_after_i.html
@@ -0,0 +1 @@
+<i>Foo</i>&lrm;
\ No newline at end of file
diff --git a/test/lrm_after_i.md b/test/lrm_after_i.md
new file mode 100644
index 0000000..46c9efa
--- /dev/null
+++ b/test/lrm_after_i.md
@@ -0,0 +1,2 @@
+_Foo_
+
diff --git a/test/lrm_inside_i.html b/test/lrm_inside_i.html
new file mode 100644
index 0000000..1e51164
--- /dev/null
+++ b/test/lrm_inside_i.html
@@ -0,0 +1 @@
+<i>Foo&lrm;bar</i>
\ No newline at end of file
diff --git a/test/lrm_inside_i.md b/test/lrm_inside_i.md
new file mode 100644
index 0000000..4892629
--- /dev/null
+++ b/test/lrm_inside_i.md
@@ -0,0 +1,2 @@
+_Foo bar_
+
diff --git a/test/rlm_inside_strong.html b/test/rlm_inside_strong.html
new file mode 100644
index 0000000..34b58f7
--- /dev/null
+++ b/test/rlm_inside_strong.html
@@ -0,0 +1 @@
+<strong>Foo&rlm;bar</strong>
\ No newline at end of file
diff --git a/test/rlm_inside_strong.md b/test/rlm_inside_strong.md
new file mode 100644
index 0000000..a172d71
--- /dev/null
+++ b/test/rlm_inside_strong.md
@@ -0,0 +1,2 @@
+**Foo bar**
+
diff --git a/test/stressed_with_html_entities.html b/test/stressed_with_html_entities.html
new file mode 100644
index 0000000..de925e2
--- /dev/null
+++ b/test/stressed_with_html_entities.html
@@ -0,0 +1 @@
+<p><strong>hello</strong> world &gt;&lt;</p>
diff --git a/test/stressed_with_html_entities.md b/test/stressed_with_html_entities.md
new file mode 100644
index 0000000..6c59c1e
--- /dev/null
+++ b/test/stressed_with_html_entities.md
@@ -0,0 +1,2 @@
+**hello** world ><
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 4d8cd2e..1b41c2a 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -1,59 +1,185 @@
 import codecs
 import glob
-import html2text
-import logging
 import os
 import re
 import subprocess
 import sys
 
-if sys.version_info[:2] < (2, 7):
-    import unittest2 as unittest
-else:
-    import unittest
+import html2text
+import pytest
 
-
-logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
-                    level=logging.DEBUG)
+skip = object()
 
 
 def cleanup_eol(clean_str):
-    if os.name == 'nt' or sys.platform == 'cygwin':
+    if os.name == "nt" or sys.platform == "cygwin":
         # Fix the unwanted CR to CRCRLF replacement
         # during text pipelining on Windows/cygwin
         # on cygwin, os.name == 'posix', not nt
-        clean_str = re.sub(r'\r+', '\r', clean_str)
-        clean_str = clean_str.replace('\r\n', '\n')
+        clean_str = re.sub(r"\r+", "\r", clean_str)
+        clean_str = clean_str.replace("\r\n", "\n")
     return clean_str
 
 
-def test_module(fn, google_doc=False, **kwargs):
+def generate_testdata():
+    test_dir_name = os.path.dirname(os.path.realpath(__file__))
+    for fn in glob.glob("%s/*.html" % test_dir_name):
+        module_args = {}
+        cmdline_args = []
+        func_args = {}
+        base_fn = os.path.basename(fn).lower()
+
+        if base_fn.startswith("default_image_alt"):
+            module_args["default_image_alt"] = "Image"
+            cmdline_args.append("--default-image-alt=Image")
+            func_args = skip
+
+        if base_fn.startswith("google"):
+            module_args["google_doc"] = True
+            cmdline_args.append("--googledoc")
+            func_args = skip
+
+        if base_fn.find("unicode") >= 0:
+            module_args["unicode_snob"] = True
+            # There is no command-line option to control unicode_snob.
+            cmdline_args = skip
+            func_args = skip
+
+        if base_fn.find("flip_emphasis") >= 0:
+            module_args["emphasis_mark"] = "*"
+            module_args["strong_mark"] = "__"
+            cmdline_args.append("-e")
+            func_args = skip
+
+        if base_fn.find("escape_snob") >= 0:
+            module_args["escape_snob"] = True
+            cmdline_args.append("--escape-all")
+            func_args = skip
+
+        if base_fn.find("table_bypass") >= 0:
+            module_args["bypass_tables"] = True
+            cmdline_args.append("--bypass-tables")
+            func_args = skip
+
+        if base_fn.startswith("table_ignore"):
+            module_args["ignore_tables"] = True
+            cmdline_args.append("--ignore-tables")
+            func_args = skip
+
+        if base_fn.startswith("bodywidth"):
+            module_args["body_width"] = 0
+            cmdline_args.append("--body-width=0")
+            func_args["bodywidth"] = 0
+
+        if base_fn.startswith("protect_links"):
+            module_args["protect_links"] = True
+            cmdline_args.append("--protect-links")
+            func_args = skip
+
+        if base_fn.startswith("images_as_html"):
+            module_args["images_as_html"] = True
+            cmdline_args.append("--images-as-html")
+            func_args = skip
+
+        if base_fn.startswith("images_to_alt"):
+            module_args["images_to_alt"] = True
+            cmdline_args.append("--images-to-alt")
+            func_args = skip
+
+        if base_fn.startswith("images_with_size"):
+            module_args["images_with_size"] = True
+            cmdline_args.append("--images-with-size")
+            func_args = skip
+
+        if base_fn.startswith("single_line_break"):
+            module_args["body_width"] = 0
+            cmdline_args.append("--body-width=0")
+            module_args["single_line_break"] = True
+            cmdline_args.append("--single-line-break")
+            func_args = skip
+
+        if base_fn.startswith("no_inline_links"):
+            module_args["inline_links"] = False
+            cmdline_args.append("--reference-links")
+            func_args = skip
+
+        if base_fn.startswith("no_wrap_links"):
+            module_args["wrap_links"] = False
+            cmdline_args.append("--no-wrap-links")
+            func_args = skip
+
+        if base_fn.startswith("mark_code"):
+            module_args["mark_code"] = True
+            cmdline_args.append("--mark-code")
+            func_args = skip
+
+        if base_fn.startswith("pad_table"):
+            module_args["pad_tables"] = True
+            cmdline_args.append("--pad-tables")
+            func_args = skip
+
+        if base_fn.startswith("wrap_list_items"):
+            module_args["wrap_list_items"] = True
+            cmdline_args.append("--wrap-list-items")
+            func_args = skip
+
+        if base_fn == "inplace_baseurl_substitution.html":
+            module_args["baseurl"] = "http://brettterpstra.com"
+            module_args["body_width"] = 0
+            func_args["baseurl"] = "http://brettterpstra.com"
+            func_args["bodywidth"] = 0
+            # CLI doesn't support baseurl.
+            cmdline_args = skip
+
+        yield fn, module_args, cmdline_args, func_args
+
+
+def generate_module_testdata():
+    for fn, module_args, cmdline_args, func_args in generate_testdata():
+        yield fn, module_args
+
+
+def generate_command_testdata():
+    for fn, module_args, cmdline_args, func_args in generate_testdata():
+        if cmdline_args is not skip:
+            yield fn, cmdline_args
+
+
+def generate_function_testdata():
+    for fn, module_args, cmdline_args, func_args in generate_testdata():
+        if func_args is not skip:
+            yield fn, func_args
+
+
+@pytest.mark.parametrize("fn,module_args", generate_module_testdata())
+def test_module(fn, module_args):
     h = html2text.HTML2Text()
     h.fn = fn
 
-    if google_doc:
+    if module_args.pop("google_doc", False):
         h.google_doc = True
-        h.ul_item_mark = '-'
+        h.ul_item_mark = "-"
         h.body_width = 0
         h.hide_strikethrough = True
 
-    for k, v in kwargs.items():
+    for k, v in module_args.items():
         setattr(h, k, v)
 
     result = get_baseline(fn)
     with open(fn) as inf:
         actual = cleanup_eol(inf.read())
         actual = h.handle(actual)
-    return result, actual
+    assert result == actual
 
 
-def test_command(fn, *args):
-    args = list(args)
-    cmd = [sys.executable, '-m', 'html2text.__init__']
+@pytest.mark.parametrize("fn,cmdline_args", generate_command_testdata())
+def test_command(fn, cmdline_args):
+    args = list(cmdline_args)
+    cmd = [sys.executable, "-m", "html2text"]
 
-    if '--googledoc' in args:
-        args.remove('--googledoc')
-        cmd += ['-g', '-d', '-b', '0', '-s']
+    if "--googledoc" in args:
+        args.remove("--googledoc")
+        cmd += ["-g", "-d", "-b", "0", "-s"]
 
     if args:
         cmd.extend(args)
@@ -61,192 +187,44 @@
     cmd += [fn]
 
     result = get_baseline(fn)
-    pid = subprocess.Popen(cmd, stdout=subprocess.PIPE)
-    out, _ = pid.communicate()
+    out = subprocess.check_output(cmd)
 
-    actual = out.decode('utf8')
+    actual = out.decode("utf8")
 
     actual = cleanup_eol(actual)
 
-    return result, actual
+    assert result == actual
 
 
-def test_function(fn, **kwargs):
+@pytest.mark.parametrize("fn,func_args", generate_function_testdata())
+def test_function(fn, func_args):
     with open(fn) as inf:
-        actual = html2text.html2text(inf.read(), **kwargs)
+        actual = html2text.html2text(inf.read(), **func_args)
     result = get_baseline(fn)
-    return result, actual
-
-
-def get_dump_name(fn, suffix):
-    return '%s-%s_output.md' % (os.path.splitext(fn)[0], suffix)
+    assert result == actual
 
 
 def get_baseline_name(fn):
-    return os.path.splitext(fn)[0] + '.md'
+    return os.path.splitext(fn)[0] + ".md"
 
 
 def get_baseline(fn):
     name = get_baseline_name(fn)
-    with codecs.open(name, mode='r', encoding='utf8') as f:
+    with codecs.open(name, mode="r", encoding="utf8") as f:
         out = f.read()
     out = cleanup_eol(out)
     return out
 
 
-class TestHTML2Text(unittest.TestCase):
-
-    def test_html_escape(self):
-        self.assertEqual(
-            html2text.compat.html_escape('<pre>and then<div> & other tags'),
-            '&lt;pre&gt;and then&lt;div&gt; &amp; other tags'
-        )
-
-    def test_unescape(self):
-        self.assertEqual(
-            '<pre>and then<div> & other tags',
-            html2text.unescape(
-                '&lt;pre&gt;and then&lt;div&gt; &amp; other tags'
-            )
-        )
-
-    def _skip_certain_tags(self, h2t, tag, attrs, start):
-        if tag == 'b':
+def test_tag_callback():
+    def _skip_certain_tags(h2t, tag, attrs, start):
+        if tag == "b":
             return True
 
-    def test_tag_callback(self):
-        h = html2text.HTML2Text()
-        h.tag_callback = self._skip_certain_tags
-        ret = h.handle(
-            'this is a <b>txt</b> and this is a'
-            ' <b class="skip">with text</b> and '
-            'some <i>italics</i> too.'
-        )
-        self.assertEqual(
-            ret,
-            'this is a txt and this is a'
-            ' with text and '
-            'some _italics_ too.\n\n'
-        )
-
-
-def generate_test(fn):
-    def _test_mod(self):
-        self.maxDiff = None
-        result, actual = test_module(fn, **module_args)
-        self.assertEqual(result, actual)
-
-    def _test_cmd(self):
-        # Because there is no command-line option to control unicode_snob
-        if 'unicode_snob' not in module_args:
-            self.maxDiff = None
-            result, actual = test_command(fn, *cmdline_args)
-            self.assertEqual(result, actual)
-
-    def _test_func(self):
-        result, actual = test_function(fn, **func_args)
-        self.assertEqual(result, actual)
-
-    module_args = {}
-    cmdline_args = []
-    func_args = {}
-    base_fn = os.path.basename(fn).lower()
-
-    if base_fn.startswith('default_image_alt'):
-        module_args['default_image_alt'] = 'Image'
-        cmdline_args.append('--default-image-alt=Image')
-
-    if base_fn.startswith('google'):
-        module_args['google_doc'] = True
-        cmdline_args.append('--googledoc')
-
-    if base_fn.find('unicode') >= 0:
-        module_args['unicode_snob'] = True
-
-    if base_fn.find('flip_emphasis') >= 0:
-        module_args['emphasis_mark'] = '*'
-        module_args['strong_mark'] = '__'
-        cmdline_args.append('-e')
-
-    if base_fn.find('escape_snob') >= 0:
-        module_args['escape_snob'] = True
-        cmdline_args.append('--escape-all')
-
-    if base_fn.find('table_bypass') >= 0:
-        module_args['bypass_tables'] = True
-        cmdline_args.append('--bypass-tables')
-
-    if base_fn.startswith('table_ignore'):
-        module_args['ignore_tables'] = True
-        cmdline_args.append('--ignore-tables')
-
-    if base_fn.startswith('bodywidth'):
-        # module_args['unicode_snob'] = True
-        module_args['body_width'] = 0
-        cmdline_args.append('--body-width=0')
-        func_args['bodywidth'] = 0
-
-    if base_fn.startswith('protect_links'):
-        module_args['protect_links'] = True
-        cmdline_args.append('--protect-links')
-
-    if base_fn.startswith('images_to_alt'):
-        module_args['images_to_alt'] = True
-        cmdline_args.append('--images-to-alt')
-
-    if base_fn.startswith('images_with_size'):
-        module_args['images_with_size'] = True
-        cmdline_args.append('--images-with-size')
-
-    if base_fn.startswith('single_line_break'):
-        module_args['body_width'] = 0
-        cmdline_args.append('--body-width=0')
-        module_args['single_line_break'] = True
-        cmdline_args.append('--single-line-break')
-
-    if base_fn.startswith('no_inline_links'):
-        module_args['inline_links'] = False
-        cmdline_args.append('--reference-links')
-
-    if base_fn.startswith('no_wrap_links'):
-        module_args['wrap_links'] = False
-        cmdline_args.append('--no-wrap-links')
-
-    if base_fn.startswith('mark_code'):
-        module_args['mark_code'] = True
-        cmdline_args.append('--mark-code')
-
-    if base_fn.startswith('pad_table'):
-        module_args['pad_tables'] = True
-        cmdline_args.append('--pad-tables')
-
-    if base_fn not in ['bodywidth_newline.html', 'abbr_tag.html']:
-        test_func = None
-    else:
-        test_func = _test_func
-
-    if base_fn == 'inplace_baseurl_substitution.html':
-        module_args['baseurl'] = 'http://brettterpstra.com'
-        module_args['body_width'] = 0
-        # there is no way to specify baseurl in cli :(
-        test_cmd = None
-    else:
-        test_cmd = _test_cmd
-
-    return _test_mod, test_cmd, test_func
-
-
-# Originally from http://stackoverflow.com/questions/32899/\
-#    how-to-generate-dynamic-parametrized-unit-tests-in-python
-test_dir_name = os.path.dirname(os.path.realpath(__file__))
-for fn in glob.glob("%s/*.html" % test_dir_name):
-    test_name = 'test_%s' % os.path.splitext(os.path.basename(fn))[0].lower()
-    test_m, test_c, test_func = generate_test(fn)
-    setattr(TestHTML2Text, test_name + "_mod", test_m)
-    if test_c:
-        setattr(TestHTML2Text, test_name + "_cmd", test_c)
-    if test_func:
-        setattr(TestHTML2Text, test_name + "_func", test_func)
-
-if __name__ == "__main__":
-    unittest.main()
+    h = html2text.HTML2Text()
+    h.tag_callback = _skip_certain_tags
+    ret = h.handle(
+        'this is a <b>txt</b> and this is a <b class="skip">with text</b> and '
+        "some <i>italics</i> too."
+    )
+    assert ret == ("this is a txt and this is a with text and some _italics_ too.\n\n")
diff --git a/test/test_memleak.py b/test/test_memleak.py
index 737999c..caf0520 100644
--- a/test/test_memleak.py
+++ b/test/test_memleak.py
@@ -1,33 +1,19 @@
 import html2text
-import logging
-import sys
-if sys.version_info[:2] < (2, 7):
-    import unittest2 as unittest
-else:
-    import unittest
+
+# See https://github.com/Alir3z4/html2text/issues/13 for more information.
+
+INSTR = "miow "
 
 
-logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
-                    level=logging.DEBUG)
+def test_same_string():
+    h2t = html2text.HTML2Text()
+    result = h2t.handle(INSTR)
+    # Now, we shouldn't get leak of the previous run to the new one.
+    assert h2t.handle(INSTR) == result
 
 
-class TestMemleak(unittest.TestCase):
-    """
-    See https://github.com/Alir3z4/html2text/issues/13 for more
-    information on this.
-    """
-
-    def setUp(self):
-        self.instr = 'miow '
-
-    def test_same_string(self):
-        h2t = html2text.HTML2Text()
-        result = h2t.handle(self.instr)
-        # Now, we shouldn't get leak of the previous run to the new one
-        self.assertEqual(h2t.handle(self.instr), result)
-
-    def test_empty_string(self):
-        h2t = html2text.HTML2Text()
-        h2t.handle(self.instr)
-        # And even less when the input is empty
-        self.assertEqual(h2t.handle(''), '\n\n')
+def test_empty_string():
+    h2t = html2text.HTML2Text()
+    h2t.handle(INSTR)
+    # And even less when the input is empty.
+    assert h2t.handle("") == "\n\n"
diff --git a/test/wrap_list_items_example.html b/test/wrap_list_items_example.html
new file mode 100644
index 0000000..26d5d9d
--- /dev/null
+++ b/test/wrap_list_items_example.html
@@ -0,0 +1,13 @@
+<ul>
+<li>One two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty.</li>
+<li>One two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty.</li>
+</ul>
+
+Text between lists.
+
+<ul>
+<li>One two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty.</li>
+<li>One two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty.</li>
+</ul>
+
+Text after list.
diff --git a/test/wrap_list_items_example.md b/test/wrap_list_items_example.md
new file mode 100644
index 0000000..0708078
--- /dev/null
+++ b/test/wrap_list_items_example.md
@@ -0,0 +1,14 @@
+  * One two three four five six seven eight nine ten eleven twelve thirteen
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+  * One two three four five six seven eight nine ten eleven twelve thirteen
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+
+Text between lists.
+
+  * One two three four five six seven eight nine ten eleven twelve thirteen
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+  * One two three four five six seven eight nine ten eleven twelve thirteen
+    fourteen fifteen sixteen seventeen eighteen nineteen twenty.  
+
+Text after list.
+
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..b8de567
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,38 @@
+[tox]
+envlist =
+    black
+    flake8
+    isort
+    py{27,34,35,36,37,py,py3}
+minversion = 1.9
+
+[testenv]
+commands =
+    pytest --cov=html2text {posargs}
+deps =
+    pytest
+    pytest-cov
+
+[testenv:black]
+basepython = python3
+commands =
+    black --check --diff .
+deps =
+    black
+skip_install = true
+
+[testenv:flake8]
+basepython = python3
+commands =
+    flake8
+deps =
+    flake8
+skip_install = true
+
+[testenv:isort]
+basepython = python3
+commands =
+    isort --check-only --diff
+deps =
+    isort
+skip_install = true

=====================================================================
start time: Wed Oct 04 00:00:00 CST 2017
end time: Tue Jan 09 00:00:00 CST 2018
description: 
========
----
* Fix #188: Non-ASCII in title attribute causes encode error.
* Feature #194: Add support for the <kbd> tag.
* Feature #193: Add support for the <q> tag.

commit message: 
commit e330da7ee28a9883bab28db57abe5ab7a2349998 1507099057 -----sp :: Update the version to the latest and getting it ready to release
commit ce2c7e4388196b0589a0e551359eff2eb0506437+ 1509538359 -----sp :: fix bug #188
commit 97b9d2fdda0065c43067ae1169f3c109e1458120 1509545243 -----sp :: fix visual indent
commit d88efc1475997fc9332cb924587d574aa264179a 1511511536 -----sp :: import unicode_literals
commit 6e46640b6853c2131dcbf1285aa92dfc0b15af4f 1511525793 -----sp :: Merge pull request #190 from whuream/master
commit b7d4758bb2a5ed368246d3f69c82014fa2aa8df6+ 1514172306 -----sp :: Support the <kbd> tag
commit 9ef3b55d8cf41b7650c854f91c07d49dc3416197+ 1515280102 -----sp :: Merge pull request #194 from kurtmckee/support-the-kbd-tag
commit 8673bdcf5d7b91e279a60f6963e0cbd536d25d97+ 1515281649 -----sp :: Support the <q> tag
commit ba2bec7b77fc55672368b2ff9fa9c751940db470 1515303181 -----sp :: Allow users to configure quote characters
commit 64e5773fc27dc3dbcd9f0c8c28d5d9d882c2f729 1515306162 -----sp :: Fix unit test errors found by Travis CI

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 5c7a471..488eeec 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -26,6 +26,7 @@
 * Matt Dennewitz <mattdennewitz@gmail.com>
 * Jonathan Sundqvist <sundqvist.jonathan@gmail.com>
 * Simon Meers <gh: DrMeers>
+* Kurt McKee <contactme@kurtmckee.org>
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 19917e5..2f362d1 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,11 @@
+0000.00.00
+==========
+----
+
+* Add support for the <kbd> tag.
+* Add support for the <q> tag.
+
+
 2017.10.4
 ==========
 ----
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 20ef354..46ae36f 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -2,6 +2,7 @@
 # coding: utf-8
 """html2text: Turn HTML into equivalent Markdown-structured text."""
 from __future__ import division
+from __future__ import unicode_literals
 import re
 import sys
 
@@ -88,6 +89,8 @@
         self.pad_tables = config.PAD_TABLES  # covered in cli
         self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli
         self.tag_callback = None
+        self.open_quote = config.OPEN_QUOTE  # covered in cli
+        self.close_quote = config.CLOSE_QUOTE  # covered in cli
 
         if out is None:  # pragma: no cover
             self.out = self.outtextf
@@ -113,6 +116,7 @@
         self.pre = 0
         self.startpre = 0
         self.code = False
+        self.quote = False
         self.br_toggle = ''
         self.lastWasNL = 0
         self.lastWasList = False
@@ -420,9 +424,10 @@
                 # handle some font attributes, but leave headers clean
                 self.handle_emphasis(start, tag_style, parent_style)
 
-        if tag in ["code", "tt"] and not self.pre:
+        if tag in ["kbd", "code", "tt"] and not self.pre:
             self.o('`')  # TODO: `` `this` ``
             self.code = not self.code
+
         if tag == "abbr":
             if start:
                 self.abbr_title = None
@@ -435,6 +440,13 @@
                     self.abbr_title = None
                 self.abbr_data = ''
 
+        if tag == "q":
+            if not self.quote:
+                self.o(self.open_quote)
+            else:
+                self.o(self.close_quote)
+            self.quote = not self.quote
+
         def link_url(self, link, title=""):
             url = urlparse.urljoin(self.baseurl, link)
             title = ' "{0}"'.format(title) if title.strip() else ''
diff --git a/html2text/cli.py b/html2text/cli.py
index e155e4f..0451e02 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -215,6 +215,22 @@
         help="What to do in case of decode errors.'ignore', 'strict' and "
              "'replace' are acceptable values"
     )
+    p.add_option(
+        "--open-quote",
+        dest="open_quote",
+        action="store",
+        type="str",
+        default=config.OPEN_QUOTE,
+        help="The character used to open quotes",
+    )
+    p.add_option(
+        "--close-quote",
+        dest="close_quote",
+        action="store",
+        type="str",
+        default=config.CLOSE_QUOTE,
+        help="The character used to close quotes",
+    )
     (options, args) = p.parse_args()
 
     # process input
@@ -302,5 +318,7 @@
     h.wrap_links = options.wrap_links
     h.pad_tables = options.pad_tables
     h.default_image_alt = options.default_image_alt
+    h.open_quote = options.open_quote
+    h.close_quote = options.close_quote
 
     wrapwrite(h.handle(data))
diff --git a/html2text/config.py b/html2text/config.py
index d0656b0..6ccf387 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -1,3 +1,5 @@
+from __future__ import unicode_literals
+
 import re
 
 # Use Unicode characters instead of their ascii pseudo-replacements
@@ -136,3 +138,8 @@
 # Use a single line break after a block element rather than two line breaks.
 # NOTE: Requires body width setting to be 0.
 SINGLE_LINE_BREAK = False
+
+
+# Use double quotation marks when converting the <q> tag.
+OPEN_QUOTE = '"'
+CLOSE_QUOTE = '"'
diff --git a/test/kbd_tag.html b/test/kbd_tag.html
new file mode 100644
index 0000000..4c2b92a
--- /dev/null
+++ b/test/kbd_tag.html
@@ -0,0 +1 @@
+Press <kbd>[CTRL]+c</kbd> to copy.
diff --git a/test/kbd_tag.md b/test/kbd_tag.md
new file mode 100644
index 0000000..7fd3033
--- /dev/null
+++ b/test/kbd_tag.md
@@ -0,0 +1,2 @@
+Press `[CTRL]+c` to copy.
+
diff --git a/test/q_tag.html b/test/q_tag.html
new file mode 100644
index 0000000..63e0360
--- /dev/null
+++ b/test/q_tag.html
@@ -0,0 +1 @@
+<q>If this is a test,</q> he said, <q>then it should pass</q>.
diff --git a/test/q_tag.md b/test/q_tag.md
new file mode 100644
index 0000000..be2109b
--- /dev/null
+++ b/test/q_tag.md
@@ -0,0 +1,2 @@
+"If this is a test," he said, "then it should pass".
+

=====================================================================
start time: Mon Sep 19 00:00:00 CST 2016
end time: Wed Oct 04 00:00:00 CST 2017
description: 
==========
----
* Fix #157: Fix images link with div wrap
* Fix #55: Fix error when empty title tags
* Fix #160: The html2text tests are failing on Windows and on Cygwin due to differences in eol handling between windows/*nix
* Feature #164: Housekeeping: Add flake8 to the travis build, cleanup existing flake8 violations, add py3.6 and pypy3 to the travis build
* Fix #109: Fix for unexpanded &lt; &gt; &amp;
* Fix #143: Fix line wrapping for the lines starting with bold
* Adds support for numeric bold text indication in ``font-weight``,
  as used by Google (and presumably others.)
* Fix #173 and #142: Stripping whitespace in crucial markdown and adding whitespace as necessary
* Don't drop any cell data on tables uneven row lengths (e.g. colspan in use)

commit message: 
commit 28f688fa5f1de3393907f68afa9c78758804d42e 1474236078 -----sp :: Add vscode project conf to be ignored
commit ba5e670bc676492a22a89013e0cb56a3af6531a1 1474236271 -----sp :: Bump the version number for a release
commit 83e53adb90afa9769ed99f343c444b099e47d498 1488747373 -----sp :: Fix typos
commit 00951d8b75acf322292fb7e0f84ecae80a0cdadb 1488761483 -----sp :: Merge pull request #154 from jwilk/spelling
commit b825e34008b79ea70486ab216a4b7330c82e026d 1489664858 -----sp :: Placeholder for future changelogs
commit 3b6f059dfa04cc8694689ca73d6fcfd60a5fb95e+ 1489667371 -----sp :: fix images link with div wrap
commit ce7ab6a891a2a76758834a3a90ffcd599d8b6849 1489667533 -----sp :: Add https://github.com/Alir3z4/html2text/pull/157 to changelog
commit 69f94d3154af83efd7a42976f5b6f7844150f11d 1489668096 -----sp :: Update ChangeLog.rst
commit 072fe4f2952a1c8df23f4e7eb698c07e2ac965df 1489668134 -----sp :: Merge pull request #157 from phuslu/master
commit 2daf4e5d0cb45e36137f851e4c2400eb585680d3+ 1490373399 -----sp :: Fixed issue #55: Error when empty title on <a> tag
commit 03d44591999b878d4260facc09804ca4a6adf84e 1490373708 -----sp :: Added info to authors and changelogs files
commit d37b0416466797a1f0c254cab6b12d8001e95c96 1490374387 -----sp :: Added basic unit testing
commit db6c01b5e5d5bf7eb15ccb32128584f63981aba8 1490454035 -----sp :: Merge pull request #159 from andreskrey/issue-55-empty-title-tags
commit f060da2fc5cb9ae809d8990e5e28c03b6073595f+ 1492787044 -----sp :: fix the test failures on windows/cygwin due to \r
commit ee4862068d6e998da889e4adff8dc6053ea207fa 1492788339 -----sp :: updated AUTHORS and Changelog docs
commit 1f3ccc5a4bebc1d4ead5bf8b0b1f37ea00572575 1493025598 -----sp :: cleanup a commented line
commit 8bedca56edaaca4e3791ac89205285470f4eb30c 1493034426 -----sp :: Merge pull request #161 from ciprianmiclaus/fix_tests
commit ab8f62864d2567c588a9ea9d24a2d25f2e088648 1493036674 -----sp :: Merge pull request #1 from Alir3z4/master
commit 2a81874e477fdbcd5a1c6282c2bae70d186ab0b5+ 1493728465 -----sp :: fix flake8 violations (no functional changes)
commit a6606e9f864976ecea8f1f7db8bb8168fa74e91a+ 1493728489 -----sp :: add flake8 to the travis build
commit c047ccac0e89c52a5e0d9af9fcde538d20dacf55 1493728570 -----sp :: Merge branch 'master' of https://github.com/ciprianmiclaus/html2text into fix_tests
commit f5e45ff42d7af2fbfc848426b1e7238cb34eab42 1495653282 -----sp :: Merge pull request #165 from ciprianmiclaus/fix_tests
commit 1d2b43787653adade63e786c417054c201ec05d1 1497474702 -----sp :: Use setuptools<30 on Py3.2 as support was dropped in later versions (#168)
commit ba032c53d74c06bb7bf907ce08f525dd26d52592+ 1497567316 -----sp :: Fix #109: Fix for unexpanded &lt; &gt; &amp; (#169)
commit 7ae0a2faef2ebf1197d71927dd8924c9a71cf05a+ 1498392158 -----sp :: Fix #143: Fix line wrapping for the lines starting with **bold**
commit 513bd4f3f3867490963c99e0d7a713d2cedd4ebd 1498422432 -----sp :: pep8 issue
commit 54976f17c648ff50692849ce60ec2261e062b970 1498466584 -----sp :: Merge pull request #172 from tos-kamiya/fix-issue-143
commit 0d93c8070b25b2523cb85f8e4016a172e83e087c+ 1501198440 -----sp :: adds support for "700", "800", and "900" as bold style indicators
commit 90762734002a49fc523ebbf32bac1d7c1f684695 1501256931 -----sp :: moves changelog note into `0000.00.00` range. bold check made implicit.
commit 0ea76a4a662b35c5264db6e9ae7c87da0dd5c4c8 1501276330 -----sp :: Merge pull request #175 from mattdennewitz/implement-numeric-bold-style-values
commit b2765e279e1218104df0d90e6e4fc00134b7108d 1502489763 -----sp :: Fix issue with emphasis and whitespace
commit faf0e6b432f4d400418bfcca60a9316a97a9c103 1502489854 -----sp :: Merge branch 'master' into emphasis-fix
commit a18c358d2f3b6fa0e7a991b65007529e62a11bd7 1502491259 -----sp :: Flake fix
commit 5aa7c1103f0bfbf7f1dbb5ea359f9441699e055a 1502562445 -----sp :: Better styling and increase test cases
commit 32fcace1883968490e13b5ded5da1d44c1faa692 1502630945 -----sp :: Merge pull request #177 from jonathan-s/emphasis-fix
commit 652d4f35063001143607e1be3ccf5d283a21b778 1502910631 -----sp :: Refactor imports and title for links
commit aa67e1c3b78a2827cc396289139d85a33518d82c 1502967074 -----sp :: Merge pull request #180 from jonathan-s/import-refactoring
commit d9a372635dd3c2fdd8d57ab475ebaef300c6904d 1504665209 -----sp :: semi-gracefully handle colspan attributes on tables when padding
commit b96b3887041f7b753c0944ca32f939620d922eca 1504665560 -----sp :: update authors/changelog as per contribution guidelines
commit 686e7bae400e217258276d44c461d0f6e9beb859 1504666306 -----sp :: include test for shorter opening row
commit fc88ba906e0c2e2aecba344eac291a83e08b40cb 1504836967 -----sp :: remove redundant length calculations. See #183
commit 1317a98e2d47043f521e84d7c4ac79e821f6ab57 1504869881 -----sp :: Merge pull request #183 from DrMeers/colspan

hunks: 
diff --git a/.travis.yml b/.travis.yml
index 4d592e8..e6ecf19 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,14 +3,21 @@
   - "2.6"
   - "2.7"
   - "pypy"
+  - "pypy3"
   - "3.2"
   - "3.3"
   - "3.4"
   - "3.5"
+  - "3.6"
+before_install:
+  # Python 3.2 needs setuptools < 30 - support for Py3.2 was dropped after that version
+  - if [[ $TRAVIS_PYTHON_VERSION == '3.2' || $TRAVIS_PYTHON_VERSION == 'pypy3' ]]; then pip install -U 'setuptools<30'; fi
 install:
     - pip install coveralls==0.5
 before_script:
   - if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi
+  # flake8 doesn't support Python 2.6
+  - if [[ $TRAVIS_PYTHON_VERSION != '2.6' ]]; then pip install flake8==3.3.0;flake8 .; fi
   - export COVERAGE_PROCESS_START=$PWD/.coveragerc
 script:
   - PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text --rcfile=.coveragerc setup.py test -v
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 93c1938..5c7a471 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -20,7 +20,12 @@
 * Etienne Millon <me@emillon.org>
 * John C F <gh: critiqjo>
 * Mikhail Melnik <by.zumzoom@gmail.com>
-
+* Andres Rey
+* Ciprian Miclaus
+* Toshihiro Kamiya <kamiya@mbj.nifty.com>
+* Matt Dennewitz <mattdennewitz@gmail.com>
+* Jonathan Sundqvist <sundqvist.jonathan@gmail.com>
+* Simon Meers <gh: DrMeers>
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 846d66f..d4f6738 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,4 +1,20 @@
-xxxx.x.xx
+0000.00.00
+==========
+----
+
+* Fix #157: Fix images link with div wrap
+* Fix #55: Fix error when empty title tags
+* Fix #160: The html2text tests are failing on Windows and on Cygwin due to differences in eol handling between windows/*nix
+* Feature #164: Housekeeping: Add flake8 to the travis build, cleanup existing flake8 violations, add py3.6 and pypy3 to the travis build
+* Fix #109: Fix for unexpanded &lt; &gt; &amp;
+* Fix #143: Fix line wrapping for the lines starting with bold
+* Adds support for numeric bold text indication in `font-weight`,
+  as used by Google (and presumably others.)
+* Fix #173 and #142: Stripping whitespace in crucial markdown and adding whitespace as necessary
+* Don't drop any cell data on tables uneven row lengths (e.g. colspan in use)
+
+
+2016.9.19
 =========
 ----
 
@@ -8,6 +24,7 @@
 * Merge #126: Fix deprecation warning on py3 due to html.escape
 * Fix #145: Running test suite on Travis CI for Python 2.6.
 
+
 2016.5.29
 =========
 ----
@@ -123,7 +140,7 @@
 ==========
 ----
 
-* Feature #49: Added a images_to_alt option to discard images and keep only their alt.
+* Feature #49: Added an images_to_alt option to discard images and keep only their alt.
 * Feature #50: Protect links, surrounding them with angle brackets to avoid breaking...
 * Feature: Add ``setup.cfg`` file.
 
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index 725e200..1b52af3 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -21,7 +21,7 @@
     - LINKS_EACH_PARAGRAPH for putting links after every paragraph
     - BODY_WIDTH for wrapping long lines
     - SKIP_INTERNAL_LINKS to skip #local-anchor things
-    - INLNE_LINKS for formatting images and links
+    - INLINE_LINKS for formatting images and links
     - PROTECT_LINKS protect from line breaks
     - GOOGLE_LIST_INDENT no of pixels to indent nested lists
     - IGNORE_ANCHORS
@@ -55,7 +55,7 @@
 
     - name2cp                   :name to code point
     - hn                        :headings
-    - dumb_preperty_dict        :hash of css attrs
+    - dumb_property_dict        :hash of css attrs
     - dumb_css_parser           :returns a hash of css selectors, each
                                  containing a hash of css attrs
     - element_style             :hash of final style of element
diff --git a/docs/usage.md b/docs/usage.md
index eb2c3bc..8a81629 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -135,4 +135,4 @@
 | `--no-wrap-links`                                      | Do not wrap links during text wrapping. Implies `--reference-links`
 | `--decode-errors`=`HANDLER`                            | What to do in case an error is encountered. `ignore`, `strict`, `replace` etc.
 | `--pad-tables`                                         | Use padding to make tables look good.
-| `--default-image-alt`=`Image_Here`                     | Inserts the given `alt` text whever images are missing `alt` values.
+| `--default-image-alt`=`Image_Here`                     | Inserts the given `alt` text whenever images are missing `alt` values.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 471a46e..983deab 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -10,7 +10,7 @@
 except ImportError:  # pragma: no cover
     pass
 
-from html2text.compat import urlparse, HTMLParser, html_escape
+from html2text.compat import urlparse, HTMLParser
 from html2text import config
 
 from html2text.utils import (
@@ -30,7 +30,14 @@
     pad_tables_in_text
 )
 
-__version__ = (2016, 5, 29)
+try:
+    chr = unichr
+    nochr = unicode('')
+except NameError:
+    # python3 uses chr
+    nochr = str('')
+
+__version__ = (2016, 9, 19)
 
 
 # TODO:
@@ -119,6 +126,10 @@
         self.abbr_data = None  # last inner HTML (for abbr being defined)
         self.abbr_list = {}  # stack of abbreviations to write later
         self.baseurl = baseurl
+        self.stressed = False
+        self.preceding_stressed = False
+        self.preceding_data = None
+        self.current_tag = None
 
         try:
             del unifiable_n[name2cp('nbsp')]
@@ -147,22 +158,15 @@
     def close(self):
         HTMLParser.HTMLParser.close(self)
 
-        try:
-            nochr = unicode('')
-            unicode_character = unichr
-        except NameError:
-            nochr = str('')
-            unicode_character = chr
-
         self.pbr()
         self.o('', 0, 'end')
 
         outtext = nochr.join(self.outtextlist)
 
         if self.unicode_snob:
-            nbsp = unicode_character(name2cp('nbsp'))
+            nbsp = chr(name2cp('nbsp'))
         else:
-            nbsp = unicode_character(32)
+            nbsp = chr(32)
         try:
             outtext = outtext.replace(unicode('&nbsp_place_holder;'), nbsp)
         except NameError:
@@ -175,17 +179,10 @@
         return outtext
 
     def handle_charref(self, c):
-        charref = self.charref(c)
-        if not self.code and not self.pre:
-            charref = html_escape(charref)
-        self.handle_data(charref, True)
+        self.handle_data(self.charref(c), True)
 
     def handle_entityref(self, c):
-        entityref = self.entityref(c)
-        if (not self.code and not self.pre
-                and entityref != '&nbsp_place_holder;'):
-            entityref = html_escape(entityref)
-        self.handle_data(entityref, True)
+        self.handle_data(self.entityref(c), True)
 
     def handle_starttag(self, tag, attrs):
         self.handle_tag(tag, attrs, 1)
@@ -208,10 +205,11 @@
             i += 1
             match = 0
 
-            if ('href' in a) and a['href'] == attrs['href']:
-                if ('title' in a) or ('title' in attrs):
-                    if (('title' in a) and ('title' in attrs) and
-                                a['title'] == attrs['title']):
+            if 'href' in a and a['href'] == attrs['href']:
+                if 'title' in a or 'title' in attrs:
+                    if 'title' in a and \
+                        'title' in attrs and \
+                            a['title'] == attrs['title']:
                         match = True
                 else:
                     match = True
@@ -229,8 +227,16 @@
         # handle Google's text emphasis
         strikethrough = 'line-through' in \
                         tag_emphasis and self.hide_strikethrough
-        bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
-        italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
+
+        # google and others may mark a font's weight as `bold` or `700`
+        bold = False
+        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:
+            bold = (bold_marker in tag_emphasis
+                    and bold_marker not in parent_emphasis)
+            if bold:
+                break
+
+        italic = 'italic' in tag_emphasis and 'italic' not in parent_emphasis
         fixed = google_fixed_width_font(tag_style) and not \
             google_fixed_width_font(parent_style) and not self.pre
 
@@ -282,6 +288,7 @@
                 self.quiet -= 1
 
     def handle_tag(self, tag, attrs, start):
+        self.current_tag = tag
         # attrs is None for endtags
         if attrs is None:
             attrs = {}
@@ -292,10 +299,11 @@
             if self.tag_callback(self, tag, attrs, start) is True:
                 return
 
-        # first thing inside the anchor tag is another tag that produces some output
-        if (start and not self.maybe_automatic_link is None
-                and tag not in ['p', 'div', 'style', 'dl', 'dt']
-                and (tag != "img" or self.ignore_images)):
+        # first thing inside the anchor tag is another tag
+        # that produces some output
+        if (start and self.maybe_automatic_link is not None and
+                tag not in ['p', 'div', 'style', 'dl', 'dt'] and
+                (tag != "img" or self.ignore_images)):
             self.o("[")
             self.maybe_automatic_link = None
             self.empty_link = False
@@ -312,7 +320,8 @@
                 tag_style = element_style(attrs, self.style_def, parent_style)
                 self.tag_stack.append((tag, attrs, tag_style))
             else:
-                dummy, attrs, tag_style = self.tag_stack.pop() if self.tag_stack else (None, {}, {})
+                dummy, attrs, tag_style = self.tag_stack.pop() \
+                    if self.tag_stack else (None, {}, {})
                 if self.tag_stack:
                     parent_style = self.tag_stack[-1][2]
 
@@ -331,6 +340,8 @@
                     self.p()
                 else:
                     self.soft_br()
+            elif self.astack and tag == 'div':
+                pass
             else:
                 self.p()
 
@@ -370,15 +381,39 @@
                 self.blockquote -= 1
                 self.p()
 
+        def no_preceding_space(self):
+            return (self.preceding_data
+                    and re.match(r'[^\s]', self.preceding_data[-1]))
+
         if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
-            self.o(self.emphasis_mark)
-        if tag in ['strong', 'b'] and not self.ignore_emphasis:
-            self.o(self.strong_mark)
-        if tag in ['del', 'strike', 's']:
-            if start:
-                self.o('~~')
+            if start and no_preceding_space(self):
+                emphasis = ' ' + self.emphasis_mark
             else:
-                self.o('~~')
+                emphasis = self.emphasis_mark
+
+            self.o(emphasis)
+            if start:
+                self.stressed = True
+
+        if tag in ['strong', 'b'] and not self.ignore_emphasis:
+            if start and no_preceding_space(self):
+                strong = ' ' + self.strong_mark
+            else:
+                strong = self.strong_mark
+
+            self.o(strong)
+            if start:
+                self.stressed = True
+
+        if tag in ['del', 'strike', 's']:
+            if start and no_preceding_space(self):
+                strike = ' ~~'
+            else:
+                strike = '~~'
+
+            self.o(strike)
+            if start:
+                self.stressed = True
 
         if self.google_doc:
             if not self.inheader:
@@ -400,17 +435,23 @@
                     self.abbr_title = None
                 self.abbr_data = ''
 
+        def link_url(self, link, title=""):
+            url = urlparse.urljoin(self.baseurl, link)
+            title = ' "{0}"'.format(title) if title.strip() else ''
+            self.o(']({url}{title})'.format(url=escape_md(url),
+                                            title=title))
+
         if tag == "a" and not self.ignore_links:
             if start:
-                if ('href' in attrs) and \
-                        (attrs['href'] is not None) and \
-                        not (self.skip_internal_links and
-                                 attrs['href'].startswith('#')):
+                if 'href' in attrs and \
+                    attrs['href'] is not None and not \
+                        (self.skip_internal_links and
+                            attrs['href'].startswith('#')):
                     self.astack.append(attrs)
                     self.maybe_automatic_link = attrs['href']
                     self.empty_link = True
                     if self.protect_links:
-                        attrs['href'] = '<'+attrs['href']+'>'
+                        attrs['href'] = '<' + attrs['href'] + '>'
                 else:
                     self.astack.append(None)
             else:
@@ -425,12 +466,12 @@
                             self.maybe_automatic_link = None
                         if self.inline_links:
                             try:
-                                title = escape_md(a['title'])
+                                title = a['title'] if a['title'] else ''
+                                title = escape_md(title)
                             except KeyError:
-                                self.o("](" + escape_md(urlparse.urljoin(self.baseurl, a['href'])) + ")")
+                                link_url(self, a['href'], '')
                             else:
-                                self.o("](" + escape_md(urlparse.urljoin(self.baseurl, a['href']))
-                                       + ' "' + title + '" )')
+                                link_url(self, a['href'], title)
                         else:
                             i = self.previousIndex(a)
                             if i is not None:
@@ -463,7 +504,7 @@
                     return
 
                 # If we have a link to create, output the start
-                if not self.maybe_automatic_link is None:
+                if self.maybe_automatic_link is not None:
                     href = self.maybe_automatic_link
                     if self.images_to_alt and escape_md(alt) == href and \
                             self.absolute_url_matcher.match(href):
@@ -483,7 +524,16 @@
                     self.o("![" + escape_md(alt) + "]")
                     if self.inline_links:
                         href = attrs.get('href') or ''
-                        self.o("(" + escape_md(urlparse.urljoin(self.baseurl, href)) + ")")
+                        self.o(
+                            "(" +
+                            escape_md(
+                                urlparse.urljoin(
+                                    self.baseurl,
+                                    href
+                                )
+                            ) +
+                            ")"
+                        )
                     else:
                         i = self.previousIndex(attrs)
                         if i is not None:
@@ -576,11 +626,11 @@
                     if start:
                         self.table_start = True
                         if self.pad_tables:
-                            self.o("<"+config.TABLE_MARKER_FOR_PAD+">")
+                            self.o("<" + config.TABLE_MARKER_FOR_PAD + ">")
                             self.o("  \n")
                     else:
                         if self.pad_tables:
-                            self.o("</"+config.TABLE_MARKER_FOR_PAD+">")
+                            self.o("</" + config.TABLE_MARKER_FOR_PAD + ">")
                             self.o("  \n")
                 if tag in ["td", "th"] and start:
                     if self.split_next_td:
@@ -654,8 +704,9 @@
                 return
 
             if self.startpre:
-                #self.out(" :") #TODO: not output when already one there
-                if not data.startswith("\n"):  # <pre>stuff...
+                # self.out(" :") #TODO: not output when already one there
+                if not data.startswith("\n") and not data.startswith("\r\n"):
+                    # <pre>stuff...
                     data = "\n" + data
                 if self.mark_code:
                     self.out("\n[code]")
@@ -668,7 +719,7 @@
             if self.pre:
                 if not self.list:
                     bq += "    "
-                #else: list content is already partially indented
+                # else: list content is already partially indented
                 for i in range(len(self.list)):
                     bq += "    "
                 data = data.replace("\n", "\n" + bq)
@@ -700,8 +751,8 @@
                     self.out(' ')
                 self.space = 0
 
-            if self.a and ((self.p_p == 2 and self.links_each_paragraph)
-                           or force == "end"):
+            if self.a and ((self.p_p == 2 and self.links_each_paragraph) or
+                           force == "end"):
                 if force == "end":
                     self.out("\n")
 
@@ -731,13 +782,25 @@
             self.outcount += 1
 
     def handle_data(self, data, entity_char=False):
+        if self.stressed:
+            data = data.strip()
+            self.stressed = False
+            self.preceding_stressed = True
+        elif (self.preceding_stressed
+              and re.match(r'[^\s.!?]', data[0])
+              and not hn(self.current_tag)
+              and self.current_tag not in ['a', 'code', 'pre']):
+            # should match a letter or common punctuation
+            data = ' ' + data
+            self.preceding_stressed = False
+
         if self.style:
             self.style_def.update(dumb_css_parser(data))
 
-        if not self.maybe_automatic_link is None:
+        if self.maybe_automatic_link is not None:
             href = self.maybe_automatic_link
-            if (href == data and self.absolute_url_matcher.match(href)
-                    and self.use_automatic_links):
+            if (href == data and self.absolute_url_matcher.match(href) and
+                    self.use_automatic_links):
                 self.o("<" + data + ">")
                 self.empty_link = False
                 return
@@ -748,6 +811,7 @@
 
         if not self.code and not self.pre and not entity_char:
             data = escape_md_section(data, snob=self.escape_snob)
+        self.preceding_data = data
         self.o(data, 1)
 
     def unknown_decl(self, data):  # pragma: no cover
@@ -764,10 +828,7 @@
             return unifiable_n[c]
         else:
             try:
-                try:
-                    return unichr(c)
-                except NameError:  # Python3
-                    return chr(c)
+                return chr(c)
             except ValueError:  # invalid unicode
                 return ''
 
@@ -783,10 +844,7 @@
                 if c == 'nbsp':
                     return config.UNIFIABLE[c]
                 else:
-                    try:
-                        return unichr(name2cp(c))
-                    except NameError:  # Python3
-                        return chr(name2cp(c))
+                    return chr(name2cp(c))
 
     def replaceEntities(self, s):
         s = s.group(1)
@@ -809,7 +867,7 @@
         nest_count = 0
         if 'margin-left' in style:
             nest_count = int(style['margin-left'][:-2]) \
-                         // self.google_list_indent
+                // self.google_list_indent
 
         return nest_count
 
diff --git a/html2text/cli.py b/html2text/cli.py
index c935787..e155e4f 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -158,7 +158,8 @@
         action="store_true",
         dest="ignore_tables",
         default=config.IGNORE_TABLES,
-        help="Ignore table-related tags (table, th, td, tr) while keeping rows."
+        help="Ignore table-related tags (table, th, td, tr) "
+             "while keeping rows."
     )
     p.add_option(
         "--single-line-break",
@@ -211,7 +212,8 @@
         action="store",
         type="string",
         default=config.DECODE_ERRORS,
-        help="What to do in case of decode errors.'ignore', 'strict' and 'replace' are acceptable values"
+        help="What to do in case of decode errors.'ignore', 'strict' and "
+             "'replace' are acceptable values"
     )
     (options, args) = p.parse_args()
 
@@ -226,8 +228,11 @@
         file_ = args[0]
 
         if file_.startswith('http://') or file_.startswith('https://'):
-            warnings.warn("Support for retrieving html over network is set for deprecation by version (2017, 1, x)",
-                    DeprecationWarning)
+            warnings.warn(
+                "Support for retrieving html over network is set for "
+                "deprecation by version (2017, 1, x)",
+                DeprecationWarning
+            )
             baseurl = file_
             j = urllib.urlopen(baseurl)
             data = j.read()
@@ -235,7 +240,8 @@
                 try:
                     from feedparser import _getCharacterEncoding as enc
                 except ImportError:
-                    enc = lambda x, y: ('utf-8', 1)
+                    def enc(x, y):
+                        return ('utf-8', 1)
                 encoding = enc(j.headers, data)[0]
                 if encoding == 'us-ascii':
                     encoding = 'utf-8'
@@ -245,7 +251,8 @@
                 try:
                     from chardet import detect
                 except ImportError:
-                    detect = lambda x: {'encoding': 'utf-8'}
+                    def detect(x):
+                        return {'encoding': 'utf-8'}
                 encoding = detect(data)['encoding']
     else:
         data = wrap_read()
diff --git a/html2text/compat.py b/html2text/compat.py
index 60907ab..f669f98 100644
--- a/html2text/compat.py
+++ b/html2text/compat.py
@@ -13,5 +13,9 @@
     import html.parser as HTMLParser
     import urllib.request as urllib
     from html import escape
+
     def html_escape(s):
         return escape(s, quote=False)
+
+
+__all__ = ['HTMLParser', 'html_escape', 'htmlentitydefs', 'urllib', 'urlparse']
diff --git a/html2text/config.py b/html2text/config.py
index 48e1784..d0656b0 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -1,6 +1,6 @@
 import re
 
-# Use Unicode characters instead of their ascii psuedo-replacements
+# Use Unicode characters instead of their ascii pseudo-replacements
 UNICODE_SNOB = 0
 
 # Marker to use for marking tables for padding post processing
@@ -31,6 +31,9 @@
 # Number of pixels Google indents nested lists
 GOOGLE_LIST_INDENT = 36
 
+# Values Google and others may use to indicate bold text
+BOLD_TEXT_STYLE_VALUES = ('bold', '700', '800', '900')
+
 IGNORE_ANCHORS = False
 IGNORE_IMAGES = False
 IMAGES_TO_ALT = False
@@ -41,7 +44,8 @@
 DEFAULT_IMAGE_ALT = ''
 PAD_TABLES = False
 
-# Convert links with same href and text to <href> format if they are absolute links
+# Convert links with same href and text to <href> format
+# if they are absolute links
 USE_AUTOMATIC_LINKS = True
 
 # For checking space-only lines on line 771
@@ -52,7 +56,10 @@
 RE_UNORDERED_LIST_MATCHER = re.compile(r'[-\*\+]\s')
 RE_MD_CHARS_MATCHER = re.compile(r"([\\\[\]\(\)])")
 RE_MD_CHARS_MATCHER_ALL = re.compile(r"([`\*_{}\[\]\(\)#!])")
-RE_LINK = re.compile(r"(\[.*?\] ?\(.*?\))|(\[.*?\]:.*?)")  # to find links in the text
+
+# to find links in the text
+RE_LINK = re.compile(r"(\[.*?\] ?\(.*?\))|(\[.*?\]:.*?)")
+
 RE_MD_DOT_MATCHER = re.compile(r"""
     ^             # start of line
     (\s*\d+)      # optional whitespace and a number
@@ -126,6 +133,6 @@
 IGNORE_TABLES = False
 
 
-# Use a single line break after a block element rather an two line breaks.
+# Use a single line break after a block element rather than two line breaks.
 # NOTE: Requires body width setting to be 0.
 SINGLE_LINE_BREAK = False
diff --git a/html2text/utils.py b/html2text/utils.py
index bd6fc63..d382e00 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -12,7 +12,6 @@
 
 
 unifiable_n = {}
-
 for k in config.UNIFIABLE.keys():
     unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
 
@@ -191,7 +190,7 @@
     # I'm not sure what this is for; I thought it was to detect lists,
     # but there's a <br>-inside-<span> case in one of the tests that
     # also depends upon it.
-    if stripped[0:1] == '-' or stripped[0:1] == '*':
+    if stripped[0:1] in ('-', '*') and not stripped[0:2] == '**':
         return True
 
     # If the text begins with a single -, *, or +, followed by a space,
@@ -245,6 +244,7 @@
 
     return text
 
+
 def reformat_table(lines, right_margin):
     """
     Given the lines of a table
@@ -252,11 +252,24 @@
     """
     # find the maximum width of the columns
     max_width = [len(x.rstrip()) + right_margin for x in lines[0].split('|')]
+    max_cols = len(max_width)
     for line in lines:
         cols = [x.rstrip() for x in line.split('|')]
+        num_cols = len(cols)
+
+        # don't drop any data if colspan attributes result in unequal lengths
+        if num_cols < max_cols:
+            cols += [''] * (max_cols - num_cols)
+        elif max_cols < num_cols:
+            max_width += [
+                len(x) + right_margin for x in
+                cols[-(num_cols - max_cols):]
+            ]
+            max_cols = num_cols
+
         max_width = [max(len(x) + right_margin, old_len)
                      for x, old_len in zip(cols, max_width)]
-    
+
     # reformat
     new_lines = []
     for line in lines:
@@ -272,15 +285,16 @@
         new_lines.append('|'.join(new_cols))
     return new_lines
 
+
 def pad_tables_in_text(text, right_margin=1):
     """
     Provide padding for tables in the text
     """
     lines = text.split('\n')
-    table_buffer, altered_lines, table_widths, table_started = [], [], [], False
+    table_buffer, table_started = [], False
     new_lines = []
     for line in lines:
-        # Toogle table started
+        # Toggle table started
         if (config.TABLE_MARKER_FOR_PAD in line):
             table_started = not table_started
             if not table_started:
diff --git a/requirements-dev.txt b/requirements-dev.txt
index a5b00a3..e9fdc43 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -2,3 +2,4 @@
 py==1.4.31
 pypandoc==1.1.3
 wheel==0.24.0
+flake8==3.3.0
diff --git a/setup.py b/setup.py
index f8c2d24..5968e74 100644
--- a/setup.py
+++ b/setup.py
@@ -3,11 +3,20 @@
 
 from setuptools import setup, Command, find_packages
 
+
+def read_md_convert(f):
+    return convert(f, 'rst')
+
+
+def read_md_open(f):
+    return open(f, 'r').read()
+
+
 try:
     from pypandoc import convert
-    read_md = lambda f: convert(f, 'rst')
+    read_md = read_md_convert
 except ImportError:
-    read_md = lambda f: open(f, 'r').read()
+    read_md = read_md_open
 
 requires_list = []
 try:
diff --git a/test/bold_long_line.html b/test/bold_long_line.html
new file mode 100644
index 0000000..2aba478
--- /dev/null
+++ b/test/bold_long_line.html
@@ -0,0 +1,3 @@
+<p>
+<b>text</b> and a very long long long long long long long long long long long long long long long long long long long long line
+</p>
diff --git a/test/bold_long_line.md b/test/bold_long_line.md
new file mode 100644
index 0000000..fc1119e
--- /dev/null
+++ b/test/bold_long_line.md
@@ -0,0 +1,3 @@
+**text** and a very long long long long long long long long long long long
+long long long long long long long long long line
+
diff --git a/test/emphasis_preserved_whitespace.html b/test/emphasis_preserved_whitespace.html
new file mode 100644
index 0000000..7fcd9b8
--- /dev/null
+++ b/test/emphasis_preserved_whitespace.html
@@ -0,0 +1,20 @@
+<p><em> emphasis </em></p>
+<p><em>emphasis: </em>some text</p>
+<p><em>repeat: </em>again</p>
+
+<p><b> bold </b></p>
+<p><b>bold: </b>some text</p>
+<p><b>repeat: </b>again</p>
+
+<p><strike> strike </strike></p>
+<p><strike>strike: </strike>some text</p>
+<p><strike>strike: </strike>again</p>
+
+<p>separate<em> emphasis</em> some more text</p>
+
+<!-- Various punctuation has no space  -->
+<p><em>emphasis</em>.</p>
+<p><em>emphasis</em>?</p>
+<p><em>emphasis</em>!</p>
+
+<p><em>em1</em><em>em2</em></p>
diff --git a/test/emphasis_preserved_whitespace.md b/test/emphasis_preserved_whitespace.md
new file mode 100644
index 0000000..42bb916
--- /dev/null
+++ b/test/emphasis_preserved_whitespace.md
@@ -0,0 +1,28 @@
+_emphasis_
+
+_emphasis:_ some text
+
+_repeat:_ again
+
+**bold**
+
+**bold:** some text
+
+**repeat:** again
+
+~~strike~~
+
+~~strike:~~ some text
+
+~~strike:~~ again
+
+separate _emphasis_ some more text
+
+_emphasis_.
+
+_emphasis_?
+
+_emphasis_!
+
+_em1_ _em2_
+
diff --git a/test/empty-link.html b/test/empty-link.html
index 7f1c3eb..dad41d0 100644
--- a/test/empty-link.html
+++ b/test/empty-link.html
@@ -1,6 +1,6 @@
 <h1>Processing empty hyperlinks</h1>
 
-<p>This test checks wheter empty hyperlinks still appear in the markdown result.</p>
+<p>This test checks whether empty hyperlinks still appear in the markdown result.</p>
 
 <a href="http://some.link"></a>
 <a href="http://some.link"><p></p></a>
\ No newline at end of file
diff --git a/test/empty-link.md b/test/empty-link.md
index fbaf01b..7a38588 100644
--- a/test/empty-link.md
+++ b/test/empty-link.md
@@ -1,6 +1,6 @@
 # Processing empty hyperlinks
 
-This test checks wheter empty hyperlinks still appear in the markdown result.
+This test checks whether empty hyperlinks still appear in the markdown result.
 
 [](http://some.link)
 
diff --git a/test/empty-title-tag.html b/test/empty-title-tag.html
new file mode 100644
index 0000000..bc8d3c5
--- /dev/null
+++ b/test/empty-title-tag.html
@@ -0,0 +1 @@
+<a href="test.html" title>This is an A tag with an empty title property</a>
\ No newline at end of file
diff --git a/test/empty-title-tag.md b/test/empty-title-tag.md
new file mode 100644
index 0000000..ce34228
--- /dev/null
+++ b/test/empty-title-tag.md
@@ -0,0 +1,2 @@
+[This is an A tag with an empty title property](test.html)
+
diff --git a/test/google-like_font-properties.html b/test/google-like_font-properties.html
index cff3ebd..6f330b6 100644
--- a/test/google-like_font-properties.html
+++ b/test/google-like_font-properties.html
@@ -5,6 +5,12 @@
   <BODY>
     <p><span style="font-weight: bold">font-weight: bold</span></p>
     <P><SPAN STYLE="FONT-WEIGHT: BOLD">FONT-WEIGHT: BOLD</SPAN></P>
+    <P><SPAN STYLE="font-weight: 700">font-weight: 700</SPAN></P>
+    <P><SPAN STYLE="FONT-WEIGHT: 700">FONT-WEIGHT: 700</SPAN></P>
+    <P><SPAN STYLE="font-weight: 800">font-weight: 800</SPAN></P>
+    <P><SPAN STYLE="FONT-WEIGHT: 800">FONT-WEIGHT: 800</SPAN></P>
+    <P><SPAN STYLE="font-weight: 900">font-weight: 900</SPAN></P>
+    <P><SPAN STYLE="FONT-WEIGHT: 900">FONT-WEIGHT: 900</SPAN></P>
     <p><span style="font-style: italic">font-style: italic</span></p>
     <P><SPAN STYLE="FONT-STYLE: ITALIC">FONT-STYLE: ITALIC</SPAN></P>
     <p><span style="font-weight: bold;font-style: italic">
diff --git a/test/google-like_font-properties.md b/test/google-like_font-properties.md
index c7a0312..c8a2e9c 100644
--- a/test/google-like_font-properties.md
+++ b/test/google-like_font-properties.md
@@ -1,5 +1,11 @@
 **font-weight: bold**   
 **FONT-WEIGHT: BOLD**   
+**font-weight: 700**   
+**FONT-WEIGHT: 700**   
+**font-weight: 800**   
+**FONT-WEIGHT: 800**   
+**font-weight: 900**   
+**FONT-WEIGHT: 900**   
 _font-style: italic_   
 _FONT-STYLE: ITALIC_   
 _**font-weight: bold;font-style: italic**_   
diff --git a/test/html-escaping.html b/test/html-escaping.html
index b6f1da7..9d805b0 100644
--- a/test/html-escaping.html
+++ b/test/html-escaping.html
@@ -1,3 +1,3 @@
-<p>Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output</p>
-<pre>...unless that escaped HTML is in a &lt;pre&gt; tag</pre>
+<p>Escaped HTML like &lt;div&gt; or &amp; should NOT remain escaped on output</p>
+<pre>...even when that escaped HTML is in a &lt;pre&gt; tag</pre>
 <code>...or a &lt;code&gt; tag</code>
\ No newline at end of file
diff --git a/test/html-escaping.md b/test/html-escaping.md
index 19e91ee..41a318b 100644
--- a/test/html-escaping.md
+++ b/test/html-escaping.md
@@ -1,8 +1,8 @@
-Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output
+Escaped HTML like <div> or & should NOT remain escaped on output
 
     
     
-    ...unless that escaped HTML is in a <pre> tag
+    ...even when that escaped HTML is in a <pre> tag
 
 `...or a <code> tag`
 
diff --git a/test/images_with_div_wrap.html b/test/images_with_div_wrap.html
new file mode 100644
index 0000000..6fa6678
--- /dev/null
+++ b/test/images_with_div_wrap.html
@@ -0,0 +1 @@
+<a href="http://example.com"><div><img src="http://example.com/img.png"/></div></a>
diff --git a/test/images_with_div_wrap.md b/test/images_with_div_wrap.md
new file mode 100644
index 0000000..92c3722
--- /dev/null
+++ b/test/images_with_div_wrap.md
@@ -0,0 +1,2 @@
+[![](http://example.com/img.png)](http://example.com)
+
diff --git a/test/link_titles.md b/test/link_titles.md
index d68fb7e..930c691 100644
--- a/test/link_titles.md
+++ b/test/link_titles.md
@@ -1,3 +1,3 @@
-[ first example](http://example.com "MyTitle" )  
+[ first example](http://example.com "MyTitle")  
 [ second example](http://example.com)
 
diff --git a/test/list_tags_example.html b/test/list_tags_example.html
index d0a8be2..9a5ba7a 100644
--- a/test/list_tags_example.html
+++ b/test/list_tags_example.html
@@ -34,6 +34,6 @@
 </ol>
 
 <ul style="list-style-type:ordered;">
-<li>somthing else here</li>
+<li>something else here</li>
 <li>some item</li>
 </ul>
diff --git a/test/list_tags_example.md b/test/list_tags_example.md
index 151249d..71568ef 100644
--- a/test/list_tags_example.md
+++ b/test/list_tags_example.md
@@ -33,6 +33,6 @@
   2. some item
   3. some item
 
-  * somthing else here
+  * something else here
   * some item
 
diff --git a/test/pad_table.html b/test/pad_table.html
index d2966aa..3fdd40c 100644
--- a/test/pad_table.html
+++ b/test/pad_table.html
@@ -22,5 +22,30 @@
         <tr> <td>Content 1</td> <td>Content 2 longer</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
     </table>
 
-something else entirely
+something else entirely<br>
+
+    <table>
+      <thead>
+        <tr><th>One</th><th>Two</th><th>Three</th></tr>
+      </thead>
+      <tbody>
+        <tr><td>A</td><td>B</td><th>C</th></tr>
+        <tr><td>A</td><td colspan="2">B+C</td></tr>
+        <tr><td colspan="2">A+B</td><td>C</td></tr>
+        <tr><td colspan="3">A+B+C</td></tr>
+      </tbody>
+    </table>
+
+    <table>
+      <thead>
+        <tr><th colspan="2">One+Two</th><th>Three</th></tr>
+      </thead>
+      <tbody>
+        <tr><td>A</td><td>B</td><th>C</th></tr>
+        <tr><td>A</td><td colspan="2">B+C</td></tr>
+        <tr><td colspan="2">A+B</td><td>C</td></tr>
+        <tr><td colspan="3">A+B+C</td></tr>
+      </tbody>
+    </table>
+
 </body> </html>
diff --git a/test/pad_table.md b/test/pad_table.md
index 70ad82f..167fc6e 100644
--- a/test/pad_table.md
+++ b/test/pad_table.md
@@ -24,5 +24,19 @@
 Content 1 | Content 2        | ![200](http://lorempixel.com/200/200) Image! 
 Content 1 | Content 2 longer | ![200](http://lorempixel.com/200/200) Image! 
 
-something else entirely
+something else entirely  
+One   | Two | Three 
+------|-----|-------
+A     | B   | C     
+A     | B+C 
+A+B   | C   
+A+B+C 
+
+One+Two | Three 
+--------|-------
+A       | B     | C 
+A       | B+C   
+A+B     | C     
+A+B+C   
+
 
diff --git a/test/pre.html b/test/pre.html
index 171074b..9872fc2 100644
--- a/test/pre.html
+++ b/test/pre.html
@@ -1,6 +1,6 @@
 <html>
   <head>
-    <title>initial crowsed pre handling test #1</title>
+    <title>initial crowded pre handling test #1</title>
   </head>
   <body>
 <pre>a
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 8a0259d..4d8cd2e 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -1,5 +1,7 @@
 import codecs
 import glob
+import html2text
+import logging
 import os
 import re
 import subprocess
@@ -9,12 +11,20 @@
     import unittest2 as unittest
 else:
     import unittest
-import logging
+
 
 logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
                     level=logging.DEBUG)
 
-import html2text
+
+def cleanup_eol(clean_str):
+    if os.name == 'nt' or sys.platform == 'cygwin':
+        # Fix the unwanted CR to CRCRLF replacement
+        # during text pipelining on Windows/cygwin
+        # on cygwin, os.name == 'posix', not nt
+        clean_str = re.sub(r'\r+', '\r', clean_str)
+        clean_str = clean_str.replace('\r\n', '\n')
+    return clean_str
 
 
 def test_module(fn, google_doc=False, **kwargs):
@@ -31,9 +41,9 @@
         setattr(h, k, v)
 
     result = get_baseline(fn)
-    inf = open(fn)
-    actual = h.handle(inf.read())
-    inf.close()
+    with open(fn) as inf:
+        actual = cleanup_eol(inf.read())
+        actual = h.handle(actual)
     return result, actual
 
 
@@ -56,11 +66,7 @@
 
     actual = out.decode('utf8')
 
-    if os.name == 'nt':
-        # Fix the unwanted CR to CRCRLF replacement
-        # during text pipelining on Windows/cygwin
-        actual = re.sub(r'\r+', '\r', actual)
-        actual = actual.replace('\r\n', '\n')
+    actual = cleanup_eol(actual)
 
     return result, actual
 
@@ -82,30 +88,62 @@
 
 def get_baseline(fn):
     name = get_baseline_name(fn)
-    f = codecs.open(name, mode='r', encoding='utf8')
-    out = f.read()
-    f.close()
+    with codecs.open(name, mode='r', encoding='utf8') as f:
+        out = f.read()
+    out = cleanup_eol(out)
     return out
 
 
 class TestHTML2Text(unittest.TestCase):
-    pass
+
+    def test_html_escape(self):
+        self.assertEqual(
+            html2text.compat.html_escape('<pre>and then<div> & other tags'),
+            '&lt;pre&gt;and then&lt;div&gt; &amp; other tags'
+        )
+
+    def test_unescape(self):
+        self.assertEqual(
+            '<pre>and then<div> & other tags',
+            html2text.unescape(
+                '&lt;pre&gt;and then&lt;div&gt; &amp; other tags'
+            )
+        )
+
+    def _skip_certain_tags(self, h2t, tag, attrs, start):
+        if tag == 'b':
+            return True
+
+    def test_tag_callback(self):
+        h = html2text.HTML2Text()
+        h.tag_callback = self._skip_certain_tags
+        ret = h.handle(
+            'this is a <b>txt</b> and this is a'
+            ' <b class="skip">with text</b> and '
+            'some <i>italics</i> too.'
+        )
+        self.assertEqual(
+            ret,
+            'this is a txt and this is a'
+            ' with text and '
+            'some _italics_ too.\n\n'
+        )
 
 
 def generate_test(fn):
-    def test_mod(self):
+    def _test_mod(self):
         self.maxDiff = None
         result, actual = test_module(fn, **module_args)
         self.assertEqual(result, actual)
 
-    def test_cmd(self):
+    def _test_cmd(self):
         # Because there is no command-line option to control unicode_snob
         if 'unicode_snob' not in module_args:
             self.maxDiff = None
             result, actual = test_command(fn, *cmdline_args)
             self.assertEqual(result, actual)
 
-    def test_func(self):
+    def _test_func(self):
         result, actual = test_function(fn, **func_args)
         self.assertEqual(result, actual)
 
@@ -184,14 +222,19 @@
 
     if base_fn not in ['bodywidth_newline.html', 'abbr_tag.html']:
         test_func = None
+    else:
+        test_func = _test_func
 
     if base_fn == 'inplace_baseurl_substitution.html':
         module_args['baseurl'] = 'http://brettterpstra.com'
         module_args['body_width'] = 0
         # there is no way to specify baseurl in cli :(
         test_cmd = None
+    else:
+        test_cmd = _test_cmd
 
-    return test_mod, test_cmd, test_func
+    return _test_mod, test_cmd, test_func
+
 
 # Originally from http://stackoverflow.com/questions/32899/\
 #    how-to-generate-dynamic-parametrized-unit-tests-in-python
diff --git a/test/test_memleak.py b/test/test_memleak.py
index 27999fb..737999c 100644
--- a/test/test_memleak.py
+++ b/test/test_memleak.py
@@ -1,14 +1,15 @@
+import html2text
+import logging
 import sys
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
 else:
     import unittest
-import logging
+
+
 logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
                     level=logging.DEBUG)
 
-import html2text
-
 
 class TestMemleak(unittest.TestCase):
     """

=====================================================================
start time: Sun May 29 00:00:00 CST 2016
end time: Mon Sep 19 00:00:00 CST 2016
description: 
=========
----
* Default image alt text option created and set to a default of empty string "" to maintain backward compatibility
* Fix #136: --default-image-alt now takes a string as argument
* Fix #113: Stop changing quiet levels on \/script tags.
* Merge #126: Fix deprecation warning on py3 due to html.escape
* Fix #145: Running test suite on Travis CI for Python 2.6.

commit message: 
commit e1872ba264ca053e117565899f55b214f0f7ddb1 1464517725 -----sp :: - change pad_tables to pad-tables in the cli option - Add to usage
commit df1d723e30e3c4acad2e89778a3487b1e7e173da 1464522410 -----sp :: Table padding option (#130)
commit ffce225e5ec3ad9c8a97d8afb00aef5d452993e1 1464538388 -----sp :: Fix a typo on ChangeLog
commit 7478af87bc561c43143ee6217a729ecb482e7871 1464538443 -----sp :: Remove Python 3.1 from the classifiers
commit 751d1ce5f1c755003488a4248664982248c3d253 1464538462 -----sp :: Bump the version to today for release
commit 0e8caba8184646d254bb6c8fa910b7c86dfccde4 1466572285 -----sp :: CSS case-insensitive fix (#134)
commit 04c005ca0794427b561d2e806919a1ec9b30a28c 1467112423 -----sp :: Merge branch 'master' of github.com:Alir3z4/html2text
commit b4c600a5b534851379cbb9b59ad3d142ba3fe4ef 1467193555 -----sp :: add option to ignore tables (#135)
commit 0add20636338f21a298242e5e380d69ec0a215f3+ 1468058201 -----sp :: - Added tests for default image alt text - added config, cli, __init__ changes - the __init__ change uses short circuiting behaviour of `or` in python - cli adds an option to set this via command line
commit 947a7e5a9ed22cb296c86004a596f68a64aadf96 1468058604 -----sp :: Mention image-alt fix in changelog
commit 64fe95e34ec6d63abd1ae96d25b761de02c09493 1468058697 -----sp :: Remove check for '/script>' in handle_data to fix #133 (#137)
commit ab973d0f38c7fe1994bb5fb03d18869fec0312af+ 1468058867 -----sp :: Added default-image-alt to docs
commit a4f975d82ce42f93bbca6d0b3e17248b27c0f47a 1468058966 -----sp :: Added #137 to changelog
commit e5fd147e1be500eff3aa8bae24bf1dfef88e97dd+ 1468118897 -----sp :: Fix tests which broke on backward compatibility
commit 6da08ee83ad5da99c594f3ce06b1ffb8d39bad53+ 1468118993 -----sp :: Update changelog with default image alt as empty
commit d842807519040570c91b44d01e4006413177f705 1468167902 -----sp :: Merge pull request #138 from theSage21/master
commit d3247c2ada04c63f9c6d08953cd5dc2dd281a69e+ 1469020723 -----sp :: Fix DeprecationWarning on Python3: use html.escape (#126)
commit 1beb8c611b5f457eb2cdda4b4d6235b55bb9bbcc 1469445767 -----sp :: Update for #126
commit d1aa1af73b9f14252795b08ee3c24008b0b4ad10 1472648222 -----sp :: Docs link
commit 6e097d01ef2ae9d691487dde50fe05ab62bf257c+ 1473980908 -----sp :: Trying to fix Travis CI build for Python 2.6 (#145)

hunks: 
diff --git a/.travis.yml b/.travis.yml
index fec022b..4d592e8 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,7 +10,7 @@
 install:
     - pip install coveralls==0.5
 before_script:
-  - '[ "${TRAVIS_PYTHON_VERSION}" = "2.6" ] && pip install --use-mirrors unittest2 || /bin/true'
+  - if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi
   - export COVERAGE_PROCESS_START=$PWD/.coveragerc
 script:
   - PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text --rcfile=.coveragerc setup.py test -v
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 41965c4..846d66f 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,10 +1,21 @@
-xxxx.x.x
+xxxx.x.xx
+=========
+----
+
+* Default image alt text option created and set to a default of empty string "" to maintain backward compatibility
+* Fix #136: --default-image-alt now takes a string as argument
+* Fix #113: Stop changing quiet levels on \/script tags.
+* Merge #126: Fix deprecation warning on py3 due to html.escape
+* Fix #145: Running test suite on Travis CI for Python 2.6.
+
+2016.5.29
 =========
 ----
 
 * Fix #125: --pad_tables now pads table cells to make them look nice.
 * Fix #114: Break does not interrupt blockquotes
-* Deprecation warnings for URL retreival
+* Deprecation warnings for URL retrieval.
+
 
 2016.4.2
 =========
diff --git a/README.md b/README.md
index 20967f4..56572c4 100644
--- a/README.md
+++ b/README.md
@@ -23,7 +23,7 @@
 | `--reference-links`                                    | Use reference links instead of links to create markdown
 | `--mark-code`                                          | Mark preformatted and code blocks with [code]...[/code]
 
-For a complete list of options see the [docs](docs/usage.md)
+For a complete list of options see the [docs](https://github.com/Alir3z4/html2text/blob/master/docs/usage.md)
 
 
 Or you can use it from within `Python`:
@@ -84,4 +84,4 @@
 
 ## Documentation
 
-Documentation lives [here](docs/index.md)
+Documentation lives [here](https://github.com/Alir3z4/html2text/blob/master/docs/usage.md)
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index 4e6891e..725e200 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -29,7 +29,8 @@
     - IMAGES_TO_ALT
     - IMAGES_WITH_SIZE
     - IGNORE_EMPHASIS
-    - BYPASS_TABLES
+    - BYPASS_TABLES format tables in HTML rather than Markdown
+    - IGNORE_TABLES ignore table-related tags (table, th, td, tr) while keeping rows
     - SINGLE_LINE_BREAK to use a single line break rather than two
     - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
@@ -51,7 +52,7 @@
 
 Used to provide utility functions to html2text
 Some functions are:
-    
+
     - name2cp                   :name to code point
     - hn                        :headings
     - dumb_preperty_dict        :hash of css attrs
@@ -92,6 +93,7 @@
 |`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevant when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--ignore-tables`                                      | Ignore table-related tags (table, th, td, tr) while keeping rows.
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
 | `--reference-links`                                    | Use reference links instead of inline links to create markdown
 
diff --git a/docs/usage.md b/docs/usage.md
index 22040bc..eb2c3bc 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -75,7 +75,8 @@
     - IMAGES_TO_ALT
     - IMAGES_WITH_SIZE
     - IGNORE_EMPHASIS
-    - BYPASS_TABLES
+    - BYPASS_TABLES format tables in HTML rather than Markdown
+    - IGNORE_TABLES ignore table-related tags (table, th, td, tr) while keeping rows
     - SINGLE_LINE_BREAK to use a single line break rather than two
     - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
@@ -94,6 +95,7 @@
     - MARK_CODE to wrap 'pre' blocks with [code]...[/code] tags
     - WRAP_LINKS to decide if links have to be wrapped during text wrapping (implies INLINE_LINKS = False)
     - DECODE_ERRORS to handle decoding errors. 'strict', 'ignore', 'replace' are the acceptable values.
+    - DEFAULT_IMAGE_ALT takes a string as value and is used whenever an image tag is missing an `alt` value. The default for this is an empty string '' to avoid backward breakage
 
 To alter any option the procedure is to create a parser with
 `parser = html2text.HTML2Text()` and to set the option on the parser.
@@ -120,6 +122,7 @@
 |`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevant when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--ignore-tables`                                      | Ignore table-related tags (table, th, td, tr) while keeping rows.
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
 | `--reference-links`                                    | Use reference links instead of inline links to create markdown
 | `--ignore-emphasis`                                    | Ignore all emphasis formatting in the html.
@@ -132,3 +135,4 @@
 | `--no-wrap-links`                                      | Do not wrap links during text wrapping. Implies `--reference-links`
 | `--decode-errors`=`HANDLER`                            | What to do in case an error is encountered. `ignore`, `strict`, `replace` etc.
 | `--pad-tables`                                         | Use padding to make tables look good.
+| `--default-image-alt`=`Image_Here`                     | Inserts the given `alt` text whever images are missing `alt` values.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 08a5a5e..471a46e 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -4,14 +4,13 @@
 from __future__ import division
 import re
 import sys
-import cgi
 
 try:
     from textwrap import wrap
 except ImportError:  # pragma: no cover
     pass
 
-from html2text.compat import urlparse, HTMLParser
+from html2text.compat import urlparse, HTMLParser, html_escape
 from html2text import config
 
 from html2text.utils import (
@@ -31,7 +30,7 @@
     pad_tables_in_text
 )
 
-__version__ = (2016, 4, 2)
+__version__ = (2016, 5, 29)
 
 
 # TODO:
@@ -69,6 +68,7 @@
         self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli
         self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli
         self.bypass_tables = config.BYPASS_TABLES  # covered in cli
+        self.ignore_tables = config.IGNORE_TABLES  # covered in cli
         self.google_doc = False  # covered in cli
         self.ul_item_mark = '*'  # covered in cli
         self.emphasis_mark = '_'  # covered in cli
@@ -79,6 +79,7 @@
         self.mark_code = config.MARK_CODE
         self.wrap_links = config.WRAP_LINKS  # covered in cli
         self.pad_tables = config.PAD_TABLES  # covered in cli
+        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli
         self.tag_callback = None
 
         if out is None:  # pragma: no cover
@@ -176,14 +177,14 @@
     def handle_charref(self, c):
         charref = self.charref(c)
         if not self.code and not self.pre:
-            charref = cgi.escape(charref)
+            charref = html_escape(charref)
         self.handle_data(charref, True)
 
     def handle_entityref(self, c):
         entityref = self.entityref(c)
         if (not self.code and not self.pre
                 and entityref != '&nbsp_place_holder;'):
-            entityref = cgi.escape(entityref)
+            entityref = html_escape(entityref)
         self.handle_data(entityref, True)
 
     def handle_starttag(self, tag, attrs):
@@ -445,7 +446,7 @@
             if 'src' in attrs:
                 if not self.images_to_alt:
                     attrs['href'] = attrs['src']
-                alt = attrs.get('alt') or ''
+                alt = attrs.get('alt') or self.default_image_alt
 
                 # If we have images_with_size, write raw html including width,
                 # height, and alt attributes
@@ -547,7 +548,16 @@
                 self.start = 1
 
         if tag in ["table", "tr", "td", "th"]:
-            if self.bypass_tables:
+            if self.ignore_tables:
+                if tag == 'tr':
+                    if start:
+                        pass
+                    else:
+                        self.soft_br()
+                else:
+                    pass
+
+            elif self.bypass_tables:
                 if start:
                     self.soft_br()
                 if tag in ["td", "th"]:
@@ -721,9 +731,6 @@
             self.outcount += 1
 
     def handle_data(self, data, entity_char=False):
-        if r'\/script>' in data:
-            self.quiet -= 1
-
         if self.style:
             self.style_def.update(dumb_css_parser(data))
 
diff --git a/html2text/cli.py b/html2text/cli.py
index 49bef76..c935787 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -24,6 +24,13 @@
         version='%prog ' + ".".join(map(str, __version__))
     )
     p.add_option(
+        "--default-image-alt",
+        dest="default_image_alt",
+        action="store",
+        type="str",
+        default=config.DEFAULT_IMAGE_ALT,
+        help="The default alt string for images with missing ones")
+    p.add_option(
         "--pad-tables",
         dest="pad_tables",
         action="store_true",
@@ -147,6 +154,13 @@
         help="Format tables in HTML rather than Markdown syntax."
     )
     p.add_option(
+        "--ignore-tables",
+        action="store_true",
+        dest="ignore_tables",
+        default=config.IGNORE_TABLES,
+        help="Ignore table-related tags (table, th, td, tr) while keeping rows."
+    )
+    p.add_option(
         "--single-line-break",
         action="store_true",
         dest="single_line_break",
@@ -270,6 +284,7 @@
     h.hide_strikethrough = options.hide_strikethrough
     h.escape_snob = options.escape_snob
     h.bypass_tables = options.bypass_tables
+    h.ignore_tables = options.ignore_tables
     h.single_line_break = options.single_line_break
     h.inline_links = options.inline_links
     h.unicode_snob = options.unicode_snob
@@ -279,5 +294,6 @@
     h.mark_code = options.mark_code
     h.wrap_links = options.wrap_links
     h.pad_tables = options.pad_tables
+    h.default_image_alt = options.default_image_alt
 
     wrapwrite(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
index 2120a41..60907ab 100644
--- a/html2text/compat.py
+++ b/html2text/compat.py
@@ -6,8 +6,12 @@
     import urlparse
     import HTMLParser
     import urllib
+    from cgi import escape as html_escape
 else:
     import urllib.parse as urlparse
     import html.entities as htmlentitydefs
     import html.parser as HTMLParser
     import urllib.request as urllib
+    from html import escape
+    def html_escape(s):
+        return escape(s, quote=False)
diff --git a/html2text/config.py b/html2text/config.py
index 7cd5ccf..48e1784 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -38,6 +38,7 @@
 IGNORE_EMPHASIS = False
 MARK_CODE = False
 DECODE_ERRORS = 'strict'
+DEFAULT_IMAGE_ALT = ''
 PAD_TABLES = False
 
 # Convert links with same href and text to <href> format if they are absolute links
@@ -119,7 +120,11 @@
     'rlm': ''
 }
 
+# Format tables in HTML rather than Markdown syntax
 BYPASS_TABLES = False
+# Ignore table-related tags (table, th, td, tr) while keeping rows
+IGNORE_TABLES = False
+
 
 # Use a single line break after a block element rather an two line breaks.
 # NOTE: Requires body width setting to be 0.
diff --git a/html2text/utils.py b/html2text/utils.py
index 6ccb600..bd6fc63 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -31,7 +31,7 @@
     """
     :returns: A hash of css attributes
     """
-    out = dict([(x.strip(), y.strip()) for x, y in
+    out = dict([(x.strip().lower(), y.strip().lower()) for x, y in
                 [z.split(':', 1) for z in
                  style.split(';') if ':' in z
                  ]
@@ -149,7 +149,7 @@
     font_family = ''
     if 'font-family' in style:
         font_family = style['font-family']
-    if 'Courier New' == font_family or 'Consolas' == font_family:
+    if 'courier new' == font_family or 'consolas' == font_family:
         return True
 
     return False
diff --git a/setup.py b/setup.py
index f79e45d..f8c2d24 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,8 @@
 # coding: utf-8
 import sys
+
 from setuptools import setup, Command, find_packages
+
 try:
     from pypandoc import convert
     read_md = lambda f: convert(f, 'rst')
@@ -18,7 +20,8 @@
 
 
 class RunTests(Command):
-    """New setup.py command to run all tests for the package.
+    """
+    New setup.py command to run all tests for the package.
     """
     description = "run all tests for the package"
 
@@ -62,7 +65,6 @@
         'Programming Language :: Python :: 2.7',
         'Programming Language :: Python :: 3',
         'Programming Language :: Python :: 3.0',
-        'Programming Language :: Python :: 3.1',
         'Programming Language :: Python :: 3.2',
         'Programming Language :: Python :: 3.3',
         'Programming Language :: Python :: 3.4',
diff --git a/test/default_image_alt.html b/test/default_image_alt.html
new file mode 100644
index 0000000..b1f04de
--- /dev/null
+++ b/test/default_image_alt.html
@@ -0,0 +1 @@
+<a href="http://google.com"><img src="images/google.png"></a>
diff --git a/test/default_image_alt.md b/test/default_image_alt.md
new file mode 100644
index 0000000..5c4f3c8
--- /dev/null
+++ b/test/default_image_alt.md
@@ -0,0 +1,2 @@
+[![Image](images/google.png)](http://google.com)
+
diff --git a/test/google-like_font-properties.html b/test/google-like_font-properties.html
new file mode 100644
index 0000000..cff3ebd
--- /dev/null
+++ b/test/google-like_font-properties.html
@@ -0,0 +1,15 @@
+<HTML>
+  <HEAD>
+    <TITLE>CAPS-LOCK TEST</TITLE>
+  </HEAD>
+  <BODY>
+    <p><span style="font-weight: bold">font-weight: bold</span></p>
+    <P><SPAN STYLE="FONT-WEIGHT: BOLD">FONT-WEIGHT: BOLD</SPAN></P>
+    <p><span style="font-style: italic">font-style: italic</span></p>
+    <P><SPAN STYLE="FONT-STYLE: ITALIC">FONT-STYLE: ITALIC</SPAN></P>
+    <p><span style="font-weight: bold;font-style: italic">
+      font-weight: bold;font-style: italic</span></p>
+    <P><SPAN STYLE="FONT-WEIGHT: BOLD;FONT-STYLE: ITALIC">
+      FONT-WEIGHT: BOLD;FONT-STYLE: ITALIC</SPAN></P>
+  </BODY>
+</HTML>
diff --git a/test/google-like_font-properties.md b/test/google-like_font-properties.md
new file mode 100644
index 0000000..c7a0312
--- /dev/null
+++ b/test/google-like_font-properties.md
@@ -0,0 +1,6 @@
+**font-weight: bold**   
+**FONT-WEIGHT: BOLD**   
+_font-style: italic_   
+_FONT-STYLE: ITALIC_   
+_**font-weight: bold;font-style: italic**_   
+_**FONT-WEIGHT: BOLD;FONT-STYLE: ITALIC**_ 
diff --git a/test/table_ignore.html b/test/table_ignore.html
new file mode 100644
index 0000000..d2966aa
--- /dev/null
+++ b/test/table_ignore.html
@@ -0,0 +1,26 @@
+<!DOCTYPE html> <html>
+    <head lang="en"> <meta charset="UTF-8"> <title></title> </head>
+    <body> <h1>This is a test document</h1> With some text, <code>code</code>, <b>bolds</b> and <i>italics</i>.  <h2>This is second header</h2> <p style="display: none">Displaynone text</p> 
+    <table>
+        <tr> <th>Header 1</th> <th>Header 2</th> <th>Header 3</th> </tr>
+        <tr> <td>Content 1</td> <td>2</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+        <tr> <td>Content 1 longer</td> <td>Content 2</td> <td>blah</td> </tr>
+        <tr> <td>Content </td> <td>Content 2</td> <td>blah</td> </tr>
+        <tr> <td>t </td> <td>Content 2</td> <td>blah blah blah</td> </tr>
+    </table>
+
+
+    <table> <tr> <th>H1</th> <th>H2</th> <th>H3</th> </tr>
+        <tr> <td>C1</td> <td>Content 2</td> <td>x</td> </tr>
+        <tr> <td>C123</td> <td>Content 2</td> <td>xyz</td> </tr>
+    </table>
+
+some content between the tables<br>
+
+    <table> <tr> <th>Header 1</th> <th>Header 2</th> <th>Header 3</th> </tr>
+        <tr> <td>Content 1</td> <td>Content 2</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+        <tr> <td>Content 1</td> <td>Content 2 longer</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+    </table>
+
+something else entirely
+</body> </html>
diff --git a/test/table_ignore.md b/test/table_ignore.md
new file mode 100644
index 0000000..ce2deda
--- /dev/null
+++ b/test/table_ignore.md
@@ -0,0 +1,22 @@
+# This is a test document
+
+With some text, `code`, **bolds** and _italics_.
+
+## This is second header
+
+Displaynone text
+
+Header 1 Header 2 Header 3  
+Content 1 2 ![200](http://lorempixel.com/200/200) Image!  
+Content 1 longer Content 2 blah  
+Content  Content 2 blah  
+t  Content 2 blah blah blah  
+H1 H2 H3  
+C1 Content 2 x  
+C123 Content 2 xyz  
+some content between the tables  
+Header 1 Header 2 Header 3  
+Content 1 Content 2 ![200](http://lorempixel.com/200/200) Image!  
+Content 1 Content 2 longer ![200](http://lorempixel.com/200/200) Image!  
+something else entirely
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 724d4d6..8a0259d 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -114,6 +114,10 @@
     func_args = {}
     base_fn = os.path.basename(fn).lower()
 
+    if base_fn.startswith('default_image_alt'):
+        module_args['default_image_alt'] = 'Image'
+        cmdline_args.append('--default-image-alt=Image')
+
     if base_fn.startswith('google'):
         module_args['google_doc'] = True
         cmdline_args.append('--googledoc')
@@ -134,6 +138,10 @@
         module_args['bypass_tables'] = True
         cmdline_args.append('--bypass-tables')
 
+    if base_fn.startswith('table_ignore'):
+        module_args['ignore_tables'] = True
+        cmdline_args.append('--ignore-tables')
+
     if base_fn.startswith('bodywidth'):
         # module_args['unicode_snob'] = True
         module_args['body_width'] = 0
@@ -161,7 +169,7 @@
     if base_fn.startswith('no_inline_links'):
         module_args['inline_links'] = False
         cmdline_args.append('--reference-links')
-    
+
     if base_fn.startswith('no_wrap_links'):
         module_args['wrap_links'] = False
         cmdline_args.append('--no-wrap-links')

=====================================================================
start time: Sat Apr 02 00:00:00 CST 2016
end time: Sun May 29 00:00:00 CST 2016
description: 
=========
----
* Fix #125: --pad_tables now pads table cells to make them look nice.
* Fix #114: Break does not interrupt blockquotes
* Deprecation warnings for URL retrieval.

commit message: 
commit 82aec92b018a9ebe493960b6e77e3f600fe1dc80 1459531098 -----sp :: Add to changelog
commit e6354551cf92ae6361416aad904165e58da5ce2f 1459531570 -----sp :: Merge pull request #124 from theSage21/master
commit cff6d96389521c3d117895e694e881e5bc9b1672 1459547990 -----sp :: Bump version 2016.4.2
commit ebab5bc0204467059abe4babdbec7c464169c076 1464353542 -----sp :: do not break words to wrap paragraph (#128)
commit 5672e2dd2c5bf918275acaf1142b36beba1b9ac5+ 1464353770 -----sp :: Deprecation warning for retrieval over internet
commit 258b22390c76b3bd83e87815f7e6763c1fc4d6fa 1464353781 -----sp :: Merge branch 'master' of https://github.com/Alir3z4/html2text into playground
commit 7c8c5aecaba55d8667420486d41f2c807b7fddd6 1464359907 -----sp :: Added failing tests for #114
commit 210869d2628bf1b4371f695e62f333f5c0dda3ee 1464362110 -----sp :: Fixed tests
commit 8ccd470751d8b1d221021163230bd20cdcb043ba+ 1464362162 -----sp :: - Pull out common try:except for unicode characters to avoid repetition - Breaks preserve blockquotes
commit 39502775d29bf518ee079c9aa44cd390c0ccf855 1464362663 -----sp :: Changelog update
commit 7569dfbdc67c37d78ff936fc31f39b2b64ecccee 1464423349 -----sp :: Pad tables CLI option
commit e714f1f19dd6fe59c2deaffb0519b39e688c3e59 1464423465 -----sp :: Pad tables option in parser
commit b68c9bbf63d46c543f5128cc8cdfab9a1ded1cb8 1464423484 -----sp :: Pad table utility functions
commit b4b7634732dc1346cffbc007a2692b0c0fac4e91 1464423507 -----sp :: PAD_TABLES default is off
commit 442c65ddf12926888998b4f1f3b3904587a3ded2 1464423994 -----sp :: added tests
commit 01cf8aec5d4f3c42e9f3cb1dd0e9bf99b3c1974e 1464424308 -----sp :: Changelog update
commit a9141864c0179ba288e8125c952238682f1adebc 1464424572 -----sp :: Fixed set definition for backward compatibility
commit bbe01a77d9031ab7b6384fce422af0a8f94888f9 1464424727 -----sp :: Fixed set definition for backward compatibility
commit 2aafc2357048af356ebb5828a3cc01339d63ee2b 1464424798 -----sp :: Merge branch 'master' of github.com:theSage21/html2text
commit 75030eaa8c89336ca321ef73c7870a277d6e514c 1464425323 -----sp :: Add pad_table flag to test runner
commit ff58b478ea05f457725cc042d17bf870b3fd4375 1464425686 -----sp :: Remove table marker regex
commit 0a7bdb5664244fd5064fced9330b9cc7daf44349 1464436095 -----sp :: Test shows off the padding
commit 5c57c26f36fef87cf282f5f75e10f325a99d4d64 1464441205 -----sp :: More varied tests
commit 1b78d10969ae76a22fa3b39b26c26d92c72e0c9c 1464441276 -----sp :: Tag based table detection
commit f84b5913b8952626ba635e5f89a24f8da7f0698d 1464441378 -----sp :: reformatting adds space after table.

hunks: 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 5bdb3e6..41965c4 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,4 +1,12 @@
-0000.0.0
+xxxx.x.x
+=========
+----
+
+* Fix #125: --pad_tables now pads table cells to make them look nice.
+* Fix #114: Break does not interrupt blockquotes
+* Deprecation warnings for URL retreival
+
+2016.4.2
 =========
 ----
 
diff --git a/ISSUE_TEMPLATE b/ISSUE_TEMPLATE
index 252e427..f2d46a0 100644
--- a/ISSUE_TEMPLATE
+++ b/ISSUE_TEMPLATE
@@ -1,3 +1,4 @@
-
+ 
 - Version by `html2text --version`
 - Test script
+- Python version `python --version`
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 75e0a18..08a5a5e 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -27,10 +27,11 @@
     list_numbering_start,
     dumb_css_parser,
     escape_md_section,
-    skipwrap
+    skipwrap,
+    pad_tables_in_text
 )
 
-__version__ = (2016, 1, 8)
+__version__ = (2016, 4, 2)
 
 
 # TODO:
@@ -77,6 +78,7 @@
         self.hide_strikethrough = False  # covered in cli
         self.mark_code = config.MARK_CODE
         self.wrap_links = config.WRAP_LINKS  # covered in cli
+        self.pad_tables = config.PAD_TABLES  # covered in cli
         self.tag_callback = None
 
         if out is None:  # pragma: no cover
@@ -130,7 +132,11 @@
     def handle(self, data):
         self.feed(data)
         self.feed("")
-        return self.optwrap(self.close())
+        markdown = self.optwrap(self.close())
+        if self.pad_tables:
+            return pad_tables_in_text(markdown)
+        else:
+            return markdown
 
     def outtextf(self, s):
         self.outtextlist.append(s)
@@ -142,23 +148,20 @@
 
         try:
             nochr = unicode('')
+            unicode_character = unichr
         except NameError:
             nochr = str('')
+            unicode_character = chr
 
         self.pbr()
         self.o('', 0, 'end')
 
         outtext = nochr.join(self.outtextlist)
+
         if self.unicode_snob:
-            try:
-                nbsp = unichr(name2cp('nbsp'))
-            except NameError:
-                nbsp = chr(name2cp('nbsp'))
+            nbsp = unicode_character(name2cp('nbsp'))
         else:
-            try:
-                nbsp = unichr(32)
-            except NameError:
-                nbsp = chr(32)
+            nbsp = unicode_character(32)
         try:
             outtext = outtext.replace(unicode('&nbsp_place_holder;'), nbsp)
         except NameError:
@@ -331,7 +334,10 @@
                 self.p()
 
         if tag == "br" and start:
-            self.o("  \n")
+            if self.blockquote > 0:
+                self.o("  \n> ")
+            else:
+                self.o("  \n")
 
         if tag == "hr" and start:
             self.p()
@@ -556,8 +562,16 @@
                         self.o('</{0}>'.format(tag))
 
             else:
-                if tag == "table" and start:
-                    self.table_start = True
+                if tag == "table":
+                    if start:
+                        self.table_start = True
+                        if self.pad_tables:
+                            self.o("<"+config.TABLE_MARKER_FOR_PAD+">")
+                            self.o("  \n")
+                    else:
+                        if self.pad_tables:
+                            self.o("</"+config.TABLE_MARKER_FOR_PAD+">")
+                            self.o("  \n")
                 if tag in ["td", "th"] and start:
                     if self.split_next_td:
                         self.o("| ")
@@ -814,7 +828,9 @@
         for para in text.split("\n"):
             if len(para) > 0:
                 if not skipwrap(para, self.wrap_links):
-                    result += "\n".join(wrap(para, self.body_width))
+                    result += "\n".join(
+                        wrap(para, self.body_width, break_long_words=False)
+                    )
                     if para.endswith('  '):
                         result += "  \n"
                         newlines = 1
diff --git a/html2text/cli.py b/html2text/cli.py
index d933928..7ece36d 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -1,4 +1,5 @@
 import optparse
+import warnings
 
 from html2text.compat import urllib
 from html2text import HTML2Text, config, __version__
@@ -23,6 +24,13 @@
         version='%prog ' + ".".join(map(str, __version__))
     )
     p.add_option(
+        "--pad_tables",
+        dest="pad_tables",
+        action="store_true",
+        default=config.PAD_TABLES,
+        help="pad the cells to equal column width in tables"
+    )
+    p.add_option(
         "--no-wrap-links",
         dest="wrap_links",
         action="store_false",
@@ -204,6 +212,8 @@
         file_ = args[0]
 
         if file_.startswith('http://') or file_.startswith('https://'):
+            warnings.warn("Support for retrieving html over network is set for deprecation by version (2017, 1, x)",
+                    DeprecationWarning)
             baseurl = file_
             j = urllib.urlopen(baseurl)
             data = j.read()
@@ -268,5 +278,6 @@
     h.links_each_paragraph = options.links_each_paragraph
     h.mark_code = options.mark_code
     h.wrap_links = options.wrap_links
+    h.pad_tables = options.pad_tables
 
     wrapwrite(h.handle(data))
diff --git a/html2text/config.py b/html2text/config.py
index 85bf47d..7cd5ccf 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -3,6 +3,8 @@
 # Use Unicode characters instead of their ascii psuedo-replacements
 UNICODE_SNOB = 0
 
+# Marker to use for marking tables for padding post processing
+TABLE_MARKER_FOR_PAD = "special_marker_for_table_padding"
 # Escape all special characters.  Output is less readable, but avoids
 # corner case formatting issues.
 ESCAPE_SNOB = 0
@@ -36,6 +38,7 @@
 IGNORE_EMPHASIS = False
 MARK_CODE = False
 DECODE_ERRORS = 'strict'
+PAD_TABLES = False
 
 # Convert links with same href and text to <href> format if they are absolute links
 USE_AUTOMATIC_LINKS = True
diff --git a/html2text/utils.py b/html2text/utils.py
index 418c89c..6ccb600 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -244,3 +244,55 @@
     text = config.RE_MD_DASH_MATCHER.sub(r"\1\\\2", text)
 
     return text
+
+def reformat_table(lines, right_margin):
+    """
+    Given the lines of a table
+    padds the cells and returns the new lines
+    """
+    # find the maximum width of the columns
+    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split('|')]
+    for line in lines:
+        cols = [x.rstrip() for x in line.split('|')]
+        max_width = [max(len(x) + right_margin, old_len)
+                     for x, old_len in zip(cols, max_width)]
+    
+    # reformat
+    new_lines = []
+    for line in lines:
+        cols = [x.rstrip() for x in line.split('|')]
+        if set(line.strip()) == set('-|'):
+            filler = '-'
+            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
+                        for x, M in zip(cols, max_width)]
+        else:
+            filler = ' '
+            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
+                        for x, M in zip(cols, max_width)]
+        new_lines.append('|'.join(new_cols))
+    return new_lines
+
+def pad_tables_in_text(text, right_margin=1):
+    """
+    Provide padding for tables in the text
+    """
+    lines = text.split('\n')
+    table_buffer, altered_lines, table_widths, table_started = [], [], [], False
+    new_lines = []
+    for line in lines:
+        # Toogle table started
+        if (config.TABLE_MARKER_FOR_PAD in line):
+            table_started = not table_started
+            if not table_started:
+                table = reformat_table(table_buffer, right_margin)
+                new_lines.extend(table)
+                table_buffer = []
+                new_lines.append('')
+            continue
+        # Process lines
+        if table_started:
+            table_buffer.append(line)
+        else:
+            new_lines.append(line)
+    new_text = '\n'.join(new_lines)
+    return new_text
diff --git a/test/break_preserved_in_blockquote.html b/test/break_preserved_in_blockquote.html
new file mode 100644
index 0000000..2436ed0
--- /dev/null
+++ b/test/break_preserved_in_blockquote.html
@@ -0,0 +1 @@
+a<blockquote>b<br>c</blockquote>
diff --git a/test/break_preserved_in_blockquote.md b/test/break_preserved_in_blockquote.md
new file mode 100644
index 0000000..f3b94c2
--- /dev/null
+++ b/test/break_preserved_in_blockquote.md
@@ -0,0 +1,5 @@
+a
+
+> b  
+> c
+
diff --git a/test/long_lines.html b/test/long_lines.html
new file mode 100644
index 0000000..7389de9
--- /dev/null
+++ b/test/long_lines.html
@@ -0,0 +1 @@
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd <img src="http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com"> asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
diff --git a/test/long_lines.md b/test/long_lines.md
new file mode 100644
index 0000000..65363ae
--- /dev/null
+++ b/test/long_lines.md
@@ -0,0 +1,14 @@
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd
+![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com)
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd
+asd asd asd asd asd
+
diff --git a/test/pad_table.html b/test/pad_table.html
new file mode 100644
index 0000000..d2966aa
--- /dev/null
+++ b/test/pad_table.html
@@ -0,0 +1,26 @@
+<!DOCTYPE html> <html>
+    <head lang="en"> <meta charset="UTF-8"> <title></title> </head>
+    <body> <h1>This is a test document</h1> With some text, <code>code</code>, <b>bolds</b> and <i>italics</i>.  <h2>This is second header</h2> <p style="display: none">Displaynone text</p> 
+    <table>
+        <tr> <th>Header 1</th> <th>Header 2</th> <th>Header 3</th> </tr>
+        <tr> <td>Content 1</td> <td>2</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+        <tr> <td>Content 1 longer</td> <td>Content 2</td> <td>blah</td> </tr>
+        <tr> <td>Content </td> <td>Content 2</td> <td>blah</td> </tr>
+        <tr> <td>t </td> <td>Content 2</td> <td>blah blah blah</td> </tr>
+    </table>
+
+
+    <table> <tr> <th>H1</th> <th>H2</th> <th>H3</th> </tr>
+        <tr> <td>C1</td> <td>Content 2</td> <td>x</td> </tr>
+        <tr> <td>C123</td> <td>Content 2</td> <td>xyz</td> </tr>
+    </table>
+
+some content between the tables<br>
+
+    <table> <tr> <th>Header 1</th> <th>Header 2</th> <th>Header 3</th> </tr>
+        <tr> <td>Content 1</td> <td>Content 2</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+        <tr> <td>Content 1</td> <td>Content 2 longer</td> <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td> </tr>
+    </table>
+
+something else entirely
+</body> </html>
diff --git a/test/pad_table.md b/test/pad_table.md
new file mode 100644
index 0000000..70ad82f
--- /dev/null
+++ b/test/pad_table.md
@@ -0,0 +1,28 @@
+# This is a test document
+
+With some text, `code`, **bolds** and _italics_.
+
+## This is second header
+
+Displaynone text
+
+Header 1         | Header 2  | Header 3                                     
+-----------------|-----------|----------------------------------------------
+Content 1        | 2         | ![200](http://lorempixel.com/200/200) Image! 
+Content 1 longer | Content 2 | blah                                         
+Content          | Content 2 | blah                                         
+t                | Content 2 | blah blah blah                               
+
+H1   | H2        | H3  
+-----|-----------|-----
+C1   | Content 2 | x   
+C123 | Content 2 | xyz 
+
+some content between the tables  
+Header 1  | Header 2         | Header 3                                     
+----------|------------------|----------------------------------------------
+Content 1 | Content 2        | ![200](http://lorempixel.com/200/200) Image! 
+Content 1 | Content 2 longer | ![200](http://lorempixel.com/200/200) Image! 
+
+something else entirely
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 2d678ee..ade0a69 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -170,6 +170,10 @@
         module_args['mark_code'] = True
         cmdline_args.append('--mark-code')
 
+    if base_fn.startswith('pad_table'):
+        module_args['pad_tables'] = True
+        cmdline_args.append('--pad_tables')
+
     if base_fn not in ['bodywidth_newline.html', 'abbr_tag.html']:
         test_func = None
 

=====================================================================
start time: Fri Jan 08 00:00:00 CST 2016
end time: Sat Apr 02 00:00:00 CST 2016
description: 
=========
----
* Fix #106: encoding by stdin
* Fix #89: Python 3.5 support.
* Fix #113: inplace baseurl substitution for <a> and <img> tags.
* Feature #118: Update the badges to badge.kloud51.com
* Fix #119: new-line after a list is inserted

commit message: 
commit 62be883fe67bff92dccce21fc8259e1f12148898 1452270971 -----sp :: Update change log with latest changes
commit 0c70c8f06354f9ed4d3fa4c316e2953ca847f2fa 1452271189 -----sp :: bump version
commit 4c1b81ef20a6dfe94b1149f512de84b2b4d78c23+ 1452734847 -----sp :: Support Python 3.5 (convert_charrefs=False)
commit 43b2677fce052c7e4054f4f3f982961be65c23cf 1452734923 -----sp :: ChangeLog entry
commit f5c289b8eec5b1efed9faeba3f3422eddcf313d9 1452776961 -----sp :: Fix typos in docs
commit b8771f37dbd4be1b92caf82ed16e633a27838f47 1452777123 -----sp :: Merge pull request #110 from jwilk/spelling
commit 110aa284f5879b98ff6a6513cc40e4ddce1f9e93 1452781813 -----sp :: Merge pull request #108 from stefanor/python3.5
commit 6ff7d28206778b922dc9384d0f0c4657d6b8a8d5 1452781928 -----sp :: Make the next version vanilla until its time comes
commit 2116e83262c590aafb28ac1c73c4a4f2012cd909 1452831095 -----sp :: Some tiny reformatting on Usage.md
commit d546297cf4321f5de71ba4a34e7fefb27270b552 1452831218 -----sp :: Merge pull request #111 from Alir3z4/better-doc-usage
commit 11b026ce4bfbb88488b7e2f74f660fe8dd195344+ 1453989571 -----sp :: add baseurl functionality to inplace urls
commit e2ed656a820343be508c5983bb6b43e8763b42cd+ 1454240693 -----sp :: add baseurl functionality to inplace urls to <img> tags also
commit e001365018f2520200dab269cef121ef457eb908+ 1454240707 -----sp :: add inplace baseurl substitution test for <img> tag
commit 2ed52f3a1eec0635fa6d29415374b7beb81a7253+ 1454240718 -----sp :: add inplace baseurl substitution test for <a> tag
commit fbe1b769a09773eb1c7a44be3470350ddd69d759 1454241056 -----sp :: update changelog.rst and authors.rst
commit 54ea451d570dc2799fa3ebcb91d12c22e4c582aa 1454241377 -----sp :: Merge pull request #113 from ZumZoom/master
commit 7cabac988d830de769fc234bcd933cb9608713f1+ 1455306076 -----sp :: Update the badges to badge.kloud51.com
commit cc04bddfd4829ca164282341716da09a401ecd4f 1455470068 -----sp :: Fix with the latest changes on the endpoint
commit 8bdd5a4f6e512458aa47b0132aac232cfa3c4729 1455470150 -----sp :: Update the changelog with badges updates
commit 96792aeaf181a6bf30750d7c8ca26516c2ce49bb+ 1455470313 -----sp :: Merge pull request #118 from Alir3z4/Alir3z4-update-badges-kloud51-com
commit 1b46d03babfe921405cbba262420207c0f3d9863 1455765137 -----sp :: Create ISSUE_TEMPLATE
commit 0711f0c3caf83790b8a029fae2a7bedbebac84be 1456378514 -----sp :: - Added failing tests
commit 61f627919fa29856c507ffbcbb8433248380dfa7+ 1456384551 -----sp :: - Added fix for #119 - Updated tests where failure was expected
commit ca4fcbe7628bfb2cc2281bfaa5c2e3521ca4381d 1456384695 -----sp :: Update changelog
commit 9659037f230c25ad51c80feb7412406ef11672e5 1456385888 -----sp :: - Added pypandoc to convert MD to rst while pushing to pypi. - added a requirements file for development
commit d3f91983b4e9e3bd59b4478f6110b1190533e859 1456478968 -----sp :: - Removed print from setup.py
commit b0d360e7d48026cfd7f2c7c4a4ac029422801d66 1456488564 -----sp :: Merge pull request #120 from theSage21/master
commit 1a72117222ae5df40c4249d0551b20c04ff6a12d 1456516880 -----sp :: Update README.md
commit b7a78b87d926da8b1e1fdd74c1b6a1e9b5c7d428 1457291665 -----sp :: Update ISSUE_TEMPLATE
commit 8274e9dc9400da7f02d29024ba3012fd94c5ba79+ 1457326587 -----sp :: - Fix for #106 - tests to follow

hunks: 
diff --git a/.travis.yml b/.travis.yml
index c599f7f..fec022b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -6,6 +6,7 @@
   - "3.2"
   - "3.3"
   - "3.4"
+  - "3.5"
 install:
     - pip install coveralls==0.5
 before_script:
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 39f7a98..93c1938 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -19,6 +19,7 @@
 * Albert Berger <gh: nbdsp>
 * Etienne Millon <me@emillon.org>
 * John C F <gh: critiqjo>
+* Mikhail Melnik <by.zumzoom@gmail.com>
 
 
 Maintainer:
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 7ed5c52..db4e491 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,13 @@
+0000.0.0
+=========
+----
+
+* Fix #89: Python 3.5 support.
+* Fix #113: inplace baseurl substitution for <a> and <img> tags.
+* Feature #118: Update the badges to badge.kloud51.com
+* Fix #119: new-line after a list is inserted
+
+
 2016.1.8
 =========
 ----
diff --git a/ISSUE_TEMPLATE b/ISSUE_TEMPLATE
new file mode 100644
index 0000000..252e427
--- /dev/null
+++ b/ISSUE_TEMPLATE
@@ -0,0 +1,3 @@
+
+- Version by `html2text --version`
+- Test script
diff --git a/README.md b/README.md
index 2c7254d..20967f4 100644
--- a/README.md
+++ b/README.md
@@ -2,12 +2,11 @@
 
 [![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2text)
 [![Coverage Status](https://coveralls.io/repos/Alir3z4/html2text/badge.png)](https://coveralls.io/r/Alir3z4/html2text)
-[![Downloads](https://pypip.in/d/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
-[![Version](https://pypip.in/v/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
-[![Egg?](https://pypip.in/egg/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
-[![Wheel?](https://pypip.in/wheel/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
-[![Format](https://pypip.in/format/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
-[![License](https://pypip.in/license/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Downloads](http://badge.kloud51.com/pypi/d/html2text.png)](https://pypi.python.org/pypi/html2text/)
+[![Version](http://badge.kloud51.com/pypi/v/html2text.png)](https://pypi.python.org/pypi/html2text/)
+[![Wheel?](http://badge.kloud51.com/pypi/wheel/html2text.png)](https://pypi.python.org/pypi/html2text/)
+[![Format](http://badge.kloud51.com/pypi/format/html2text.png)](https://pypi.python.org/pypi/html2text/)
+[![License](http://badge.kloud51.com/pypi/license/html2text.png)](https://pypi.python.org/pypi/html2text/)
 
 
 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
diff --git a/docs/about.md b/docs/about.md
index 72d5063..04092df 100644
--- a/docs/about.md
+++ b/docs/about.md
@@ -5,7 +5,7 @@
 easy-to-read plain ASCII text. Better yet, that ASCII also happens to be
 valid Markdown (a text-to-HTML format).
 
-It was origionally written by Aaron Swartz.
+It was originally written by Aaron Swartz.
 
 The code is under GPL v3.
 
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index c06430b..4e6891e 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -2,7 +2,7 @@
 ============
 
 
-There are 5 components to the code. They are kept as seperate files in the
+There are 5 components to the code. They are kept as separate files in the
 html2text directory. This part of the documentation explains them bit by bit.
 
 
@@ -31,7 +31,7 @@
     - IGNORE_EMPHASIS
     - BYPASS_TABLES
     - SINGLE_LINE_BREAK to use a single line break rather than two
-    - UNIFIABLE is a dictionary which maps unicode abbrevations to ASCII
+    - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
     - RE_SPACE for finding space-only lines
     - RE_UNESCAPE for finding html entities like &nbsp;
@@ -67,7 +67,7 @@
     - wrapwrite                 :write to buffer
     - wrap_read                 :read from buffer
     - escape_md                 :escape md sensitive within other md
-    - escape_md_section         :escape md sensitive accrose whole doc
+    - escape_md_section         :escape md sensitive across whole doc
 
 
 cli.py
@@ -89,7 +89,7 @@
 |`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
 |`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
 |`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
-|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevant when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
diff --git a/docs/usage.md b/docs/usage.md
index 675b3b6..8e34d40 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -8,11 +8,24 @@
 
 These are the methods you can get the module installed:-
 
-    1. `pip install html2text` for those who have pip
-    2. Clone the repository from `https://github.com/Alir3z4/html2text.git`
-        1. `git clone https://github.com/Alir3z4/html2text`
-        2. `python setup build`
-        3. `python setup install`
+### PIP
+
+For those who have pip, we got your back.
+
+```
+$ pip install html2text
+```
+
+### Clone from Git Repository
+
+Clone the repository from https://github.com/Alir3z4/html2text
+
+```
+$ git clone --depth 1 https://github.com/Alir3z4/html2text.git
+$ python setup.py build
+$ python setup.py install
+```
+
 
 
 Basic Usage
@@ -64,7 +77,7 @@
     - IGNORE_EMPHASIS
     - BYPASS_TABLES
     - SINGLE_LINE_BREAK to use a single line break rather than two
-    - UNIFIABLE is a dictionary which maps unicode abbrevations to ASCII
+    - UNIFIABLE is a dictionary which maps unicode abbreviations to ASCII
                 values
     - RE_SPACE for finding space-only lines
     - RE_UNESCAPE for finding html entities like &nbsp;
@@ -104,7 +117,7 @@
 |`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
 |`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
 |`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
-|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevant when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
@@ -112,7 +125,7 @@
 | `--ignore-emphasis`                                    | Ignore all emphasis formatting in the html.
 | `-e`, `--asterisk-emphasis`                            | Use asterisk rather than underscore to emphasize text
 | `--unicode-snob`                                       | Use unicode throughout instead of ASCII
-| `--no-automatic-links`                                 | Do not use automatic links like <http://googel.com>
+| `--no-automatic-links`                                 | Do not use automatic links like <http://google.com>
 | `--no-skip-internal-links`                             | Turn off skipping of internal links
 | `--links-after-para`                                   | Put the links after the paragraph and not at end of document
 | `--mark-code`                                          | Mark code with [code]...[/code] blocks
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 89dd1fd..75e0a18 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -3,6 +3,7 @@
 """html2text: Turn HTML into equivalent Markdown-structured text."""
 from __future__ import division
 import re
+import sys
 import cgi
 
 try:
@@ -29,7 +30,7 @@
     skipwrap
 )
 
-__version__ = (2015, 11, 4)
+__version__ = (2016, 1, 8)
 
 
 # TODO:
@@ -44,7 +45,10 @@
                  appends lines of text).
             baseurl: base URL of the document we process
         """
-        HTMLParser.HTMLParser.__init__(self)
+        kwargs = {}
+        if sys.version_info >= (3, 4):
+            kwargs['convert_charrefs'] = False
+        HTMLParser.HTMLParser.__init__(self, **kwargs)
 
         # Config options
         self.split_next_td = False
@@ -416,9 +420,9 @@
                             try:
                                 title = escape_md(a['title'])
                             except KeyError:
-                                self.o("](" + escape_md(a['href']) + ")")
+                                self.o("](" + escape_md(urlparse.urljoin(self.baseurl, a['href'])) + ")")
                             else:
-                                self.o("](" + escape_md(a['href'])
+                                self.o("](" + escape_md(urlparse.urljoin(self.baseurl, a['href']))
                                        + ' "' + title + '" )')
                         else:
                             i = self.previousIndex(a)
@@ -472,7 +476,7 @@
                     self.o("![" + escape_md(alt) + "]")
                     if self.inline_links:
                         href = attrs.get('href') or ''
-                        self.o("(" + escape_md(href) + ")")
+                        self.o("(" + escape_md(urlparse.urljoin(self.baseurl, href)) + ")")
                     else:
                         i = self.previousIndex(attrs)
                         if i is not None:
@@ -510,6 +514,8 @@
             else:
                 if self.list:
                     self.list.pop()
+                    if (not self.google_doc) and (not self.list):
+                        self.o('\n')
             self.lastWasList = True
         else:
             self.lastWasList = False
diff --git a/html2text/cli.py b/html2text/cli.py
index d765f59..d933928 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -195,12 +195,13 @@
 
     # process input
     encoding = "utf-8"
+    if len(args) == 2:
+        encoding = args[1]
+    elif len(args) > 2:
+        p.error('Too many arguments')
+
     if len(args) > 0 and args[0] != '-':  # pragma: no cover
         file_ = args[0]
-        if len(args) == 2:
-            encoding = args[1]
-        if len(args) > 2:
-            p.error('Too many arguments')
 
         if file_.startswith('http://') or file_.startswith('https://'):
             baseurl = file_
diff --git a/requirements-dev.txt b/requirements-dev.txt
new file mode 100644
index 0000000..a5b00a3
--- /dev/null
+++ b/requirements-dev.txt
@@ -0,0 +1,4 @@
+coverage==4.0.3
+py==1.4.31
+pypandoc==1.1.3
+wheel==0.24.0
diff --git a/setup.py b/setup.py
index d83ee61..f79e45d 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,11 @@
 # coding: utf-8
 import sys
 from setuptools import setup, Command, find_packages
+try:
+    from pypandoc import convert
+    read_md = lambda f: convert(f, 'rst')
+except ImportError:
+    read_md = lambda f: open(f, 'r').read()
 
 requires_list = []
 try:
@@ -36,6 +41,7 @@
     name="html2text",
     version=".".join(map(str, __import__('html2text').__version__)),
     description="Turn HTML into equivalent Markdown-structured text.",
+    long_description=read_md('README.md'),
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
     maintainer='Alireza Savand',
@@ -60,6 +66,7 @@
         'Programming Language :: Python :: 3.2',
         'Programming Language :: Python :: 3.3',
         'Programming Language :: Python :: 3.4',
+        'Programming Language :: Python :: 3.5',
     ],
     entry_points="""
         [console_scripts]
diff --git a/test/inplace_baseurl_substitution.html b/test/inplace_baseurl_substitution.html
new file mode 100644
index 0000000..cb55345
--- /dev/null
+++ b/test/inplace_baseurl_substitution.html
@@ -0,0 +1,11 @@
+<!DOCTYPE html>
+<head></head>
+<body>
+<p>
+<img src="/uploads/2012/01/read2textheader.jpg" alt="read2text header image" width="650" height="165"/>
+</p>
+<p>
+<a href="/">BrettTerpstra.com</a>
+</p>
+</body>
+</html>
diff --git a/test/inplace_baseurl_substitution.md b/test/inplace_baseurl_substitution.md
new file mode 100644
index 0000000..bc73c97
--- /dev/null
+++ b/test/inplace_baseurl_substitution.md
@@ -0,0 +1,3 @@
+![read2text header image](http://brettterpstra.com/uploads/2012/01/read2textheader.jpg)
+
+[BrettTerpstra.com](http://brettterpstra.com/)
diff --git a/test/list_tags_example.md b/test/list_tags_example.md
index b972369..151249d 100644
--- a/test/list_tags_example.md
+++ b/test/list_tags_example.md
@@ -28,9 +28,11 @@
   * some item
   * Some other item
   * some item
+
   1. Some other item
   2. some item
   3. some item
+
   * somthing else here
   * some item
 
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 052a069..2d678ee 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -173,6 +173,12 @@
     if base_fn not in ['bodywidth_newline.html', 'abbr_tag.html']:
         test_func = None
 
+    if base_fn == 'inplace_baseurl_substitution.html':
+        module_args['baseurl'] = 'http://brettterpstra.com'
+        module_args['body_width'] = 0
+        # there is no way to specify baseurl in cli :(
+        test_cmd = None
+
     return test_mod, test_cmd, test_func
 
 # Originally from http://stackoverflow.com/questions/32899/\
diff --git a/test/text_after_list.html b/test/text_after_list.html
new file mode 100644
index 0000000..8691b4f
--- /dev/null
+++ b/test/text_after_list.html
@@ -0,0 +1,2 @@
+<ul><li>item</li></ul>
+text
diff --git a/test/text_after_list.md b/test/text_after_list.md
new file mode 100644
index 0000000..66d9d98
--- /dev/null
+++ b/test/text_after_list.md
@@ -0,0 +1,4 @@
+  * item
+
+text
+
diff --git a/test/url-escaping.html b/test/url-escaping.html
index c4f68b9..5b03e69 100644
--- a/test/url-escaping.html
+++ b/test/url-escaping.html
@@ -6,8 +6,8 @@
 	<li><a href="http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d(v=vs.110)">Some MSDN link using parenthesis</a></li>
 	<li><a href="https://www.google.ru/search?q=[brackets are cool]">Google search result URL with unescaped brackets</a></li>
 	<li><a href="https://www.google.ru/search?q='[({})]'">Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor</a></li>
-	<li>Use automatic links like <a href="http://example.com/">http://example.com/</a> when the URL is the label</a>
-	<li>Exempt <a href="non-absolute_URIs">non-absolute_URIs</a> from automatic link detection</a>
+    <li>Use automatic links like <a href="http://example.com/">http://example.com/</a> when the URL is the label</a></li>
+    <li>Exempt <a href="non-absolute_URIs">non-absolute_URIs</a> from automatic link detection</a></li>
 </ul>
 
 <p>And here are images with tricky attribute values:</p>

=====================================================================
start time: Wed Nov 04 00:00:00 CST 2015
end time: Fri Jan 08 00:00:00 CST 2016
description: 
=========
----
* Feature #99: Removed duplicated initialisation.
* Fix #100: Get element style key error.
* Fix #101: Fix error end tag pop exception
* <s>, <strike>, <del> now rendered as ~~text~~.

commit message: 
commit 6e8926f4f5625bbd59ad30cd881740d618fa5b1b 1446647992 -----sp :: Add .c9 to get ignored
commit dd4263066380d7ae24b42540b0e48c76727f5a48 1446648318 -----sp :: Update the changelog with the latest changes
commit 36be267c2dfa7bcef56fc30947e210cd1f63cd49 1446648446 -----sp :: Add more python version to travis and setup.py classifiers
commit d62e3e36fee59682a02acc67e406012fc4186db7 1446648543 -----sp :: Bump version number
commit 9157181c09a7c630b633f41e0d108490aae8751f 1446649139 -----sp :: Remove python 3.5 support, due to #98
commit f1b7a188d3e0d36dfc0c8379a01a7598319b047c+ 1446719526 -----sp :: Removed duplicated initialisation
commit 9ed7df736d92d8cb261c13e84bfff9f59978c876+ 1446782408 -----sp :: :bug: fix get element style key error
commit c4d3d4334a053d3e602fb5c125313c9bf38eeae5 1446782670 -----sp :: Merge pull request #99 from Savageman/patch-1
commit bff88db381409935b4cb32f69394cb5fc172e643 1446804048 -----sp :: Merge pull request #100 from DistPub/bug/get-element-style-not-check-dict-key
commit f1ab1cedd87b2b1dbbfbc3ff742dd941ea87110b+ 1446806856 -----sp :: :bug: fix error end tag pop exception
commit 1df8faeaa086307d01901a581bf39482f04bade1 1446821748 -----sp :: Merge pull request #101 from DistPub/cherrypick/bug/handle-end-tag-not-check-list
commit b76fc98808f52109ec76b581005dbdac25c3e4f0 1450416386 -----sp :: Solved
commit 7a1aa4fbdb96821026fd4c0514c8c80d994ef305+ 1451504354 -----sp :: - Render <s> <del> <strike> as '~~text~~' in markdown - Rendering them as tags did not make sense.
commit 6a82fdf021e2e48064e12d9e94024c18647fc6f1 1451504493 -----sp :: - Update changelog about new feature
commit 0c2618d63d0dfa67b5621185a9011f0d501bc17e 1451542027 -----sp :: As per #103
commit f6803a0e1776f441b69918923a4237ae75ccc3de 1451542500 -----sp :: Merger from Alir3z4
commit 0e9ab110d50172a63d1fc61b08fcdf6f87632992 1451542576 -----sp :: Merge branch 'master' of https://github.com/theSage21/html2text
commit 46079ef0e850a073c3940d454d7018bebed35480 1451542745 -----sp :: - fixed my mistake about the '&nbsp' thing. - Refer to <http://stackoverflow.com/questions/1357078/whats-the-difference-between-nbsp-and#answer-1357090> - &nbsp is converted to '/xa0' when unicode snob is on
commit d77f99ccccdbada1ff0a3b18a4e5904b8e6bf5c3 1451650201 -----sp :: Merge pull request #104 from theSage21/master

hunks: 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index af6de86..9c34f10 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,11 +1,19 @@
-0000.0.00
+0000.00.00
+=========
+----
+
+* <s>, <strike>, <del> now rendered as ~~text~~
+
+2015.11.4
 =========
 ----
 
 * Fix #38: Long links wrapping controlled by `--no-wrap-links`.
 * Note: `--no-wrap-links` implies `--reference-links`
-* Fix #87: Decode errors can be handled via command line.
 * Feature #83: Add callback-on-tag.
+* Fix #87: Decode errors can be handled via command line.
+* Feature #95: Docs, decode errors spelling mistake.
+* Fix #84: Make bodywidth kwarg overridable using config.
 
 
 2015.6.21
@@ -18,7 +26,6 @@
 * Fix #61: Functionality added for optional use of automatic links.
 * Feature #80: ``title`` attribute is preserved in both inline and reference links.
 * Feature #82: More command line options. See docs.
-* Fix #84: Make bodywidth kwarg overridable using config.
 
 
 2015.6.12
diff --git a/html2text/__init__.py b/html2text/__init__.py
index af71ccd..89dd1fd 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -29,7 +29,7 @@
     skipwrap
 )
 
-__version__ = (2015, 6, 21)
+__version__ = (2015, 11, 4)
 
 
 # TODO:
@@ -72,8 +72,6 @@
         self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli
         self.hide_strikethrough = False  # covered in cli
         self.mark_code = config.MARK_CODE
-        self.single_line_break = config.SINGLE_LINE_BREAK
-        self.use_automatic_links = config.USE_AUTOMATIC_LINKS
         self.wrap_links = config.WRAP_LINKS  # covered in cli
         self.tag_callback = None
 
@@ -306,7 +304,7 @@
                 tag_style = element_style(attrs, self.style_def, parent_style)
                 self.tag_stack.append((tag, attrs, tag_style))
             else:
-                dummy, attrs, tag_style = self.tag_stack.pop()
+                dummy, attrs, tag_style = self.tag_stack.pop() if self.tag_stack else (None, {}, {})
                 if self.tag_stack:
                     parent_style = self.tag_stack[-1][2]
 
@@ -367,9 +365,9 @@
             self.o(self.strong_mark)
         if tag in ['del', 'strike', 's']:
             if start:
-                self.o("<" + tag + ">")
+                self.o('~~')
             else:
-                self.o("</" + tag + ">")
+                self.o('~~')
 
         if self.google_doc:
             if not self.inheader:
diff --git a/html2text/utils.py b/html2text/utils.py
index a2a2d8c..418c89c 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -80,7 +80,7 @@
     style = parent_style.copy()
     if 'class' in attrs:
         for css_class in attrs['class'].split():
-            css_style = style_def['.' + css_class]
+            css_style = style_def.get('.' + css_class, {})
             style.update(css_style)
     if 'style' in attrs:
         immediate_style = dumb_property_dict(attrs['style'])
diff --git a/setup.py b/setup.py
index 4dbbdf4..d83ee61 100644
--- a/setup.py
+++ b/setup.py
@@ -58,7 +58,8 @@
         'Programming Language :: Python :: 3.0',
         'Programming Language :: Python :: 3.1',
         'Programming Language :: Python :: 3.2',
-        'Programming Language :: Python :: 3.3'
+        'Programming Language :: Python :: 3.3',
+        'Programming Language :: Python :: 3.4',
     ],
     entry_points="""
         [console_scripts]
diff --git a/test/decript_tage.md b/test/decript_tage.md
index db18500..eba0ada 100644
--- a/test/decript_tage.md
+++ b/test/decript_tage.md
@@ -1,2 +1,2 @@
-<del>something</del> <strike>something</strike> <s>something</s>
+~~something~~ ~~something~~ ~~something~~
 

=====================================================================
start time: Sun Jun 21 00:00:00 CST 2015
end time: Wed Nov 04 00:00:00 CST 2015
description: 
=========
----
* Fix #38: Long links wrapping controlled by ``--no-wrap-links``.
* Note: ``--no-wrap-links`` implies ``--reference-links``
* Feature #83: Add callback-on-tag.
* Fix #87: Decode errors can be handled via command line.
* Feature #95: Docs, decode errors spelling mistake.
* Fix #84: Make bodywidth kwarg overridable using config.

commit message: 
commit 79c2c7f3dd8531b6db5ddd577550484e241e487a 1434896636 -----sp :: Add .coverage.* to be ignored
commit 29e84aa035a5c40b349113ef90b6a436de729c55 1434896685 -----sp :: Changelog entry should be in the top
commit 3b8904a7d97d6bc2745abbc3149bf4daf7e2a50d 1434896732 -----sp :: Fix formatting for changelog
commit 750f905937b85ea00d770a9bb6265203373946d0 1434896922 -----sp :: More than 79 is not acceptable in the universe
commit d3ba69f0fb5dd74670d0963f90fc7a79213a5735 1434896974 -----sp :: Style is important
commit bb20b071dc5e37846e1d44e5b126adea334fc673 1434897091 -----sp :: Pretty is important
commit 9b07bb347f9eba8897970bcd1a8482a4c62f99be 1434897267 -----sp :: try except block is slow
commit b8415f83e7f26a907309e78a2dd343a7b9063199 1434897758 -----sp :: Bump version to make it ready to deploy
commit 4a936568516a6274f912c275827fe8d7d6bdb2d6+ 1435776831 -----sp :: Make bodywidth kwarg overridable using config
commit 558db3755cf2509043ed3cc25645e0e9d55369b5 1435995767 -----sp :: Added failing links
commit d20cbc25898f8f277046ae31536587623deb508b+ 1435998415 -----sp :: Test passing for long wrap links. New option --no-wrap-links Basic link ignore added.
commit 7becaef1c3486e64f26c4989fab19ca5d3513fcb 1435999214 -----sp :: Switched to simple regex link checking. Reference links are not included for now.
commit 59394a26e960b560bd5bf042616d4ff72e164c5e 1435999999 -----sp :: Added support for reference links.
commit 6785fabec36b79b910ccf344c9580483bdf26b68 1436000180 -----sp :: Merge branch 'long_links'
commit e71752dcee38835654e633d77b43ab6e80120f0a+ 1436005037 -----sp :: Merge pull request #84 from emillon/bodywidth-kwarg
commit f069b7074952814c9d34662f4fc2417275120c57+ 1436072341 -----sp :: `--no-wrap-links` implies `--reference-links`
commit 2be5a8137aa6653ef5ec0c64a881d2581f7482ba 1436072480 -----sp :: Merge branch 'long_links' Changelog update
commit 8c58949e8de06e9e07a145844886dc98ac401d2b 1436146594 -----sp :: README update. Docs update
commit ab3c470a3003a83dbddd85652dc6dd0b226889b6 1436189352 -----sp :: Merge pull request #86 from theSage21/master
commit e4af89e8b09b80d1d6fd5ca677d466d77d3e918d+ 1436202405 -----sp :: Added option via command line to control decode errors.
commit c5df5384a3565274a8817a410ccc7abce5f352e6 1436202427 -----sp :: updated docs
commit 4ba74bdc33454aa558958e41bebb79a584589f71 1436202971 -----sp :: Updated changelog Reverted default of `--decode-errors` to 'strict' to maintain backward compatibility.
commit 57a5a64f92d95825c549a9bc1bf8143b13dcda3b 1436203330 -----sp :: Merge branch 'decode_errors'
commit 5d3546b152323fb79f8f620a6348b6df388edbda 1436234296 -----sp :: Fix for python2.6 as it does not support keyword arguments for 'decode'
commit a5f8e85ce3ff91abba8f73ac792310e34a0f0cef 1436238838 -----sp :: Added warning in UnicodeDecodeErrors and notified of --deocde-errors flag.
commit 919d12b7b0866418fae152419c6fb571b9a5d1a1 1436239832 -----sp :: Coverage hack. Will write tests later on.
commit 1e0d6b6cbaa32fbaf430ac8205ea666a95c6046f 1436286231 -----sp :: Merge pull request #88 from theSage21/master
commit 99e4a39982c8d04984f8d7bc90e6b404942bd519 1444714964 -----sp :: deocde errors spelling mistake
commit 4df5923c538a67348f28810f0aea0c4166b716bc 1445108223 -----sp :: Remove the extra spaces on <br> encounter as per #91
commit f67b4d2fefc864c010eaabbe3156ce789181a393 1446392032 -----sp :: Possible fix for coveralls
commit 84e4bf2dd35e5ed14f5961b4d028a7af564c40d2 1446392336 -----sp :: possible fix for coveralls build
commit 042f930922026b3a99ff064d1474959eac3dd25a 1446392343 -----sp :: Merge branch 'master' of https://github.com/theSage21/html2text into build_errors
commit 10206ee2e89a4e092fa82bd209528cd520ebb703 1446392584 -----sp :: Rollback the br tag changes mistakenly inserted
commit 0b47630a3b96426c6915beba86ad7a83cff2d86f+ 1446392941 -----sp :: Merge pull request #95 from theSage21/master
commit 02378cb6434b5e300bd547ed5c676785adc0cf22+ 1446393882 -----sp :: Add callback
commit b809f07a264b415e6ca233e028df9adb08936495+ 1446394861 -----sp :: Merge pull request #93 from critiqjo/callback-on-tag
commit 7df6caf1de06106c1d275bea015f360b03e2aece 1446408811 -----sp :: Fix changeLog typos

hunks: 
diff --git a/.travis.yml b/.travis.yml
index a744223..c599f7f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,7 +7,7 @@
   - "3.3"
   - "3.4"
 install:
-    - pip install coveralls
+    - pip install coveralls==0.5
 before_script:
   - '[ "${TRAVIS_PYTHON_VERSION}" = "2.6" ] && pip install --use-mirrors unittest2 || /bin/true'
   - export COVERAGE_PROCESS_START=$PWD/.coveragerc
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 7f5fbb8..39f7a98 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -17,6 +17,8 @@
 * Arjoonn Sharma <gh: theSage21>
 * Ali Mohammad <gh: alawibaba>
 * Albert Berger <gh: nbdsp>
+* Etienne Millon <me@emillon.org>
+* John C F <gh: critiqjo>
 
 
 Maintainer:
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 6a58d72..af6de86 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,26 @@
+0000.0.00
+=========
+----
+
+* Fix #38: Long links wrapping controlled by `--no-wrap-links`.
+* Note: `--no-wrap-links` implies `--reference-links`
+* Fix #87: Decode errors can be handled via command line.
+* Feature #83: Add callback-on-tag.
+
+
+2015.6.21
+=========
+----
+
+* Fix #31: HTML entities stay inside link.
+* Fix #71: Coverage detects command line tests.
+* Fix #39: Documentation update.
+* Fix #61: Functionality added for optional use of automatic links.
+* Feature #80: ``title`` attribute is preserved in both inline and reference links.
+* Feature #82: More command line options. See docs.
+* Fix #84: Make bodywidth kwarg overridable using config.
+
+
 2015.6.12
 =========
 ----
@@ -123,14 +146,3 @@
 
 * Fix #1: Add ``ChangeLog.rst`` file.
 * Fix #2: Add ``AUTHORS.rst`` file.
-
-0000.0.00
-=========
-----
-
-* Fix #31: HTML entities stay inside link
-* Fix #71: Coverage detects command line tests
-* Fix #39: Documentation update
-* Fix #61: Functionality added for optional use of automatic links
-* Feature #80: 'title' attribute is preserved in both inline and reference links
-* Feature #82: More command line options. See docs.
diff --git a/README.md b/README.md
index a4d79f2..2c7254d 100644
--- a/README.md
+++ b/README.md
@@ -15,27 +15,16 @@
 
 Usage: `html2text [(filename|url) [encoding]]`
 
-
 | Option                                                 | Description
 |--------------------------------------------------------|---------------------------------------------------
 | `--version`                                            | Show program's version number and exit
 | `-h`, `--help`                                         | Show this help message and exit
 | `--ignore-links`                                       | Don't include any formatting for links
-|`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
-|`--ignore-images`                                       | Don't include any formatting for images
-|`--images-to-alt`                                       | Discard image data, only keep alt text
-|`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
-|`-g`, `--google-doc`                                    | Convert an html-exported Google Document
-|`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
-|`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
-|`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
-|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
-| `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
-| `--single-line-break`                                  | Use a single line break after a block element rather than two.
 | `--reference-links`                                    | Use reference links instead of links to create markdown
 | `--mark-code`                                          | Mark preformatted and code blocks with [code]...[/code]
 
+For a complete list of options see the [docs](docs/usage.md)
 
 
 Or you can use it from within `Python`:
diff --git a/docs/usage.md b/docs/usage.md
index 02aa81a..675b3b6 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -79,6 +79,8 @@
     - RE_MD_BACKSLASH_MATCHER to match \char
     - USE_AUTOMATIC_LINKS to convert <a href='http://xyz'>http://xyz</a> to <http://xyz>
     - MARK_CODE to wrap 'pre' blocks with [code]...[/code] tags
+    - WRAP_LINKS to decide if links have to be wrapped during text wrapping (implies INLINE_LINKS = False)
+    - DECODE_ERRORS to handle decoding errors. 'strict', 'ignore', 'replace' are the acceptable values.
 
 To alter any option the procedure is to create a parser with
 `parser = html2text.HTML2Text()` and to set the option on the parser.
@@ -114,3 +116,5 @@
 | `--no-skip-internal-links`                             | Turn off skipping of internal links
 | `--links-after-para`                                   | Put the links after the paragraph and not at end of document
 | `--mark-code`                                          | Mark code with [code]...[/code] blocks
+| `--no-wrap-links`                                      | Do not wrap links during text wrapping. Implies `--reference-links`
+| `--decode-errors`=`HANDLER`                            | What to do in case an error is encountered. `ignore`, `strict`, `replace` etc.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 3ca4905..af71ccd 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -29,7 +29,7 @@
     skipwrap
 )
 
-__version__ = (2015, 6, 12)
+__version__ = (2015, 6, 21)
 
 
 # TODO:
@@ -72,6 +72,10 @@
         self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli
         self.hide_strikethrough = False  # covered in cli
         self.mark_code = config.MARK_CODE
+        self.single_line_break = config.SINGLE_LINE_BREAK
+        self.use_automatic_links = config.USE_AUTOMATIC_LINKS
+        self.wrap_links = config.WRAP_LINKS  # covered in cli
+        self.tag_callback = None
 
         if out is None:  # pragma: no cover
             self.out = self.outtextf
@@ -172,7 +176,8 @@
 
     def handle_entityref(self, c):
         entityref = self.entityref(c)
-        if not self.code and not self.pre and entityref != '&nbsp_place_holder;':
+        if (not self.code and not self.pre
+                and entityref != '&nbsp_place_holder;'):
             entityref = cgi.escape(entityref)
         self.handle_data(entityref, True)
 
@@ -277,9 +282,14 @@
         else:
             attrs = dict(attrs)
 
+        if self.tag_callback is not None:
+            if self.tag_callback(self, tag, attrs, start) is True:
+                return
+
         # first thing inside the anchor tag is another tag that produces some output
-        if start and not self.maybe_automatic_link is None and \
-             tag not in ['p', 'div', 'style', 'dl', 'dt'] and (tag != "img" or self.ignore_images):
+        if (start and not self.maybe_automatic_link is None
+                and tag not in ['p', 'div', 'style', 'dl', 'dt']
+                and (tag != "img" or self.ignore_images)):
             self.o("[")
             self.maybe_automatic_link = None
             self.empty_link = False
@@ -701,7 +711,8 @@
 
         if not self.maybe_automatic_link is None:
             href = self.maybe_automatic_link
-            if href == data and self.absolute_url_matcher.match(href) and self.use_automatic_links:
+            if (href == data and self.absolute_url_matcher.match(href)
+                    and self.use_automatic_links):
                 self.o("<" + data + ">")
                 self.empty_link = False
                 return
@@ -791,9 +802,14 @@
         assert wrap, "Requires Python 2.3."
         result = ''
         newlines = 0
+        # I cannot think of a better solution for now.
+        # To avoid the non-wrap behaviour for entire paras
+        # because of the presence of a link in it
+        if not self.wrap_links:
+            self.inline_links = False
         for para in text.split("\n"):
             if len(para) > 0:
-                if not skipwrap(para):
+                if not skipwrap(para, self.wrap_links):
                     result += "\n".join(wrap(para, self.body_width))
                     if para.endswith('  '):
                         result += "  \n"
@@ -816,7 +832,9 @@
         return result
 
 
-def html2text(html, baseurl='', bodywidth=config.BODY_WIDTH):
+def html2text(html, baseurl='', bodywidth=None):
+    if bodywidth is None:
+        bodywidth = config.BODY_WIDTH
     h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
 
     return h.handle(html)
diff --git a/html2text/cli.py b/html2text/cli.py
index b3bfa64..d765f59 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -8,11 +8,28 @@
 def main():
     baseurl = ''
 
+    class bcolors:  # pragma: no cover
+        HEADER = '\033[95m'
+        OKBLUE = '\033[94m'
+        OKGREEN = '\033[92m'
+        WARNING = '\033[93m'
+        FAIL = '\033[91m'
+        ENDC = '\033[0m'
+        BOLD = '\033[1m'
+        UNDERLINE = '\033[4m'
+
     p = optparse.OptionParser(
         '%prog [(filename|url) [encoding]]',
         version='%prog ' + ".".join(map(str, __version__))
     )
     p.add_option(
+        "--no-wrap-links",
+        dest="wrap_links",
+        action="store_false",
+        default=config.WRAP_LINKS,
+        help="wrap links during conversion"
+    )
+    p.add_option(
         "--ignore-emphasis",
         dest="ignore_emphasis",
         action="store_true",
@@ -165,7 +182,15 @@
         dest="mark_code",
         default=config.MARK_CODE,
         help="Mark program code blocks with [code]...[/code]"
-    )    
+    )
+    p.add_option(
+        "--decode-errors",
+        dest="decode_errors",
+        action="store",
+        type="string",
+        default=config.DECODE_ERRORS,
+        help="What to do in case of decode errors.'ignore', 'strict' and 'replace' are acceptable values"
+    )
     (options, args) = p.parse_args()
 
     # process input
@@ -201,7 +226,18 @@
         data = wrap_read()
 
     if hasattr(data, 'decode'):
-        data = data.decode(encoding)
+        try:
+            try:
+                data = data.decode(encoding, errors=options.decode_errors)
+            except TypeError:
+                # python 2.6.x does not have the errors option
+                data = data.decode(encoding)
+        except UnicodeDecodeError as err:
+            warning = bcolors.WARNING + "Warning:" + bcolors.ENDC
+            warning += ' Use the ' + bcolors.OKGREEN
+            warning += '--decode-errors=ignore' + bcolors.ENDC + 'flag.'
+            print(warning)
+            raise err
 
     h = HTML2Text(baseurl=baseurl)
     # handle options
@@ -230,5 +266,6 @@
     h.skip_internal_links = options.skip_internal_links
     h.links_each_paragraph = options.links_each_paragraph
     h.mark_code = options.mark_code
+    h.wrap_links = options.wrap_links
 
     wrapwrite(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
index 166c0e7..2120a41 100644
--- a/html2text/compat.py
+++ b/html2text/compat.py
@@ -1,12 +1,13 @@
-try:  # pragma: no cover
-    import urllib.parse as urlparse
-    import html.entities as htmlentitydefs
-    import html.parser as HTMLParser
-except ImportError:  # pragma: no cover
+import sys
+
+
+if sys.version_info[0] == 2:
     import htmlentitydefs
     import urlparse
     import HTMLParser
-try:  # pragma: no cover
-    import urllib.request as urllib
-except ImportError:  # pragma: no cover
     import urllib
+else:
+    import urllib.parse as urlparse
+    import html.entities as htmlentitydefs
+    import html.parser as HTMLParser
+    import urllib.request as urllib
diff --git a/html2text/config.py b/html2text/config.py
index e5f5c24..85bf47d 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -23,6 +23,8 @@
 # Protect links from line breaks surrounding them with angle brackets (in
 # addition to their square brackets)
 PROTECT_LINKS = False
+# WRAP_LINKS = True
+WRAP_LINKS = True
 
 # Number of pixels Google indents nested lists
 GOOGLE_LIST_INDENT = 36
@@ -33,6 +35,7 @@
 IMAGES_WITH_SIZE = False
 IGNORE_EMPHASIS = False
 MARK_CODE = False
+DECODE_ERRORS = 'strict'
 
 # Convert links with same href and text to <href> format if they are absolute links
 USE_AUTOMATIC_LINKS = True
@@ -45,6 +48,7 @@
 RE_UNORDERED_LIST_MATCHER = re.compile(r'[-\*\+]\s')
 RE_MD_CHARS_MATCHER = re.compile(r"([\\\[\]\(\)])")
 RE_MD_CHARS_MATCHER_ALL = re.compile(r"([`\*_{}\[\]\(\)#!])")
+RE_LINK = re.compile(r"(\[.*?\] ?\(.*?\))|(\[.*?\]:.*?)")  # to find links in the text
 RE_MD_DOT_MATCHER = re.compile(r"""
     ^             # start of line
     (\s*\d+)      # optional whitespace and a number
diff --git a/html2text/utils.py b/html2text/utils.py
index 0436482..a2a2d8c 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -1,6 +1,6 @@
 import sys
-from html2text import config
 
+from html2text import config
 from html2text.compat import htmlentitydefs
 
 
@@ -172,7 +172,11 @@
     return 0
 
 
-def skipwrap(para):
+def skipwrap(para, wrap_links):
+    # If it appears to contain a link
+    # don't wrap
+    if (len(config.RE_LINK.findall(para)) > 0) and not wrap_links:
+        return True
     # If the text begins with four spaces or one tab, it's a code block;
     # don't wrap
     if para[0:4] == '    ' or para[0] == '\t':
diff --git a/sitecustomize.py b/sitecustomize.py
index 8a045a9..973a265 100644
--- a/sitecustomize.py
+++ b/sitecustomize.py
@@ -1,5 +1,8 @@
 import os
+
 import coverage
+
+
 here = os.getcwd()
 config_file = os.path.join(here, '.coveragerc')
 os.environ['COVERAGE_PROCESS_START'] = config_file
diff --git a/test/no_wrap_links.html b/test/no_wrap_links.html
new file mode 100644
index 0000000..650ad81
--- /dev/null
+++ b/test/no_wrap_links.html
@@ -0,0 +1 @@
+And <a href="http://bugs.debian.org/cgi-bin/pkgreport.cgi?tag=multiarch;users=debian-dpkg@lists.debian.org">here</a> is a long link I had at hand.</p>
diff --git a/test/no_wrap_links.md b/test/no_wrap_links.md
new file mode 100644
index 0000000..34fbfbc
--- /dev/null
+++ b/test/no_wrap_links.md
@@ -0,0 +1,2 @@
+And [here](http://bugs.debian.org/cgi-bin/pkgreport.cgi?tag=multiarch;users=debian-dpkg@lists.debian.org) is a long link I had at hand.
+
diff --git a/test/no_wrap_links_no_inline_links.html b/test/no_wrap_links_no_inline_links.html
new file mode 100644
index 0000000..c0c44ea
--- /dev/null
+++ b/test/no_wrap_links_no_inline_links.html
@@ -0,0 +1 @@
+And <a href="http://bugs.debian.org/cgi-bin/pkgreport.cgi?tag=multiarch;users=debian-dpkg@lists.debian.org">here</a> is a long link I had at hand.
diff --git a/test/no_wrap_links_no_inline_links.md b/test/no_wrap_links_no_inline_links.md
new file mode 100644
index 0000000..2e7f3e1
--- /dev/null
+++ b/test/no_wrap_links_no_inline_links.md
@@ -0,0 +1,2 @@
+And [here](http://bugs.debian.org/cgi-bin/pkgreport.cgi?tag=multiarch;users=debian-dpkg@lists.debian.org) is a long link I had at hand. 
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index f6e45ab..052a069 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -65,6 +65,13 @@
     return result, actual
 
 
+def test_function(fn, **kwargs):
+    with open(fn) as inf:
+        actual = html2text.html2text(inf.read(), **kwargs)
+    result = get_baseline(fn)
+    return result, actual
+
+
 def get_dump_name(fn, suffix):
     return '%s-%s_output.md' % (os.path.splitext(fn)[0], suffix)
 
@@ -98,8 +105,13 @@
             result, actual = test_command(fn, *cmdline_args)
             self.assertEqual(result, actual)
 
+    def test_func(self):
+        result, actual = test_function(fn, **func_args)
+        self.assertEqual(result, actual)
+
     module_args = {}
     cmdline_args = []
+    func_args = {}
     base_fn = os.path.basename(fn).lower()
 
     if base_fn.startswith('google'):
@@ -126,6 +138,7 @@
         # module_args['unicode_snob'] = True
         module_args['body_width'] = 0
         cmdline_args.append('--body-width=0')
+        func_args['bodywidth'] = 0
 
     if base_fn.startswith('protect_links'):
         module_args['protect_links'] = True
@@ -148,22 +161,31 @@
     if base_fn.startswith('no_inline_links'):
         module_args['inline_links'] = False
         cmdline_args.append('--reference-links')
+    
+    if base_fn.startswith('no_wrap_links'):
+        module_args['wrap_links'] = False
+        cmdline_args.append('--no-wrap-links')
 
     if base_fn.startswith('mark_code'):
         module_args['mark_code'] = True
         cmdline_args.append('--mark-code')
-        
-    return test_mod, test_cmd
+
+    if base_fn not in ['bodywidth_newline.html', 'abbr_tag.html']:
+        test_func = None
+
+    return test_mod, test_cmd, test_func
 
 # Originally from http://stackoverflow.com/questions/32899/\
 #    how-to-generate-dynamic-parametrized-unit-tests-in-python
 test_dir_name = os.path.dirname(os.path.realpath(__file__))
 for fn in glob.glob("%s/*.html" % test_dir_name):
     test_name = 'test_%s' % os.path.splitext(os.path.basename(fn))[0].lower()
-    test_m, test_c = generate_test(fn)
+    test_m, test_c, test_func = generate_test(fn)
     setattr(TestHTML2Text, test_name + "_mod", test_m)
     if test_c:
         setattr(TestHTML2Text, test_name + "_cmd", test_c)
+    if test_func:
+        setattr(TestHTML2Text, test_name + "_func", test_func)
 
 if __name__ == "__main__":
     unittest.main()

=====================================================================
start time: Fri Jun 12 00:00:00 CST 2015
end time: Sun Jun 21 00:00:00 CST 2015
description: 
=========
----
* Fix #31: HTML entities stay inside link.
* Fix #71: Coverage detects command line tests.
* Fix #39: Documentation update.
* Fix #61: Functionality added for optional use of automatic links.
* Feature #80: ``title`` attribute is preserved in both inline and reference links.
* Feature #82: More command line options. See docs.

commit message: 
commit 9440f588aa011cd9d99351d60bd9009edc33559d 1434092366 -----sp :: Add Albert Berger to Authors
commit ff0236cc6133d7ebc1622905b29180c0dfc16be6+ 1434092513 -----sp :: Update changelog with latest changes
commit dc42444f71727898c3208aa873297df7df730ca0+ 1434092708 -----sp :: Add hr lines to changelog
commit 6ad25079f206827835fef3217d239c59390a951e 1434092823 -----sp :: Update Pull guidelines
commit 1fea72e4c4b9cbeedc3660bbff9c5a6f3142ec63+ 1434258300 -----sp :: HTML entities no longer get out of brackets. #31 Changed call order of handle_charref and handle_entityref.
commit 9bcd381f1121853962e66421f64bc21a08f61427+ 1434259151 -----sp :: - Added tests for last fix. - Updated coveragerc.
commit e56982b7c0a4bcdaf3e861ddbd507c2f897e8e1e 1434259519 -----sp :: Removed testing of import statements
commit 9e7d55ae4edada802ca8b0bc756ae6c59918440c+ 1434266042 -----sp :: Changelog update
commit 098c63ec00a5a3b8ed62367b00fc141bc8268ab3 1434268547 -----sp :: Merge conflict fix.
commit 12d6d25b4e21f9e7cf8146ae89a4813c2004f567 1434431452 -----sp :: Merge pull request #77 from theSage21/master
commit 0bfa8197cdb76a619c90425b99242c0a6666c6b5 1434513112 -----sp :: Fix for #74. Invlid unicode ignored
commit e38df3b4787ba6138f27c312d3d3b5bf747b251a 1434513551 -----sp :: Tests for invalid unicode entities
commit 2dce0b27a321f9c1a1ae88ea5fbe3fad50d02eb7 1434515798 -----sp :: Added appropriate ignore lines in cli.py
commit aa7b8981fe23e5d8a1c074d5435b1cd44ee7a68d 1434520517 -----sp :: Testd on various python versions. Retrying travis build
commit f1271b9a60a1e84f4c7a31aeadbb9fe06e1af9d4 1434527406 -----sp :: Merge pull request #79 from theSage21/master
commit ad6a0591ed48c68cb3662ddb1526c2ed441a8199+ 1434545321 -----sp :: Added failing tests for link titles
commit a12aa5846511dc4e3cfaf6025623dd1f9b0b06ac+ 1434546172 -----sp :: Link titles are not lost in inline links. Earlier they only came up in reference style links. Now they are included regardless of link type.
commit e9824cb044a5c31c10c896170f454b29b99c11f8 1434546994 -----sp :: Removed a debug statement.
commit 0aadbd4f30e80956e19b56a4025fb05e4bcb8be2+ 1434620209 -----sp :: Changelog update
commit 4f39df0ad60744739b04583b31dae1c4292fb214+ 1434623902 -----sp :: Merge pull request #80 from theSage21/master
commit c3ab0ba7edb2b0e6fbf09c356c6740a29aff32a7 1434685697 -----sp :: Broke down the main function which was too complex as per pep8. process_input is still too complex but can be simplified.
commit 558ad492b546a545d7c8586d115b4c63914891eb+ 1434687923 -----sp :: Added all options as command line flags.
commit 0a5b976aa650486f05a6580769c7f7f48b8ab309 1434691775 -----sp :: Some more testing
commit 9f42c658140595ec7f6abfb6ee4067668efdc4d4+ 1434700243 -----sp :: More tests and coverage things
commit fa2a17775c3e244006cc15e8052e14ee29bfee48 1434700785 -----sp :: Attempt to fix merge conflict
commit f1651324505bdb8b8dfe61d69a9adb6d8a3ef828 1434702291 -----sp :: Merge fix Merge https://github.com/Alir3z4/html2text
commit ef8af12cda330923a7eebfa6782c6be400f352ca+ 1434703356 -----sp :: - Updated docs. - Update changelog
commit c48cfe1ef87652db1067e7e2d498625fa3ba3c29+ 1434711257 -----sp :: Merge pull request #82 from theSage21/master

hunks: 
diff --git a/.coveragerc b/.coveragerc
index c03d93f..11441c9 100644
--- a/.coveragerc
+++ b/.coveragerc
@@ -3,3 +3,21 @@
 parallel=True
 cover_pylib=False
 source=./html2text
+
+[report]
+# Regexes for lines to exclude from consideration
+exclude_lines =
+    # Have to re-enable the standard pragma
+    pragma: no cover
+
+    # Don't complain about missing debug-only code:
+    def __repr__
+    if self\.debug
+
+    # Don't complain if tests don't hit defensive assertion code:
+    raise AssertionError
+    raise NotImplementedError
+
+    # Don't complain if non-runnable code isn't run:
+    if 0:
+    if __name__ == .__main__.:
diff --git a/ChangeLog.rst b/ChangeLog.rst
index cee71f9..6a58d72 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,5 +1,14 @@
+2015.6.12
+=========
+----
+
+* Feature #76: Making ``pre`` blocks clearer for further automatic formatting.
+* Fix #71: Coverage detects tests carried out in ``subprocesses``
+
+
 2015.6.6
 ========
+----
 
 * Fix #24: ``3.200.3`` vs ``2014.7.3`` output quirks.
 * Fix #61. Malformed links in markdown output.
@@ -114,3 +123,14 @@
 
 * Fix #1: Add ``ChangeLog.rst`` file.
 * Fix #2: Add ``AUTHORS.rst`` file.
+
+0000.0.00
+=========
+----
+
+* Fix #31: HTML entities stay inside link
+* Fix #71: Coverage detects command line tests
+* Fix #39: Documentation update
+* Fix #61: Functionality added for optional use of automatic links
+* Feature #80: 'title' attribute is preserved in both inline and reference links
+* Feature #82: More command line options. See docs.
diff --git a/docs/contributing.md b/docs/contributing.md
index 9507f58..41a2ce0 100644
--- a/docs/contributing.md
+++ b/docs/contributing.md
@@ -6,4 +6,7 @@
 ---------------
 
 - Make the changes modular. The usual method is one change per commit.
+- Add tests. (We love tests).
+- Update the ``ChangeLog.rst``.
+- Add yourself to ``AUTHORS.rst`` if you're not listed.
 - That is all
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
index 8d7df93..c06430b 100644
--- a/docs/how_it_works.md
+++ b/docs/how_it_works.md
@@ -95,7 +95,7 @@
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
 | `--reference-links`                                    | Use reference links instead of inline links to create markdown
 
-
+*A complete list is available [here](usage.md)*
 
 __init__.py
 -----------
diff --git a/docs/usage.md b/docs/usage.md
index 324ee7f..02aa81a 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -83,3 +83,34 @@
 To alter any option the procedure is to create a parser with
 `parser = html2text.HTML2Text()` and to set the option on the parser.
 example: `parser.unicode_snob = True` to set the UNICODE_SNOB option.
+
+
+Command line options
+--------------------
+
+
+| Option                                                 | Description
+|--------------------------------------------------------|---------------------------------------------------
+| `--version`                                            | Show program version number and exit
+| `-h`, `--help`                                         | Show this help message and exit
+| `--ignore-links`                                       | Do not include any formatting for links
+|`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
+|`--ignore-images`                                       | Do not include any formatting for images
+|`--images-to-alt`                                       | Discard image data, only keep alt text
+|`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
+|`-g`, `--google-doc`                                    | Convert an html-exported Google Document
+|`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
+|`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
+|`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
+| `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--single-line-break`                                  | Use a single line break after a block element rather than two.
+| `--reference-links`                                    | Use reference links instead of inline links to create markdown
+| `--ignore-emphasis`                                    | Ignore all emphasis formatting in the html.
+| `-e`, `--asterisk-emphasis`                            | Use asterisk rather than underscore to emphasize text
+| `--unicode-snob`                                       | Use unicode throughout instead of ASCII
+| `--no-automatic-links`                                 | Do not use automatic links like <http://googel.com>
+| `--no-skip-internal-links`                             | Turn off skipping of internal links
+| `--links-after-para`                                   | Put the links after the paragraph and not at end of document
+| `--mark-code`                                          | Mark code with [code]...[/code] blocks
diff --git a/html2text/__init__.py b/html2text/__init__.py
index bd47666..3ca4905 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -7,7 +7,7 @@
 
 try:
     from textwrap import wrap
-except ImportError:
+except ImportError:  # pragma: no cover
     pass
 
 from html2text.compat import urlparse, HTMLParser
@@ -29,7 +29,7 @@
     skipwrap
 )
 
-__version__ = (2015, 6, 6)
+__version__ = (2015, 6, 12)
 
 
 # TODO:
@@ -50,31 +50,32 @@
         self.split_next_td = False
         self.td_count = 0
         self.table_start = False
-        self.unicode_snob = config.UNICODE_SNOB
-        self.escape_snob = config.ESCAPE_SNOB
+        self.unicode_snob = config.UNICODE_SNOB  # covered in cli
+        self.escape_snob = config.ESCAPE_SNOB  # covered in cli
         self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH
-        self.body_width = bodywidth
-        self.skip_internal_links = config.SKIP_INTERNAL_LINKS
-        self.inline_links = config.INLINE_LINKS
-        self.protect_links = config.PROTECT_LINKS
-        self.google_list_indent = config.GOOGLE_LIST_INDENT
-        self.ignore_links = config.IGNORE_ANCHORS
-        self.ignore_images = config.IGNORE_IMAGES
-        self.images_to_alt = config.IMAGES_TO_ALT
-        self.images_with_size = config.IMAGES_WITH_SIZE
-        self.ignore_emphasis = config.IGNORE_EMPHASIS
-        self.bypass_tables = config.BYPASS_TABLES
-        self.google_doc = False
-        self.ul_item_mark = '*'
-        self.emphasis_mark = '_'
+        self.body_width = bodywidth  # covered in cli
+        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli
+        self.inline_links = config.INLINE_LINKS  # covered in cli
+        self.protect_links = config.PROTECT_LINKS  # covered in cli
+        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli
+        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli
+        self.ignore_images = config.IGNORE_IMAGES  # covered in cli
+        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli
+        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli
+        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli
+        self.bypass_tables = config.BYPASS_TABLES  # covered in cli
+        self.google_doc = False  # covered in cli
+        self.ul_item_mark = '*'  # covered in cli
+        self.emphasis_mark = '_'  # covered in cli
         self.strong_mark = '**'
-        self.single_line_break = config.SINGLE_LINE_BREAK
-        self.use_automatic_links = config.USE_AUTOMATIC_LINKS
+        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli
+        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli
+        self.hide_strikethrough = False  # covered in cli
         self.mark_code = config.MARK_CODE
 
-        if out is None:
+        if out is None:  # pragma: no cover
             self.out = self.outtextf
-        else:
+        else:  # pragma: no cover
             self.out = out
 
         # empty list to store output characters before they are "joined"
@@ -167,13 +168,13 @@
         charref = self.charref(c)
         if not self.code and not self.pre:
             charref = cgi.escape(charref)
-        self.o(charref, 1)
+        self.handle_data(charref, True)
 
     def handle_entityref(self, c):
         entityref = self.entityref(c)
         if not self.code and not self.pre and entityref != '&nbsp_place_holder;':
             entityref = cgi.escape(entityref)
-        self.o(entityref, 1)
+        self.handle_data(entityref, True)
 
     def handle_starttag(self, tag, attrs):
         self.handle_tag(tag, attrs, 1)
@@ -189,9 +190,8 @@
         self.a list. If the set of attributes is not found, returns None
         :rtype: int
         """
-        if 'href' not in attrs:
+        if 'href' not in attrs:  # pragma: no cover
             return None
-
         i = -1
         for a in self.a:
             i += 1
@@ -405,7 +405,13 @@
                             self.empty_link = False
                             self.maybe_automatic_link = None
                         if self.inline_links:
-                            self.o("](" + escape_md(a['href']) + ")")
+                            try:
+                                title = escape_md(a['title'])
+                            except KeyError:
+                                self.o("](" + escape_md(a['href']) + ")")
+                            else:
+                                self.o("](" + escape_md(a['href'])
+                                       + ' "' + title + '" )')
                         else:
                             i = self.previousIndex(a)
                             if i is not None:
@@ -568,13 +574,16 @@
 
     # TODO: Add docstring for these one letter functions
     def pbr(self):
+        "Pretty print has a line break"
         if self.p_p == 0:
             self.p_p = 1
 
     def p(self):
+        "Set pretty print to 1 or 2 lines"
         self.p_p = 1 if self.single_line_break else 2
 
     def soft_br(self):
+        "Soft breaks"
         self.pbr()
         self.br_toggle = '  '
 
@@ -683,7 +692,7 @@
             self.out(data)
             self.outcount += 1
 
-    def handle_data(self, data):
+    def handle_data(self, data, entity_char=False):
         if r'\/script>' in data:
             self.quiet -= 1
 
@@ -701,11 +710,11 @@
                 self.maybe_automatic_link = None
                 self.empty_link = False
 
-        if not self.code and not self.pre:
+        if not self.code and not self.pre and not entity_char:
             data = escape_md_section(data, snob=self.escape_snob)
         self.o(data, 1)
 
-    def unknown_decl(self, data):
+    def unknown_decl(self, data):  # pragma: no cover
         # TODO: what is this doing here?
         pass
 
@@ -719,9 +728,12 @@
             return unifiable_n[c]
         else:
             try:
-                return unichr(c)
-            except NameError:  # Python3
-                return chr(c)
+                try:
+                    return unichr(c)
+                except NameError:  # Python3
+                    return chr(c)
+            except ValueError:  # invalid unicode
+                return ''
 
     def entityref(self, c):
         if not self.unicode_snob and c in config.UNIFIABLE.keys():
diff --git a/html2text/cli.py b/html2text/cli.py
index b7239c9..b3bfa64 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -132,6 +132,34 @@
         )
     )
     p.add_option(
+        "--unicode-snob",
+        action="store_true",
+        dest="unicode_snob",
+        default=config.UNICODE_SNOB,
+        help="Use unicode throughout document"
+    )
+    p.add_option(
+        "--no-automatic-links",
+        action="store_false",
+        dest="use_automatic_links",
+        default=config.USE_AUTOMATIC_LINKS,
+        help="Do not use automatic links wherever applicable"
+    )
+    p.add_option(
+        "--no-skip-internal-links",
+        action="store_false",
+        dest="skip_internal_links",
+        default=config.SKIP_INTERNAL_LINKS,
+        help="Do not skip internal links"
+    )
+    p.add_option(
+        "--links-after-para",
+        action="store_true",
+        dest="links_each_paragraph",
+        default=config.LINKS_EACH_PARAGRAPH,
+        help="Put links after each paragraph instead of document"
+    )
+    p.add_option(
         "--mark-code",
         action="store_true",
         dest="mark_code",
@@ -142,7 +170,7 @@
 
     # process input
     encoding = "utf-8"
-    if len(args) > 0 and args[0] != '-':
+    if len(args) > 0 and args[0] != '-':  # pragma: no cover
         file_ = args[0]
         if len(args) == 2:
             encoding = args[1]
@@ -184,7 +212,7 @@
         h.strong_mark = '__'
 
     h.body_width = options.body_width
-    h.list_indent = options.list_indent
+    h.google_list_indent = options.list_indent
     h.ignore_emphasis = options.ignore_emphasis
     h.ignore_links = options.ignore_links
     h.protect_links = options.protect_links
@@ -197,6 +225,10 @@
     h.bypass_tables = options.bypass_tables
     h.single_line_break = options.single_line_break
     h.inline_links = options.inline_links
+    h.unicode_snob = options.unicode_snob
+    h.use_automatic_links = options.use_automatic_links
+    h.skip_internal_links = options.skip_internal_links
+    h.links_each_paragraph = options.links_each_paragraph
     h.mark_code = options.mark_code
 
     wrapwrite(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
index b02fa17..166c0e7 100644
--- a/html2text/compat.py
+++ b/html2text/compat.py
@@ -1,12 +1,12 @@
-try:
+try:  # pragma: no cover
     import urllib.parse as urlparse
     import html.entities as htmlentitydefs
     import html.parser as HTMLParser
-except ImportError:  # Python2
+except ImportError:  # pragma: no cover
     import htmlentitydefs
     import urlparse
     import HTMLParser
-try:  # Python3
+try:  # pragma: no cover
     import urllib.request as urllib
-except ImportError:
+except ImportError:  # pragma: no cover
     import urllib
diff --git a/html2text/utils.py b/html2text/utils.py
index 1bc4102..0436482 100644
--- a/html2text/utils.py
+++ b/html2text/utils.py
@@ -21,7 +21,7 @@
     if tag[0] == 'h' and len(tag) == 2:
         try:
             n = int(tag[1])
-            if n in range(1, 10):
+            if n in range(1, 10):  # pragma: no branch
                 return n
         except ValueError:
             return 0
@@ -62,7 +62,7 @@
     try:
         elements = dict([(a.strip(), dumb_property_dict(b))
                          for a, b in elements])
-    except ValueError:
+    except ValueError:  # pragma: no cover
         elements = {}  # not that important
 
     return elements
@@ -208,7 +208,7 @@
         sys.stdout.write(text)
 
 
-def wrap_read():
+def wrap_read():  # pragma: no cover
     """
     :rtype: str
     """
diff --git a/test/GoogleDocSaved.html b/test/GoogleDocSaved.html
index a0cd19c..10d80cf 100644
--- a/test/GoogleDocSaved.html
+++ b/test/GoogleDocSaved.html
@@ -3,7 +3,7 @@
     <TITLE>
     Sandbox</TITLE>
     <STYLE type="text/css">
-    @import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39;);ol{margin:0;padding:0}p{margin:0}.c12{list-style-type:disc;margin:0;padding:0}.c8{width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c2{padding-left:0pt;direction:ltr;margin-left:36pt}.c11{list-style-type:lower-latin;margin:0;padding:0}.c4{list-style-type:circle;margin:0;padding:0}.c1{padding-left:0pt;direction:ltr;margin-left:72pt}.c7{list-style-type:decimal;margin:0;padding:0}.c3{font-style:italic;font-family:Courier New}.c0{height:11pt;direction:ltr}.c5{font-weight:bold}.c9{font-family:Consolas}.c13{font-family:Courier New}.c6{direction:ltr}.c10{font-style:italic}body{color:#000000;font-size:11pt;font-family:Arial}h1{padding-top:24pt;color:#000000;font-size:24pt;font-family:Arial;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;color:#000000;font-size:18pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;color:#000000;font-size:14pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;color:#000000;font-size:12pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;color:#000000;font-size:11pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;color:#000000;font-size:10pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}</STYLE>
+    @import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39;);ol{margin:0;padding:0}p{margin:0}.c12{list-style-type:disc;margin:0;padding:0;text-decoration:none;}.c8{width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c2{padding-left:0pt;direction:ltr;margin-left:36pt}.c11{list-style-type:lower-latin;margin:0;padding:0}.c4{list-style-type:circle;margin:0;padding:0}.c1{padding-left:0pt;direction:ltr;margin-left:72pt}.c7{;margin:0;padding:0}.c3{font-style:italic;font-family:Courier New}.c0{height:11pt;direction:ltr}.c5{font-weight:bold}.c9{font-family:Consolas}.c13{font-family:Courier New}.c6{direction:ltr}.c10{font-style:italic}body{color:#000000;font-size:11pt;font-family:Arial}h1{padding-top:24pt;color:#000000;font-size:24pt;font-family:Arial;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;color:#000000;font-size:18pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;color:#000000;font-size:14pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;color:#000000;font-size:12pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;color:#000000;font-size:11pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;color:#000000;font-size:10pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}</STYLE>
   </HEAD>
   <BODY class="c8">
     <H1 class="c6">
diff --git a/test/GoogleDocSaved_two.html b/test/GoogleDocSaved_two.html
new file mode 100644
index 0000000..4b30f49
--- /dev/null
+++ b/test/GoogleDocSaved_two.html
@@ -0,0 +1,147 @@
+<HTML>
+  <HEAD>
+    <TITLE>
+    Sandbox</TITLE>
+    <STYLE type="text/css">
+    @import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39;);ol{margin:0;padding:0}p{margin:0}.c12{list-style-type:disc;margin:0;padding:0;text-decoration:none;}.c8{text-decoration:line-through;width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c2{padding-left:0pt;direction:ltr;margin-left:36pt}.c11{list-style-type:lower-latin;margin:0;padding:0}.c4{list-style-type:circle;margin:0;padding:0}.c1{padding-left:0pt;direction:ltr;margin-left:72pt}.c7{;margin:0;padding:0}.c3{font-style:italic;font-family:Courier New}.c0{height:11pt;direction:ltr}.c5{font-weight:bold}.c9{font-family:Consolas}.c13{font-family:Courier New}.c6{direction:ltr}.c10{font-style:italic}body{color:#000000;font-size:11pt;font-family:Arial}h1{padding-top:24pt;color:#000000;font-size:24pt;font-family:Arial;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;color:#000000;font-size:18pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;color:#000000;font-size:14pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;color:#000000;font-size:12pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;color:#000000;font-size:11pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;color:#000000;font-size:10pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}</STYLE>
+  </HEAD>
+  <BODY class="c8">
+    <H1 class="c6">
+      <A name="h.xdvi2xfx4hkq">
+      </A>
+      <SPAN>
+      test doc</SPAN>
+    </H1>
+    <P class="c6">
+    <SPAN>
+    first issue</SPAN>
+    </P>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <OL class="c12" start="1">
+      <LI class="c2">
+      <SPAN>
+      bit</SPAN>
+      </LI>
+      <LI class="c2">
+      <SPAN class="c5 c10">
+      bold italic</SPAN>
+      </LI>
+    </OL>
+    <OL class="c4" start="1">
+      <LI class="c1">
+      <SPAN>
+      orange</SPAN>
+      </LI>
+      <LI class="c1">
+      <SPAN>
+      apple</SPAN>
+      </LI>
+    </OL>
+    <OL class="c12" start="3">
+      <LI class="c2">
+      <SPAN>
+      final</SPAN>
+      </LI>
+    </OL>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <P class="c6">
+    <SPAN>
+    text to separate lists</SPAN>
+    </P>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <OL class="c7" start="1">
+      <LI class="c2">
+      <SPAN>
+      now with numbers</SPAN>
+      </LI>
+      <LI class="c2">
+      <SPAN>
+      the prisoner</SPAN>
+      </LI>
+    </OL>
+    <OL class="c11" start="1">
+      <LI class="c1">
+      <SPAN>
+      not an </SPAN>
+      <SPAN class="c10">
+      italic number</SPAN>
+      </LI>
+      <LI class="c1">
+      <SPAN>
+      a </SPAN>
+      <SPAN class="c5">
+      bold human</SPAN>
+      <SPAN>
+      &nbsp;being</SPAN>
+      </LI>
+    </OL>
+    <OL class="c7" start="3">
+      <LI class="c2">
+      <SPAN>
+      end</SPAN>
+      </LI>
+    </OL>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c5">
+    bold</SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c10">
+    italic</SPAN>
+    </P>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c9">
+    def func(x):</SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c9">
+    &nbsp; if x &lt; 1:</SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c9">
+    &nbsp; &nbsp; return &#39;a&#39;</SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c9">
+    &nbsp; return &#39;b&#39;</SPAN>
+    </P>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+    <P class="c6">
+    <SPAN>
+    Some </SPAN>
+    <SPAN class="c13">
+    fixed width text</SPAN>
+    <SPAN>
+    &nbsp;here</SPAN>
+    </P>
+    <P class="c6">
+    <SPAN class="c3">
+    italic fixed width text</SPAN>
+    </P>
+    <P class="c0">
+    <SPAN>
+    </SPAN>
+    </P>
+  </BODY>
+</HTML>
+
diff --git a/test/GoogleDocSaved_two.md b/test/GoogleDocSaved_two.md
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/test/GoogleDocSaved_two.md
diff --git a/test/abbr_tag.html b/test/abbr_tag.html
index e0e4a33..b523d6b 100644
--- a/test/abbr_tag.html
+++ b/test/abbr_tag.html
@@ -1 +1,2 @@
 <abbr title="Three Letter Acronym">TLA</abbr>
+<abbr>xyz</abbr>
diff --git a/test/abbr_tag.md b/test/abbr_tag.md
index 0b030ff..bffbcf2 100644
--- a/test/abbr_tag.md
+++ b/test/abbr_tag.md
@@ -1,4 +1,4 @@
-TLA
+TLA xyz
 
   *[TLA]: Three Letter Acronym
 
diff --git a/test/anchor-undefined-href.html b/test/anchor-undefined-href.html
deleted file mode 100644
index 2019751..0000000
--- a/test/anchor-undefined-href.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<html>
-   <body>
-      <a href class="nolink">anchor</a>
-   </body>
-</html>
diff --git a/test/anchor-undefined-href.md b/test/anchor-undefined-href.md
deleted file mode 100644
index 12e6c62..0000000
--- a/test/anchor-undefined-href.md
+++ /dev/null
@@ -1,2 +0,0 @@
-anchor
-
diff --git a/test/decript_tage.html b/test/decript_tage.html
new file mode 100644
index 0000000..c8826d4
--- /dev/null
+++ b/test/decript_tage.html
@@ -0,0 +1,3 @@
+<del>something</del>
+<strike>something</strike>
+<s>something</s>
diff --git a/test/decript_tage.md b/test/decript_tage.md
new file mode 100644
index 0000000..db18500
--- /dev/null
+++ b/test/decript_tage.md
@@ -0,0 +1,2 @@
+<del>something</del> <strike>something</strike> <s>something</s>
+
diff --git a/test/dl_tag_example.html b/test/dl_tag_example.html
deleted file mode 100644
index 08e629a..0000000
--- a/test/dl_tag_example.html
+++ /dev/null
@@ -1,22 +0,0 @@
-<dl>
-<dt>Definition List</dt>
-<dd>A list of terms and their definitions/descriptions.</dd>
-<dt>Ordered List</dt>
-<dd>A numbered list.</dd>
-<dt>Unordered List</dt>
-<dd>An unnumbered list.</dd>
-</dl>
-
-<h4>Example 2</h4>
-<dl>
-<dt>Vocals</dt>
-<dd>Bruce Dickinson</dd>
-<dt>Guitar</dt>
-<dd>Adrian Smith</dd>
-<dd>Dave Murray</dd>
-<dd>Janick Gers</dd>
-<dt>Bass</dt>
-<dd>Steve Harris</dd>
-<dt>Drums</dt>
-<dd>Nicko McBrain</dd>
-</dl>
diff --git a/test/dl_tag_example.md b/test/dl_tag_example.md
deleted file mode 100644
index b78dcab..0000000
--- a/test/dl_tag_example.md
+++ /dev/null
@@ -1,27 +0,0 @@
-Definition List
-
-    A list of terms and their definitions/descriptions.
-Ordered List
-
-    A numbered list.
-Unordered List
-
-    An unnumbered list.
-
-#### Example 2
-
-Vocals
-
-    Bruce Dickinson
-Guitar
-
-    Adrian Smith
-    Dave Murray
-    Janick Gers
-Bass
-
-    Steve Harris
-Drums
-
-    Nicko McBrain
-
diff --git a/test/flip_emphasis.html b/test/flip_emphasis.html
new file mode 100644
index 0000000..9152f43
--- /dev/null
+++ b/test/flip_emphasis.html
@@ -0,0 +1,2 @@
+<i>Something</i>
+<b>else</b>
diff --git a/test/flip_emphasis.md b/test/flip_emphasis.md
new file mode 100644
index 0000000..9c436c5
--- /dev/null
+++ b/test/flip_emphasis.md
@@ -0,0 +1,2 @@
+*Something* __else__
+
diff --git a/test/header_tags.html b/test/header_tags.html
index aad3e66..0e25793 100644
--- a/test/header_tags.html
+++ b/test/header_tags.html
@@ -1,17 +1,17 @@
 <html>
     <body>
     <h1>H1</h1>
-    <h2>H1</h2>
-    <h3>H1</h3>
-    <h4>H1</h4>
-    <h5>H1</h5>
-    <h6>H1</h6>
-    <h7>H1</h7>
-    <h8>H1</h8>
-    <h9>H1</h9>
-    <h10>H1</h10>
-    <h11>H1</h11>
-    <h12>H1</h12>
+    <h2>H2</h2>
+    <h3>H3</h3>
+    <h4>H4</h4>
+    <h5>H5</h5>
+    <h6>H6</h6>
+    <h7>H7</h7>
+    <h8>H8</h8>
+    <h9>H9</h9>
+    <h10>H10</h10>
+    <h11>H11</h11>
+    <h12>H12</h12>
     <h>NO number</h>
     </body>
 </html>
diff --git a/test/header_tags.md b/test/header_tags.md
index 80a2302..cb1fd31 100644
--- a/test/header_tags.md
+++ b/test/header_tags.md
@@ -1,20 +1,20 @@
 # H1
 
-## H1
+## H2
 
-### H1
+### H3
 
-#### H1
+#### H4
 
-##### H1
+##### H5
 
-###### H1
+###### H6
 
-####### H1
+####### H7
 
-######## H1
+######## H8
 
-######### H1
+######### H9
 
-H1 H1 H1 NO number
+H10 H11 H12 NO number
 
diff --git a/test/html_entities_out_of_text.html b/test/html_entities_out_of_text.html
new file mode 100644
index 0000000..1b062c9
--- /dev/null
+++ b/test/html_entities_out_of_text.html
@@ -0,0 +1 @@
+<a href="http://thth">&#225;ll&#225;s: Country Manager</a>
diff --git a/test/html_entities_out_of_text.md b/test/html_entities_out_of_text.md
new file mode 100644
index 0000000..ee4b0a7
--- /dev/null
+++ b/test/html_entities_out_of_text.md
@@ -0,0 +1,2 @@
+[allas: Country Manager](http://thth)
+
diff --git a/test/images_with_size.html b/test/images_with_size.html
index bcf8e44..fcda9b6 100644
--- a/test/images_with_size.html
+++ b/test/images_with_size.html
@@ -4,4 +4,7 @@
 
 <img src='image_with_width.jpg' alt='An image with a height attr' height='300' data-ignored='ignored data' />
 
-<img src='image_with_width_and_height.jpg' alt='An image with width and height' width='300' height='300' id='ignored-id' />
\ No newline at end of file
+<img src='image_with_width_and_height.jpg' alt='An image with width and height' width='300' height='300' id='ignored-id' />
+<img src='image_with_width_and_height.jpg' width='300' height='300' id='ignored-id' />
+<img src='image_with_width_and_height.jpg' id='ignored-id' />
+<img id='ignored-id' />
diff --git a/test/images_with_size.md b/test/images_with_size.md
index cf71073..8cf35a8 100644
--- a/test/images_with_size.md
+++ b/test/images_with_size.md
@@ -2,5 +2,6 @@
 src='image_with_width.jpg' width='300' alt='An image with a width attr' />
 <img src='image_with_width.jpg' height='300' alt='An image with a height attr'
 /> <img src='image_with_width_and_height.jpg' width='300' height='300' alt='An
-image with width and height' />
+image with width and height' /> <img src='image_with_width_and_height.jpg'
+width='300' height='300' /> ![](image_with_width_and_height.jpg)
 
diff --git a/test/invalid_unicode.html b/test/invalid_unicode.html
new file mode 100644
index 0000000..3dd8b18
--- /dev/null
+++ b/test/invalid_unicode.html
@@ -0,0 +1 @@
+B&#3291685;r
diff --git a/test/invalid_unicode.md b/test/invalid_unicode.md
new file mode 100644
index 0000000..865cc85
--- /dev/null
+++ b/test/invalid_unicode.md
@@ -0,0 +1,2 @@
+Br
+
diff --git a/test/link_titles.html b/test/link_titles.html
new file mode 100644
index 0000000..ceba0d5
--- /dev/null
+++ b/test/link_titles.html
@@ -0,0 +1,3 @@
+<a href="http://example.com" title="MyTitle"> first example</a>
+<br>
+<a href="http://example.com" > second example</a>
diff --git a/test/link_titles.md b/test/link_titles.md
new file mode 100644
index 0000000..d68fb7e
--- /dev/null
+++ b/test/link_titles.md
@@ -0,0 +1,3 @@
+[ first example](http://example.com "MyTitle" )  
+[ second example](http://example.com)
+
diff --git a/test/list_tags_example.html b/test/list_tags_example.html
new file mode 100644
index 0000000..d0a8be2
--- /dev/null
+++ b/test/list_tags_example.html
@@ -0,0 +1,39 @@
+<dl>
+<dt>Definition List</dt>
+<dd>A list of terms and their definitions/descriptions.</dd>
+<dt>Ordered List</dt>
+<dd>A numbered list.</dd>
+<dt>Unordered List</dt>
+<dd>An unnumbered list.</dd>
+</dl>
+
+<h4>Example 2</h4>
+<dl>
+<dt>Vocals</dt>
+<dd>Bruce Dickinson</dd>
+<dt>Guitar</dt>
+<dd>Adrian Smith</dd>
+<dd>Dave Murray</dd>
+<dd>Janick Gers</dd>
+<dt>Bass</dt>
+<dd>Steve Harris</dd>
+<dt>Drums</dt>
+<dd>Nicko McBrain</dd>
+</dl>
+
+<ul>
+<li>some item</li>
+<li>Some other item</li>
+<li>some item</li>
+</ul>
+
+<ol>
+<li>Some other item</li>
+<li>some item</li>
+<li>some item</li>
+</ol>
+
+<ul style="list-style-type:ordered;">
+<li>somthing else here</li>
+<li>some item</li>
+</ul>
diff --git a/test/list_tags_example.md b/test/list_tags_example.md
new file mode 100644
index 0000000..b972369
--- /dev/null
+++ b/test/list_tags_example.md
@@ -0,0 +1,36 @@
+Definition List
+
+    A list of terms and their definitions/descriptions.
+Ordered List
+
+    A numbered list.
+Unordered List
+
+    An unnumbered list.
+
+#### Example 2
+
+Vocals
+
+    Bruce Dickinson
+Guitar
+
+    Adrian Smith
+    Dave Murray
+    Janick Gers
+Bass
+
+    Steve Harris
+Drums
+
+    Nicko McBrain
+
+  * some item
+  * Some other item
+  * some item
+  1. Some other item
+  2. some item
+  3. some item
+  * somthing else here
+  * some item
+
diff --git a/test/no_inline_links_example.html b/test/no_inline_links_example.html
index 982f54c..5e4c45c 100644
--- a/test/no_inline_links_example.html
+++ b/test/no_inline_links_example.html
@@ -1 +1,9 @@
 <a href='http://google.com'>Googler</a>
+<a> No href</a>
+<a title="some title"> No href but title available</a>
+<a href='http://example.com' title="Example title"> Example</a>
+<a href="http://example.com" title="abc">
+<a href="http://example.com" title="abc">
+<a href="http://example.com" title="abc">
+link text
+</a></a></a>
diff --git a/test/no_inline_links_example.md b/test/no_inline_links_example.md
index 2593475..dedea64 100644
--- a/test/no_inline_links_example.md
+++ b/test/no_inline_links_example.md
@@ -1,4 +1,9 @@
-[Googler][1]
+[Googler][1] No href No href but title available [ Example][2] [ [ [ link text
+][3]][3]][3]
 
    [1]: http://google.com
 
+   [2]: http://example.com (Example title)
+
+   [3]: http://example.com (abc)
+

=====================================================================
start time: Sat Jun 06 00:00:00 CST 2015
end time: Fri Jun 12 00:00:00 CST 2015
description: 
=========
----
* Feature #76: Making ``pre`` blocks clearer for further automatic formatting.
* Fix #71: Coverage detects tests carried out in ``subprocesses``

commit message: 
commit 1d8f553be95ca4db8327a795d4d97db395841a4a+ 1433846566 -----sp :: Coverage now detects the command line tests which were run in subprocesses.
commit 5de4bb2d801053c3846910c476ac1ee6b9c8628e 1433846945 -----sp :: README beauty fix
commit 06c8be3bfb6997a5202caf4ed1ce4a413f2369e3 1433867800 -----sp :: Coveralls fix
commit cece37f4a80485d380ac01af90f3063175c991c7 1433869847 -----sp :: Travis fix
commit e136803138583a7567c38d97b848a49ef7dd8a51 1433870754 -----sp :: Last travis fix attempt for the night
commit 8ceaa35f96fc9f01fe8ea71cfc635731f925f8c6 1433871020 -----sp :: travisymp fix again
commit 3e5b0d71d2461143264d59499e6576f69319d6f0 1433904522 -----sp :: Travis yml fix
commit 6fc944112e29de5a9457fb9574068692bb80f2b9 1433904596 -----sp :: Merge branch 'master' of https://github.com/theSage21/html2text
commit 78d7534765084522ce6b4655ed6e02ffe6fa596b 1433940170 -----sp :: Another travis fix attempt.
commit 80a0b9344d4982f6bb151d3454667ecf9583912c 1433955674 -----sp :: Merge pull request #75 from theSage21/master
commit 0f81ccf034eb00ded1ed93a09bc9da1f4f9399bc 1433980207 -----sp :: Added --mark-code option.
commit c08f281d1fe89f24b39b2378ca2454130dab0479 1434014184 -----sp :: Added tests and doc for --mark_code
commit f9d3ca10662da43ff951a8c85c5f5cde9237b20c+ 1434014935 -----sp :: Merge pull request #76 from nbdsp/master

hunks: 
diff --git a/.travis.yml b/.travis.yml
index 66b5fe4..a744223 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,7 +10,10 @@
     - pip install coveralls
 before_script:
   - '[ "${TRAVIS_PYTHON_VERSION}" = "2.6" ] && pip install --use-mirrors unittest2 || /bin/true'
+  - export COVERAGE_PROCESS_START=$PWD/.coveragerc
 script:
-  PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
+  - PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text --rcfile=.coveragerc setup.py test -v
+  - coverage combine
+  - coverage report
 after_success:
-    coveralls
+    coveralls --rcfile=.coveragerc
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 0d90205..aa55be8 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -15,6 +15,7 @@
 * Scott Blackburn <scott@skipflag.com>
 * Peter Wu <peter@lekensteyn.nl>
 * Arjoonn Sharma <gh: theSage21>
+* Ali Mohammad <gh: alawibaba>
 
 
 Maintainer:
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 4d5fe98..cee71f9 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,16 @@
+2015.6.6
+========
+
+* Fix #24: ``3.200.3`` vs ``2014.7.3`` output quirks.
+* Fix #61. Malformed links in markdown output.
+* Feature #62: Automatic version number.
+* Fix #63: Nested code, anchor bug.
+* Fix #64: Proper handling of anchors with content that starts with tags.
+* Feature #67: Documentation all over the module.
+* Feature #70: Adding tests for the module.
+* Fix #73: Typo in config documentation.
+
+
 2015.4.14
 =========
 ----
@@ -16,7 +29,7 @@
 
 
 2015.2.18
-==========
+=========
 ----
 
 * Fix #38: Anchor tags with empty text or with `<img>` tags inside are no longer stripped.
diff --git a/README.md b/README.md
index 3ea4493..a4d79f2 100644
--- a/README.md
+++ b/README.md
@@ -34,6 +34,7 @@
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
 | `--single-line-break`                                  | Use a single line break after a block element rather than two.
 | `--reference-links`                                    | Use reference links instead of links to create markdown
+| `--mark-code`                                          | Mark preformatted and code blocks with [code]...[/code]
 
 
 
@@ -86,12 +87,12 @@
 
     PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
 
-    To see the coverage results:
+To see the coverage results:
     
-    `coverage combine`
-    `coverage html`
+    coverage combine
+    coverage html
 
-    then open the `./htmlcov/index.html` file in your browser.
+then open the `./htmlcov/index.html` file in your browser.
 
 ## Documentation
 
diff --git a/docs/test.md b/docs/test.md
index 89ae8b0..1ff19d9 100644
--- a/docs/test.md
+++ b/docs/test.md
@@ -11,6 +11,7 @@
 Coverage results can be seen with
 
 `coverage combine`
+
 `coverage html`
 
 and then opening the `./htmlcov/index.html` file with your browser.
diff --git a/docs/usage.md b/docs/usage.md
index 5e44563..324ee7f 100644
--- a/docs/usage.md
+++ b/docs/usage.md
@@ -54,7 +54,7 @@
     - LINKS_EACH_PARAGRAPH for putting links after every paragraph
     - BODY_WIDTH for wrapping long lines
     - SKIP_INTERNAL_LINKS to skip #local-anchor things
-    - INLNE_LINKS for formatting images and links
+    - INLINE_LINKS for formatting images and links
     - PROTECT_LINKS protect from line breaks
     - GOOGLE_LIST_INDENT no of pixels to indent nested lists
     - IGNORE_ANCHORS
@@ -78,6 +78,7 @@
     - RE_SLASH_CHARS a string of slash escapeable characters
     - RE_MD_BACKSLASH_MATCHER to match \char
     - USE_AUTOMATIC_LINKS to convert <a href='http://xyz'>http://xyz</a> to <http://xyz>
+    - MARK_CODE to wrap 'pre' blocks with [code]...[/code] tags
 
 To alter any option the procedure is to create a parser with
 `parser = html2text.HTML2Text()` and to set the option on the parser.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 6f91893..bd47666 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -29,7 +29,7 @@
     skipwrap
 )
 
-__version__ = "2015.4.14"
+__version__ = (2015, 6, 6)
 
 
 # TODO:
@@ -70,6 +70,7 @@
         self.strong_mark = '**'
         self.single_line_break = config.SINGLE_LINE_BREAK
         self.use_automatic_links = config.USE_AUTOMATIC_LINKS
+        self.mark_code = config.MARK_CODE
 
         if out is None:
             self.out = self.outtextf
@@ -561,6 +562,8 @@
                 self.pre = 1
             else:
                 self.pre = 0
+                if self.mark_code:
+                    self.out("\n[/code]")
             self.p()
 
     # TODO: Add docstring for these one letter functions
@@ -607,6 +610,9 @@
                 #self.out(" :") #TODO: not output when already one there
                 if not data.startswith("\n"):  # <pre>stuff...
                     data = "\n" + data
+                if self.mark_code:
+                    self.out("\n[code]")
+                    self.p_p = 0
 
             bq = (">" * self.blockquote)
             if not (force and data and data[0] == ">") and self.blockquote:
diff --git a/html2text/cli.py b/html2text/cli.py
index a3eb7da..b7239c9 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -8,8 +8,10 @@
 def main():
     baseurl = ''
 
-    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
-                              version='%prog ' + __version__)
+    p = optparse.OptionParser(
+        '%prog [(filename|url) [encoding]]',
+        version='%prog ' + ".".join(map(str, __version__))
+    )
     p.add_option(
         "--ignore-emphasis",
         dest="ignore_emphasis",
@@ -129,6 +131,13 @@
             "line breaks. NOTE: Requires --body-width=0"
         )
     )
+    p.add_option(
+        "--mark-code",
+        action="store_true",
+        dest="mark_code",
+        default=config.MARK_CODE,
+        help="Mark program code blocks with [code]...[/code]"
+    )    
     (options, args) = p.parse_args()
 
     # process input
@@ -188,5 +197,6 @@
     h.bypass_tables = options.bypass_tables
     h.single_line_break = options.single_line_break
     h.inline_links = options.inline_links
+    h.mark_code = options.mark_code
 
     wrapwrite(h.handle(data))
diff --git a/html2text/config.py b/html2text/config.py
index 07881fd..e5f5c24 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -32,6 +32,7 @@
 IMAGES_TO_ALT = False
 IMAGES_WITH_SIZE = False
 IGNORE_EMPHASIS = False
+MARK_CODE = False
 
 # Convert links with same href and text to <href> format if they are absolute links
 USE_AUTOMATIC_LINKS = True
diff --git a/setup.py b/setup.py
index 24c284d..4dbbdf4 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2015.4.14",
+    version=".".join(map(str, __import__('html2text').__version__)),
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
diff --git a/test/mark_code.html b/test/mark_code.html
new file mode 100644
index 0000000..eed53c5
--- /dev/null
+++ b/test/mark_code.html
@@ -0,0 +1,12 @@
+<html>
+  <body>
+<p>Normal text with 'pre' code block.</p>
+<pre>
+import os
+
+def function():
+    a = 1
+</pre>
+<p>Normal text continues.</p>
+</body>
+</html>
diff --git a/test/mark_code.md b/test/mark_code.md
new file mode 100644
index 0000000..40ca81e
--- /dev/null
+++ b/test/mark_code.md
@@ -0,0 +1,13 @@
+Normal text with 'pre' code block.
+
+[code]
+
+    import os
+    
+    def function():
+        a = 1
+    
+[/code]
+
+Normal text continues.
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 60cd0a1..f6e45ab 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -149,6 +149,10 @@
         module_args['inline_links'] = False
         cmdline_args.append('--reference-links')
 
+    if base_fn.startswith('mark_code'):
+        module_args['mark_code'] = True
+        cmdline_args.append('--mark-code')
+        
     return test_mod, test_cmd
 
 # Originally from http://stackoverflow.com/questions/32899/\

=====================================================================
start time: Thu Jul 03 00:00:00 CST 2014
end time: Sat Jun 06 00:00:00 CST 2015
description: 
========
----

commit message: 
commit f91a6aa2928378e89b8cdceec2f4ada5abfd9801 1404321416 -----sp :: Don't bring value of previous calls of handle() to the new one.
commit d1c591bbaf16e30a0c5dd7374bda62089da4a778 1404321913 -----sp :: Add coverageall to .travis.yml
commit 009623b63b3b9dfeb0814331d5850852a2f54ccf 1404409857 -----sp :: Merge pull request #12 from mcepl/11_kill_outtext
commit a1373ae778b5f831e51866e8d5cb2657c34eb760 1404410247 -----sp :: Merge branch 'development' of https://github.com/html2text/html2text
commit 06c2d4e9cafe060a08b7ceb2c243bfb5b2fe2544 1404410394 -----sp :: Update changelog
commit 9bc91a85e6ffc8170caf3044289cffe2653ade1c 1404410606 -----sp :: Remove the weirdness
commit 20f87643f7af660566729f6c4c1e3b8f67908b12 1404410622 -----sp :: Fix copy typo
commit 7cd5f309807c0f61f54a2ad5a1af16df77edc7fa 1404410640 -----sp :: Remove the prs since it's unnessary
commit a1a66d70d2b154b81e5708002caf5506ea8cf262 1404410920 -----sp :: Remove anchor-undefined-href to test module
commit 7bb3e60658248262a769c554ee420efc231481f8 1404410976 -----sp :: Update version number
commit bdbc9ff55ec4595d7a0dcd57fbdccaa5bf6b4ed5 1404411026 -----sp :: Ignore .coverage
commit aaa52040d00115fab5a6a6e4672217f9c24ff7b0 1404411857 -----sp :: bump the version in setup.py
commit 96c2b096dedff6b32996c23fdc9e333c5c6c34af 1404453990 -----sp :: Options in table
commit 4118a447488b3995b38b2eacdde5348ac31d5f04 1404454126 -----sp :: Some markdown eye candy job
commit 1fa339cfb6496c0323da9c187230908a8b3971f2 1404454198 -----sp :: Fix running tests command
commit 53c683b06e35b309fefaceeedcd09365259b8877 1404456825 -----sp :: Remove meta vars
commit 8e05335c5d914792ce08a9289f431cf39cd90b6a 1404456897 -----sp :: Explicit except
commit ca7354b5be2b18bb91a2a26d62efef72e22de570 1404457171 -----sp :: Add docstring to dumb_property_dict
commit 939f8eddd105570271503b127bb7b2bcf6e06b81 1404457179 -----sp :: Add docstring to dumb_css_parser
commit 0c20cf12ef95906f9e595ccfb5c06673c9c0d440 1404457190 -----sp :: Add docstring to element_style
commit 7eb2e4eba74129b29c0ce1c5d70774228099f2a0 1404457757 -----sp :: Move html2text to separate python package
commit 60c3709f858b0694441fdfbd1e2390d02207cb3d 1404457770 -----sp :: Fix cmd_name
commit c2da06b05d25c195eeb3112f0e76f1495abc8989 1404457823 -----sp :: Tiny pep8
commit 02d126c0260692338ce9075e0711e0967c960f4e 1404458412 -----sp :: Move const and conf vars to config.py module
commit 192ca940f8f65b4489d46ae523e9689fd1ca0366 1404458421 -----sp :: Using config module
commit 75dfb51b436e5a6888be6ba0207fb625f0176d73 1404458524 -----sp :: Code eye candy everybody
commit f93441c184fd5efeff6abccfc8b4c180cc197be9 1404459713 -----sp :: Eye candy and docstring
commit b1733bf8a160558eb77eaf3d5a0fb95424a72205 1404459800 -----sp :: Docstring on escape_md_section
commit ce58eb5bb04e01d5d2a66e432fbbf0497710a145 1404459816 -----sp :: Docstring on escape_md
commit dc3dfc6b6de5b8dc190470aabbe85ed42628281b 1404459843 -----sp :: remove regex compiled vars to config
commit c5c89e9a25cb2f5b6d7a7dee4219b3b2211b7b36 1404459861 -----sp :: config var names refactoring
commit 08c136697e1006b1b45ef7f80b9813ce74b9af8f 1404460067 -----sp :: Eye candy on defining options
commit 08683776e959b13fb179b8a17daca18af9f9536d 1404460142 -----sp :: Merge branch 'master' of github.com:Alir3z4/html2text
commit 2f33f950be23c11c810703de65507429b63b30f4 1404460231 -----sp :: Add --escape-all option to readme
commit 0d50cac958c144eaa147b923453340a1d0b19b29 1404475765 -----sp :: Fix setup.py test to actually fail when it should.
commit 30aec19fd5b8d382bfe842ffa99572237d2ead2b 1404475796 -----sp :: Python 3.2 doesn't have unicode strings.
commit 2d62f7837fd6943f6aeeca52ec6822cf7b7b5282 1404523337 -----sp :: add python 3.4
commit 6ac6cc78d8cec3a8a70f18cd29f251737bd271b7 1404523729 -----sp :: Merge pull request #18 from sciunto/travis
commit 01d21b37cf7b1e17062fdd8caa8d72fdbac7988b 1404524045 -----sp :: Fix badge status before going for pypim
commit 9b0223d57ca0699a8e99492c27407facf2cfccc9 1404690105 -----sp :: Add more docstring to optwrap
commit f69a8e09f689a6ba162d43faca40206769bd4b55 1404690116 -----sp :: Add more docstring to google_nest_count
commit c340b99bb0a808803b7d222a9cdf557ba0513f34 1404690138 -----sp :: Removed 2 blank lines to make the file fully PEP8 ;)
commit 5f44c9dd80d85ce64933bf956a6b4aec7dd145b4 1404690671 -----sp :: Merge branch 'master' of github.com:html2text/html2text
commit c1cb8cb3f9912ac6e11dd1b6d4039ea086d9990e 1404691815 -----sp :: Set the issue number
commit 10181387695af6682c6168168a827b877c0c5b68 1404691833 -----sp :: Update the changelog
commit efa5200d15304dba5ae1b4fd290b0c9758cc28fc 1404692159 -----sp :: Remove install_deps.py
commit 5e80d707c2d16455a2a5605c1ecbfb1adb952c40 1404692637 -----sp :: Merge pull request #22 from Alir3z4/feature-#16-remove-install-deps-py
commit a020e4207b2a25ff6ca42e5ed9dd5eefd860432b 1404693425 -----sp :: Add Downloads
commit c17e48f5b52fb7e986f6a46997fec02bd501a36d 1404693433 -----sp :: Add version badge
commit 84c73f7d6cddd592d24dc4c62cb2e865c6e17439 1404693445 -----sp :: Add Egg badge
commit 7f0d6dec88c1ba8af5ef2d027a6a6026ccffc642 1404693455 -----sp :: Add Wheel badge
commit a8e73a82b3a3bfe91b6eed5227d8870d5b0b4177 1404693465 -----sp :: Add format badge
commit e47b9ce86146014ebc01ad63d8d7c1bc19ca215c 1404693477 -----sp :: Add License badge
commit d2de82921abbb5fa9e5e704c676c62e9c2c72c0c 1404693569 -----sp :: Update changelog
commit f61bdf4322f40bfba6c539905055f1986a75ecd5 1404693688 -----sp :: Merge pull request #23 from Alir3z4/feature-#17-pypin-time
commit aa9ae9cda56d6f3e38544bd6cff080fb59a37be6 1407544016 -----sp :: Fix TypeError when parsing tags like <img src='foo' alt>
commit 53eb2a5884ed9e489bee079e4a6f9071ca072515 1407546539 -----sp :: Fix TypeError when attrs['href'] is None in handle_tag.
commit 4f46c7d40828d307fd476f555beaf8aa93a1f22a 1407604008 -----sp :: Merge pull request #25 from inboxapp/master
commit 750a66d7074cc13cfdf8a736df40a2f6ed637a8a 1410096080 -----sp :: Update changelog for #25
commit db19569c9bcbfc96e8c1d61aa03232a608c34191 1410096117 -----sp :: Better to be authors/contributors ;)
commit f24283171c663502ce90d5e4bc418fdb575bf8de 1410096239 -----sp :: Bump version for release 2014.9.7
commit 4d145e3f801ac54b15e23cf60e1ad0436717c0b1 1410181739 -----sp :: Include html2text pkg
commit 09fb2d4d46accd71887f32db7655df11e1aa1fc0 1410182073 -----sp :: Bump the version number
commit a2190c53f3dd7089e1b1022826fc829b32a24fb9 1410457895 -----sp :: Added simple tables support with bypass option
commit da214cabd55c03bb2d9e3f5399f9ac397acc7bd5 1410593418 -----sp :: Updated table implementation
commit fdb94c6252baf2719e6a7786d3d21054d450fd2e 1410593580 -----sp :: Fixed import typo
commit 98abe1aad101f1c1e688c337570ae2dd152418dc 1411135508 -----sp :: Remove old website address
commit 434b2a1060e0df5404d725cb8b58e252cf5bd8a9 1411659042 -----sp :: Merge pull request #29 from summerisgone/master
commit ed460442caee3b649a8c3de3e6fbc0cdecee05ac 1411659347 -----sp :: Add @Alir3z4 email address
commit d039089a920b8d04c35226e30970b82444fdc251 1411659383 -----sp :: Add Ivan Gromov @summerisgone to Authors
commit 09f267fc5602a930e39814f3b5e08bb0c7f38086 1411659396 -----sp :: Add --bypass-tables options to README file
commit d2a39a31154f9475461415c324ec763138ff8be7 1411659419 -----sp :: Update the changelog for adding table support
commit 1c977448fc4903c51be668f5b0ec357732cbf13c 1411659592 -----sp :: Update version number and getting ready to release new version
commit 8e9361f3e2eb026a6411167fa9f83baf3a5ae469 1411659802 -----sp :: Update changelog for new website address
commit 11f3cdae50943ccef2d7a0de51116a60fac2f7bc 1412382993 -----sp :: Update code examples
commit 540068f1b11ec5732666c48ffd1bf4419df4b019 1412530679 -----sp :: Remove py_modules
commit f7bf5428a0831f5648a2d95e4a0bd9fedcbda0ad 1412583690 -----sp :: Do not install tests
commit 1203f62bf72311b9ca82cd18d7bb0d0c403250f4 1412583965 -----sp :: Update changlog for latest changes
commit f3523f3769a6e237d6756cb58c0fa01717a744b4 1413657912 -----sp :: Don't hardcode the path to the installed binary
commit 2e1963ebf906b25e019bc0d849a00b05c025809a 1414616513 -----sp :: Fix a typo in module name for usage
commit ed1791a2de6623328c25a775a2fedfed12de24ab 1414616637 -----sp :: Merge pull request #37 from stefanor/test-binary-location
commit 27a00f276ca615406781f2773d5d5e26825ac215 1414855207 -----sp :: Initial cli module
commit f46847496d5928ca6a1753cd0c32c30a99bb1fe9 1414855472 -----sp :: Initial compat module
commit c8571dca2db494ba9f0e49187c376a7006a9d8a3 1414855723 -----sp :: Bring python compatibility to compat module ;)
commit e8497a10ec089a2a2aec852cec917530c6d3bc69 1414855824 -----sp :: Extract cli to cli module
commit 9227623330da774742234759c5aa77c14aca07ab 1414855847 -----sp :: points to html2text=html2text.cli:main
commit 5837bdfd2ce9fb1199bd851d20bb30ddcfdfdfde 1414855932 -----sp :: Clean up imports a little bit
commit 334fdd6e4b7797d018744a671c0b5c47b1ad73b1 1414855994 -----sp :: Syntax fix in ChangeLog.rst
commit 1d56f0ed351a870b3fa469facd7c28359be894c4 1414856193 -----sp :: Update changelog for new cool changes
commit adb73ddfae5675872349f0e4d8d5b7a19c6486e3 1414857768 -----sp :: Merge pull request #43 from Alir3z4/feature-#40-extract-cli-to-separate-module
commit 54ee07cba6ca3175faf30b20ffa08aa283ef00cc 1414857855 -----sp :: Initial utils module
commit a93c9366e5934d617788ce9014833490b88fdf85 1414858259 -----sp :: Remov utility/helpers method to utils module
commit 114f72371dcb66b9ccd3c39daefe43a2c28f5860 1414859072 -----sp :: Bring back html2text, unescape to init to prevent import conflicts in utils
commit 05319fba3c7598511993d8717098d0f230606c6b 1414859089 -----sp :: Fix importing from utils
commit 4a7d3791397679a612ac3fd6d2c4145c62d9e780 1414859102 -----sp :: A little bit of import optimization
commit 2b5762f4f93d659db0083e618bac52508f105a3f 1414859187 -----sp :: Some tiny code clean up as well
commit 21b85f5dd8d68d10da5b15e16693f9eef263e52a 1414859269 -----sp :: Update the changelog with latest cool changes
commit d43b9b4e3dfb9ba6da09c424020603e5811059be 1414859632 -----sp :: Merge pull request #44 from Alir3z4/feature-#41-extract-utility-methods-to-separate-module
commit ca99d55a915aaff904562efb815debb905840ac6 1417614884 -----sp :: Add wrap_read
commit 78f706d4da48823c19264fde0e51248b256ed89c 1417614923 -----sp :: Using wrap_read from utils to read stdin
commit 20d1669e6babad7c80180d0b8d11f41012be07f3 1417614932 -----sp :: Remove unused `sys` module
commit 50d863fcd4d37ef4a615f0f7272249f154b19fd2 1417614988 -----sp :: Update ChangeLog for issue #45
commit c59b399bec723585320ac4a6fbcf880214def3cd 1417799628 -----sp :: Merge pull request #46 from Alir3z4/fix-#45-does-not-accept-standard-input-when-running-under-python-3
commit c3b3de64b273905b68ca7dbf9e579c73e4737a4e 1417802489 -----sp :: Feature: Clean up ``ChangeLog.rst`` for version and date numbers.
commit d3ba03b34fad1683a78e1ccc0a38d42b1a61cf4a 1417802578 -----sp :: Remove unused module imports
commit 100ae75f7aee95e88f379fc52eafbf9d33ee1a34 1417802598 -----sp :: Bump version number for new release 2014.12.5
commit c5d59f7302bb04800679df8d5994120a8aa67c55 1419263592 -----sp :: added a images_to_alt option to discard images and keep only their alt
commit 22b29279c54463a0b3056ca3dc9165f336ba3215 1419265018 -----sp :: Protect links, surrounding them with angle brackets to avoid breaking them with line-wrap (inline and reference).
commit b4d41913de7fe0dc69e7533e0f3e1c04f3155b27 1419325212 -----sp :: Merge pull request #49 from oasiswork/jd-image_to_alt
commit 0fc58fe9af1efb11c8f79f9b446ed4881fb91dab 1419325735 -----sp :: pep8
commit b7d3e5b07d15751e6ceca64cadeee8d54b91d6dc 1419325908 -----sp :: Merge branch 'master' into jd-protect-links
commit 6a188c7c9e9d53d467b309dbf3f04f2df5ccf63e 1419333250 -----sp :: Merge pull request #50 from oasiswork/jd-protect-links
commit c63d377a62df7b7302ffd9b8eede921d36966b62 1419450043 -----sp :: Update changelog for due to latest changes
commit f0535caa4c27c1c55137c45350f9cfddec02c612 1419450157 -----sp :: Add @Alir3z4 to contributors
commit dacc0fd1fb61fd32b57fc04c88f2001ff6db9699 1419450181 -----sp :: Add Jocelyn Delalande to Authors
commit 26832bb33e8c9701562a867e5e3a0da8e703f80b 1419450278 -----sp :: Bump version number
commit 9077c233155fc41b1a9599cebc63b91aea1cbef3 1419450548 -----sp :: Fix md syntax
commit a928faaf7d4c08db2911c7b0df337c7361151206 1419451633 -----sp :: Update readme options
commit 78af16d00362799e9e24c2683741d338d62003d6 1419451658 -----sp :: Merge branch 'master' of github.com:Alir3z4/html2text
commit 125ececbdd9946b63a63f84508128ff6e43514d5 1419451958 -----sp :: Add setup.cfg
commit 75d10523341eabf638de7ad4e1e53b8508ec4382 1419452306 -----sp :: Update changelog for setup.cfg
commit 669e667372dd927f523397f4efcf4f76cb1c8691 1419745732 -----sp :: Add single line break configuration (use case: Evernote)
commit 137789b687fa2543bfa120917a648c3df2d8e7db 1419820025 -----sp :: Add config and command line flags for single line break option.
commit 3b65368257fd211a8e482fbbb51a12099d4893eb 1419820044 -----sp :: Add unit test for single line break option.
commit 7c8a1057311cbd61ae7e421b90f04c772d7b2d21 1419820225 -----sp :: Fix typo in command line option description
commit 7e90ba8cea167dc4462d6c9595c48a86ad99f2aa 1419820296 -----sp :: Add EOF newline
commit 8b0f740cf74617bff3a0f453a30e7d42aa65d556 1419820693 -----sp :: Add single-line-break option info to README
commit 091d717a0befc7193791b85c86e18d5694320da0 1419836503 -----sp :: Merge pull request #51 from mdorn/master
commit 284df7c9c1911732192180a5c32d861138ca4615 1419838269 -----sp :: Add Matt Dorn @mdorn to Authors/Contributors
commit 9317d6bcb0955993d5af3eeac5ffe0047b1ad6f4 1419838410 -----sp :: Update the changelog for Feature #51
commit da9d1904d20742bf97a744c545d361af802e1a58 1419838441 -----sp :: Update version number for Release 2014.12.29
commit 21741517fd4b803e3cf920a6c47a1f25fc1e79a4 1419838815 -----sp :: Fix formatting authors list
commit 4185966f42d3090cf8a37bd7cf699a1320412f2d 1424198080 -----sp :: Anchor tags that contain <img> tags or empty text are no longer discarded. Added tests for new cases, modified text for images-to-alt to allow for inline <img> tags.
commit 11c508d211834a0c4e6a1289a331784928ade468 1424198484 -----sp :: Added missing test case to images-to-alt
commit 84ce93b938f6d2af63e1ba34bd542ede407c62e9 1424256774 -----sp :: Update authors, changelog and version number. Added latest contributor to authors list, reflected changes on changelog and bumped version number.
commit 40187f55d4dd612c7fb8df6daf581769a0a3c56c 1424265259 -----sp :: Merge pull request #55 from mgontav/fix-img-links
commit 3f15e224e10a936f6cbdb9e8a96a093ef98557f1 1424265597 -----sp :: Fix version number
commit cf89ea8b5dd0c8f8b2c3b91eee78fbc338337743 1424265629 -----sp :: Update ChangeLog.rst
commit 2c79945cda9567991668577b7ded46a51574256a 1427411669 -----sp :: Treat '-' file parameter as stdin
commit 555f4a9a2969eb880ad37b62451a3fba6c17c35d 1428257592 -----sp :: Merge pull request #56 from Lekensteyn/fix-stdin
commit 446a8eb0733835fa2b2e61b8e311a02f9325cf00+ 1428697539 -----sp :: Retain escaping of html except within code or pre tags.
commit 759c563dde068eafec066ef372c2f7a1072c3a43 1428769813 -----sp :: Merge pull request #57 from smblackburn/master
commit 27a62b01b705e09440eefc6006b5582ed5ae30df 1428940261 -----sp :: Bump version numbers for new release
commit 234071841bbb6dd0fca0b53fb4ed56229df0caa8 1428940346 -----sp :: Add Scott Blackburn to Authors list
commit bf1e587004e9740769fc9b81d2f4307e7f52d197 1428940366 -----sp :: Add Peter Wu to Authors list
commit 393a9f1550afce33a8a0bcbb32ba20a19e39be99 1428940380 -----sp :: Update changelog ;)
commit 9278557d5e5a11a538299a81b562ea3d6a34dc60+ 1428993819 -----sp :: Support for image sizing using raw html
commit 84e77d7b07e2e1e23995860ed69cc8a0e8b86cee+ 1429026704 -----sp :: Documenting sized image feature in README and Changelog
commit 9e2991c92e4d4329b9b3c49f4fddc1acb7d19123+ 1429029786 -----sp :: Merge pull request #59 from smblackburn/master
commit e902a7c7bb9adb77254c08863933ce6d8313f387 1429031366 -----sp :: Bump version number to latest.
commit 945c50d2e8e99ce29818b91c1f64866cc0bc84ae 1433052072 -----sp :: Update gitignore to include virtualenv
commit 68acdc12247c0789c46b7e5a828b42a9d3b85994 1433052920 -----sp :: Added failing test
commit 2fc2e20c4b93c60aff4e4b7207a537ab0faaecc6 1433060702 -----sp :: Little more readable
commit 13d6be2ac56daa3b84a3d40e460a75be6d3ef650 1433061741 -----sp :: Started adding docs. Added docs for 	- utils.py 	- compat.py 	- config.py 	- cli.py
commit 046aa5559f2f08cc48af301bbabf156e9ac8eb13 1433063100 -----sp :: Added method list for HTML2Text class
commit 1ef63bb6863f6b4130547c14c5fc4af847a603dd 1433063136 -----sp :: Added todo in the html2text __init__.py file
commit 6bceeadf19403dfa1409049c688d9acbaff6513c 1433066697 -----sp :: Added Aaron's affinity for google=search in the docs. Had me confused for quiet a while.
commit f078122088322b8207b7fc427d63e17f928d29a0 1433067388 -----sp :: Basic Docs completed. File layout and description of code is there. Function descriptions are not yet there.
commit 897a207fb49b569acdbde27f0341a412d1c007c6 1433193091 -----sp :: Proper handling of anchors with content that starts with tags that produce markdown (such as <code>, <b>, etc.).
commit 3c5b7e641476d535fb4aad3581bb95cd3fdf963e+ 1433304309 -----sp :: Fix for issue #61 Added option to opt out of automatic links
commit dee3879773be78cf78cf08567d94890ad3ce429a 1433304380 -----sp :: Added virtualenv to ignore
commit 4378be4837bd99ab2fb0a9c59723a396e32c618e 1433304942 -----sp :: Added Arjoonn Sharma to authors
commit da3d3a8513f5be55685a52fc8438fa70298ec16e 1433316656 -----sp :: Merge pull request #65 from theSage21/master
commit f980ad166902ce2b3acdd902725806f293ed7cff 1433316765 -----sp :: Merge pull request #64 from alawibaba/master
commit 614bb1ec09c4f2682d63b1a9621f18c6d65bed29 1433317773 -----sp :: Added version one of the docs. Simple description of features and explanations
commit 68213c701b0b1134d57840b619bad2f2718a5a57 1433317859 -----sp :: Merge branch 'docs'
commit 54cf32492c0b9303753f28dc11aaa19d8c0ab739 1433318085 -----sp :: Updated readme to include docs
commit f59e2762818882e07d42aed819608d937a73b4f9 1433318252 -----sp :: Fixed authors documentation
commit ab5e5ea8b951dae783ec182dce87afe8b963412a 1433318373 -----sp :: Fixed list
commit 98b9a94e942d6119b7b12bb0ea0fad9c682d12e0 1433318421 -----sp :: Fixed another list
commit 04d5c269ced47aa536c74abf32bc7456193c7b54 1433318557 -----sp :: Fixed code documentation
commit a1177a5916486e58ad73b38b89257994ea5f1b57 1433320064 -----sp :: Push to add docs
commit 4a1cee8fe6d49e55982338f8797d86c47dc20147 1433320122 -----sp :: Merge https://github.com/Alir3z4/html2text
commit a4ac48251901e2abfbcc75121dec3dfb150e739e 1433320866 -----sp :: Merge pull request #67 from theSage21/master
commit e7c3646601532bf0f5f90fa68d473a55179c6d8a 1433359154 -----sp :: Update AUTHORS.rst
commit 0112b5fd9cc603a6e8a505789bd5869b5dab5577 1433360019 -----sp :: Merge pull request #68 from alawibaba/patch-1
commit 7e5aab97a5a294e0ced09cedb634004fec873651 1433389314 -----sp :: Added some more tests
commit b3f89cdc80b89608f21ba13dff37c0c106ef6696 1433392555 -----sp :: Added more tests
commit 9b6ba81e55eaad539fd82566b537b35ae519a56d 1433392584 -----sp :: Changed ordering to increase coverage
commit 36fe88b52a4c4b82d0f861c093a4c2f1757a0c33 1433393873 -----sp :: Tested for reference style links
commit d3d0eaabb3f5a57e9db4dc8f561d7ceef8be01fd 1433394434 -----sp :: More tests for image alt
commit c1034aa9d4412d13569767f0193b810f2f4b0373 1433395497 -----sp :: Description list tests
commit d7cf8450c8b79b4b75309e0b980dcb1c20d1eeea 1433434229 -----sp :: Added docs for --reference-links flag in command line
commit aaa4fc088b10a0ac9cab69d607bb03865c6c429b 1433434269 -----sp :: Merge branch 'docs'
commit 682b6273743ce981ec61630f300238724576cbf2 1433434872 -----sp :: Merge pull request #70 from theSage21/master
commit 88759f3dd14013f341760a64523156217c348861 1433450480 -----sp :: Fix typo in config doc
commit 1885442c98f03c7d2a28ae6f27f5b22d68743506 1433487590 -----sp :: Remove extra char to fix messy syntax errros
commit 36987fe8762ce73c298ba9d46096c717378125f4 1433487656 -----sp :: Merge pull request #73 from nikolas/patch-1
commit 421bdb1409e2d908a8101e6e8e4e435160e5e359 1433488467 -----sp :: Update changelog with the latest changes
commit 0d32483d3a6d5eeaeab1daf09f83949c2bc8059d 1433488973 -----sp :: Better way of getting version number from module
commit 1e0de14cd7ec0dc43dce1fb7040f58b0df1384f2 1433489739 -----sp :: Remove the typo from the ChangeLog.rst
commit 894269c93dfccbcb3aac72aeff0c181cfc5d671e 1433489908 -----sp :: Fix verion number typo

hunks: 
diff --git a/.gitignore b/.gitignore
index 5fa75b9..de204b5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,5 @@
 dist
 *.egg-info
 .idea
+.coverage
+env/
diff --git a/.travis.yml b/.travis.yml
index 02b10c8..66b5fe4 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,6 +5,12 @@
   - "pypy"
   - "3.2"
   - "3.3"
+  - "3.4"
+install:
+    - pip install coveralls
 before_script:
-  - "python install_deps.py"
-script: PYTHONPATH=$PYTHONPATH:. python test/test_html2text.py -v
+  - '[ "${TRAVIS_PYTHON_VERSION}" = "2.6" ] && pip install --use-mirrors unittest2 || /bin/true'
+script:
+  PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
+after_success:
+    coveralls
diff --git a/AUTHORS.rst b/AUTHORS.rst
index c7ea1ce..aa55be8 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -1,14 +1,23 @@
-``html2text`` was Originally written by Aaron Swartz.
+``html2text`` was originally written by Aaron Swartz.
 
-The AUTHORS are (and/or have been):
+The AUTHORS/Contributors are (and/or have been):
 
-    * Aaron Swartz
-    * Alireza Savand
-    * Yariv Barkan
-    * Alex Musayev
-    * Matěj Cepl
-    * Stefano Rivera
+* Aaron Swartz
+* Yariv Barkan
+* Alex Musayev
+* Matěj Cepl
+* Stefano Rivera
+* Alireza Savand <alireza.savand@gmail.com>
+* Ivan Gromov <summer.is.gone@gmail.com>
+* Jocelyn Delalande <jdelalande@oasiswork.fr>
+* Matt Dorn <matt.dorn@gmail.com>
+* Miguel Tavares <mgontav@gmail.com>
+* Scott Blackburn <scott@skipflag.com>
+* Peter Wu <peter@lekensteyn.nl>
+* Arjoonn Sharma <gh: theSage21>
+* Ali Mohammad <gh: alawibaba>
+
 
 Maintainer:
 
-    * Alireza Savand
+* Alireza Savand <alireza.savand@gmail.com>
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 56adc71..cee71f9 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,5 +1,115 @@
-2014.4.5 - 2014-04-05
-=====================
+2015.6.6
+========
+
+* Fix #24: ``3.200.3`` vs ``2014.7.3`` output quirks.
+* Fix #61. Malformed links in markdown output.
+* Feature #62: Automatic version number.
+* Fix #63: Nested code, anchor bug.
+* Fix #64: Proper handling of anchors with content that starts with tags.
+* Feature #67: Documentation all over the module.
+* Feature #70: Adding tests for the module.
+* Fix #73: Typo in config documentation.
+
+
+2015.4.14
+=========
+----
+
+
+* Feature #59: Write image tags with height and width attrs as raw html to retain dimensions
+
+
+2015.4.13
+=========
+----
+
+
+* Feature #56: Treat '-' file parameter as stdin.
+* Feature #57: Retain escaping of html except within code or pre tags.
+
+
+2015.2.18
+=========
+----
+
+* Fix #38: Anchor tags with empty text or with `<img>` tags inside are no longer stripped.
+
+
+2014.12.29
+==========
+----
+
+* Feature #51: Add single line break option.
+    This feature is useful for ensuring that lots of extra line breaks do not
+    end up in the resulting Markdown file in situations like Evernote .enex
+    exports. Note that this only works properly if ``body-width`` is set
+    to ``0``.
+
+
+2014.12.24
+==========
+----
+
+* Feature #49: Added a images_to_alt option to discard images and keep only their alt.
+* Feature #50: Protect links, surrounding them with angle brackets to avoid breaking...
+* Feature: Add ``setup.cfg`` file.
+
+
+2014.12.5
+=========
+----
+
+* Feature: Update `README.md` with usage examples.
+* Fix #35: Remove `py_modules` from `setup.py`.
+* Fix #36: Excludes tests from being installed as a separate module.
+* Fix #37: Don't hardcode the path to the installed binary.
+* Fix: Readme typo in running cli.
+* Feature #40: Extract cli part to ``cli`` module.
+* Feature #42: Bring python version compatibility to ``compat.py`` module.
+* Feature #41: Extract utility/helper methods to ``utils`` module.
+* Fix #45: Does not accept standard input when running under Python 3.
+* Feature: Clean up ``ChangeLog.rst`` for version and date numbers.
+
+
+2014.9.25
+=========
+----
+
+* Feature #29, #27: Add simple table support with bypass option.
+* Fix #20: Replace project website with: http://alir3z4.github.io/html2text/ .
+
+
+2014.9.8
+========
+----
+
+* Fix #28: missing ``html2text`` package in installation.
+
+
+2014.9.7
+========
+----
+
+* Fix ``unicode``/``type`` error in memory leak unit-test.
+* Feature #16: Remove ``install_deps.py``.
+* Feature #17: Add status badges via pypin.
+* Feature #18: Add ``Python`` ``3.4`` to travis config file.
+* Feature #19: Bring ``html2text`` to a separate module and take out the ``conf``/``constant`` variables.
+* Feature #21: Remove meta vars from ``html2text.py`` file header.
+* Fix: Fix TypeError when parsing tags like <img src='foo' alt>. Fixed in #25.
+
+
+2014.7.3
+========
+----
+
+* Fix #8: Remove ``How to do a release`` section from README.md.
+* Fix #11: Include test directory markdown, html files.
+* Fix #13:  memory leak in using ``handle`` while keeping the old instance of ``html2text``.
+
+
+2014.4.5
+========
 ----
 
 * Fix #1: Add ``ChangeLog.rst`` file.
diff --git a/README.md b/README.md
index 229e3e5..0385446 100644
--- a/README.md
+++ b/README.md
@@ -1,41 +1,75 @@
-# [html2text](http://www.aaronsw.com/2002/html2text/)
+# html2text
 
 [![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2text)
+[![Coverage Status](https://coveralls.io/repos/Alir3z4/html2text/badge.png)](https://coveralls.io/r/Alir3z4/html2text)
+[![Downloads](https://pypip.in/d/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Version](https://pypip.in/v/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Egg?](https://pypip.in/egg/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Wheel?](https://pypip.in/wheel/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Format](https://pypip.in/format/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![License](https://pypip.in/license/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
 
 
 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
 
-Usage: `html2text.py [(filename|url) [encoding]]`
 
-    Options:
-      --version             show program's version number and exit
-      -h, --help            show this help message and exit
-      --ignore-links        don't include any formatting for links
-      --ignore-images       don't include any formatting for images
-      -g, --google-doc      convert an html-exported Google Document
-      -d, --dash-unordered-list
-                            use a dash rather than a star for unordered list items
-      -b BODY_WIDTH, --body-width=BODY_WIDTH
-                            number of characters per output line, 0 for no wrap
-      -i LIST_INDENT, --google-list-indent=LIST_INDENT
-                            number of pixels Google indents nested lists
-      -s, --hide-strikethrough
-                            hide strike-through text. only relevent when -g is
-                            specified as well
+Usage: `html2text [(filename|url) [encoding]]`
 
-Or you can use it from within Python:
 
-    import html2text
-    print html2text.html2text("<p>Hello, world.</p>")
+| Option                                                 | Description
+|--------------------------------------------------------|---------------------------------------------------
+| `--version`                                            | Show program's version number and exit
+| `-h`, `--help`                                         | Show this help message and exit
+| `--ignore-links`                                       | Don't include any formatting for links
+|`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
+|`--ignore-images`                                       | Don't include any formatting for images
+|`--images-to-alt`                                       | Discard image data, only keep alt text
+|`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
+|`-g`, `--google-doc`                                    | Convert an html-exported Google Document
+|`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
+|`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
+|`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
+| `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--single-line-break`                                  | Use a single line break after a block element rather than two.
+| `--reference-links`                                    | Use reference links instead of links to create markdown
+
+
+
+Or you can use it from within `Python`:
+
+```
+>>> import html2text
+>>>
+>>> print(html2text.html2text("<p><strong>Zed's</strong> dead baby, <em>Zed's</em> dead.</p>"))
+**Zed's** dead baby, _Zed's_ dead.
+
+```
+
 
 Or with some configuration options:
+```
+>>> import html2text
+>>>
+>>> h = html2text.HTML2Text()
+>>> # Ignore converting links from HTML
+>>> h.ignore_links = True
+>>> print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")
+Hello, world!
 
-    import html2text
-    h = html2text.HTML2Text()
-    h.ignore_links = True
-    print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")
+>>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
 
-_Originally written by Aaron Swartz. This code is distributed under the GPLv3._
+Hello, world!
+
+>>> # Don't Ignore links anymore, I like links
+>>> h.ignore_links = False
+>>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
+Hello, [world](http://earth.google.com/)!
+
+```
+
+*Originally written by Aaron Swartz. This code is distributed under the GPLv3.*
 
 
 ## How to install
@@ -48,12 +82,10 @@
 ```
 
 
-## How to do a release
-
-1. Update the version in `html2text.py`
-2. Update the version in `setup.py`
-3. Run `python setup.py sdist upload`
-
 ## How to run unit tests
 
-    python test/test_html2text.py -v
+    PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
+
+## Documentation
+
+Documentation lives [here](docs/index.md)
diff --git a/anchor-undefined-href.html b/anchor-undefined-href.html
deleted file mode 100644
index 2019751..0000000
--- a/anchor-undefined-href.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<html>
-   <body>
-      <a href class="nolink">anchor</a>
-   </body>
-</html>
diff --git a/docs/about.md b/docs/about.md
new file mode 100644
index 0000000..72d5063
--- /dev/null
+++ b/docs/about.md
@@ -0,0 +1,13 @@
+About
+-----
+
+html2text is a python package which converts a page of HTML into clean,
+easy-to-read plain ASCII text. Better yet, that ASCII also happens to be
+valid Markdown (a text-to-HTML format).
+
+It was origionally written by Aaron Swartz.
+
+The code is under GPL v3.
+
+The module is based on the html parser in the python standard library
+and so any valid input for the parser is valid input for the library.
diff --git a/docs/authors.md b/docs/authors.md
new file mode 120000
index 0000000..5b54fb5
--- /dev/null
+++ b/docs/authors.md
@@ -0,0 +1 @@
+../AUTHORS.rst
\ No newline at end of file
diff --git a/docs/contributing.md b/docs/contributing.md
new file mode 100644
index 0000000..9507f58
--- /dev/null
+++ b/docs/contributing.md
@@ -0,0 +1,9 @@
+Pull requests are welcome.
+
+The package is developed [here](https://github.com/Alir3z4/html2text)
+
+Pull guidelines
+---------------
+
+- Make the changes modular. The usual method is one change per commit.
+- That is all
diff --git a/docs/how_it_works.md b/docs/how_it_works.md
new file mode 100644
index 0000000..8d7df93
--- /dev/null
+++ b/docs/how_it_works.md
@@ -0,0 +1,143 @@
+Introduction
+============
+
+
+There are 5 components to the code. They are kept as seperate files in the
+html2text directory. This part of the documentation explains them bit by bit.
+
+
+compat.py
+---------
+
+This part exists only to test compatibility with the available python standard libraries. Python3 relocated some libraries and so this file makes sure that everything has a common interface.
+
+config.py
+---------
+
+Used to provide various configuration settings to the converter. They are as follows:
+
+    - UNICODE_SNOB for using unicode
+    - ESCAPE_SNOB for escaping every special character
+    - LINKS_EACH_PARAGRAPH for putting links after every paragraph
+    - BODY_WIDTH for wrapping long lines
+    - SKIP_INTERNAL_LINKS to skip #local-anchor things
+    - INLNE_LINKS for formatting images and links
+    - PROTECT_LINKS protect from line breaks
+    - GOOGLE_LIST_INDENT no of pixels to indent nested lists
+    - IGNORE_ANCHORS
+    - IGNORE_IMAGES
+    - IMAGES_TO_ALT
+    - IMAGES_WITH_SIZE
+    - IGNORE_EMPHASIS
+    - BYPASS_TABLES
+    - SINGLE_LINE_BREAK to use a single line break rather than two
+    - UNIFIABLE is a dictionary which maps unicode abbrevations to ASCII
+                values
+    - RE_SPACE for finding space-only lines
+    - RE_UNESCAPE for finding html entities like &nbsp;
+    - RE_ORDERED_LIST_MATCHER for matching ordered lists in MD
+    - RE_UNORDERED_LIST_MATCHER for matching unordered list matcher in MD
+    - RE_MD_CHARS_MATCHER for matching Md \,[,],( and )
+    - RE_MD_CHARS_MATCHER_ALL for matching `,*,_,{,},[,],(,),#,!
+    - RE_MD_DOT_MATCHER for matching lines starting with <space>1.<space>
+    - RE_MD_PLUS_MATCHER for matching lines starting with <space>+<space>
+    - RE_MD_DASH_MATCHER for matching lines starting with <space>(-)<space>
+    - RE_SLASH_CHARS a string of slash escapeable characters
+    - RE_MD_BACKSLASH_MATCHER to match \char
+    - USE_AUTOMATIC_LINKS to convert <a href='http://xyz'>http://xyz</a> to <http://xyz>
+
+utils.py
+--------
+
+Used to provide utility functions to html2text
+Some functions are:
+    
+    - name2cp                   :name to code point
+    - hn                        :headings
+    - dumb_preperty_dict        :hash of css attrs
+    - dumb_css_parser           :returns a hash of css selectors, each
+                                 containing a hash of css attrs
+    - element_style             :hash of final style of element
+    - google_list_style         :find out ordered?unordered
+    - google_has_height         :does element have height?
+    - google_text_emphasis      :a list of all emphasis modifiers
+    - google_fixed_width_font   :check for fixed width font
+    - list_numbering_start      :extract numbering from list elem attrs
+    - skipwrap                  :skip wrap for give para or not?
+    - wrapwrite                 :write to buffer
+    - wrap_read                 :read from buffer
+    - escape_md                 :escape md sensitive within other md
+    - escape_md_section         :escape md sensitive accrose whole doc
+
+
+cli.py
+------
+
+Command line interface for the code.
+
+
+| Option                                                 | Description
+|--------------------------------------------------------|---------------------------------------------------
+| `--version`                                            | Show program version number and exit
+| `-h`, `--help`                                         | Show this help message and exit
+| `--ignore-links`                                       | Do not include any formatting for links
+|`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
+|`--ignore-images`                                       | Do not include any formatting for images
+|`--images-to-alt`                                       | Discard image data, only keep alt text
+|`--images-with-size`                                    | Write image tags with height and width attrs as raw html to retain dimensions
+|`-g`, `--google-doc`                                    | Convert an html-exported Google Document
+|`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
+|`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
+|`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
+| `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--single-line-break`                                  | Use a single line break after a block element rather than two.
+| `--reference-links`                                    | Use reference links instead of inline links to create markdown
+
+
+
+__init__.py
+-----------
+
+This is where everything comes together. This is the glue for all the
+things we have described above.
+
+This file describes a single HTML2Text class which is itself a subclass of the HTMLParser in python
+
+Upon initialization it sets various config variables necessary for
+processing the given html in a certain manner necessary to create valid
+markdown text.
+The class defines methods:
+
+    - feed
+    - handle
+    - outtextf
+    - close
+    - handle_charref
+    - handle_entityref
+    - handle_starttag
+    - handle_endtag
+    - previousIndex
+    - handle_emphasis
+    - handle_tag
+    - pbr
+    - p
+    - soft_br
+    - o
+    - handle_data
+    - unknown_decl
+    - charref
+    - entityref
+    - replaceEntities
+    - unescape
+    - google_nest_count
+    - optwrap
+
+Besides this there are 2 more methods defined:
+
+    - html2text     :calls the HTML2Text class with .handle() method
+    - unescape      :calls the HTML2Text class with .unescape() method
+
+What they do is provide methods to make the HTML parser in python
+parse the HTML and convert to markdown.
diff --git a/docs/index.md b/docs/index.md
new file mode 100644
index 0000000..9852923
--- /dev/null
+++ b/docs/index.md
@@ -0,0 +1,10 @@
+Html2Text
+=========
+
+1. [About](about.md)
+2. [Authors](../AUTHORS.rst)
+3. [What is markdown](http://daringfireball.net/projects/markdown/)
+4. [How it works](how_it_works.md)
+5. [Usage](usage.md)
+6. [Contributing](contributing.md)
+7. [Tests](test.md)
diff --git a/docs/test.md b/docs/test.md
new file mode 100644
index 0000000..2feb5eb
--- /dev/null
+++ b/docs/test.md
@@ -0,0 +1,13 @@
+Tests
+=====
+
+Testing is essential.
+
+Run the tests
+-------------
+
+`PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v`
+
+New tests
+---------
+New tests are always welcome see [contributing](contributing.md) for guidelines.
diff --git a/docs/usage.md b/docs/usage.md
new file mode 100644
index 0000000..2605f51
--- /dev/null
+++ b/docs/usage.md
@@ -0,0 +1,84 @@
+Usage
+=====
+
+The module is simple enough to use. This tutorial will get you started.
+
+Installing
+----------
+
+These are the methods you can get the module installed:-
+
+    1. `pip install html2text` for those who have pip
+    2. Clone the repository from `https://github.com/Alir3z4/html2text.git`
+        1. `git clone https://github.com/Alir3z4/html2text`
+        2. `python setup build`
+        3. `python setup install`
+
+
+Basic Usage
+-----------
+
+Once installed the module can be used as follows.
+
+    import html2text
+    html = function_to_get_some_html()
+    text = html2text.html2text(html)
+    print(text)
+
+This converts the provided html to text( Markdown text) with all the
+options set to default.
+
+Using Options
+--------------
+
+To customize the options provided by the module the usage is as follows:
+
+    import html2text
+    text_maker = html2text.HTML2Text()
+    text_maker.ignore_links = True
+    text_maker.bypass_tables = False
+    html = function_to_get_some_html()
+    text = text_maker.handle(html)
+    print(text)
+
+
+Available Options
+-----------------
+
+All options exist in the config.py file. A list is provided here with
+simple indications of their function.
+
+
+    - UNICODE_SNOB for using unicode
+    - ESCAPE_SNOB for escaping every special character
+    - LINKS_EACH_PARAGRAPH for putting links after every paragraph
+    - BODY_WIDTH for wrapping long lines
+    - SKIP_INTERNAL_LINKS to skip #local-anchor things
+    - INLINE_LINKS for formatting images and links
+    - PROTECT_LINKS protect from line breaks
+    - GOOGLE_LIST_INDENT no of pixels to indent nested lists
+    - IGNORE_ANCHORS
+    - IGNORE_IMAGES
+    - IMAGES_TO_ALT
+    - IMAGES_WITH_SIZE
+    - IGNORE_EMPHASIS
+    - BYPASS_TABLES
+    - SINGLE_LINE_BREAK to use a single line break rather than two
+    - UNIFIABLE is a dictionary which maps unicode abbrevations to ASCII
+                values
+    - RE_SPACE for finding space-only lines
+    - RE_UNESCAPE for finding html entities like &nbsp;
+    - RE_ORDERED_LIST_MATCHER for matching ordered lists in MD
+    - RE_UNORDERED_LIST_MATCHER for matching unordered list matcher in MD
+    - RE_MD_CHARS_MATCHER for matching Md \,[,],( and )
+    - RE_MD_CHARS_MATCHER_ALL for matching `,*,_,{,},[,],(,),#,!
+    - RE_MD_DOT_MATCHER for matching lines starting with <space>1.<space>
+    - RE_MD_PLUS_MATCHER for matching lines starting with <space>+<space>
+    - RE_MD_DASH_MATCHER for matching lines starting with <space>(-)<space>
+    - RE_SLASH_CHARS a string of slash escapeable characters
+    - RE_MD_BACKSLASH_MATCHER to match \char
+    - USE_AUTOMATIC_LINKS to convert <a href='http://xyz'>http://xyz</a> to <http://xyz>
+
+To alter any option the procedure is to create a parser with
+`parser = html2text.HTML2Text()` and to set the option on the parser.
+example: `parser.unicode_snob = True` to set the UNICODE_SNOB option.
diff --git a/html2text.py b/html2text.py
deleted file mode 100755
index f1e3984..0000000
--- a/html2text.py
+++ /dev/null
@@ -1,1038 +0,0 @@
-#!/usr/bin/env python
-# coding: utf-8
-"""html2text: Turn HTML into equivalent Markdown-structured text."""
-from __future__ import division
-__version__ = "2014.4.5"
-__author__ = "Aaron Swartz (me@aaronsw.com)"
-__copyright__ = "(C) 2004-2008 Aaron Swartz. GNU GPL 3."
-__contributors__ = ["Martin 'Joey' Schulze", "Ricardo Reyes",
-                    "Kevin Jay North", "Matěj Cepl"]
-
-# TODO:
-#   Support decoded entities with unifiable.
-
-try:
-    True
-except NameError:
-    setattr(__builtins__, 'True', 1)
-    setattr(__builtins__, 'False', 0)
-
-
-try:
-    import htmlentitydefs
-    import urlparse
-    import HTMLParser
-except ImportError:  # Python3
-    import html.entities as htmlentitydefs
-    import urllib.parse as urlparse
-    import html.parser as HTMLParser
-try:  # Python3
-    import urllib.request as urllib
-except:
-    import urllib
-import optparse
-import re
-import sys
-
-try:
-    from textwrap import wrap
-except:
-    pass
-
-# Use Unicode characters instead of their ascii psuedo-replacements
-UNICODE_SNOB = 0
-
-# Escape all special characters.  Output is less readable, but avoids
-# corner case formatting issues.
-ESCAPE_SNOB = 0
-
-# Put the links after each paragraph instead of at the end.
-LINKS_EACH_PARAGRAPH = 0
-
-# Wrap long lines at position. 0 for no wrapping. (Requires Python 2.3.)
-BODY_WIDTH = 78
-
-# Don't show internal links (href="#local-anchor") -- corresponding link
-# targets won't be visible in the plain text file anyway.
-SKIP_INTERNAL_LINKS = True
-
-# Use inline, rather than reference, formatting for images and links
-INLINE_LINKS = True
-
-# Number of pixels Google indents nested lists
-GOOGLE_LIST_INDENT = 36
-
-IGNORE_ANCHORS = False
-IGNORE_IMAGES = False
-IGNORE_EMPHASIS = False
-
-### Entity Nonsense ###
-# For checking space-only lines on line 771
-SPACE_RE = re.compile(r'\s\+')
-
-
-def name2cp(k):
-    if k == 'apos':
-        return ord("'")
-    return htmlentitydefs.name2codepoint[k]
-
-
-unifiable = {'rsquo': "'", 'lsquo': "'", 'rdquo': '"', 'ldquo': '"',
-             'copy': '(C)', 'mdash': '--', 'nbsp': ' ', 'rarr': '->',
-             'larr': '<-', 'middot': '*', 'ndash': '-', 'oelig': 'oe',
-             'aelig': 'ae', 'agrave': 'a', 'aacute': 'a', 'acirc': 'a',
-             'atilde': 'a', 'auml': 'a', 'aring': 'a', 'egrave': 'e',
-             'eacute': 'e', 'ecirc': 'e', 'euml': 'e', 'igrave': 'i',
-             'iacute': 'i', 'icirc': 'i', 'iuml': 'i', 'ograve': 'o',
-             'oacute': 'o', 'ocirc': 'o', 'otilde': 'o', 'ouml': 'o',
-             'ugrave': 'u', 'uacute': 'u', 'ucirc': 'u', 'uuml': 'u',
-             'lrm': '', 'rlm': ''}
-
-unifiable_n = {}
-
-for k in unifiable.keys():
-    unifiable_n[name2cp(k)] = unifiable[k]
-
-
-### End Entity Nonsense ###
-def hn(tag):
-    if tag[0] == 'h' and len(tag) == 2:
-        try:
-            n = int(tag[1])
-            if n in range(1, 10):
-                return n
-        except ValueError:
-            return 0
-
-
-def dumb_property_dict(style):
-    """returns a hash of css attributes"""
-    out = dict([(x.strip(), y.strip()) for x, y in
-               [z.split(':', 1) for z in
-               style.split(';') if ':' in z]])
-    return out
-
-
-def dumb_css_parser(data):
-    """returns a hash of css selectors, each of which contains a hash of
-    css attributes"""
-    # remove @import sentences
-    data += ';'
-    importIndex = data.find('@import')
-    while importIndex != -1:
-        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
-        importIndex = data.find('@import')
-
-    # parse the css. reverted from dictionary compehension in order to
-    # support older pythons
-    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
-    try:
-        elements = dict([(a.strip(), dumb_property_dict(b))
-                        for a, b in elements])
-    except ValueError:
-        elements = {}  # not that important
-
-    return elements
-
-
-def element_style(attrs, style_def, parent_style):
-    """returns a hash of the 'final' style attributes of the element"""
-    style = parent_style.copy()
-    if 'class' in attrs:
-        for css_class in attrs['class'].split():
-            css_style = style_def['.' + css_class]
-            style.update(css_style)
-    if 'style' in attrs:
-        immediate_style = dumb_property_dict(attrs['style'])
-        style.update(immediate_style)
-    return style
-
-
-def google_list_style(style):
-    """finds out whether this is an ordered or unordered list"""
-    if 'list-style-type' in style:
-        list_style = style['list-style-type']
-        if list_style in ['disc', 'circle', 'square', 'none']:
-            return 'ul'
-    return 'ol'
-
-
-def google_has_height(style):
-    """check if the style of the element has the 'height' attribute
-    explicitly defined"""
-    if 'height' in style:
-        return True
-    return False
-
-
-def google_text_emphasis(style):
-    """return a list of all emphasis modifiers of the element"""
-    emphasis = []
-    if 'text-decoration' in style:
-        emphasis.append(style['text-decoration'])
-    if 'font-style' in style:
-        emphasis.append(style['font-style'])
-    if 'font-weight' in style:
-        emphasis.append(style['font-weight'])
-    return emphasis
-
-
-def google_fixed_width_font(style):
-    """check if the css of the current element defines a fixed width font"""
-    font_family = ''
-    if 'font-family' in style:
-        font_family = style['font-family']
-    if 'Courier New' == font_family or 'Consolas' == font_family:
-        return True
-    return False
-
-
-def list_numbering_start(attrs):
-    """extract numbering from list element attributes"""
-    if 'start' in attrs:
-        try:
-            return int(attrs['start']) - 1
-        except ValueError:
-            pass
-
-    return 0
-
-
-class HTML2Text(HTMLParser.HTMLParser):
-    def __init__(self, out=None, baseurl='', bodywidth=BODY_WIDTH):
-        HTMLParser.HTMLParser.__init__(self)
-
-        # Config options
-        self.unicode_snob = UNICODE_SNOB
-        self.escape_snob = ESCAPE_SNOB
-        self.links_each_paragraph = LINKS_EACH_PARAGRAPH
-        self.body_width = bodywidth
-        self.skip_internal_links = SKIP_INTERNAL_LINKS
-        self.inline_links = INLINE_LINKS
-        self.google_list_indent = GOOGLE_LIST_INDENT
-        self.ignore_links = IGNORE_ANCHORS
-        self.ignore_images = IGNORE_IMAGES
-        self.ignore_emphasis = IGNORE_EMPHASIS
-        self.google_doc = False
-        self.ul_item_mark = '*'
-        self.emphasis_mark = '_'
-        self.strong_mark = '**'
-
-        if out is None:
-            self.out = self.outtextf
-        else:
-            self.out = out
-
-        # empty list to store output characters before they are "joined"
-        self.outtextlist = []
-
-        try:
-            self.outtext = unicode()
-        except NameError:  # Python3
-            self.outtext = str()
-
-        self.quiet = 0
-        self.p_p = 0  # number of newline character to print before next output
-        self.outcount = 0
-        self.start = 1
-        self.space = 0
-        self.a = []
-        self.astack = []
-        self.maybe_automatic_link = None
-        self.absolute_url_matcher = re.compile(r'^[a-zA-Z+]+://')
-        self.acount = 0
-        self.list = []
-        self.blockquote = 0
-        self.pre = 0
-        self.startpre = 0
-        self.code = False
-        self.br_toggle = ''
-        self.lastWasNL = 0
-        self.lastWasList = False
-        self.style = 0
-        self.style_def = {}
-        self.tag_stack = []
-        self.emphasis = 0
-        self.drop_white_space = 0
-        self.inheader = False
-        self.abbr_title = None  # current abbreviation definition
-        self.abbr_data = None  # last inner HTML (for abbr being defined)
-        self.abbr_list = {}  # stack of abbreviations to write later
-        self.baseurl = baseurl
-
-        try:
-            del unifiable_n[name2cp('nbsp')]
-        except KeyError:
-            pass
-        unifiable['nbsp'] = '&nbsp_place_holder;'
-
-    def feed(self, data):
-        data = data.replace("</' + 'script>", "</ignore>")
-        HTMLParser.HTMLParser.feed(self, data)
-
-    def handle(self, data):
-        self.feed(data)
-        self.feed("")
-        return self.optwrap(self.close())
-
-    def outtextf(self, s):
-        self.outtextlist.append(s)
-        if s:
-            self.lastWasNL = s[-1] == '\n'
-
-    def close(self):
-        HTMLParser.HTMLParser.close(self)
-
-        try:
-            nochr = unicode('')
-        except NameError:
-            nochr = str('')
-
-        self.pbr()
-        self.o('', 0, 'end')
-
-        self.outtext = nochr.join(self.outtextlist)
-        if self.unicode_snob:
-            try:
-                nbsp = unichr(name2cp('nbsp'))
-            except NameError:
-                nbsp = chr(name2cp('nbsp'))
-        else:
-            try:
-                nbsp = unichr(32)
-            except NameError:
-                nbsp = chr(32)
-        try:
-            self.outtext = self.outtext.replace(unicode('&nbsp_place_holder;'),
-                                                nbsp)
-        except NameError:
-            self.outtext = self.outtext.replace('&nbsp_place_holder;', nbsp)
-
-        # Clear self.outtextlist to avoid memory leak of its content to
-        # the next handling.
-        self.outtextlist = []
-
-        return self.outtext
-
-    def handle_charref(self, c):
-        self.o(self.charref(c), 1)
-
-    def handle_entityref(self, c):
-        self.o(self.entityref(c), 1)
-
-    def handle_starttag(self, tag, attrs):
-        self.handle_tag(tag, attrs, 1)
-
-    def handle_endtag(self, tag):
-        self.handle_tag(tag, None, 0)
-
-    def previousIndex(self, attrs):
-        """ returns the index of certain set of attributes (of a link) in the
-            self.a list
-
-            If the set of attributes is not found, returns None
-        """
-        if 'href' not in attrs:
-            return None
-
-        i = -1
-        for a in self.a:
-            i += 1
-            match = 0
-
-            if ('href' in a) and a['href'] == attrs['href']:
-                if ('title' in a) or ('title' in attrs):
-                        if (('title' in a) and ('title' in attrs) and
-                                a['title'] == attrs['title']):
-                            match = True
-                else:
-                    match = True
-
-            if match:
-                return i
-
-    def drop_last(self, nLetters):
-        if not self.quiet:
-            self.outtext = self.outtext[:-nLetters]
-
-    def handle_emphasis(self, start, tag_style, parent_style):
-        """handles various text emphases"""
-        tag_emphasis = google_text_emphasis(tag_style)
-        parent_emphasis = google_text_emphasis(parent_style)
-
-        # handle Google's text emphasis
-        strikethrough = 'line-through' in \
-            tag_emphasis and self.hide_strikethrough
-        bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
-        italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
-        fixed = google_fixed_width_font(tag_style) and not \
-            google_fixed_width_font(parent_style) and not self.pre
-
-        if start:
-            # crossed-out text must be handled before other attributes
-            # in order not to output qualifiers unnecessarily
-            if bold or italic or fixed:
-                self.emphasis += 1
-            if strikethrough:
-                self.quiet += 1
-            if italic:
-                self.o(self.emphasis_mark)
-                self.drop_white_space += 1
-            if bold:
-                self.o(self.strong_mark)
-                self.drop_white_space += 1
-            if fixed:
-                self.o('`')
-                self.drop_white_space += 1
-                self.code = True
-        else:
-            if bold or italic or fixed:
-                # there must not be whitespace before closing emphasis mark
-                self.emphasis -= 1
-                self.space = 0
-                self.outtext = self.outtext.rstrip()
-            if fixed:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(1)
-                    self.drop_white_space -= 1
-                else:
-                    self.o('`')
-                self.code = False
-            if bold:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(2)
-                    self.drop_white_space -= 1
-                else:
-                    self.o(self.strong_mark)
-            if italic:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(1)
-                    self.drop_white_space -= 1
-                else:
-                    self.o(self.emphasis_mark)
-            # space is only allowed after *all* emphasis marks
-            if (bold or italic) and not self.emphasis:
-                    self.o(" ")
-            if strikethrough:
-                self.quiet -= 1
-
-    def handle_tag(self, tag, attrs, start):
-        #attrs = fixattrs(attrs)
-        # attrs is None for endtags
-        if attrs is None:
-            attrs = {}
-        else:
-            attrs = dict(attrs)
-
-        if self.google_doc:
-            # the attrs parameter is empty for a closing tag. in addition, we
-            # need the attributes of the parent nodes in order to get a
-            # complete style description for the current element. we assume
-            # that google docs export well formed html.
-            parent_style = {}
-            if start:
-                if self.tag_stack:
-                    parent_style = self.tag_stack[-1][2]
-                tag_style = element_style(attrs, self.style_def, parent_style)
-                self.tag_stack.append((tag, attrs, tag_style))
-            else:
-                dummy, attrs, tag_style = self.tag_stack.pop()
-                if self.tag_stack:
-                    parent_style = self.tag_stack[-1][2]
-
-        if hn(tag):
-            self.p()
-            if start:
-                self.inheader = True
-                self.o(hn(tag) * "#" + ' ')
-            else:
-                self.inheader = False
-                return  # prevent redundant emphasis marks on headers
-
-        if tag in ['p', 'div']:
-            if self.google_doc:
-                if start and google_has_height(tag_style):
-                    self.p()
-                else:
-                    self.soft_br()
-            else:
-                self.p()
-
-        if tag == "br" and start:
-            self.o("  \n")
-
-        if tag == "hr" and start:
-            self.p()
-            self.o("* * *")
-            self.p()
-
-        if tag in ["head", "style", 'script']:
-            if start:
-                self.quiet += 1
-            else:
-                self.quiet -= 1
-
-        if tag == "style":
-            if start:
-                self.style += 1
-            else:
-                self.style -= 1
-
-        if tag in ["body"]:
-            self.quiet = 0  # sites like 9rules.com never close <head>
-
-        if tag == "blockquote":
-            if start:
-                self.p()
-                self.o('> ', 0, 1)
-                self.start = 1
-                self.blockquote += 1
-            else:
-                self.blockquote -= 1
-                self.p()
-
-        if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
-            self.o(self.emphasis_mark)
-        if tag in ['strong', 'b'] and not self.ignore_emphasis:
-            self.o(self.strong_mark)
-        if tag in ['del', 'strike', 's']:
-            if start:
-                self.o("<" + tag + ">")
-            else:
-                self.o("</" + tag + ">")
-
-        if self.google_doc:
-            if not self.inheader:
-                # handle some font attributes, but leave headers clean
-                self.handle_emphasis(start, tag_style, parent_style)
-
-        if tag in ["code", "tt"] and not self.pre:
-            self.o('`')  # TODO: `` `this` ``
-        if tag == "abbr":
-            if start:
-                self.abbr_title = None
-                self.abbr_data = ''
-                if ('title' in attrs):
-                    self.abbr_title = attrs['title']
-            else:
-                if self.abbr_title is not None:
-                    self.abbr_list[self.abbr_data] = self.abbr_title
-                    self.abbr_title = None
-                self.abbr_data = ''
-
-        if tag == "a" and not self.ignore_links:
-            if start:
-                if ('href' in attrs) and \
-                        (attrs['href'] is not None) and \
-                            not (self.skip_internal_links and
-                                attrs['href'].startswith('#')):
-                    self.astack.append(attrs)
-                    self.maybe_automatic_link = attrs['href']
-                else:
-                    self.astack.append(None)
-            else:
-                if self.astack:
-                    a = self.astack.pop()
-                    if self.maybe_automatic_link:
-                        self.maybe_automatic_link = None
-                    elif a:
-                        if self.inline_links:
-                            self.o("](" + escape_md(a['href']) + ")")
-                        else:
-                            i = self.previousIndex(a)
-                            if i is not None:
-                                a = self.a[i]
-                            else:
-                                self.acount += 1
-                                a['count'] = self.acount
-                                a['outcount'] = self.outcount
-                                self.a.append(a)
-                            self.o("][" + str(a['count']) + "]")
-
-        if tag == "img" and start and not self.ignore_images:
-            if ('src' in attrs):
-                attrs['href'] = attrs['src']
-                alt = attrs.get('alt', '')
-                self.o("![" + escape_md(alt) + "]")
-
-                if self.inline_links:
-                    self.o("(" + escape_md(attrs['href']) + ")")
-                else:
-                    i = self.previousIndex(attrs)
-                    if i is not None:
-                        attrs = self.a[i]
-                    else:
-                        self.acount += 1
-                        attrs['count'] = self.acount
-                        attrs['outcount'] = self.outcount
-                        self.a.append(attrs)
-                    self.o("[" + str(attrs['count']) + "]")
-
-        if tag == 'dl' and start:
-            self.p()
-        if tag == 'dt' and not start:
-            self.pbr()
-        if tag == 'dd' and start:
-            self.o('    ')
-        if tag == 'dd' and not start:
-            self.pbr()
-
-        if tag in ["ol", "ul"]:
-            # Google Docs create sub lists as top level lists
-            if (not self.list) and (not self.lastWasList):
-                self.p()
-            if start:
-                if self.google_doc:
-                    list_style = google_list_style(tag_style)
-                else:
-                    list_style = tag
-                numbering_start = list_numbering_start(attrs)
-                self.list.append({
-                    'name': list_style,
-                    'num': numbering_start
-                })
-            else:
-                if self.list:
-                    self.list.pop()
-            self.lastWasList = True
-        else:
-            self.lastWasList = False
-
-        if tag == 'li':
-            self.pbr()
-            if start:
-                if self.list:
-                    li = self.list[-1]
-                else:
-                    li = {'name': 'ul', 'num': 0}
-                if self.google_doc:
-                    nest_count = self.google_nest_count(tag_style)
-                else:
-                    nest_count = len(self.list)
-                # TODO: line up <ol><li>s > 9 correctly.
-                self.o("  " * nest_count)
-                if li['name'] == "ul":
-                    self.o(self.ul_item_mark + " ")
-                elif li['name'] == "ol":
-                    li['num'] += 1
-                    self.o(str(li['num']) + ". ")
-                self.start = 1
-
-        if tag in ["table", "tr"] and start:
-            self.p()
-        if tag == 'td':
-            self.pbr()
-
-        if tag == "pre":
-            if start:
-                self.startpre = 1
-                self.pre = 1
-            else:
-                self.pre = 0
-            self.p()
-
-    def pbr(self):
-        if self.p_p == 0:
-            self.p_p = 1
-
-    def p(self):
-        self.p_p = 2
-
-    def soft_br(self):
-        self.pbr()
-        self.br_toggle = '  '
-
-    def o(self, data, puredata=0, force=0):
-        if self.abbr_data is not None:
-            self.abbr_data += data
-
-        if not self.quiet:
-            if self.google_doc:
-                # prevent white space immediately after 'begin emphasis'
-                # marks ('**' and '_')
-                lstripped_data = data.lstrip()
-                if self.drop_white_space and not (self.pre or self.code):
-                    data = lstripped_data
-                if lstripped_data != '':
-                    self.drop_white_space = 0
-
-            if puredata and not self.pre:
-                # This is a very dangerous call ... it could mess up
-                # all handling of &nbsp; when not handled properly
-                # (see entityref)
-                data = re.sub(r'\s+', r' ', data)
-                if data and data[0] == ' ':
-                    self.space = 1
-                    data = data[1:]
-            if not data and not force:
-                return
-
-            if self.startpre:
-                #self.out(" :") #TODO: not output when already one there
-                if not data.startswith("\n"):  # <pre>stuff...
-                    data = "\n" + data
-
-            bq = (">" * self.blockquote)
-            if not (force and data and data[0] == ">") and self.blockquote:
-                bq += " "
-
-            if self.pre:
-                if not self.list:
-                    bq += "    "
-                #else: list content is already partially indented
-                for i in range(len(self.list)):
-                    bq += "    "
-                data = data.replace("\n", "\n" + bq)
-
-            if self.startpre:
-                self.startpre = 0
-                if self.list:
-                    # use existing initial indentation
-                    data = data.lstrip("\n")
-
-            if self.start:
-                self.space = 0
-                self.p_p = 0
-                self.start = 0
-
-            if force == 'end':
-                # It's the end.
-                self.p_p = 0
-                self.out("\n")
-                self.space = 0
-
-            if self.p_p:
-                self.out((self.br_toggle + '\n' + bq) * self.p_p)
-                self.space = 0
-                self.br_toggle = ''
-
-            if self.space:
-                if not self.lastWasNL:
-                    self.out(' ')
-                self.space = 0
-
-            if self.a and ((self.p_p == 2 and self.links_each_paragraph)
-                           or force == "end"):
-                if force == "end":
-                    self.out("\n")
-
-                newa = []
-                for link in self.a:
-                    if self.outcount > link['outcount']:
-                        self.out("   [" + str(link['count']) + "]: " +
-                                 urlparse.urljoin(self.baseurl, link['href']))
-                        if 'title' in link:
-                            self.out(" (" + link['title'] + ")")
-                        self.out("\n")
-                    else:
-                        newa.append(link)
-
-                # Don't need an extra line when nothing was done.
-                if self.a != newa:
-                    self.out("\n")
-
-                self.a = newa
-
-            if self.abbr_list and force == "end":
-                for abbr, definition in self.abbr_list.items():
-                    self.out("  *[" + abbr + "]: " + definition + "\n")
-
-            self.p_p = 0
-            self.out(data)
-            self.outcount += 1
-
-    def handle_data(self, data):
-        if r'\/script>' in data:
-            self.quiet -= 1
-
-        if self.style:
-            self.style_def.update(dumb_css_parser(data))
-
-        if not self.maybe_automatic_link is None:
-            href = self.maybe_automatic_link
-            if href == data and self.absolute_url_matcher.match(href):
-                self.o("<" + data + ">")
-                return
-            else:
-                self.o("[")
-                self.maybe_automatic_link = None
-
-        if not self.code and not self.pre:
-            data = escape_md_section(data, snob=self.escape_snob)
-        self.o(data, 1)
-
-    def unknown_decl(self, data):
-        pass
-
-    def charref(self, name):
-        if name[0] in ['x', 'X']:
-            c = int(name[1:], 16)
-        else:
-            c = int(name)
-
-        if not self.unicode_snob and c in unifiable_n.keys():
-            return unifiable_n[c]
-        else:
-            try:
-                return unichr(c)
-            except NameError:  # Python3
-                return chr(c)
-
-    def entityref(self, c):
-        if not self.unicode_snob and c in unifiable.keys():
-            return unifiable[c]
-        else:
-            try:
-                name2cp(c)
-            except KeyError:
-                return "&" + c + ';'
-            else:
-                if c == 'nbsp':
-                    return unifiable[c]
-                else:
-                    try:
-                        return unichr(name2cp(c))
-                    except NameError:  # Python3
-                        return chr(name2cp(c))
-
-    def replaceEntities(self, s):
-        s = s.group(1)
-        if s[0] == "#":
-            return self.charref(s[1:])
-        else:
-            return self.entityref(s)
-
-    r_unescape = re.compile(r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));")
-
-    def unescape(self, s):
-        return self.r_unescape.sub(self.replaceEntities, s)
-
-    def google_nest_count(self, style):
-        """calculate the nesting count of google doc lists"""
-        nest_count = 0
-        if 'margin-left' in style:
-            nest_count = int(style['margin-left'][:-2]) \
-                // self.google_list_indent
-        return nest_count
-
-    def optwrap(self, text):
-        """Wrap all paragraphs in the provided text."""
-        if not self.body_width:
-            return text
-
-        assert wrap, "Requires Python 2.3."
-        result = ''
-        newlines = 0
-        for para in text.split("\n"):
-            if len(para) > 0:
-                if not skipwrap(para):
-                    result += "\n".join(wrap(para, self.body_width))
-                    if para.endswith('  '):
-                        result += "  \n"
-                        newlines = 1
-                    else:
-                        result += "\n\n"
-                        newlines = 2
-                else:
-                    # Warning for the tempted!!!
-                    # Be aware that obvious replacement of this with
-                    # line.isspace()
-                    # DOES NOT work! Explanations are welcome.
-                    if not SPACE_RE.match(para):
-                        result += para + "\n"
-                        newlines = 1
-            else:
-                if newlines < 2:
-                    result += "\n"
-                    newlines += 1
-        return result
-
-ordered_list_matcher = re.compile(r'\d+\.\s')
-unordered_list_matcher = re.compile(r'[-\*\+]\s')
-md_chars_matcher = re.compile(r"([\\\[\]\(\)])")
-md_chars_matcher_all = re.compile(r"([`\*_{}\[\]\(\)#!])")
-md_dot_matcher = re.compile(r"""
-    ^             # start of line
-    (\s*\d+)      # optional whitespace and a number
-    (\.)          # dot
-    (?=\s)        # lookahead assert whitespace
-    """, re.MULTILINE | re.VERBOSE)
-md_plus_matcher = re.compile(r"""
-    ^
-    (\s*)
-    (\+)
-    (?=\s)
-    """, flags=re.MULTILINE | re.VERBOSE)
-md_dash_matcher = re.compile(r"""
-    ^
-    (\s*)
-    (-)
-    (?=\s|\-)     # followed by whitespace (bullet list, or spaced out hr)
-                  # or another dash (header or hr)
-    """, flags=re.MULTILINE | re.VERBOSE)
-slash_chars = r'\`*_{}[]()#+-.!'
-md_backslash_matcher = re.compile(r'''
-    (\\)          # match one slash
-    (?=[%s])      # followed by a char that requires escaping
-    ''' % re.escape(slash_chars),
-    flags=re.VERBOSE)
-
-
-def skipwrap(para):
-    # If the text begins with four spaces or one tab, it's a code block;
-    # don't wrap
-    if para[0:4] == '    ' or para[0] == '\t':
-        return True
-    # If the text begins with only two "--", possibly preceded by
-    # whitespace, that's an emdash; so wrap.
-    stripped = para.lstrip()
-    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
-        return False
-    # I'm not sure what this is for; I thought it was to detect lists,
-    # but there's a <br>-inside-<span> case in one of the tests that
-    # also depends upon it.
-    if stripped[0:1] == '-' or stripped[0:1] == '*':
-        return True
-    # If the text begins with a single -, *, or +, followed by a space,
-    # or an integer, followed by a ., followed by a space (in either
-    # case optionally preceeded by whitespace), it's a list; don't wrap.
-    if ordered_list_matcher.match(stripped) or \
-            unordered_list_matcher.match(stripped):
-        return True
-    return False
-
-
-def wrapwrite(text):
-    text = text.encode('utf-8')
-    try:  # Python3
-        sys.stdout.buffer.write(text)
-    except AttributeError:
-        sys.stdout.write(text)
-
-
-def html2text(html, baseurl='', bodywidth=BODY_WIDTH):
-    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
-    return h.handle(html)
-
-
-def unescape(s, unicode_snob=False):
-    h = HTML2Text()
-    h.unicode_snob = unicode_snob
-    return h.unescape(s)
-
-
-def escape_md(text):
-    """Escapes markdown-sensitive characters within other markdown
-    constructs."""
-    return md_chars_matcher.sub(r"\\\1", text)
-
-
-def escape_md_section(text, snob=False):
-    """Escapes markdown-sensitive characters across whole document sections."""
-    text = md_backslash_matcher.sub(r"\\\1", text)
-    if snob:
-        text = md_chars_matcher_all.sub(r"\\\1", text)
-    text = md_dot_matcher.sub(r"\1\\\2", text)
-    text = md_plus_matcher.sub(r"\1\\\2", text)
-    text = md_dash_matcher.sub(r"\1\\\2", text)
-    return text
-
-
-def main():
-    baseurl = ''
-
-    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
-                              version='%prog ' + __version__)
-    p.add_option("--ignore-emphasis", dest="ignore_emphasis",
-                 action="store_true", default=IGNORE_EMPHASIS,
-                 help="don't include any formatting for emphasis")
-    p.add_option("--ignore-links", dest="ignore_links", action="store_true",
-                 default=IGNORE_ANCHORS,
-                 help="don't include any formatting for links")
-    p.add_option("--ignore-images", dest="ignore_images", action="store_true",
-                 default=IGNORE_IMAGES,
-                 help="don't include any formatting for images")
-    p.add_option("-g", "--google-doc", action="store_true", dest="google_doc",
-                 default=False,
-                 help="convert an html-exported Google Document")
-    p.add_option("-d", "--dash-unordered-list", action="store_true",
-                 dest="ul_style_dash", default=False,
-                 help="use a dash rather than a star for unordered list items")
-    p.add_option("-e", "--asterisk-emphasis", action="store_true",
-                 dest="em_style_asterisk", default=False,
-                 help="use an asterisk rather than an underscore " +
-                 "for emphasized text")
-    p.add_option("-b", "--body-width", dest="body_width", action="store",
-                 type="int", default=BODY_WIDTH,
-                 help="number of characters per output line, 0 for no wrap")
-    p.add_option("-i", "--google-list-indent", dest="list_indent",
-                 action="store", type="int", default=GOOGLE_LIST_INDENT,
-                 help="number of pixels Google indents nested lists")
-    p.add_option("-s", "--hide-strikethrough", action="store_true",
-                 dest="hide_strikethrough", default=False,
-                 help="hide strike-through text. only relevant when -g is " +
-                 "specified as well")
-    p.add_option("--escape-all", action="store_true", dest="escape_snob",
-                 default=False,
-                 help="Escape all special characters.  Output is less " +
-                 "readable, but avoids corner case formatting issues.")
-    (options, args) = p.parse_args()
-
-    # process input
-    encoding = "utf-8"
-    if len(args) > 0:
-        file_ = args[0]
-        if len(args) == 2:
-            encoding = args[1]
-        if len(args) > 2:
-            p.error('Too many arguments')
-
-        if file_.startswith('http://') or file_.startswith('https://'):
-            baseurl = file_
-            j = urllib.urlopen(baseurl)
-            data = j.read()
-            if encoding is None:
-                try:
-                    from feedparser import _getCharacterEncoding as enc
-                except ImportError:
-                    enc = lambda x, y: ('utf-8', 1)
-                encoding = enc(j.headers, data)[0]
-                if encoding == 'us-ascii':
-                    encoding = 'utf-8'
-        else:
-            data = open(file_, 'rb').read()
-            if encoding is None:
-                try:
-                    from chardet import detect
-                except ImportError:
-                    detect = lambda x: {'encoding': 'utf-8'}
-                encoding = detect(data)['encoding']
-    else:
-        data = sys.stdin.read()
-
-    data = data.decode(encoding)
-    h = HTML2Text(baseurl=baseurl)
-    # handle options
-    if options.ul_style_dash:
-        h.ul_item_mark = '-'
-    if options.em_style_asterisk:
-        h.emphasis_mark = '*'
-        h.strong_mark = '__'
-
-    h.body_width = options.body_width
-    h.list_indent = options.list_indent
-    h.ignore_emphasis = options.ignore_emphasis
-    h.ignore_links = options.ignore_links
-    h.ignore_images = options.ignore_images
-    h.google_doc = options.google_doc
-    h.hide_strikethrough = options.hide_strikethrough
-    h.escape_snob = options.escape_snob
-
-    wrapwrite(h.handle(data))
-
-
-if __name__ == "__main__":
-    main()
diff --git a/html2text/__init__.py b/html2text/__init__.py
new file mode 100644
index 0000000..b4f1530
--- /dev/null
+++ b/html2text/__init__.py
@@ -0,0 +1,817 @@
+#!/usr/bin/env python
+# coding: utf-8
+"""html2text: Turn HTML into equivalent Markdown-structured text."""
+from __future__ import division
+import re
+import cgi
+
+try:
+    from textwrap import wrap
+except ImportError:
+    pass
+
+from html2text.compat import urlparse, HTMLParser
+from html2text import config
+
+from html2text.utils import (
+    name2cp,
+    unifiable_n,
+    google_text_emphasis,
+    google_fixed_width_font,
+    element_style,
+    hn,
+    google_has_height,
+    escape_md,
+    google_list_style,
+    list_numbering_start,
+    dumb_css_parser,
+    escape_md_section,
+    skipwrap
+)
+
+__version__ = (2015, 6, 6)
+
+
+# TODO:
+# Support decoded entities with UNIFIABLE.
+
+
+class HTML2Text(HTMLParser.HTMLParser):
+    def __init__(self, out=None, baseurl='', bodywidth=config.BODY_WIDTH):
+        """
+        Input parameters:
+            out: possible custom replacement for self.outtextf (which
+                 appends lines of text).
+            baseurl: base URL of the document we process
+        """
+        HTMLParser.HTMLParser.__init__(self)
+
+        # Config options
+        self.split_next_td = False
+        self.td_count = 0
+        self.table_start = False
+        self.unicode_snob = config.UNICODE_SNOB
+        self.escape_snob = config.ESCAPE_SNOB
+        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH
+        self.body_width = bodywidth
+        self.skip_internal_links = config.SKIP_INTERNAL_LINKS
+        self.inline_links = config.INLINE_LINKS
+        self.protect_links = config.PROTECT_LINKS
+        self.google_list_indent = config.GOOGLE_LIST_INDENT
+        self.ignore_links = config.IGNORE_ANCHORS
+        self.ignore_images = config.IGNORE_IMAGES
+        self.images_to_alt = config.IMAGES_TO_ALT
+        self.images_with_size = config.IMAGES_WITH_SIZE
+        self.ignore_emphasis = config.IGNORE_EMPHASIS
+        self.bypass_tables = config.BYPASS_TABLES
+        self.google_doc = False
+        self.ul_item_mark = '*'
+        self.emphasis_mark = '_'
+        self.strong_mark = '**'
+        self.single_line_break = config.SINGLE_LINE_BREAK
+        self.use_automatic_links = config.USE_AUTOMATIC_LINKS
+
+        if out is None:
+            self.out = self.outtextf
+        else:
+            self.out = out
+
+        # empty list to store output characters before they are "joined"
+        self.outtextlist = []
+
+        self.quiet = 0
+        self.p_p = 0  # number of newline character to print before next output
+        self.outcount = 0
+        self.start = 1
+        self.space = 0
+        self.a = []
+        self.astack = []
+        self.maybe_automatic_link = None
+        self.empty_link = False
+        self.absolute_url_matcher = re.compile(r'^[a-zA-Z+]+://')
+        self.acount = 0
+        self.list = []
+        self.blockquote = 0
+        self.pre = 0
+        self.startpre = 0
+        self.code = False
+        self.br_toggle = ''
+        self.lastWasNL = 0
+        self.lastWasList = False
+        self.style = 0
+        self.style_def = {}
+        self.tag_stack = []
+        self.emphasis = 0
+        self.drop_white_space = 0
+        self.inheader = False
+        self.abbr_title = None  # current abbreviation definition
+        self.abbr_data = None  # last inner HTML (for abbr being defined)
+        self.abbr_list = {}  # stack of abbreviations to write later
+        self.baseurl = baseurl
+
+        try:
+            del unifiable_n[name2cp('nbsp')]
+        except KeyError:
+            pass
+        config.UNIFIABLE['nbsp'] = '&nbsp_place_holder;'
+
+    def feed(self, data):
+        data = data.replace("</' + 'script>", "</ignore>")
+        HTMLParser.HTMLParser.feed(self, data)
+
+    def handle(self, data):
+        self.feed(data)
+        self.feed("")
+        return self.optwrap(self.close())
+
+    def outtextf(self, s):
+        self.outtextlist.append(s)
+        if s:
+            self.lastWasNL = s[-1] == '\n'
+
+    def close(self):
+        HTMLParser.HTMLParser.close(self)
+
+        try:
+            nochr = unicode('')
+        except NameError:
+            nochr = str('')
+
+        self.pbr()
+        self.o('', 0, 'end')
+
+        outtext = nochr.join(self.outtextlist)
+        if self.unicode_snob:
+            try:
+                nbsp = unichr(name2cp('nbsp'))
+            except NameError:
+                nbsp = chr(name2cp('nbsp'))
+        else:
+            try:
+                nbsp = unichr(32)
+            except NameError:
+                nbsp = chr(32)
+        try:
+            outtext = outtext.replace(unicode('&nbsp_place_holder;'), nbsp)
+        except NameError:
+            outtext = outtext.replace('&nbsp_place_holder;', nbsp)
+
+        # Clear self.outtextlist to avoid memory leak of its content to
+        # the next handling.
+        self.outtextlist = []
+
+        return outtext
+
+    def handle_charref(self, c):
+        charref = self.charref(c)
+        if not self.code and not self.pre:
+            charref = cgi.escape(charref)
+        self.o(charref, 1)
+
+    def handle_entityref(self, c):
+        entityref = self.entityref(c)
+        if not self.code and not self.pre and entityref != '&nbsp_place_holder;':
+            entityref = cgi.escape(entityref)
+        self.o(entityref, 1)
+
+    def handle_starttag(self, tag, attrs):
+        self.handle_tag(tag, attrs, 1)
+
+    def handle_endtag(self, tag):
+        self.handle_tag(tag, None, 0)
+
+    def previousIndex(self, attrs):
+        """
+        :type attrs: dict
+
+        :returns: The index of certain set of attributes (of a link) in the
+        self.a list. If the set of attributes is not found, returns None
+        :rtype: int
+        """
+        if 'href' not in attrs:
+            return None
+
+        i = -1
+        for a in self.a:
+            i += 1
+            match = 0
+
+            if ('href' in a) and a['href'] == attrs['href']:
+                if ('title' in a) or ('title' in attrs):
+                    if (('title' in a) and ('title' in attrs) and
+                                a['title'] == attrs['title']):
+                        match = True
+                else:
+                    match = True
+
+            if match:
+                return i
+
+    def handle_emphasis(self, start, tag_style, parent_style):
+        """
+        Handles various text emphases
+        """
+        tag_emphasis = google_text_emphasis(tag_style)
+        parent_emphasis = google_text_emphasis(parent_style)
+
+        # handle Google's text emphasis
+        strikethrough = 'line-through' in \
+                        tag_emphasis and self.hide_strikethrough
+        bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
+        italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
+        fixed = google_fixed_width_font(tag_style) and not \
+            google_fixed_width_font(parent_style) and not self.pre
+
+        if start:
+            # crossed-out text must be handled before other attributes
+            # in order not to output qualifiers unnecessarily
+            if bold or italic or fixed:
+                self.emphasis += 1
+            if strikethrough:
+                self.quiet += 1
+            if italic:
+                self.o(self.emphasis_mark)
+                self.drop_white_space += 1
+            if bold:
+                self.o(self.strong_mark)
+                self.drop_white_space += 1
+            if fixed:
+                self.o('`')
+                self.drop_white_space += 1
+                self.code = True
+        else:
+            if bold or italic or fixed:
+                # there must not be whitespace before closing emphasis mark
+                self.emphasis -= 1
+                self.space = 0
+            if fixed:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o('`')
+                self.code = False
+            if bold:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o(self.strong_mark)
+            if italic:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o(self.emphasis_mark)
+            # space is only allowed after *all* emphasis marks
+            if (bold or italic) and not self.emphasis:
+                self.o(" ")
+            if strikethrough:
+                self.quiet -= 1
+
+    def handle_tag(self, tag, attrs, start):
+        # attrs is None for endtags
+        if attrs is None:
+            attrs = {}
+        else:
+            attrs = dict(attrs)
+
+        # first thing inside the anchor tag is another tag that produces some output
+        if start and not self.maybe_automatic_link is None and \
+             tag not in ['p', 'div', 'style', 'dl', 'dt'] and (tag != "img" or self.ignore_images):
+            self.o("[")
+            self.maybe_automatic_link = None
+            self.empty_link = False
+
+        if self.google_doc:
+            # the attrs parameter is empty for a closing tag. in addition, we
+            # need the attributes of the parent nodes in order to get a
+            # complete style description for the current element. we assume
+            # that google docs export well formed html.
+            parent_style = {}
+            if start:
+                if self.tag_stack:
+                    parent_style = self.tag_stack[-1][2]
+                tag_style = element_style(attrs, self.style_def, parent_style)
+                self.tag_stack.append((tag, attrs, tag_style))
+            else:
+                dummy, attrs, tag_style = self.tag_stack.pop()
+                if self.tag_stack:
+                    parent_style = self.tag_stack[-1][2]
+
+        if hn(tag):
+            self.p()
+            if start:
+                self.inheader = True
+                self.o(hn(tag) * "#" + ' ')
+            else:
+                self.inheader = False
+                return  # prevent redundant emphasis marks on headers
+
+        if tag in ['p', 'div']:
+            if self.google_doc:
+                if start and google_has_height(tag_style):
+                    self.p()
+                else:
+                    self.soft_br()
+            else:
+                self.p()
+
+        if tag == "br" and start:
+            self.o("  \n")
+
+        if tag == "hr" and start:
+            self.p()
+            self.o("* * *")
+            self.p()
+
+        if tag in ["head", "style", 'script']:
+            if start:
+                self.quiet += 1
+            else:
+                self.quiet -= 1
+
+        if tag == "style":
+            if start:
+                self.style += 1
+            else:
+                self.style -= 1
+
+        if tag in ["body"]:
+            self.quiet = 0  # sites like 9rules.com never close <head>
+
+        if tag == "blockquote":
+            if start:
+                self.p()
+                self.o('> ', 0, 1)
+                self.start = 1
+                self.blockquote += 1
+            else:
+                self.blockquote -= 1
+                self.p()
+
+        if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
+            self.o(self.emphasis_mark)
+        if tag in ['strong', 'b'] and not self.ignore_emphasis:
+            self.o(self.strong_mark)
+        if tag in ['del', 'strike', 's']:
+            if start:
+                self.o("<" + tag + ">")
+            else:
+                self.o("</" + tag + ">")
+
+        if self.google_doc:
+            if not self.inheader:
+                # handle some font attributes, but leave headers clean
+                self.handle_emphasis(start, tag_style, parent_style)
+
+        if tag in ["code", "tt"] and not self.pre:
+            self.o('`')  # TODO: `` `this` ``
+            self.code = not self.code
+        if tag == "abbr":
+            if start:
+                self.abbr_title = None
+                self.abbr_data = ''
+                if ('title' in attrs):
+                    self.abbr_title = attrs['title']
+            else:
+                if self.abbr_title is not None:
+                    self.abbr_list[self.abbr_data] = self.abbr_title
+                    self.abbr_title = None
+                self.abbr_data = ''
+
+        if tag == "a" and not self.ignore_links:
+            if start:
+                if ('href' in attrs) and \
+                        (attrs['href'] is not None) and \
+                        not (self.skip_internal_links and
+                                 attrs['href'].startswith('#')):
+                    self.astack.append(attrs)
+                    self.maybe_automatic_link = attrs['href']
+                    self.empty_link = True
+                    if self.protect_links:
+                        attrs['href'] = '<'+attrs['href']+'>'
+                else:
+                    self.astack.append(None)
+            else:
+                if self.astack:
+                    a = self.astack.pop()
+                    if self.maybe_automatic_link and not self.empty_link:
+                        self.maybe_automatic_link = None
+                    elif a:
+                        if self.empty_link:
+                            self.o("[")
+                            self.empty_link = False
+                            self.maybe_automatic_link = None
+                        if self.inline_links:
+                            self.o("](" + escape_md(a['href']) + ")")
+                        else:
+                            i = self.previousIndex(a)
+                            if i is not None:
+                                a = self.a[i]
+                            else:
+                                self.acount += 1
+                                a['count'] = self.acount
+                                a['outcount'] = self.outcount
+                                self.a.append(a)
+                            self.o("][" + str(a['count']) + "]")
+
+        if tag == "img" and start and not self.ignore_images:
+            if 'src' in attrs:
+                if not self.images_to_alt:
+                    attrs['href'] = attrs['src']
+                alt = attrs.get('alt') or ''
+
+                # If we have images_with_size, write raw html including width,
+                # height, and alt attributes
+                if self.images_with_size and \
+                        ("width" in attrs or "height" in attrs):
+                    self.o("<img src='" + attrs["src"] + "' ")
+                    if "width" in attrs:
+                        self.o("width='" + attrs["width"] + "' ")
+                    if "height" in attrs:
+                        self.o("height='" + attrs["height"] + "' ")
+                    if alt:
+                        self.o("alt='" + alt + "' ")
+                    self.o("/>")
+                    return
+
+                # If we have a link to create, output the start
+                if not self.maybe_automatic_link is None:
+                    href = self.maybe_automatic_link
+                    if self.images_to_alt and escape_md(alt) == href and \
+                            self.absolute_url_matcher.match(href):
+                        self.o("<" + escape_md(alt) + ">")
+                        self.empty_link = False
+                        return
+                    else:
+                        self.o("[")
+                        self.maybe_automatic_link = None
+                        self.empty_link = False
+
+                # If we have images_to_alt, we discard the image itself,
+                # considering only the alt text.
+                if self.images_to_alt:
+                    self.o(escape_md(alt))
+                else:
+                    self.o("![" + escape_md(alt) + "]")
+                    if self.inline_links:
+                        href = attrs.get('href') or ''
+                        self.o("(" + escape_md(href) + ")")
+                    else:
+                        i = self.previousIndex(attrs)
+                        if i is not None:
+                            attrs = self.a[i]
+                        else:
+                            self.acount += 1
+                            attrs['count'] = self.acount
+                            attrs['outcount'] = self.outcount
+                            self.a.append(attrs)
+                        self.o("[" + str(attrs['count']) + "]")
+
+        if tag == 'dl' and start:
+            self.p()
+        if tag == 'dt' and not start:
+            self.pbr()
+        if tag == 'dd' and start:
+            self.o('    ')
+        if tag == 'dd' and not start:
+            self.pbr()
+
+        if tag in ["ol", "ul"]:
+            # Google Docs create sub lists as top level lists
+            if (not self.list) and (not self.lastWasList):
+                self.p()
+            if start:
+                if self.google_doc:
+                    list_style = google_list_style(tag_style)
+                else:
+                    list_style = tag
+                numbering_start = list_numbering_start(attrs)
+                self.list.append({
+                    'name': list_style,
+                    'num': numbering_start
+                })
+            else:
+                if self.list:
+                    self.list.pop()
+            self.lastWasList = True
+        else:
+            self.lastWasList = False
+
+        if tag == 'li':
+            self.pbr()
+            if start:
+                if self.list:
+                    li = self.list[-1]
+                else:
+                    li = {'name': 'ul', 'num': 0}
+                if self.google_doc:
+                    nest_count = self.google_nest_count(tag_style)
+                else:
+                    nest_count = len(self.list)
+                # TODO: line up <ol><li>s > 9 correctly.
+                self.o("  " * nest_count)
+                if li['name'] == "ul":
+                    self.o(self.ul_item_mark + " ")
+                elif li['name'] == "ol":
+                    li['num'] += 1
+                    self.o(str(li['num']) + ". ")
+                self.start = 1
+
+        if tag in ["table", "tr", "td", "th"]:
+            if self.bypass_tables:
+                if start:
+                    self.soft_br()
+                if tag in ["td", "th"]:
+                    if start:
+                        self.o('<{0}>\n\n'.format(tag))
+                    else:
+                        self.o('\n</{0}>'.format(tag))
+                else:
+                    if start:
+                        self.o('<{0}>'.format(tag))
+                    else:
+                        self.o('</{0}>'.format(tag))
+
+            else:
+                if tag == "table" and start:
+                    self.table_start = True
+                if tag in ["td", "th"] and start:
+                    if self.split_next_td:
+                        self.o("| ")
+                    self.split_next_td = True
+
+                if tag == "tr" and start:
+                    self.td_count = 0
+                if tag == "tr" and not start:
+                    self.split_next_td = False
+                    self.soft_br()
+                if tag == "tr" and not start and self.table_start:
+                    # Underline table header
+                    self.o("|".join(["---"] * self.td_count))
+                    self.soft_br()
+                    self.table_start = False
+                if tag in ["td", "th"] and start:
+                    self.td_count += 1
+
+        if tag == "pre":
+            if start:
+                self.startpre = 1
+                self.pre = 1
+            else:
+                self.pre = 0
+            self.p()
+
+    # TODO: Add docstring for these one letter functions
+    def pbr(self):
+        if self.p_p == 0:
+            self.p_p = 1
+
+    def p(self):
+        self.p_p = 1 if self.single_line_break else 2
+
+    def soft_br(self):
+        self.pbr()
+        self.br_toggle = '  '
+
+    def o(self, data, puredata=0, force=0):
+        """
+        Deal with indentation and whitespace
+        """
+        if self.abbr_data is not None:
+            self.abbr_data += data
+
+        if not self.quiet:
+            if self.google_doc:
+                # prevent white space immediately after 'begin emphasis'
+                # marks ('**' and '_')
+                lstripped_data = data.lstrip()
+                if self.drop_white_space and not (self.pre or self.code):
+                    data = lstripped_data
+                if lstripped_data != '':
+                    self.drop_white_space = 0
+
+            if puredata and not self.pre:
+                # This is a very dangerous call ... it could mess up
+                # all handling of &nbsp; when not handled properly
+                # (see entityref)
+                data = re.sub(r'\s+', r' ', data)
+                if data and data[0] == ' ':
+                    self.space = 1
+                    data = data[1:]
+            if not data and not force:
+                return
+
+            if self.startpre:
+                #self.out(" :") #TODO: not output when already one there
+                if not data.startswith("\n"):  # <pre>stuff...
+                    data = "\n" + data
+
+            bq = (">" * self.blockquote)
+            if not (force and data and data[0] == ">") and self.blockquote:
+                bq += " "
+
+            if self.pre:
+                if not self.list:
+                    bq += "    "
+                #else: list content is already partially indented
+                for i in range(len(self.list)):
+                    bq += "    "
+                data = data.replace("\n", "\n" + bq)
+
+            if self.startpre:
+                self.startpre = 0
+                if self.list:
+                    # use existing initial indentation
+                    data = data.lstrip("\n")
+
+            if self.start:
+                self.space = 0
+                self.p_p = 0
+                self.start = 0
+
+            if force == 'end':
+                # It's the end.
+                self.p_p = 0
+                self.out("\n")
+                self.space = 0
+
+            if self.p_p:
+                self.out((self.br_toggle + '\n' + bq) * self.p_p)
+                self.space = 0
+                self.br_toggle = ''
+
+            if self.space:
+                if not self.lastWasNL:
+                    self.out(' ')
+                self.space = 0
+
+            if self.a and ((self.p_p == 2 and self.links_each_paragraph)
+                           or force == "end"):
+                if force == "end":
+                    self.out("\n")
+
+                newa = []
+                for link in self.a:
+                    if self.outcount > link['outcount']:
+                        self.out("   [" + str(link['count']) + "]: " +
+                                 urlparse.urljoin(self.baseurl, link['href']))
+                        if 'title' in link:
+                            self.out(" (" + link['title'] + ")")
+                        self.out("\n")
+                    else:
+                        newa.append(link)
+
+                # Don't need an extra line when nothing was done.
+                if self.a != newa:
+                    self.out("\n")
+
+                self.a = newa
+
+            if self.abbr_list and force == "end":
+                for abbr, definition in self.abbr_list.items():
+                    self.out("  *[" + abbr + "]: " + definition + "\n")
+
+            self.p_p = 0
+            self.out(data)
+            self.outcount += 1
+
+    def handle_data(self, data):
+        if r'\/script>' in data:
+            self.quiet -= 1
+
+        if self.style:
+            self.style_def.update(dumb_css_parser(data))
+
+        if not self.maybe_automatic_link is None:
+            href = self.maybe_automatic_link
+            if href == data and self.absolute_url_matcher.match(href) and self.use_automatic_links:
+                self.o("<" + data + ">")
+                self.empty_link = False
+                return
+            else:
+                self.o("[")
+                self.maybe_automatic_link = None
+                self.empty_link = False
+
+        if not self.code and not self.pre:
+            data = escape_md_section(data, snob=self.escape_snob)
+        self.o(data, 1)
+
+    def unknown_decl(self, data):
+        # TODO: what is this doing here?
+        pass
+
+    def charref(self, name):
+        if name[0] in ['x', 'X']:
+            c = int(name[1:], 16)
+        else:
+            c = int(name)
+
+        if not self.unicode_snob and c in unifiable_n.keys():
+            return unifiable_n[c]
+        else:
+            try:
+                return unichr(c)
+            except NameError:  # Python3
+                return chr(c)
+
+    def entityref(self, c):
+        if not self.unicode_snob and c in config.UNIFIABLE.keys():
+            return config.UNIFIABLE[c]
+        else:
+            try:
+                name2cp(c)
+            except KeyError:
+                return "&" + c + ';'
+            else:
+                if c == 'nbsp':
+                    return config.UNIFIABLE[c]
+                else:
+                    try:
+                        return unichr(name2cp(c))
+                    except NameError:  # Python3
+                        return chr(name2cp(c))
+
+    def replaceEntities(self, s):
+        s = s.group(1)
+        if s[0] == "#":
+            return self.charref(s[1:])
+        else:
+            return self.entityref(s)
+
+    def unescape(self, s):
+        return config.RE_UNESCAPE.sub(self.replaceEntities, s)
+
+    def google_nest_count(self, style):
+        """
+        Calculate the nesting count of google doc lists
+
+        :type style: dict
+
+        :rtype: int
+        """
+        nest_count = 0
+        if 'margin-left' in style:
+            nest_count = int(style['margin-left'][:-2]) \
+                         // self.google_list_indent
+
+        return nest_count
+
+    def optwrap(self, text):
+        """
+        Wrap all paragraphs in the provided text.
+
+        :type text: str
+
+        :rtype: str
+        """
+        if not self.body_width:
+            return text
+
+        assert wrap, "Requires Python 2.3."
+        result = ''
+        newlines = 0
+        for para in text.split("\n"):
+            if len(para) > 0:
+                if not skipwrap(para):
+                    result += "\n".join(wrap(para, self.body_width))
+                    if para.endswith('  '):
+                        result += "  \n"
+                        newlines = 1
+                    else:
+                        result += "\n\n"
+                        newlines = 2
+                else:
+                    # Warning for the tempted!!!
+                    # Be aware that obvious replacement of this with
+                    # line.isspace()
+                    # DOES NOT work! Explanations are welcome.
+                    if not config.RE_SPACE.match(para):
+                        result += para + "\n"
+                        newlines = 1
+            else:
+                if newlines < 2:
+                    result += "\n"
+                    newlines += 1
+        return result
+
+
+def html2text(html, baseurl='', bodywidth=config.BODY_WIDTH):
+    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
+
+    return h.handle(html)
+
+
+def unescape(s, unicode_snob=False):
+    h = HTML2Text()
+    h.unicode_snob = unicode_snob
+
+    return h.unescape(s)
+
+
+if __name__ == "__main__":
+    from html2text.cli import main
+
+    main()
diff --git a/html2text/cli.py b/html2text/cli.py
new file mode 100644
index 0000000..a2de1d2
--- /dev/null
+++ b/html2text/cli.py
@@ -0,0 +1,194 @@
+import optparse
+
+from html2text.compat import urllib
+from html2text import HTML2Text, config, __version__
+from html2text.utils import wrapwrite, wrap_read
+
+
+def main():
+    baseurl = ''
+
+    p = optparse.OptionParser(
+        '%prog [(filename|url) [encoding]]',
+        version='%prog ' + ".".join(map(str, __version__))
+    )
+    p.add_option(
+        "--ignore-emphasis",
+        dest="ignore_emphasis",
+        action="store_true",
+        default=config.IGNORE_EMPHASIS,
+        help="don't include any formatting for emphasis"
+    )
+    p.add_option(
+        "--reference-links",
+        dest="inline_links",
+        action="store_false",
+        default=config.INLINE_LINKS,
+        help="use reference style links instead of inline links"
+    )
+    p.add_option(
+        "--ignore-links",
+        dest="ignore_links",
+        action="store_true",
+        default=config.IGNORE_ANCHORS,
+        help="don't include any formatting for links")
+    p.add_option(
+        "--protect-links",
+        dest="protect_links",
+        action="store_true",
+        default=config.PROTECT_LINKS,
+        help=("protect links from line breaks surrounding them " +
+              "with angle brackets"))
+    p.add_option(
+        "--ignore-images",
+        dest="ignore_images",
+        action="store_true",
+        default=config.IGNORE_IMAGES,
+        help="don't include any formatting for images"
+    )
+    p.add_option(
+        "--images-to-alt",
+        dest="images_to_alt",
+        action="store_true",
+        default=config.IMAGES_TO_ALT,
+        help="Discard image data, only keep alt text"
+    )
+    p.add_option(
+        "--images-with-size",
+        dest="images_with_size",
+        action="store_true",
+        default=config.IMAGES_WITH_SIZE,
+        help="Write image tags with height and width attrs as raw html to "
+             "retain dimensions"
+    )
+    p.add_option(
+        "-g", "--google-doc",
+        action="store_true",
+        dest="google_doc",
+        default=False,
+        help="convert an html-exported Google Document"
+    )
+    p.add_option(
+        "-d", "--dash-unordered-list",
+        action="store_true",
+        dest="ul_style_dash",
+        default=False,
+        help="use a dash rather than a star for unordered list items"
+    )
+    p.add_option(
+        "-e", "--asterisk-emphasis",
+        action="store_true",
+        dest="em_style_asterisk",
+        default=False,
+        help="use an asterisk rather than an underscore for emphasized text"
+    )
+    p.add_option(
+        "-b", "--body-width",
+        dest="body_width",
+        action="store",
+        type="int",
+        default=config.BODY_WIDTH,
+        help="number of characters per output line, 0 for no wrap"
+    )
+    p.add_option(
+        "-i", "--google-list-indent",
+        dest="list_indent",
+        action="store",
+        type="int",
+        default=config.GOOGLE_LIST_INDENT,
+        help="number of pixels Google indents nested lists"
+    )
+    p.add_option(
+        "-s", "--hide-strikethrough",
+        action="store_true",
+        dest="hide_strikethrough",
+        default=False,
+        help="hide strike-through text. only relevant when -g is "
+             "specified as well"
+    )
+    p.add_option(
+        "--escape-all",
+        action="store_true",
+        dest="escape_snob",
+        default=False,
+        help="Escape all special characters.  Output is less readable, but "
+             "avoids corner case formatting issues."
+    )
+    p.add_option(
+        "--bypass-tables",
+        action="store_true",
+        dest="bypass_tables",
+        default=config.BYPASS_TABLES,
+        help="Format tables in HTML rather than Markdown syntax."
+    )
+    p.add_option(
+        "--single-line-break",
+        action="store_true",
+        dest="single_line_break",
+        default=config.SINGLE_LINE_BREAK,
+        help=(
+            "Use a single line break after a block element rather than two "
+            "line breaks. NOTE: Requires --body-width=0"
+        )
+    )
+    (options, args) = p.parse_args()
+
+    # process input
+    encoding = "utf-8"
+    if len(args) > 0 and args[0] != '-':
+        file_ = args[0]
+        if len(args) == 2:
+            encoding = args[1]
+        if len(args) > 2:
+            p.error('Too many arguments')
+
+        if file_.startswith('http://') or file_.startswith('https://'):
+            baseurl = file_
+            j = urllib.urlopen(baseurl)
+            data = j.read()
+            if encoding is None:
+                try:
+                    from feedparser import _getCharacterEncoding as enc
+                except ImportError:
+                    enc = lambda x, y: ('utf-8', 1)
+                encoding = enc(j.headers, data)[0]
+                if encoding == 'us-ascii':
+                    encoding = 'utf-8'
+        else:
+            data = open(file_, 'rb').read()
+            if encoding is None:
+                try:
+                    from chardet import detect
+                except ImportError:
+                    detect = lambda x: {'encoding': 'utf-8'}
+                encoding = detect(data)['encoding']
+    else:
+        data = wrap_read()
+
+    if hasattr(data, 'decode'):
+        data = data.decode(encoding)
+
+    h = HTML2Text(baseurl=baseurl)
+    # handle options
+    if options.ul_style_dash:
+        h.ul_item_mark = '-'
+    if options.em_style_asterisk:
+        h.emphasis_mark = '*'
+        h.strong_mark = '__'
+
+    h.body_width = options.body_width
+    h.list_indent = options.list_indent
+    h.ignore_emphasis = options.ignore_emphasis
+    h.ignore_links = options.ignore_links
+    h.protect_links = options.protect_links
+    h.ignore_images = options.ignore_images
+    h.images_to_alt = options.images_to_alt
+    h.images_with_size = options.images_with_size
+    h.google_doc = options.google_doc
+    h.hide_strikethrough = options.hide_strikethrough
+    h.escape_snob = options.escape_snob
+    h.bypass_tables = options.bypass_tables
+    h.single_line_break = options.single_line_break
+    h.inline_links = options.inline_links
+
+    wrapwrite(h.handle(data))
diff --git a/html2text/compat.py b/html2text/compat.py
new file mode 100644
index 0000000..b02fa17
--- /dev/null
+++ b/html2text/compat.py
@@ -0,0 +1,12 @@
+try:
+    import urllib.parse as urlparse
+    import html.entities as htmlentitydefs
+    import html.parser as HTMLParser
+except ImportError:  # Python2
+    import htmlentitydefs
+    import urlparse
+    import HTMLParser
+try:  # Python3
+    import urllib.request as urllib
+except ImportError:
+    import urllib
diff --git a/html2text/config.py b/html2text/config.py
new file mode 100644
index 0000000..07881fd
--- /dev/null
+++ b/html2text/config.py
@@ -0,0 +1,118 @@
+import re
+
+# Use Unicode characters instead of their ascii psuedo-replacements
+UNICODE_SNOB = 0
+
+# Escape all special characters.  Output is less readable, but avoids
+# corner case formatting issues.
+ESCAPE_SNOB = 0
+
+# Put the links after each paragraph instead of at the end.
+LINKS_EACH_PARAGRAPH = 0
+
+# Wrap long lines at position. 0 for no wrapping. (Requires Python 2.3.)
+BODY_WIDTH = 78
+
+# Don't show internal links (href="#local-anchor") -- corresponding link
+# targets won't be visible in the plain text file anyway.
+SKIP_INTERNAL_LINKS = True
+
+# Use inline, rather than reference, formatting for images and links
+INLINE_LINKS = True
+
+# Protect links from line breaks surrounding them with angle brackets (in
+# addition to their square brackets)
+PROTECT_LINKS = False
+
+# Number of pixels Google indents nested lists
+GOOGLE_LIST_INDENT = 36
+
+IGNORE_ANCHORS = False
+IGNORE_IMAGES = False
+IMAGES_TO_ALT = False
+IMAGES_WITH_SIZE = False
+IGNORE_EMPHASIS = False
+
+# Convert links with same href and text to <href> format if they are absolute links
+USE_AUTOMATIC_LINKS = True
+
+# For checking space-only lines on line 771
+RE_SPACE = re.compile(r'\s\+')
+
+RE_UNESCAPE = re.compile(r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));")
+RE_ORDERED_LIST_MATCHER = re.compile(r'\d+\.\s')
+RE_UNORDERED_LIST_MATCHER = re.compile(r'[-\*\+]\s')
+RE_MD_CHARS_MATCHER = re.compile(r"([\\\[\]\(\)])")
+RE_MD_CHARS_MATCHER_ALL = re.compile(r"([`\*_{}\[\]\(\)#!])")
+RE_MD_DOT_MATCHER = re.compile(r"""
+    ^             # start of line
+    (\s*\d+)      # optional whitespace and a number
+    (\.)          # dot
+    (?=\s)        # lookahead assert whitespace
+    """, re.MULTILINE | re.VERBOSE)
+RE_MD_PLUS_MATCHER = re.compile(r"""
+    ^
+    (\s*)
+    (\+)
+    (?=\s)
+    """, flags=re.MULTILINE | re.VERBOSE)
+RE_MD_DASH_MATCHER = re.compile(r"""
+    ^
+    (\s*)
+    (-)
+    (?=\s|\-)     # followed by whitespace (bullet list, or spaced out hr)
+                  # or another dash (header or hr)
+    """, flags=re.MULTILINE | re.VERBOSE)
+RE_SLASH_CHARS = r'\`*_{}[]()#+-.!'
+RE_MD_BACKSLASH_MATCHER = re.compile(r'''
+    (\\)          # match one slash
+    (?=[%s])      # followed by a char that requires escaping
+    ''' % re.escape(RE_SLASH_CHARS),
+    flags=re.VERBOSE)
+
+UNIFIABLE = {
+    'rsquo': "'",
+    'lsquo': "'",
+    'rdquo': '"',
+    'ldquo': '"',
+    'copy': '(C)',
+    'mdash': '--',
+    'nbsp': ' ',
+    'rarr': '->',
+    'larr': '<-',
+    'middot': '*',
+    'ndash': '-',
+    'oelig': 'oe',
+    'aelig': 'ae',
+    'agrave': 'a',
+    'aacute': 'a',
+    'acirc': 'a',
+    'atilde': 'a',
+    'auml': 'a',
+    'aring': 'a',
+    'egrave': 'e',
+    'eacute': 'e',
+    'ecirc': 'e',
+    'euml': 'e',
+    'igrave': 'i',
+    'iacute': 'i',
+    'icirc': 'i',
+    'iuml': 'i',
+    'ograve': 'o',
+    'oacute': 'o',
+    'ocirc': 'o',
+    'otilde': 'o',
+    'ouml': 'o',
+    'ugrave': 'u',
+    'uacute': 'u',
+    'ucirc': 'u',
+    'uuml': 'u',
+    'lrm': '',
+    'rlm': ''
+}
+
+BYPASS_TABLES = False
+
+# Use a single line break after a block element rather an two line breaks.
+# NOTE: Requires body width setting to be 0.
+SINGLE_LINE_BREAK = False
diff --git a/html2text/utils.py b/html2text/utils.py
new file mode 100644
index 0000000..1bc4102
--- /dev/null
+++ b/html2text/utils.py
@@ -0,0 +1,242 @@
+import sys
+from html2text import config
+
+from html2text.compat import htmlentitydefs
+
+
+def name2cp(k):
+    """Return sname to codepoint"""
+    if k == 'apos':
+        return ord("'")
+    return htmlentitydefs.name2codepoint[k]
+
+
+unifiable_n = {}
+
+for k in config.UNIFIABLE.keys():
+    unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
+
+
+def hn(tag):
+    if tag[0] == 'h' and len(tag) == 2:
+        try:
+            n = int(tag[1])
+            if n in range(1, 10):
+                return n
+        except ValueError:
+            return 0
+
+
+def dumb_property_dict(style):
+    """
+    :returns: A hash of css attributes
+    """
+    out = dict([(x.strip(), y.strip()) for x, y in
+                [z.split(':', 1) for z in
+                 style.split(';') if ':' in z
+                 ]
+                ]
+               )
+
+    return out
+
+
+def dumb_css_parser(data):
+    """
+    :type data: str
+
+    :returns: A hash of css selectors, each of which contains a hash of
+    css attributes.
+    :rtype: dict
+    """
+    # remove @import sentences
+    data += ';'
+    importIndex = data.find('@import')
+    while importIndex != -1:
+        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
+        importIndex = data.find('@import')
+
+    # parse the css. reverted from dictionary comprehension in order to
+    # support older pythons
+    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
+    try:
+        elements = dict([(a.strip(), dumb_property_dict(b))
+                         for a, b in elements])
+    except ValueError:
+        elements = {}  # not that important
+
+    return elements
+
+
+def element_style(attrs, style_def, parent_style):
+    """
+    :type attrs: dict
+    :type style_def: dict
+    :type style_def: dict
+
+    :returns: A hash of the 'final' style attributes of the element
+    :rtype: dict
+    """
+    style = parent_style.copy()
+    if 'class' in attrs:
+        for css_class in attrs['class'].split():
+            css_style = style_def['.' + css_class]
+            style.update(css_style)
+    if 'style' in attrs:
+        immediate_style = dumb_property_dict(attrs['style'])
+        style.update(immediate_style)
+
+    return style
+
+
+def google_list_style(style):
+    """
+    Finds out whether this is an ordered or unordered list
+
+    :type style: dict
+
+    :rtype: str
+    """
+    if 'list-style-type' in style:
+        list_style = style['list-style-type']
+        if list_style in ['disc', 'circle', 'square', 'none']:
+            return 'ul'
+
+    return 'ol'
+
+
+def google_has_height(style):
+    """
+    Check if the style of the element has the 'height' attribute
+    explicitly defined
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    if 'height' in style:
+        return True
+
+    return False
+
+
+def google_text_emphasis(style):
+    """
+    :type style: dict
+
+    :returns: A list of all emphasis modifiers of the element
+    :rtype: list
+    """
+    emphasis = []
+    if 'text-decoration' in style:
+        emphasis.append(style['text-decoration'])
+    if 'font-style' in style:
+        emphasis.append(style['font-style'])
+    if 'font-weight' in style:
+        emphasis.append(style['font-weight'])
+
+    return emphasis
+
+
+def google_fixed_width_font(style):
+    """
+    Check if the css of the current element defines a fixed width font
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    font_family = ''
+    if 'font-family' in style:
+        font_family = style['font-family']
+    if 'Courier New' == font_family or 'Consolas' == font_family:
+        return True
+
+    return False
+
+
+def list_numbering_start(attrs):
+    """
+    Extract numbering from list element attributes
+
+    :type attrs: dict
+
+    :rtype: int or None
+    """
+    if 'start' in attrs:
+        try:
+            return int(attrs['start']) - 1
+        except ValueError:
+            pass
+
+    return 0
+
+
+def skipwrap(para):
+    # If the text begins with four spaces or one tab, it's a code block;
+    # don't wrap
+    if para[0:4] == '    ' or para[0] == '\t':
+        return True
+
+    # If the text begins with only two "--", possibly preceded by
+    # whitespace, that's an emdash; so wrap.
+    stripped = para.lstrip()
+    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
+        return False
+
+    # I'm not sure what this is for; I thought it was to detect lists,
+    # but there's a <br>-inside-<span> case in one of the tests that
+    # also depends upon it.
+    if stripped[0:1] == '-' or stripped[0:1] == '*':
+        return True
+
+    # If the text begins with a single -, *, or +, followed by a space,
+    # or an integer, followed by a ., followed by a space (in either
+    # case optionally proceeded by whitespace), it's a list; don't wrap.
+    if config.RE_ORDERED_LIST_MATCHER.match(stripped) or \
+            config.RE_UNORDERED_LIST_MATCHER.match(stripped):
+        return True
+
+    return False
+
+
+def wrapwrite(text):
+    text = text.encode('utf-8')
+    try:  # Python3
+        sys.stdout.buffer.write(text)
+    except AttributeError:
+        sys.stdout.write(text)
+
+
+def wrap_read():
+    """
+    :rtype: str
+    """
+    try:
+        return sys.stdin.read()
+    except AttributeError:
+        return sys.stdin.buffer.read()
+
+
+def escape_md(text):
+    """
+    Escapes markdown-sensitive characters within other markdown
+    constructs.
+    """
+    return config.RE_MD_CHARS_MATCHER.sub(r"\\\1", text)
+
+
+def escape_md_section(text, snob=False):
+    """
+    Escapes markdown-sensitive characters across whole document sections.
+    """
+    text = config.RE_MD_BACKSLASH_MATCHER.sub(r"\\\1", text)
+
+    if snob:
+        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r"\\\1", text)
+
+    text = config.RE_MD_DOT_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_PLUS_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_DASH_MATCHER.sub(r"\1\\\2", text)
+
+    return text
diff --git a/install_deps.py b/install_deps.py
deleted file mode 100644
index 51ec53a..0000000
--- a/install_deps.py
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/usr/bin/python
-import sys
-import subprocess
-
-if sys.version_info[:2] < (2, 7):
-    subprocess.call('pip install unittest2 --use-mirrors', shell=True)
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..b88034e
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,2 @@
+[metadata]
+description-file = README.md
diff --git a/setup.py b/setup.py
index 0b2cf08..4dbbdf4 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 # coding: utf-8
 import sys
-from setuptools import setup, find_packages, Command
+from setuptools import setup, Command, find_packages
 
 requires_list = []
 try:
@@ -28,12 +28,13 @@
     def run(self):
         tests = unittest.TestLoader().discover('.')
         runner = unittest.TextTestRunner()
-        runner.run(tests)
+        results = runner.run(tests)
+        sys.exit(not results.wasSuccessful())
 
 
 setup(
     name="html2text",
-    version="2014.4.5",
+    version=".".join(map(str, __import__('html2text').__version__)),
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
@@ -61,11 +62,11 @@
     ],
     entry_points="""
         [console_scripts]
-        html2text=html2text:main
+        html2text=html2text.cli:main
     """,
     license='GNU GPL 3',
     requires=requires_list,
-    py_modules=['html2text'],
+    packages=find_packages(exclude=['test']),
     include_package_data=True,
     zip_safe=False,
 )
diff --git a/test/GoogleDocMassDownload.html b/test/GoogleDocMassDownload.html
index f31e90e..784cf14 100644
--- a/test/GoogleDocMassDownload.html
+++ b/test/GoogleDocMassDownload.html
@@ -6,7 +6,7 @@
      @import url(https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw);</STYLE>
   </HEAD>
   <BODY style="width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt">
-    <H1 style="padding-left:0;padding-right:0;padding-top:24pt;color:#000000;direction:ltr;font-size:24pt;margin:0;font-family:Arial;font-weight:bold;padding-bottom:6pt">
+    <H1 style="padding-left:0;padding-right:0;padding-top:24pt;color:#000000;direction:ltr;font-size:24pt;margin:0;font-family:Arial;font-weight:bold;padding-bottom:6pt;text-decoration:underline">
       <A name="h.xdvi2xfx4hkq">
       </A>
       <SPAN>
diff --git a/test/abbr_tag.html b/test/abbr_tag.html
new file mode 100644
index 0000000..e0e4a33
--- /dev/null
+++ b/test/abbr_tag.html
@@ -0,0 +1 @@
+<abbr title="Three Letter Acronym">TLA</abbr>
diff --git a/test/abbr_tag.md b/test/abbr_tag.md
new file mode 100644
index 0000000..0b030ff
--- /dev/null
+++ b/test/abbr_tag.md
@@ -0,0 +1,4 @@
+TLA
+
+  *[TLA]: Three Letter Acronym
+
diff --git a/test/anchor-undefined-href.html b/test/anchor-undefined-href.html
new file mode 100644
index 0000000..2019751
--- /dev/null
+++ b/test/anchor-undefined-href.html
@@ -0,0 +1,5 @@
+<html>
+   <body>
+      <a href class="nolink">anchor</a>
+   </body>
+</html>
diff --git a/test/anchors.html b/test/anchors.html
new file mode 100644
index 0000000..2a00d63
--- /dev/null
+++ b/test/anchors.html
@@ -0,0 +1,7 @@
+<h1>Processing hyperlinks</h1>
+
+<p>Additional hyperlink tests!</p>
+
+<a href="http://some.link"><b>Bold Link</b></a>
+<a href="http://some.link/filename.py"><code>filename.py</code></a>
+<a href="http://some.link/magicsources.py">The source code is called <code>magic.py</code></a>
diff --git a/test/anchors.md b/test/anchors.md
new file mode 100644
index 0000000..bd9fda5
--- /dev/null
+++ b/test/anchors.md
@@ -0,0 +1,8 @@
+# Processing hyperlinks
+
+Additional hyperlink tests!
+
+[**Bold Link**](http://some.link)
+[`filename.py`](http://some.link/filename.py) [The source code is called
+`magic.py`](http://some.link/magicsources.py)
+
diff --git a/test/apos_element.html b/test/apos_element.html
new file mode 100644
index 0000000..bce374e
--- /dev/null
+++ b/test/apos_element.html
@@ -0,0 +1,5 @@
+<html>
+    <body>
+        &apos;
+    </body>
+</html>
diff --git a/test/apos_element.md b/test/apos_element.md
new file mode 100644
index 0000000..12d94f4
--- /dev/null
+++ b/test/apos_element.md
@@ -0,0 +1,2 @@
+'
+
diff --git a/test/blockquote_example.html b/test/blockquote_example.html
new file mode 100644
index 0000000..1749fb0
--- /dev/null
+++ b/test/blockquote_example.html
@@ -0,0 +1,3 @@
+<blockquote>
+The time has come, the Walrus said, to speak of many things.
+</blockquote>
diff --git a/test/blockquote_example.md b/test/blockquote_example.md
new file mode 100644
index 0000000..6985965
--- /dev/null
+++ b/test/blockquote_example.md
@@ -0,0 +1,2 @@
+> The time has come, the Walrus said, to speak of many things.
+
diff --git a/test/bold_inside_link.html b/test/bold_inside_link.html
new file mode 100644
index 0000000..278603e
--- /dev/null
+++ b/test/bold_inside_link.html
@@ -0,0 +1,2 @@
+<a href="link.htm"><b>Text</b></a>
+<a href='/nothing/'><b>sample</b></a>
diff --git a/test/bold_inside_link.md b/test/bold_inside_link.md
new file mode 100644
index 0000000..d2738cc
--- /dev/null
+++ b/test/bold_inside_link.md
@@ -0,0 +1,2 @@
+[**Text**](link.htm) [**sample**](/nothing/)
+
diff --git a/test/dl_tag_example.html b/test/dl_tag_example.html
new file mode 100644
index 0000000..08e629a
--- /dev/null
+++ b/test/dl_tag_example.html
@@ -0,0 +1,22 @@
+<dl>
+<dt>Definition List</dt>
+<dd>A list of terms and their definitions/descriptions.</dd>
+<dt>Ordered List</dt>
+<dd>A numbered list.</dd>
+<dt>Unordered List</dt>
+<dd>An unnumbered list.</dd>
+</dl>
+
+<h4>Example 2</h4>
+<dl>
+<dt>Vocals</dt>
+<dd>Bruce Dickinson</dd>
+<dt>Guitar</dt>
+<dd>Adrian Smith</dd>
+<dd>Dave Murray</dd>
+<dd>Janick Gers</dd>
+<dt>Bass</dt>
+<dd>Steve Harris</dd>
+<dt>Drums</dt>
+<dd>Nicko McBrain</dd>
+</dl>
diff --git a/test/dl_tag_example.md b/test/dl_tag_example.md
new file mode 100644
index 0000000..b78dcab
--- /dev/null
+++ b/test/dl_tag_example.md
@@ -0,0 +1,27 @@
+Definition List
+
+    A list of terms and their definitions/descriptions.
+Ordered List
+
+    A numbered list.
+Unordered List
+
+    An unnumbered list.
+
+#### Example 2
+
+Vocals
+
+    Bruce Dickinson
+Guitar
+
+    Adrian Smith
+    Dave Murray
+    Janick Gers
+Bass
+
+    Steve Harris
+Drums
+
+    Nicko McBrain
+
diff --git a/test/doc_with_table.html b/test/doc_with_table.html
new file mode 100644
index 0000000..96b9193
--- /dev/null
+++ b/test/doc_with_table.html
@@ -0,0 +1,36 @@
+<!DOCTYPE html>
+<html>
+<head lang="en">
+    <meta charset="UTF-8">
+    <title></title>
+</head>
+<body>
+
+<h1>This is a test document</h1>
+
+With some text, <code>code</code>, <b>bolds</b> and <i>italics</i>.
+
+<h2>This is second header</h2>
+
+<p style="display: none">Displaynone text</p>
+
+<table>
+    <tr>
+        <th>Header 1</th>
+        <th>Header 2</th>
+        <th>Header 3</th>
+    </tr>
+    <tr>
+        <td>Content 1</td>
+        <td>Content 2</td>
+        <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td>
+    </tr>
+    <tr>
+        <td>Content 1</td>
+        <td>Content 2</td>
+        <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td>
+    </tr>
+</table>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/test/doc_with_table.md b/test/doc_with_table.md
new file mode 100644
index 0000000..5cb1986
--- /dev/null
+++ b/test/doc_with_table.md
@@ -0,0 +1,13 @@
+# This is a test document
+
+With some text, `code`, **bolds** and _italics_.
+
+## This is second header
+
+Displaynone text
+
+Header 1 | Header 2 | Header 3  
+---|---|---  
+Content 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  
+Content 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!
+
diff --git a/test/doc_with_table_bypass.html b/test/doc_with_table_bypass.html
new file mode 100644
index 0000000..fa64b37
--- /dev/null
+++ b/test/doc_with_table_bypass.html
@@ -0,0 +1,32 @@
+<!DOCTYPE html>
+<html>
+<head lang="en">
+    <meta charset="UTF-8">
+    <title></title>
+</head>
+<body>
+
+<h1>This is a test document</h1>
+
+With some text, <code>code</code>, <b>bolds</b> and <i>italics</i>.
+
+<h2>This is second header</h2>
+
+<p style="display: none">Displaynone text</p>
+
+<table>
+    <tr>
+        <th>Header 1</th>
+        <th>Header 2</th>
+        <th>Header 3</th>
+    </tr>
+    <tr>
+        <td>Content 1</td>
+        <td>Content 2</td>
+        <td><img src="http://lorempixel.com/200/200" alt="200"/> Image!</td>
+    </tr>
+
+</table>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/test/doc_with_table_bypass.md b/test/doc_with_table_bypass.md
new file mode 100644
index 0000000..d3255a7
--- /dev/null
+++ b/test/doc_with_table_bypass.md
@@ -0,0 +1,42 @@
+# This is a test document
+
+With some text, `code`, **bolds** and _italics_.
+
+## This is second header
+
+Displaynone text  
+  
+<table>  
+<tr>  
+<th>
+
+Header 1
+
+</th>  
+<th>
+
+Header 2
+
+</th>  
+<th>
+
+Header 3
+
+</th> </tr>  
+<tr>  
+<td>
+
+Content 1
+
+</td>  
+<td>
+
+Content 2
+
+</td>  
+<td>
+
+![200](http://lorempixel.com/200/200) Image!
+
+</td> </tr> </table>
+
diff --git a/test/empty-link.html b/test/empty-link.html
new file mode 100644
index 0000000..7f1c3eb
--- /dev/null
+++ b/test/empty-link.html
@@ -0,0 +1,6 @@
+<h1>Processing empty hyperlinks</h1>
+
+<p>This test checks wheter empty hyperlinks still appear in the markdown result.</p>
+
+<a href="http://some.link"></a>
+<a href="http://some.link"><p></p></a>
\ No newline at end of file
diff --git a/test/empty-link.md b/test/empty-link.md
new file mode 100644
index 0000000..fbaf01b
--- /dev/null
+++ b/test/empty-link.md
@@ -0,0 +1,8 @@
+# Processing empty hyperlinks
+
+This test checks wheter empty hyperlinks still appear in the markdown result.
+
+[](http://some.link)
+
+[](http://some.link)
+
diff --git a/test/header_tags.html b/test/header_tags.html
new file mode 100644
index 0000000..aad3e66
--- /dev/null
+++ b/test/header_tags.html
@@ -0,0 +1,17 @@
+<html>
+    <body>
+    <h1>H1</h1>
+    <h2>H1</h2>
+    <h3>H1</h3>
+    <h4>H1</h4>
+    <h5>H1</h5>
+    <h6>H1</h6>
+    <h7>H1</h7>
+    <h8>H1</h8>
+    <h9>H1</h9>
+    <h10>H1</h10>
+    <h11>H1</h11>
+    <h12>H1</h12>
+    <h>NO number</h>
+    </body>
+</html>
diff --git a/test/header_tags.md b/test/header_tags.md
new file mode 100644
index 0000000..80a2302
--- /dev/null
+++ b/test/header_tags.md
@@ -0,0 +1,20 @@
+# H1
+
+## H1
+
+### H1
+
+#### H1
+
+##### H1
+
+###### H1
+
+####### H1
+
+######## H1
+
+######### H1
+
+H1 H1 H1 NO number
+
diff --git a/test/horizontal_rule.html b/test/horizontal_rule.html
new file mode 100644
index 0000000..f159f52
--- /dev/null
+++ b/test/horizontal_rule.html
@@ -0,0 +1,5 @@
+<html>
+    <body>
+    <hr>
+    </body>
+</html>
diff --git a/test/horizontal_rule.md b/test/horizontal_rule.md
new file mode 100644
index 0000000..8ccef4e
--- /dev/null
+++ b/test/horizontal_rule.md
@@ -0,0 +1,2 @@
+* * *
+
diff --git a/test/html-escaping.html b/test/html-escaping.html
new file mode 100644
index 0000000..b6f1da7
--- /dev/null
+++ b/test/html-escaping.html
@@ -0,0 +1,3 @@
+<p>Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output</p>
+<pre>...unless that escaped HTML is in a &lt;pre&gt; tag</pre>
+<code>...or a &lt;code&gt; tag</code>
\ No newline at end of file
diff --git a/test/html-escaping.md b/test/html-escaping.md
new file mode 100644
index 0000000..19e91ee
--- /dev/null
+++ b/test/html-escaping.md
@@ -0,0 +1,8 @@
+Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output
+
+    
+    
+    ...unless that escaped HTML is in a <pre> tag
+
+`...or a <code> tag`
+
diff --git a/test/images_to_alt.html b/test/images_to_alt.html
new file mode 100644
index 0000000..9d13545
--- /dev/null
+++ b/test/images_to_alt.html
@@ -0,0 +1,7 @@
+<a href="http://example.com">
+<img src="http://example.com/img.png" alt="ALT TEXT" />
+</a>
+<br>
+<a href="http://example.com"><img src="http://example.com/img.png" alt="ALT TEXT" /></a>
+<br>
+<a href="http://example.com"><img src="http://example.com/img.png" alt="http://example.com" /></a>
\ No newline at end of file
diff --git a/test/images_to_alt.md b/test/images_to_alt.md
new file mode 100644
index 0000000..c07f1f1
--- /dev/null
+++ b/test/images_to_alt.md
@@ -0,0 +1,4 @@
+[ ALT TEXT ](http://example.com)  
+[ALT TEXT](http://example.com)  
+<http://example.com>
+
diff --git a/test/images_with_size.html b/test/images_with_size.html
new file mode 100644
index 0000000..bcf8e44
--- /dev/null
+++ b/test/images_with_size.html
@@ -0,0 +1,7 @@
+<img src='image_without_dimensions.jpg' alt='An image without dimensions' style='ignored-style' />
+
+<img src='image_with_width.jpg' alt='An image with a width attr' width='300' data-ignored='ignored data' />
+
+<img src='image_with_width.jpg' alt='An image with a height attr' height='300' data-ignored='ignored data' />
+
+<img src='image_with_width_and_height.jpg' alt='An image with width and height' width='300' height='300' id='ignored-id' />
\ No newline at end of file
diff --git a/test/images_with_size.md b/test/images_with_size.md
new file mode 100644
index 0000000..cf71073
--- /dev/null
+++ b/test/images_with_size.md
@@ -0,0 +1,6 @@
+![An image without dimensions](image_without_dimensions.jpg) <img
+src='image_with_width.jpg' width='300' alt='An image with a width attr' />
+<img src='image_with_width.jpg' height='300' alt='An image with a height attr'
+/> <img src='image_with_width_and_height.jpg' width='300' height='300' alt='An
+image with width and height' />
+
diff --git a/test/img-tag-with-link.html b/test/img-tag-with-link.html
new file mode 100644
index 0000000..92d3a96
--- /dev/null
+++ b/test/img-tag-with-link.html
@@ -0,0 +1,9 @@
+<h1>Processing images with links</h1>
+
+<p>This test checks images with associated links.</p>
+
+<a href="http://some.link"><img src="http://placehold.it/350x150#(banana)" width="350" height="150" alt="(banana)"></a>
+<a href="http://some.link"><img src="http://placehold.it/350x150#[banana]" width="350" height="150" alt="[banana]"></a>
+<a href="http://some.link"><img src="http://placehold.it/350x150#{banana}" width="350" height="150" alt="{banana}"></a>
+<a href="http://some.link"><img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt="([{}])"></a>
+<a href="http://some.link"><img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt></a>
\ No newline at end of file
diff --git a/test/img-tag-with-link.md b/test/img-tag-with-link.md
new file mode 100644
index 0000000..3025423
--- /dev/null
+++ b/test/img-tag-with-link.md
@@ -0,0 +1,10 @@
+# Processing images with links
+
+This test checks images with associated links.
+
+[![\(banana\)](http://placehold.it/350x150#\(banana\))](http://some.link)
+[![\[banana\]](http://placehold.it/350x150#\[banana\])](http://some.link)
+[![{banana}](http://placehold.it/350x150#{banana})](http://some.link)
+[![\(\[{}\]\)](http://placehold.it/350x150#\(\[{}\]\))](http://some.link)
+[![](http://placehold.it/350x150#\(\[{}\]\))](http://some.link)
+
diff --git a/test/no_inline_links_example.html b/test/no_inline_links_example.html
new file mode 100644
index 0000000..982f54c
--- /dev/null
+++ b/test/no_inline_links_example.html
@@ -0,0 +1 @@
+<a href='http://google.com'>Googler</a>
diff --git a/test/no_inline_links_example.md b/test/no_inline_links_example.md
new file mode 100644
index 0000000..2593475
--- /dev/null
+++ b/test/no_inline_links_example.md
@@ -0,0 +1,4 @@
+[Googler][1]
+
+   [1]: http://google.com
+
diff --git a/test/no_inline_links_images_to_alt.html b/test/no_inline_links_images_to_alt.html
new file mode 100644
index 0000000..83c395d
--- /dev/null
+++ b/test/no_inline_links_images_to_alt.html
@@ -0,0 +1,7 @@
+<a href="http://example.com">
+<img src="http://example.com/img.png" alt="ALT TEXT" />
+</a>
+<br>
+<a href="http://example.com"><img src="http://example.com/img.png" alt="ALT TEXT" /></a>
+<br>
+<a href="http://example.com"><img src="http://example.com/img.png" alt="http://example.com" /></a>
diff --git a/test/no_inline_links_images_to_alt.md b/test/no_inline_links_images_to_alt.md
new file mode 100644
index 0000000..83266df
--- /dev/null
+++ b/test/no_inline_links_images_to_alt.md
@@ -0,0 +1,8 @@
+[ ![ALT TEXT][1] ][2]  
+[![ALT TEXT][1]][2]  
+[![http://example.com][1]][2]
+
+   [1]: http://example.com/img.png
+
+   [2]: http://example.com
+
diff --git a/test/no_inline_links_nested.html b/test/no_inline_links_nested.html
new file mode 100644
index 0000000..2dc9b07
--- /dev/null
+++ b/test/no_inline_links_nested.html
@@ -0,0 +1 @@
+<a href='http://google.com'><a href='/test2/'>this</a>that</a>
diff --git a/test/no_inline_links_nested.md b/test/no_inline_links_nested.md
new file mode 100644
index 0000000..40d5abb
--- /dev/null
+++ b/test/no_inline_links_nested.md
@@ -0,0 +1,6 @@
+[[this][1]that][2]
+
+   [1]: /test2/
+
+   [2]: http://google.com
+
diff --git a/test/protect_links.html b/test/protect_links.html
new file mode 100644
index 0000000..b248d1e
--- /dev/null
+++ b/test/protect_links.html
@@ -0,0 +1 @@
+<a href="http://im-a-very-very-very-very-very-very-very-very-very-very-long/link.html">foo</a>
\ No newline at end of file
diff --git a/test/protect_links.md b/test/protect_links.md
new file mode 100644
index 0000000..23e153e
--- /dev/null
+++ b/test/protect_links.md
@@ -0,0 +1,3 @@
+[foo](<http://im-a-very-very-very-very-very-very-very-very-very-very-
+long/link.html>)
+
diff --git a/test/single_line_break.html b/test/single_line_break.html
new file mode 100644
index 0000000..ec3598e
--- /dev/null
+++ b/test/single_line_break.html
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
+<en-note>
+<div>Hello world.</div>
+<div>And hello html2text.</div>
+</en-note>
diff --git a/test/single_line_break.md b/test/single_line_break.md
new file mode 100644
index 0000000..31fde4f
--- /dev/null
+++ b/test/single_line_break.md
@@ -0,0 +1,2 @@
+Hello world.
+And hello html2text.
diff --git a/test/test_html2text.py b/test/test_html2text.py
index afae910..60cd0a1 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -4,16 +4,19 @@
 import re
 import subprocess
 import sys
+
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
 else:
     import unittest
 import logging
+
 logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
                     level=logging.DEBUG)
 
 import html2text
 
+
 def test_module(fn, google_doc=False, **kwargs):
     h = html2text.HTML2Text()
     h.fn = fn
@@ -33,10 +36,10 @@
     inf.close()
     return result, actual
 
+
 def test_command(fn, *args):
     args = list(args)
-    cmd_name = os.path.join(os.path.dirname(fn), '..', 'html2text.py')
-    cmd = [sys.executable, cmd_name]
+    cmd = [sys.executable, '-m', 'html2text.__init__']
 
     if '--googledoc' in args:
         args.remove('--googledoc')
@@ -61,12 +64,15 @@
 
     return result, actual
 
+
 def get_dump_name(fn, suffix):
     return '%s-%s_output.md' % (os.path.splitext(fn)[0], suffix)
 
+
 def get_baseline_name(fn):
     return os.path.splitext(fn)[0] + '.md'
 
+
 def get_baseline(fn):
     name = get_baseline_name(fn)
     f = codecs.open(name, mode='r', encoding='utf8')
@@ -74,9 +80,11 @@
     f.close()
     return out
 
+
 class TestHTML2Text(unittest.TestCase):
     pass
 
+
 def generate_test(fn):
     def test_mod(self):
         self.maxDiff = None
@@ -85,7 +93,7 @@
 
     def test_cmd(self):
         # Because there is no command-line option to control unicode_snob
-        if not 'unicode_snob' in module_args:
+        if 'unicode_snob' not in module_args:
             self.maxDiff = None
             result, actual = test_command(fn, *cmdline_args)
             self.assertEqual(result, actual)
@@ -110,11 +118,37 @@
         module_args['escape_snob'] = True
         cmdline_args.append('--escape-all')
 
+    if base_fn.find('table_bypass') >= 0:
+        module_args['bypass_tables'] = True
+        cmdline_args.append('--bypass-tables')
+
     if base_fn.startswith('bodywidth'):
-        #module_args['unicode_snob'] = True
+        # module_args['unicode_snob'] = True
         module_args['body_width'] = 0
         cmdline_args.append('--body-width=0')
 
+    if base_fn.startswith('protect_links'):
+        module_args['protect_links'] = True
+        cmdline_args.append('--protect-links')
+
+    if base_fn.startswith('images_to_alt'):
+        module_args['images_to_alt'] = True
+        cmdline_args.append('--images-to-alt')
+
+    if base_fn.startswith('images_with_size'):
+        module_args['images_with_size'] = True
+        cmdline_args.append('--images-with-size')
+
+    if base_fn.startswith('single_line_break'):
+        module_args['body_width'] = 0
+        cmdline_args.append('--body-width=0')
+        module_args['single_line_break'] = True
+        cmdline_args.append('--single-line-break')
+
+    if base_fn.startswith('no_inline_links'):
+        module_args['inline_links'] = False
+        cmdline_args.append('--reference-links')
+
     return test_mod, test_cmd
 
 # Originally from http://stackoverflow.com/questions/32899/\
diff --git a/test/test_memleak.py b/test/test_memleak.py
index fd2ae18..27999fb 100644
--- a/test/test_memleak.py
+++ b/test/test_memleak.py
@@ -29,4 +29,4 @@
         h2t = html2text.HTML2Text()
         h2t.handle(self.instr)
         # And even less when the input is empty
-        self.assertEqual(h2t.handle(''), u'\n\n')
+        self.assertEqual(h2t.handle(''), '\n\n')
diff --git a/test/url-escaping.html b/test/url-escaping.html
index 5c5693c..c4f68b9 100644
--- a/test/url-escaping.html
+++ b/test/url-escaping.html
@@ -16,3 +16,4 @@
 <img src="http://placehold.it/350x150#[banana]" width="350" height="150" alt="[banana]"><br>
 <img src="http://placehold.it/350x150#{banana}" width="350" height="150" alt="{banana}"><br>
 <img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt="([{}])">
+<img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt>
diff --git a/test/url-escaping.md b/test/url-escaping.md
index ffb2bc8..f409d40 100644
--- a/test/url-escaping.md
+++ b/test/url-escaping.md
@@ -16,4 +16,5 @@
 ![\[banana\]](http://placehold.it/350x150#\[banana\])  
 ![{banana}](http://placehold.it/350x150#{banana})  
 ![\(\[{}\]\)](http://placehold.it/350x150#\(\[{}\]\))
+![](http://placehold.it/350x150#\(\[{}\]\))
 

=====================================================================
start time: Mon Apr 13 00:00:00 CST 2015
end time: Tue Apr 14 00:00:00 CST 2015
description: 
=========
----
* Feature #59: Write image tags with height and width attrs as raw html to retain dimensions

commit message: 
commit 27a62b01b705e09440eefc6006b5582ed5ae30df 1428940261 -----sp :: Bump version numbers for new release
commit 234071841bbb6dd0fca0b53fb4ed56229df0caa8 1428940346 -----sp :: Add Scott Blackburn to Authors list
commit bf1e587004e9740769fc9b81d2f4307e7f52d197 1428940366 -----sp :: Add Peter Wu to Authors list
commit 393a9f1550afce33a8a0bcbb32ba20a19e39be99 1428940380 -----sp :: Update changelog ;)

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 662e9ec..7e05a00 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -12,6 +12,9 @@
 * Jocelyn Delalande <jdelalande@oasiswork.fr>
 * Matt Dorn <matt.dorn@gmail.com>
 * Miguel Tavares <mgontav@gmail.com>
+* Scott Blackburn <scott@skipflag.com>
+* Peter Wu <peter@lekensteyn.nl>
+
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 96b58c3..d25db5a 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,12 @@
+2015.4.13
+=========
+----
+
+
+* Feature #56: Treat '-' file parameter as stdin.
+* Feature #57: Retain escaping of html except within code or pre tags.
+
+
 2015.2.18
 ==========
 ----

=====================================================================
start time: Wed Feb 18 00:00:00 CST 2015
end time: Mon Apr 13 00:00:00 CST 2015
description: 
=========
----
* Feature #56: Treat '-' file parameter as stdin.
* Feature #57: Retain escaping of html except within code or pre tags.

commit message: 
commit 4185966f42d3090cf8a37bd7cf699a1320412f2d 1424198080 -----sp :: Anchor tags that contain <img> tags or empty text are no longer discarded. Added tests for new cases, modified text for images-to-alt to allow for inline <img> tags.
commit 11c508d211834a0c4e6a1289a331784928ade468 1424198484 -----sp :: Added missing test case to images-to-alt
commit 84ce93b938f6d2af63e1ba34bd542ede407c62e9 1424256774 -----sp :: Update authors, changelog and version number. Added latest contributor to authors list, reflected changes on changelog and bumped version number.
commit 40187f55d4dd612c7fb8df6daf581769a0a3c56c 1424265259 -----sp :: Merge pull request #55 from mgontav/fix-img-links
commit 3f15e224e10a936f6cbdb9e8a96a093ef98557f1 1424265597 -----sp :: Fix version number
commit cf89ea8b5dd0c8f8b2c3b91eee78fbc338337743 1424265629 -----sp :: Update ChangeLog.rst
commit 2c79945cda9567991668577b7ded46a51574256a+ 1427411669 -----sp :: Treat '-' file parameter as stdin
commit 555f4a9a2969eb880ad37b62451a3fba6c17c35d+ 1428257592 -----sp :: Merge pull request #56 from Lekensteyn/fix-stdin
commit 446a8eb0733835fa2b2e61b8e311a02f9325cf00+ 1428697539 -----sp :: Retain escaping of html except within code or pre tags.
commit 759c563dde068eafec066ef372c2f7a1072c3a43+ 1428769813 -----sp :: Merge pull request #57 from smblackburn/master

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 5b9e0dd..662e9ec 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -11,6 +11,7 @@
 * Ivan Gromov <summer.is.gone@gmail.com>
 * Jocelyn Delalande <jdelalande@oasiswork.fr>
 * Matt Dorn <matt.dorn@gmail.com>
+* Miguel Tavares <mgontav@gmail.com>
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 0715576..96b58c3 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,10 @@
+2015.2.18
+==========
+----
+
+* Fix #38: Anchor tags with empty text or with `<img>` tags inside are no longer stripped.
+
+
 2014.12.29
 ==========
 ----
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 2ee872f..48d4454 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -3,6 +3,7 @@
 """html2text: Turn HTML into equivalent Markdown-structured text."""
 from __future__ import division
 import re
+import cgi
 
 try:
     from textwrap import wrap
@@ -160,10 +161,16 @@
         return outtext
 
     def handle_charref(self, c):
-        self.o(self.charref(c), 1)
+        charref = self.charref(c)
+        if not self.code and not self.pre:
+            charref = cgi.escape(charref)
+        self.o(charref, 1)
 
     def handle_entityref(self, c):
-        self.o(self.entityref(c), 1)
+        entityref = self.entityref(c)
+        if not self.code and not self.pre and entityref != '&nbsp_place_holder;':
+            entityref = cgi.escape(entityref)
+        self.o(entityref, 1)
 
     def handle_starttag(self, tag, attrs):
         self.handle_tag(tag, attrs, 1)
@@ -351,6 +358,7 @@
 
         if tag in ["code", "tt"] and not self.pre:
             self.o('`')  # TODO: `` `this` ``
+            self.code = not self.code
         if tag == "abbr":
             if start:
                 self.abbr_title = None
@@ -416,7 +424,7 @@
                     else:
                         self.o("[")
                         self.maybe_automatic_link = None
-                        self.empty_link = False                   
+                        self.empty_link = False
 
                 # If we have images_to_alt, we discard the image itself,
                 # considering only the alt text.
diff --git a/html2text/cli.py b/html2text/cli.py
index fb951b1..47d3d94 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -118,7 +118,7 @@
 
     # process input
     encoding = "utf-8"
-    if len(args) > 0:
+    if len(args) > 0 and args[0] != '-':
         file_ = args[0]
         if len(args) == 2:
             encoding = args[1]
diff --git a/setup.py b/setup.py
index 20863f5..4791944 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.12.29",
+    version="2015.2.18",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
diff --git a/test/html-escaping.html b/test/html-escaping.html
new file mode 100644
index 0000000..b6f1da7
--- /dev/null
+++ b/test/html-escaping.html
@@ -0,0 +1,3 @@
+<p>Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output</p>
+<pre>...unless that escaped HTML is in a &lt;pre&gt; tag</pre>
+<code>...or a &lt;code&gt; tag</code>
\ No newline at end of file
diff --git a/test/html-escaping.md b/test/html-escaping.md
new file mode 100644
index 0000000..19e91ee
--- /dev/null
+++ b/test/html-escaping.md
@@ -0,0 +1,8 @@
+Escaped HTML like &lt;div&gt; or &amp; should remain escaped on output
+
+    
+    
+    ...unless that escaped HTML is in a <pre> tag
+
+`...or a <code> tag`
+
diff --git a/test/images_to_alt.html b/test/images_to_alt.html
index 8486dd5..9d13545 100644
--- a/test/images_to_alt.html
+++ b/test/images_to_alt.html
@@ -2,4 +2,6 @@
 <img src="http://example.com/img.png" alt="ALT TEXT" />
 </a>
 <br>
-<a href="http://example.com"><img src="http://example.com/img.png" alt="ALT TEXT" /></a>
\ No newline at end of file
+<a href="http://example.com"><img src="http://example.com/img.png" alt="ALT TEXT" /></a>
+<br>
+<a href="http://example.com"><img src="http://example.com/img.png" alt="http://example.com" /></a>
\ No newline at end of file
diff --git a/test/images_to_alt.md b/test/images_to_alt.md
index 369eb93..c07f1f1 100644
--- a/test/images_to_alt.md
+++ b/test/images_to_alt.md
@@ -1,3 +1,4 @@
 [ ALT TEXT ](http://example.com)  
-[ALT TEXT](http://example.com)
+[ALT TEXT](http://example.com)  
+<http://example.com>
 

=====================================================================
start time: Mon Dec 29 00:00:00 CST 2014
end time: Wed Feb 18 00:00:00 CST 2015
description: 
=========
----
* Fix #38: Anchor tags with empty text or with ``<img>`` tags inside are no longer stripped.

commit message: 
commit 137789b687fa2543bfa120917a648c3df2d8e7db 1419820025 -----sp :: Add config and command line flags for single line break option.
commit 3b65368257fd211a8e482fbbb51a12099d4893eb 1419820044 -----sp :: Add unit test for single line break option.
commit 7c8a1057311cbd61ae7e421b90f04c772d7b2d21 1419820225 -----sp :: Fix typo in command line option description
commit 7e90ba8cea167dc4462d6c9595c48a86ad99f2aa 1419820296 -----sp :: Add EOF newline
commit 8b0f740cf74617bff3a0f453a30e7d42aa65d556 1419820693 -----sp :: Add single-line-break option info to README
commit 091d717a0befc7193791b85c86e18d5694320da0+ 1419836503 -----sp :: Merge pull request #51 from mdorn/master
commit 284df7c9c1911732192180a5c32d861138ca4615 1419838269 -----sp :: Add Matt Dorn @mdorn to Authors/Contributors
commit 9317d6bcb0955993d5af3eeac5ffe0047b1ad6f4+ 1419838410 -----sp :: Update the changelog for Feature #51
commit da9d1904d20742bf97a744c545d361af802e1a58 1419838441 -----sp :: Update version number for Release 2014.12.29
commit 21741517fd4b803e3cf920a6c47a1f25fc1e79a4 1419838815 -----sp :: Fix formatting authors list

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index 6e0f29a..5b9e0dd 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -1,16 +1,17 @@
-``html2text`` was Originally written by Aaron Swartz.
+``html2text`` was originally written by Aaron Swartz.
 
 The AUTHORS/Contributors are (and/or have been):
 
-    * Aaron Swartz
-    * Yariv Barkan
-    * Alex Musayev
-    * Matěj Cepl
-    * Stefano Rivera
-    * Alireza Savand <alireza.savand@gmail.com>
-    * Ivan Gromov <summer.is.gone@gmail.com>
-    * Jocelyn Delalande <jdelalande@oasiswork.fr>
+* Aaron Swartz
+* Yariv Barkan
+* Alex Musayev
+* Matěj Cepl
+* Stefano Rivera
+* Alireza Savand <alireza.savand@gmail.com>
+* Ivan Gromov <summer.is.gone@gmail.com>
+* Jocelyn Delalande <jdelalande@oasiswork.fr>
+* Matt Dorn <matt.dorn@gmail.com>
 
 Maintainer:
 
-    * Alireza Savand <alireza.savand@gmail.com>
+* Alireza Savand <alireza.savand@gmail.com>
diff --git a/ChangeLog.rst b/ChangeLog.rst
index ed6b0e1..0715576 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,14 @@
+2014.12.29
+==========
+----
+
+* Feature #51: Add single line break option.
+    This feature is useful for ensuring that lots of extra line breaks do not
+    end up in the resulting Markdown file in situations like Evernote .enex
+    exports. Note that this only works properly if ``body-width`` is set
+    to ``0``.
+
+
 2014.12.24
 ==========
 ----
diff --git a/README.md b/README.md
index a03eb1d..650ce2b 100644
--- a/README.md
+++ b/README.md
@@ -31,6 +31,7 @@
 |`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
 | `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
+| `--single-line-break`                                  | Use a single line break after a block element rather than two.
 
 
 Or you can use it from within `Python`:
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 99dd8e0..9b12757 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -28,7 +28,7 @@
     skipwrap
 )
 
-__version__ = "2014.12.24"
+__version__ = "2014.12.29"
 
 
 # TODO:
diff --git a/html2text/cli.py b/html2text/cli.py
index ef84e06..fb951b1 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -28,7 +28,7 @@
         dest="protect_links",
         action="store_true",
         default=config.PROTECT_LINKS,
-        help=("protect links from line breaks surrounding them "+
+        help=("protect links from line breaks surrounding them " +
               "with angle brackets"))
     p.add_option(
         "--ignore-images",
@@ -110,8 +110,8 @@
         dest="single_line_break",
         default=config.SINGLE_LINE_BREAK,
         help=(
-            "Use a single line break after a block element rather an two line "
-            "breaks. NOTE: Requires --body-width=0"
+            "Use a single line break after a block element rather than two "
+            "line breaks. NOTE: Requires --body-width=0"
         )
     )
     (options, args) = p.parse_args()
diff --git a/setup.py b/setup.py
index bb29c7f..20863f5 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.12.24",
+    version="2014.12.29",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
diff --git a/test/single_line_break.html b/test/single_line_break.html
new file mode 100644
index 0000000..ec3598e
--- /dev/null
+++ b/test/single_line_break.html
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
+<en-note>
+<div>Hello world.</div>
+<div>And hello html2text.</div>
+</en-note>
diff --git a/test/single_line_break.md b/test/single_line_break.md
new file mode 100644
index 0000000..31fde4f
--- /dev/null
+++ b/test/single_line_break.md
@@ -0,0 +1,2 @@
+Hello world.
+And hello html2text.
diff --git a/test/test_html2text.py b/test/test_html2text.py
index c7fb2d4..167fab7 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -135,6 +135,12 @@
         module_args['images_to_alt'] = True
         cmdline_args.append('--images-to-alt')
 
+    if base_fn.startswith('single_line_break'):
+        module_args['body_width'] = 0
+        cmdline_args.append('--body-width=0')
+        module_args['single_line_break'] = True
+        cmdline_args.append('--single-line-break')
+
     return test_mod, test_cmd
 
 # Originally from http://stackoverflow.com/questions/32899/\

=====================================================================
start time: Wed Dec 24 00:00:00 CST 2014
end time: Mon Dec 29 00:00:00 CST 2014
description: 
==========
----
* Feature #51: Add single line break option.
    This feature is useful for ensuring that lots of extra line breaks do not
    end up in the resulting Markdown file in situations like Evernote .enex
    exports. Note that this only works properly if ``body-width`` is set
    to ``0``.

commit message: 
commit c63d377a62df7b7302ffd9b8eede921d36966b62 1419450043 -----sp :: Update changelog for due to latest changes
commit f0535caa4c27c1c55137c45350f9cfddec02c612 1419450157 -----sp :: Add @Alir3z4 to contributors
commit dacc0fd1fb61fd32b57fc04c88f2001ff6db9699 1419450181 -----sp :: Add Jocelyn Delalande to Authors
commit 26832bb33e8c9701562a867e5e3a0da8e703f80b 1419450278 -----sp :: Bump version number
commit 9077c233155fc41b1a9599cebc63b91aea1cbef3 1419450548 -----sp :: Fix md syntax
commit a928faaf7d4c08db2911c7b0df337c7361151206 1419451633 -----sp :: Update readme options
commit 78af16d00362799e9e24c2683741d338d62003d6 1419451658 -----sp :: Merge branch 'master' of github.com:Alir3z4/html2text
commit 125ececbdd9946b63a63f84508128ff6e43514d5+ 1419451958 -----sp :: Add setup.cfg
commit 75d10523341eabf638de7ad4e1e53b8508ec4382+ 1419452306 -----sp :: Update changelog for setup.cfg
commit 669e667372dd927f523397f4efcf4f76cb1c8691+ 1419745732 -----sp :: Add single line break configuration (use case: Evernote)

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index e4e37c3..6e0f29a 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -7,7 +7,9 @@
     * Alex Musayev
     * Matěj Cepl
     * Stefano Rivera
+    * Alireza Savand <alireza.savand@gmail.com>
     * Ivan Gromov <summer.is.gone@gmail.com>
+    * Jocelyn Delalande <jdelalande@oasiswork.fr>
 
 Maintainer:
 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index dcd9c73..ed6b0e1 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -2,10 +2,9 @@
 ==========
 ----
 
-* Feature #49: Added a images_to_alt option to discard images and keep only
-their alt.
-* Feature #50: Protect links, surrounding them with angle brackets to avoid
-breaking...
+* Feature #49: Added a images_to_alt option to discard images and keep only their alt.
+* Feature #50: Protect links, surrounding them with angle brackets to avoid breaking...
+* Feature: Add ``setup.cfg`` file.
 
 
 2014.12.5
diff --git a/README.md b/README.md
index ed156fa..a03eb1d 100644
--- a/README.md
+++ b/README.md
@@ -17,11 +17,13 @@
 
 
 | Option                                                 | Description            
-|--------------------------------------------------------|--------------------------------------------------
+|--------------------------------------------------------|---------------------------------------------------
 | `--version`                                            | Show program's version number and exit 
 | `-h`, `--help`                                         | Show this help message and exit      
 | `--ignore-links`                                       | Don't include any formatting for links
+|`--protect-links`                                       | Protect links from line breaks surrounding them "+" with angle brackets
 |`--ignore-images`                                       | Don't include any formatting for images
+|`--images-to-alt`                                       | Discard image data, only keep alt text
 |`-g`, `--google-doc`                                    | Convert an html-exported Google Document
 |`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
 |`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 650d48d..cfd43f7 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -28,7 +28,7 @@
     skipwrap
 )
 
-__version__ = "2014.12.5"
+__version__ = "2014.12.24"
 
 
 # TODO:
@@ -66,6 +66,7 @@
         self.ul_item_mark = '*'
         self.emphasis_mark = '_'
         self.strong_mark = '**'
+        self.single_line_break = False
 
         if out is None:
             self.out = self.outtextf
@@ -517,7 +518,7 @@
             self.p_p = 1
 
     def p(self):
-        self.p_p = 2
+        self.p_p = 1 if self.single_line_break else 2
 
     def soft_br(self):
         self.pbr()
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..b88034e
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,2 @@
+[metadata]
+description-file = README.md
diff --git a/setup.py b/setup.py
index 492d665..bb29c7f 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.12.5",
+    version="2014.12.24",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",

=====================================================================
start time: Fri Dec 05 00:00:00 CST 2014
end time: Wed Dec 24 00:00:00 CST 2014
description: 
==========
----
* Feature #49: Added an images_to_alt option to discard images and keep only their alt.
* Feature #50: Protect links, surrounding them with angle brackets to avoid breaking...
* Feature: Add ``setup.cfg`` file.

commit message: 
commit c59b399bec723585320ac4a6fbcf880214def3cd 1417799628 -----sp :: Merge pull request #46 from Alir3z4/fix-#45-does-not-accept-standard-input-when-running-under-python-3
commit c3b3de64b273905b68ca7dbf9e579c73e4737a4e 1417802489 -----sp :: Feature: Clean up ``ChangeLog.rst`` for version and date numbers.
commit d3ba03b34fad1683a78e1ccc0a38d42b1a61cf4a 1417802578 -----sp :: Remove unused module imports
commit 100ae75f7aee95e88f379fc52eafbf9d33ee1a34 1417802598 -----sp :: Bump version number for new release 2014.12.5
commit c5d59f7302bb04800679df8d5994120a8aa67c55+ 1419263592 -----sp :: added a images_to_alt option to discard images and keep only their alt
commit 22b29279c54463a0b3056ca3dc9165f336ba3215 1419265018 -----sp :: Protect links, surrounding them with angle brackets to avoid breaking them with line-wrap (inline and reference).
commit b4d41913de7fe0dc69e7533e0f3e1c04f3155b27+ 1419325212 -----sp :: Merge pull request #49 from oasiswork/jd-image_to_alt
commit 0fc58fe9af1efb11c8f79f9b446ed4881fb91dab 1419325735 -----sp :: pep8
commit b7d3e5b07d15751e6ceca64cadeee8d54b91d6dc+ 1419325908 -----sp :: Merge branch 'master' into jd-protect-links
commit 6a188c7c9e9d53d467b309dbf3f04f2df5ccf63e+ 1419333250 -----sp :: Merge pull request #50 from oasiswork/jd-protect-links

hunks: 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 314627a..1312fb1 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,5 +1,5 @@
-0000.00.00 - 0000-00-00
-=======================
+2014.12.5
+=========
 ----
 
 * Feature: Update `README.md` with usage examples.
@@ -11,25 +11,26 @@
 * Feature #42: Bring python version compatibility to ``compat.py`` module.
 * Feature #41: Extract utility/helper methods to ``utils`` module.
 * Fix #45: Does not accept standard input when running under Python 3.
+* Feature: Clean up ``ChangeLog.rst`` for version and date numbers.
 
 
-2014.9.25 - 2014-09-25
-======================
+2014.9.25
+=========
 ----
 
 * Feature #29, #27: Add simple table support with bypass option.
 * Fix #20: Replace project website with: http://alir3z4.github.io/html2text/ .
 
 
-2014.9.8 - 2014-09-08
-=====================
+2014.9.8
+========
 ----
 
 * Fix #28: missing ``html2text`` package in installation.
 
 
-2014.9.7 - 2014-09-07
-=====================
+2014.9.7
+========
 ----
 
 * Fix ``unicode``/``type`` error in memory leak unit-test.
@@ -41,8 +42,8 @@
 * Fix: Fix TypeError when parsing tags like <img src='foo' alt>. Fixed in #25.
 
 
-2014.7.3 - 2014-07-03
-=====================
+2014.7.3
+========
 ----
 
 * Fix #8: Remove ``How to do a release`` section from README.md.
@@ -50,8 +51,8 @@
 * Fix #13:  memory leak in using ``handle`` while keeping the old instance of ``html2text``.
 
 
-2014.4.5 - 2014-04-05
-=====================
+2014.4.5
+========
 ----
 
 * Fix #1: Add ``ChangeLog.rst`` file.
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 35152da..650d48d 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -9,7 +9,7 @@
 except ImportError:
     pass
 
-from html2text.compat import htmlentitydefs, urlparse, HTMLParser
+from html2text.compat import urlparse, HTMLParser
 from html2text import config
 
 from html2text.utils import (
@@ -28,7 +28,7 @@
     skipwrap
 )
 
-__version__ = "2014.9.25"
+__version__ = "2014.12.5"
 
 
 # TODO:
@@ -55,9 +55,11 @@
         self.body_width = bodywidth
         self.skip_internal_links = config.SKIP_INTERNAL_LINKS
         self.inline_links = config.INLINE_LINKS
+        self.protect_links = config.PROTECT_LINKS
         self.google_list_indent = config.GOOGLE_LIST_INDENT
         self.ignore_links = config.IGNORE_ANCHORS
         self.ignore_images = config.IGNORE_IMAGES
+        self.images_to_alt = config.IMAGES_TO_ALT
         self.ignore_emphasis = config.IGNORE_EMPHASIS
         self.bypass_tables = config.BYPASS_TABLES
         self.google_doc = False
@@ -367,6 +369,8 @@
                                  attrs['href'].startswith('#')):
                     self.astack.append(attrs)
                     self.maybe_automatic_link = attrs['href']
+                    if self.protect_links:
+                        attrs['href'] = '<'+attrs['href']+'>'
                 else:
                     self.astack.append(None)
             else:
@@ -390,23 +394,29 @@
 
         if tag == "img" and start and not self.ignore_images:
             if 'src' in attrs:
-                attrs['href'] = attrs['src']
+                if not self.images_to_alt:
+                    attrs['href'] = attrs['src']
                 alt = attrs.get('alt') or ''
-                self.o("![" + escape_md(alt) + "]")
 
-                if self.inline_links:
-                    href = attrs.get('href') or ''
-                    self.o("(" + escape_md(href) + ")")
+                # If we have images_to_alt, we discard the image itself,
+                # considering only the alt text.
+                if self.images_to_alt:
+                    self.o(escape_md(alt))
                 else:
-                    i = self.previousIndex(attrs)
-                    if i is not None:
-                        attrs = self.a[i]
+                    self.o("![" + escape_md(alt) + "]")
+                    if self.inline_links:
+                        href = attrs.get('href') or ''
+                        self.o("(" + escape_md(href) + ")")
                     else:
-                        self.acount += 1
-                        attrs['count'] = self.acount
-                        attrs['outcount'] = self.outcount
-                        self.a.append(attrs)
-                    self.o("[" + str(attrs['count']) + "]")
+                        i = self.previousIndex(attrs)
+                        if i is not None:
+                            attrs = self.a[i]
+                        else:
+                            self.acount += 1
+                            attrs['count'] = self.acount
+                            attrs['outcount'] = self.outcount
+                            self.a.append(attrs)
+                        self.o("[" + str(attrs['count']) + "]")
 
         if tag == 'dl' and start:
             self.p()
diff --git a/html2text/cli.py b/html2text/cli.py
index 9c27df5..46aecd5 100644
--- a/html2text/cli.py
+++ b/html2text/cli.py
@@ -24,6 +24,13 @@
         default=config.IGNORE_ANCHORS,
         help="don't include any formatting for links")
     p.add_option(
+        "--protect-links",
+        dest="protect_links",
+        action="store_true",
+        default=config.PROTECT_LINKS,
+        help=("protect links from line breaks surrounding them "+
+              "with angle brackets"))
+    p.add_option(
         "--ignore-images",
         dest="ignore_images",
         action="store_true",
@@ -31,6 +38,13 @@
         help="don't include any formatting for images"
     )
     p.add_option(
+        "--images-to-alt",
+        dest="images_to_alt",
+        action="store_true",
+        default=config.IMAGES_TO_ALT,
+        help="Discard image data, only keep alt text"
+    )
+    p.add_option(
         "-g", "--google-doc",
         action="store_true",
         dest="google_doc",
@@ -139,10 +153,12 @@
     h.list_indent = options.list_indent
     h.ignore_emphasis = options.ignore_emphasis
     h.ignore_links = options.ignore_links
+    h.protect_links = options.protect_links
     h.ignore_images = options.ignore_images
+    h.images_to_alt = options.images_to_alt
     h.google_doc = options.google_doc
     h.hide_strikethrough = options.hide_strikethrough
     h.escape_snob = options.escape_snob
     h.bypass_tables = options.bypass_tables
 
-    wrapwrite(h.handle(data))
\ No newline at end of file
+    wrapwrite(h.handle(data))
diff --git a/html2text/config.py b/html2text/config.py
index f932024..0ae9eb7 100644
--- a/html2text/config.py
+++ b/html2text/config.py
@@ -20,11 +20,16 @@
 # Use inline, rather than reference, formatting for images and links
 INLINE_LINKS = True
 
+# Protect links from line breaks surrounding them with angle brackets (in
+# addition to their square brackets)
+PROTECT_LINKS = False
+
 # Number of pixels Google indents nested lists
 GOOGLE_LIST_INDENT = 36
 
 IGNORE_ANCHORS = False
 IGNORE_IMAGES = False
+IMAGES_TO_ALT = False
 IGNORE_EMPHASIS = False
 
 # For checking space-only lines on line 771
@@ -102,4 +107,4 @@
     'rlm': ''
 }
 
-BYPASS_TABLES = False
\ No newline at end of file
+BYPASS_TABLES = False
diff --git a/setup.py b/setup.py
index e8d939f..492d665 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.9.25",
+    version="2014.12.5",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
diff --git a/test/images_to_alt.html b/test/images_to_alt.html
new file mode 100644
index 0000000..b41b692
--- /dev/null
+++ b/test/images_to_alt.html
@@ -0,0 +1,3 @@
+<a href="http://example.com">
+<img src="http://example.com/img.png" alt="ALT TEXT" />
+</a>
diff --git a/test/images_to_alt.md b/test/images_to_alt.md
new file mode 100644
index 0000000..2dd2299
--- /dev/null
+++ b/test/images_to_alt.md
@@ -0,0 +1,2 @@
+[ ALT TEXT ](http://example.com)
+
diff --git a/test/protect_links.html b/test/protect_links.html
new file mode 100644
index 0000000..b248d1e
--- /dev/null
+++ b/test/protect_links.html
@@ -0,0 +1 @@
+<a href="http://im-a-very-very-very-very-very-very-very-very-very-very-long/link.html">foo</a>
\ No newline at end of file
diff --git a/test/protect_links.md b/test/protect_links.md
new file mode 100644
index 0000000..23e153e
--- /dev/null
+++ b/test/protect_links.md
@@ -0,0 +1,3 @@
+[foo](<http://im-a-very-very-very-very-very-very-very-very-very-very-
+long/link.html>)
+
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 2ea839d..c7fb2d4 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -127,6 +127,14 @@
         module_args['body_width'] = 0
         cmdline_args.append('--body-width=0')
 
+    if base_fn.startswith('protect_links'):
+        module_args['protect_links'] = True
+        cmdline_args.append('--protect-links')
+
+    if base_fn.startswith('images_to_alt'):
+        module_args['images_to_alt'] = True
+        cmdline_args.append('--images-to-alt')
+
     return test_mod, test_cmd
 
 # Originally from http://stackoverflow.com/questions/32899/\

=====================================================================
start time: Thu Sep 25 00:00:00 CST 2014
end time: Fri Dec 05 00:00:00 CST 2014
description: 
=========
----
* Feature: Update ``README.md`` with usage examples.
* Fix #35: Remove ``py_modules`` from ``setup.py``.
* Fix #36: Excludes tests from being installed as a separate module.
* Fix #37: Don't hardcode the path to the installed binary.
* Fix: Readme typo in running cli.
* Feature #40: Extract cli part to ``cli`` module.
* Feature #42: Bring python version compatibility to ``compat.py`` module.
* Feature #41: Extract utility/helper methods to ``utils`` module.
* Fix #45: Does not accept standard input when running under Python 3.
* Feature: Clean up ``ChangeLog.rst`` for version and date numbers.

commit message: 
commit 434b2a1060e0df5404d725cb8b58e252cf5bd8a9+ 1411659042 -----sp :: Merge pull request #29 from summerisgone/master
commit ed460442caee3b649a8c3de3e6fbc0cdecee05ac 1411659347 -----sp :: Add @Alir3z4 email address
commit d039089a920b8d04c35226e30970b82444fdc251 1411659383 -----sp :: Add Ivan Gromov @summerisgone to Authors
commit 09f267fc5602a930e39814f3b5e08bb0c7f38086 1411659396 -----sp :: Add --bypass-tables options to README file
commit d2a39a31154f9475461415c324ec763138ff8be7 1411659419 -----sp :: Update the changelog for adding table support
commit 1c977448fc4903c51be668f5b0ec357732cbf13c+ 1411659592 -----sp :: Update version number and getting ready to release new version
commit 8e9361f3e2eb026a6411167fa9f83baf3a5ae469 1411659802 -----sp :: Update changelog for new website address
commit 11f3cdae50943ccef2d7a0de51116a60fac2f7bc+ 1412382993 -----sp :: Update code examples
commit 540068f1b11ec5732666c48ffd1bf4419df4b019+ 1412530679 -----sp :: Remove py_modules
commit f7bf5428a0831f5648a2d95e4a0bd9fedcbda0ad+ 1412583690 -----sp :: Do not install tests
commit 1203f62bf72311b9ca82cd18d7bb0d0c403250f4 1412583965 -----sp :: Update changlog for latest changes
commit f3523f3769a6e237d6756cb58c0fa01717a744b4+ 1413657912 -----sp :: Don't hardcode the path to the installed binary
commit 2e1963ebf906b25e019bc0d849a00b05c025809a+ 1414616513 -----sp :: Fix a typo in module name for usage
commit ed1791a2de6623328c25a775a2fedfed12de24ab+ 1414616637 -----sp :: Merge pull request #37 from stefanor/test-binary-location
commit 27a00f276ca615406781f2773d5d5e26825ac215+ 1414855207 -----sp :: Initial cli module
commit f46847496d5928ca6a1753cd0c32c30a99bb1fe9+ 1414855472 -----sp :: Initial compat module
commit c8571dca2db494ba9f0e49187c376a7006a9d8a3+ 1414855723 -----sp :: Bring python compatibility to compat module ;)
commit e8497a10ec089a2a2aec852cec917530c6d3bc69+ 1414855824 -----sp :: Extract cli to cli module
commit 9227623330da774742234759c5aa77c14aca07ab 1414855847 -----sp :: points to html2text=html2text.cli:main
commit 5837bdfd2ce9fb1199bd851d20bb30ddcfdfdfde 1414855932 -----sp :: Clean up imports a little bit
commit 334fdd6e4b7797d018744a671c0b5c47b1ad73b1 1414855994 -----sp :: Syntax fix in ChangeLog.rst
commit 1d56f0ed351a870b3fa469facd7c28359be894c4 1414856193 -----sp :: Update changelog for new cool changes
commit adb73ddfae5675872349f0e4d8d5b7a19c6486e3+ 1414857768 -----sp :: Merge pull request #43 from Alir3z4/feature-#40-extract-cli-to-separate-module
commit 54ee07cba6ca3175faf30b20ffa08aa283ef00cc+ 1414857855 -----sp :: Initial utils module
commit a93c9366e5934d617788ce9014833490b88fdf85+ 1414858259 -----sp :: Remov utility/helpers method to utils module
commit 114f72371dcb66b9ccd3c39daefe43a2c28f5860+ 1414859072 -----sp :: Bring back html2text, unescape to init to prevent import conflicts in utils
commit 05319fba3c7598511993d8717098d0f230606c6b+ 1414859089 -----sp :: Fix importing from utils
commit 4a7d3791397679a612ac3fd6d2c4145c62d9e780 1414859102 -----sp :: A little bit of import optimization
commit 2b5762f4f93d659db0083e618bac52508f105a3f 1414859187 -----sp :: Some tiny code clean up as well
commit 21b85f5dd8d68d10da5b15e16693f9eef263e52a 1414859269 -----sp :: Update the changelog with latest cool changes
commit d43b9b4e3dfb9ba6da09c424020603e5811059be+ 1414859632 -----sp :: Merge pull request #44 from Alir3z4/feature-#41-extract-utility-methods-to-separate-module
commit ca99d55a915aaff904562efb815debb905840ac6 1417614884 -----sp :: Add wrap_read
commit 78f706d4da48823c19264fde0e51248b256ed89c+ 1417614923 -----sp :: Using wrap_read from utils to read stdin
commit 20d1669e6babad7c80180d0b8d11f41012be07f3 1417614932 -----sp :: Remove unused `sys` module
commit 50d863fcd4d37ef4a615f0f7272249f154b19fd2+ 1417614988 -----sp :: Update ChangeLog for issue #45

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index bf17c10..e4e37c3 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -7,7 +7,8 @@
     * Alex Musayev
     * Matěj Cepl
     * Stefano Rivera
+    * Ivan Gromov <summer.is.gone@gmail.com>
 
 Maintainer:
 
-    * Alireza Savand
+    * Alireza Savand <alireza.savand@gmail.com>
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 52a440f..314627a 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,26 @@
+0000.00.00 - 0000-00-00
+=======================
+----
+
+* Feature: Update `README.md` with usage examples.
+* Fix #35: Remove `py_modules` from `setup.py`.
+* Fix #36: Excludes tests from being installed as a separate module.
+* Fix #37: Don't hardcode the path to the installed binary.
+* Fix: Readme typo in running cli.
+* Feature #40: Extract cli part to ``cli`` module.
+* Feature #42: Bring python version compatibility to ``compat.py`` module.
+* Feature #41: Extract utility/helper methods to ``utils`` module.
+* Fix #45: Does not accept standard input when running under Python 3.
+
+
+2014.9.25 - 2014-09-25
+======================
+----
+
+* Feature #29, #27: Add simple table support with bypass option.
+* Fix #20: Replace project website with: http://alir3z4.github.io/html2text/ .
+
+
 2014.9.8 - 2014-09-08
 =====================
 ----
diff --git a/README.md b/README.md
index 3eabd82..ed156fa 100644
--- a/README.md
+++ b/README.md
@@ -13,7 +13,7 @@
 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
 
 
-Usage: `html2text.py [(filename|url) [encoding]]`
+Usage: `html2text [(filename|url) [encoding]]`
 
 
 | Option                                                 | Description            
@@ -28,22 +28,42 @@
 |`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
 |`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
 |`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
-
+| `--bypass-tables`                                      | Format tables in HTML rather than Markdown syntax.
 
 
 Or you can use it from within `Python`:
 
-    import html2text
-    print html2text.html2text("<p>Hello, world.</p>")
+```
+>>> import html2text
+>>>
+>>> print(html2text.html2text("<p><strong>Zed's</strong> dead baby, <em>Zed's</em> dead.</p>"))
+**Zed's** dead baby, _Zed's_ dead.
+
+```
+
 
 Or with some configuration options:
+```
+>>> import html2text
+>>> 
+>>> h = html2text.HTML2Text()
+>>> # Ignore converting links from HTML
+>>> h.ignore_links = True
+>>> print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")
+Hello, world!
 
-    import html2text
-    h = html2text.HTML2Text()
-    h.ignore_links = True
-    print h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!")
+>>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
 
-_Originally written by Aaron Swartz. This code is distributed under the GPLv3._
+Hello, world!
+
+>>> # Don't Ignore links anymore, I like links
+>>> h.ignore_links = False
+>>> print(h.handle("<p>Hello, <a href='http://earth.google.com/'>world</a>!"))
+Hello, [world](http://earth.google.com/)!
+
+```
+
+*Originally written by Aaron Swartz. This code is distributed under the GPLv3.*
 
 
 ## How to install
diff --git a/html2text/__init__.py b/html2text/__init__.py
index bbdab7b..35152da 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -2,192 +2,37 @@
 # coding: utf-8
 """html2text: Turn HTML into equivalent Markdown-structured text."""
 from __future__ import division
-from html2text import config
-
-
-__version__ = "2014.9.8"
-
-
-# TODO:
-#   Support decoded entities with UNIFIABLE.
-
-try:
-    import htmlentitydefs
-    import urlparse
-    import HTMLParser
-except ImportError:  # Python3
-    import html.entities as htmlentitydefs
-    import urllib.parse as urlparse
-    import html.parser as HTMLParser
-try:  # Python3
-    import urllib.request as urllib
-except ImportError:
-    import urllib
-import optparse
 import re
-import sys
 
 try:
     from textwrap import wrap
 except ImportError:
     pass
 
+from html2text.compat import htmlentitydefs, urlparse, HTMLParser
+from html2text import config
 
-def name2cp(k):
-    if k == 'apos':
-        return ord("'")
-    return htmlentitydefs.name2codepoint[k]
+from html2text.utils import (
+    name2cp,
+    unifiable_n,
+    google_text_emphasis,
+    google_fixed_width_font,
+    element_style,
+    hn,
+    google_has_height,
+    escape_md,
+    google_list_style,
+    list_numbering_start,
+    dumb_css_parser,
+    escape_md_section,
+    skipwrap
+)
 
-unifiable_n = {}
-
-for k in config.UNIFIABLE.keys():
-    unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
+__version__ = "2014.9.25"
 
 
-def hn(tag):
-    if tag[0] == 'h' and len(tag) == 2:
-        try:
-            n = int(tag[1])
-            if n in range(1, 10):
-                return n
-        except ValueError:
-            return 0
-
-
-def dumb_property_dict(style):
-    """
-    :returns: A hash of css attributes
-    """
-    out = dict([(x.strip(), y.strip()) for x, y in
-               [z.split(':', 1) for z in
-               style.split(';') if ':' in z]])
-    return out
-
-
-def dumb_css_parser(data):
-    """
-    :type data: str
-
-    :returns: A hash of css selectors, each of which contains a hash of
-    css attributes.
-    :rtype: dict
-    """
-    # remove @import sentences
-    data += ';'
-    importIndex = data.find('@import')
-    while importIndex != -1:
-        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
-        importIndex = data.find('@import')
-
-    # parse the css. reverted from dictionary comprehension in order to
-    # support older pythons
-    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
-    try:
-        elements = dict([(a.strip(), dumb_property_dict(b))
-                        for a, b in elements])
-    except ValueError:
-        elements = {}  # not that important
-
-    return elements
-
-
-def element_style(attrs, style_def, parent_style):
-    """
-    :type attrs: dict
-    :type style_def: dict
-    :type style_def: dict
-
-    :returns: A hash of the 'final' style attributes of the element
-    :rtype: dict
-    """
-    style = parent_style.copy()
-    if 'class' in attrs:
-        for css_class in attrs['class'].split():
-            css_style = style_def['.' + css_class]
-            style.update(css_style)
-    if 'style' in attrs:
-        immediate_style = dumb_property_dict(attrs['style'])
-        style.update(immediate_style)
-    return style
-
-
-def google_list_style(style):
-    """
-    Finds out whether this is an ordered or unordered list
-
-    :type style: dict
-
-    :rtype: str
-    """
-    if 'list-style-type' in style:
-        list_style = style['list-style-type']
-        if list_style in ['disc', 'circle', 'square', 'none']:
-            return 'ul'
-    return 'ol'
-
-
-def google_has_height(style):
-    """
-    Check if the style of the element has the 'height' attribute
-    explicitly defined
-
-    :type style: dict
-
-    :rtype: bool
-    """
-    if 'height' in style:
-        return True
-    return False
-
-
-def google_text_emphasis(style):
-    """
-    :type style: dict
-
-    :returns: A list of all emphasis modifiers of the element
-    :rtype: list
-    """
-    emphasis = []
-    if 'text-decoration' in style:
-        emphasis.append(style['text-decoration'])
-    if 'font-style' in style:
-        emphasis.append(style['font-style'])
-    if 'font-weight' in style:
-        emphasis.append(style['font-weight'])
-    return emphasis
-
-
-def google_fixed_width_font(style):
-    """
-    Check if the css of the current element defines a fixed width font
-
-    :type style: dict
-
-    :rtype: bool
-    """
-    font_family = ''
-    if 'font-family' in style:
-        font_family = style['font-family']
-    if 'Courier New' == font_family or 'Consolas' == font_family:
-        return True
-    return False
-
-
-def list_numbering_start(attrs):
-    """
-    Extract numbering from list element attributes
-
-    :type attrs: dict
-
-    :rtype: int or None
-    """
-    if 'start' in attrs:
-        try:
-            return int(attrs['start']) - 1
-        except ValueError:
-            pass
-
-    return 0
+# TODO:
+# Support decoded entities with UNIFIABLE.
 
 
 class HTML2Text(HTMLParser.HTMLParser):
@@ -340,9 +185,9 @@
 
             if ('href' in a) and a['href'] == attrs['href']:
                 if ('title' in a) or ('title' in attrs):
-                        if (('title' in a) and ('title' in attrs) and
+                    if (('title' in a) and ('title' in attrs) and
                                 a['title'] == attrs['title']):
-                            match = True
+                        match = True
                 else:
                     match = True
 
@@ -358,7 +203,7 @@
 
         # handle Google's text emphasis
         strikethrough = 'line-through' in \
-            tag_emphasis and self.hide_strikethrough
+                        tag_emphasis and self.hide_strikethrough
         bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
         italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
         fixed = google_fixed_width_font(tag_style) and not \
@@ -407,7 +252,7 @@
                     self.o(self.emphasis_mark)
             # space is only allowed after *all* emphasis marks
             if (bold or italic) and not self.emphasis:
-                    self.o(" ")
+                self.o(" ")
             if strikethrough:
                 self.quiet -= 1
 
@@ -519,7 +364,7 @@
                 if ('href' in attrs) and \
                         (attrs['href'] is not None) and \
                         not (self.skip_internal_links and
-                             attrs['href'].startswith('#')):
+                                 attrs['href'].startswith('#')):
                     self.astack.append(attrs)
                     self.maybe_automatic_link = attrs['href']
                 else:
@@ -845,7 +690,7 @@
         nest_count = 0
         if 'margin-left' in style:
             nest_count = int(style['margin-left'][:-2]) \
-                // self.google_list_indent
+                         // self.google_list_indent
 
         return nest_count
 
@@ -888,42 +733,6 @@
         return result
 
 
-def skipwrap(para):
-    # If the text begins with four spaces or one tab, it's a code block;
-    # don't wrap
-    if para[0:4] == '    ' or para[0] == '\t':
-        return True
-
-    # If the text begins with only two "--", possibly preceded by
-    # whitespace, that's an emdash; so wrap.
-    stripped = para.lstrip()
-    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
-        return False
-
-    # I'm not sure what this is for; I thought it was to detect lists,
-    # but there's a <br>-inside-<span> case in one of the tests that
-    # also depends upon it.
-    if stripped[0:1] == '-' or stripped[0:1] == '*':
-        return True
-
-    # If the text begins with a single -, *, or +, followed by a space,
-    # or an integer, followed by a ., followed by a space (in either
-    # case optionally proceeded by whitespace), it's a list; don't wrap.
-    if config.RE_ORDERED_LIST_MATCHER.match(stripped) or \
-            config.RE_UNORDERED_LIST_MATCHER.match(stripped):
-        return True
-
-    return False
-
-
-def wrapwrite(text):
-    text = text.encode('utf-8')
-    try:  # Python3
-        sys.stdout.buffer.write(text)
-    except AttributeError:
-        sys.stdout.write(text)
-
-
 def html2text(html, baseurl='', bodywidth=config.BODY_WIDTH):
     h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
 
@@ -937,170 +746,7 @@
     return h.unescape(s)
 
 
-def escape_md(text):
-    """
-    Escapes markdown-sensitive characters within other markdown
-    constructs.
-    """
-    return config.RE_MD_CHARS_MATCHER.sub(r"\\\1", text)
-
-
-def escape_md_section(text, snob=False):
-    """
-    Escapes markdown-sensitive characters across whole document sections.
-    """
-    text = config.RE_MD_BACKSLASH_MATCHER.sub(r"\\\1", text)
-
-    if snob:
-        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r"\\\1", text)
-
-    text = config.RE_MD_DOT_MATCHER.sub(r"\1\\\2", text)
-    text = config.RE_MD_PLUS_MATCHER.sub(r"\1\\\2", text)
-    text = config.RE_MD_DASH_MATCHER.sub(r"\1\\\2", text)
-
-    return text
-
-
-def main():
-    baseurl = ''
-
-    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
-                              version='%prog ' + __version__)
-    p.add_option(
-        "--ignore-emphasis",
-        dest="ignore_emphasis",
-        action="store_true",
-        default=config.IGNORE_EMPHASIS,
-        help="don't include any formatting for emphasis"
-    )
-    p.add_option(
-        "--ignore-links",
-        dest="ignore_links",
-        action="store_true",
-        default=config.IGNORE_ANCHORS,
-        help="don't include any formatting for links")
-    p.add_option(
-        "--ignore-images",
-        dest="ignore_images",
-        action="store_true",
-        default=config.IGNORE_IMAGES,
-        help="don't include any formatting for images"
-    )
-    p.add_option(
-        "-g", "--google-doc",
-        action="store_true",
-        dest="google_doc",
-        default=False,
-        help="convert an html-exported Google Document"
-    )
-    p.add_option(
-        "-d", "--dash-unordered-list",
-        action="store_true",
-        dest="ul_style_dash",
-        default=False,
-        help="use a dash rather than a star for unordered list items"
-    )
-    p.add_option(
-        "-e", "--asterisk-emphasis",
-        action="store_true",
-        dest="em_style_asterisk",
-        default=False,
-        help="use an asterisk rather than an underscore for emphasized text"
-    )
-    p.add_option(
-        "-b", "--body-width",
-        dest="body_width",
-        action="store",
-        type="int",
-        default=config.BODY_WIDTH,
-        help="number of characters per output line, 0 for no wrap"
-    )
-    p.add_option(
-        "-i", "--google-list-indent",
-        dest="list_indent",
-        action="store",
-        type="int",
-        default=config.GOOGLE_LIST_INDENT,
-        help="number of pixels Google indents nested lists"
-    )
-    p.add_option(
-        "-s", "--hide-strikethrough",
-        action="store_true",
-        dest="hide_strikethrough",
-        default=False,
-        help="hide strike-through text. only relevant when -g is "
-             "specified as well"
-    )
-    p.add_option(
-        "--escape-all",
-        action="store_true",
-        dest="escape_snob",
-        default=False,
-        help="Escape all special characters.  Output is less readable, but "
-             "avoids corner case formatting issues."
-    )
-    p.add_option(
-        "--bypass-tables",
-        action="store_true",
-        dest="bypass_tables",
-        default=config.BYPASS_TABLES,
-        help="Format tables in HTML rather than Markdown syntax."
-    )
-    (options, args) = p.parse_args()
-
-    # process input
-    encoding = "utf-8"
-    if len(args) > 0:
-        file_ = args[0]
-        if len(args) == 2:
-            encoding = args[1]
-        if len(args) > 2:
-            p.error('Too many arguments')
-
-        if file_.startswith('http://') or file_.startswith('https://'):
-            baseurl = file_
-            j = urllib.urlopen(baseurl)
-            data = j.read()
-            if encoding is None:
-                try:
-                    from feedparser import _getCharacterEncoding as enc
-                except ImportError:
-                    enc = lambda x, y: ('utf-8', 1)
-                encoding = enc(j.headers, data)[0]
-                if encoding == 'us-ascii':
-                    encoding = 'utf-8'
-        else:
-            data = open(file_, 'rb').read()
-            if encoding is None:
-                try:
-                    from chardet import detect
-                except ImportError:
-                    detect = lambda x: {'encoding': 'utf-8'}
-                encoding = detect(data)['encoding']
-    else:
-        data = sys.stdin.read()
-
-    data = data.decode(encoding)
-    h = HTML2Text(baseurl=baseurl)
-    # handle options
-    if options.ul_style_dash:
-        h.ul_item_mark = '-'
-    if options.em_style_asterisk:
-        h.emphasis_mark = '*'
-        h.strong_mark = '__'
-
-    h.body_width = options.body_width
-    h.list_indent = options.list_indent
-    h.ignore_emphasis = options.ignore_emphasis
-    h.ignore_links = options.ignore_links
-    h.ignore_images = options.ignore_images
-    h.google_doc = options.google_doc
-    h.hide_strikethrough = options.hide_strikethrough
-    h.escape_snob = options.escape_snob
-    h.bypass_tables = options.bypass_tables
-
-    wrapwrite(h.handle(data))
-
-
 if __name__ == "__main__":
+    from html2text.cli import main
+
     main()
diff --git a/html2text/cli.py b/html2text/cli.py
new file mode 100644
index 0000000..9c27df5
--- /dev/null
+++ b/html2text/cli.py
@@ -0,0 +1,148 @@
+import optparse
+
+from html2text.compat import urllib
+from html2text import HTML2Text, config, __version__
+from html2text.utils import wrapwrite, wrap_read
+
+
+def main():
+    baseurl = ''
+
+    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
+                              version='%prog ' + __version__)
+    p.add_option(
+        "--ignore-emphasis",
+        dest="ignore_emphasis",
+        action="store_true",
+        default=config.IGNORE_EMPHASIS,
+        help="don't include any formatting for emphasis"
+    )
+    p.add_option(
+        "--ignore-links",
+        dest="ignore_links",
+        action="store_true",
+        default=config.IGNORE_ANCHORS,
+        help="don't include any formatting for links")
+    p.add_option(
+        "--ignore-images",
+        dest="ignore_images",
+        action="store_true",
+        default=config.IGNORE_IMAGES,
+        help="don't include any formatting for images"
+    )
+    p.add_option(
+        "-g", "--google-doc",
+        action="store_true",
+        dest="google_doc",
+        default=False,
+        help="convert an html-exported Google Document"
+    )
+    p.add_option(
+        "-d", "--dash-unordered-list",
+        action="store_true",
+        dest="ul_style_dash",
+        default=False,
+        help="use a dash rather than a star for unordered list items"
+    )
+    p.add_option(
+        "-e", "--asterisk-emphasis",
+        action="store_true",
+        dest="em_style_asterisk",
+        default=False,
+        help="use an asterisk rather than an underscore for emphasized text"
+    )
+    p.add_option(
+        "-b", "--body-width",
+        dest="body_width",
+        action="store",
+        type="int",
+        default=config.BODY_WIDTH,
+        help="number of characters per output line, 0 for no wrap"
+    )
+    p.add_option(
+        "-i", "--google-list-indent",
+        dest="list_indent",
+        action="store",
+        type="int",
+        default=config.GOOGLE_LIST_INDENT,
+        help="number of pixels Google indents nested lists"
+    )
+    p.add_option(
+        "-s", "--hide-strikethrough",
+        action="store_true",
+        dest="hide_strikethrough",
+        default=False,
+        help="hide strike-through text. only relevant when -g is "
+             "specified as well"
+    )
+    p.add_option(
+        "--escape-all",
+        action="store_true",
+        dest="escape_snob",
+        default=False,
+        help="Escape all special characters.  Output is less readable, but "
+             "avoids corner case formatting issues."
+    )
+    p.add_option(
+        "--bypass-tables",
+        action="store_true",
+        dest="bypass_tables",
+        default=config.BYPASS_TABLES,
+        help="Format tables in HTML rather than Markdown syntax."
+    )
+    (options, args) = p.parse_args()
+
+    # process input
+    encoding = "utf-8"
+    if len(args) > 0:
+        file_ = args[0]
+        if len(args) == 2:
+            encoding = args[1]
+        if len(args) > 2:
+            p.error('Too many arguments')
+
+        if file_.startswith('http://') or file_.startswith('https://'):
+            baseurl = file_
+            j = urllib.urlopen(baseurl)
+            data = j.read()
+            if encoding is None:
+                try:
+                    from feedparser import _getCharacterEncoding as enc
+                except ImportError:
+                    enc = lambda x, y: ('utf-8', 1)
+                encoding = enc(j.headers, data)[0]
+                if encoding == 'us-ascii':
+                    encoding = 'utf-8'
+        else:
+            data = open(file_, 'rb').read()
+            if encoding is None:
+                try:
+                    from chardet import detect
+                except ImportError:
+                    detect = lambda x: {'encoding': 'utf-8'}
+                encoding = detect(data)['encoding']
+    else:
+        data = wrap_read()
+
+    if hasattr(data, 'decode'):
+        data = data.decode(encoding)
+
+    h = HTML2Text(baseurl=baseurl)
+    # handle options
+    if options.ul_style_dash:
+        h.ul_item_mark = '-'
+    if options.em_style_asterisk:
+        h.emphasis_mark = '*'
+        h.strong_mark = '__'
+
+    h.body_width = options.body_width
+    h.list_indent = options.list_indent
+    h.ignore_emphasis = options.ignore_emphasis
+    h.ignore_links = options.ignore_links
+    h.ignore_images = options.ignore_images
+    h.google_doc = options.google_doc
+    h.hide_strikethrough = options.hide_strikethrough
+    h.escape_snob = options.escape_snob
+    h.bypass_tables = options.bypass_tables
+
+    wrapwrite(h.handle(data))
\ No newline at end of file
diff --git a/html2text/compat.py b/html2text/compat.py
new file mode 100644
index 0000000..4bb4824
--- /dev/null
+++ b/html2text/compat.py
@@ -0,0 +1,12 @@
+try:
+    import htmlentitydefs
+    import urlparse
+    import HTMLParser
+except ImportError:  # Python3
+    import html.entities as htmlentitydefs
+    import urllib.parse as urlparse
+    import html.parser as HTMLParser
+try:  # Python3
+    import urllib.request as urllib
+except ImportError:
+    import urllib
diff --git a/html2text/utils.py b/html2text/utils.py
new file mode 100644
index 0000000..0946930
--- /dev/null
+++ b/html2text/utils.py
@@ -0,0 +1,238 @@
+import sys
+from html2text import config
+
+from html2text.compat import htmlentitydefs
+
+
+def name2cp(k):
+    if k == 'apos':
+        return ord("'")
+    return htmlentitydefs.name2codepoint[k]
+
+
+unifiable_n = {}
+
+for k in config.UNIFIABLE.keys():
+    unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
+
+
+def hn(tag):
+    if tag[0] == 'h' and len(tag) == 2:
+        try:
+            n = int(tag[1])
+            if n in range(1, 10):
+                return n
+        except ValueError:
+            return 0
+
+
+def dumb_property_dict(style):
+    """
+    :returns: A hash of css attributes
+    """
+    out = dict([(x.strip(), y.strip()) for x, y in
+                [z.split(':', 1) for z in
+                 style.split(';') if ':' in z]])
+
+    return out
+
+
+def dumb_css_parser(data):
+    """
+    :type data: str
+
+    :returns: A hash of css selectors, each of which contains a hash of
+    css attributes.
+    :rtype: dict
+    """
+    # remove @import sentences
+    data += ';'
+    importIndex = data.find('@import')
+    while importIndex != -1:
+        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
+        importIndex = data.find('@import')
+
+    # parse the css. reverted from dictionary comprehension in order to
+    # support older pythons
+    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
+    try:
+        elements = dict([(a.strip(), dumb_property_dict(b))
+                         for a, b in elements])
+    except ValueError:
+        elements = {}  # not that important
+
+    return elements
+
+
+def element_style(attrs, style_def, parent_style):
+    """
+    :type attrs: dict
+    :type style_def: dict
+    :type style_def: dict
+
+    :returns: A hash of the 'final' style attributes of the element
+    :rtype: dict
+    """
+    style = parent_style.copy()
+    if 'class' in attrs:
+        for css_class in attrs['class'].split():
+            css_style = style_def['.' + css_class]
+            style.update(css_style)
+    if 'style' in attrs:
+        immediate_style = dumb_property_dict(attrs['style'])
+        style.update(immediate_style)
+
+    return style
+
+
+def google_list_style(style):
+    """
+    Finds out whether this is an ordered or unordered list
+
+    :type style: dict
+
+    :rtype: str
+    """
+    if 'list-style-type' in style:
+        list_style = style['list-style-type']
+        if list_style in ['disc', 'circle', 'square', 'none']:
+            return 'ul'
+
+    return 'ol'
+
+
+def google_has_height(style):
+    """
+    Check if the style of the element has the 'height' attribute
+    explicitly defined
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    if 'height' in style:
+        return True
+
+    return False
+
+
+def google_text_emphasis(style):
+    """
+    :type style: dict
+
+    :returns: A list of all emphasis modifiers of the element
+    :rtype: list
+    """
+    emphasis = []
+    if 'text-decoration' in style:
+        emphasis.append(style['text-decoration'])
+    if 'font-style' in style:
+        emphasis.append(style['font-style'])
+    if 'font-weight' in style:
+        emphasis.append(style['font-weight'])
+
+    return emphasis
+
+
+def google_fixed_width_font(style):
+    """
+    Check if the css of the current element defines a fixed width font
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    font_family = ''
+    if 'font-family' in style:
+        font_family = style['font-family']
+    if 'Courier New' == font_family or 'Consolas' == font_family:
+        return True
+
+    return False
+
+
+def list_numbering_start(attrs):
+    """
+    Extract numbering from list element attributes
+
+    :type attrs: dict
+
+    :rtype: int or None
+    """
+    if 'start' in attrs:
+        try:
+            return int(attrs['start']) - 1
+        except ValueError:
+            pass
+
+    return 0
+
+
+def skipwrap(para):
+    # If the text begins with four spaces or one tab, it's a code block;
+    # don't wrap
+    if para[0:4] == '    ' or para[0] == '\t':
+        return True
+
+    # If the text begins with only two "--", possibly preceded by
+    # whitespace, that's an emdash; so wrap.
+    stripped = para.lstrip()
+    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
+        return False
+
+    # I'm not sure what this is for; I thought it was to detect lists,
+    # but there's a <br>-inside-<span> case in one of the tests that
+    # also depends upon it.
+    if stripped[0:1] == '-' or stripped[0:1] == '*':
+        return True
+
+    # If the text begins with a single -, *, or +, followed by a space,
+    # or an integer, followed by a ., followed by a space (in either
+    # case optionally proceeded by whitespace), it's a list; don't wrap.
+    if config.RE_ORDERED_LIST_MATCHER.match(stripped) or \
+            config.RE_UNORDERED_LIST_MATCHER.match(stripped):
+        return True
+
+    return False
+
+
+def wrapwrite(text):
+    text = text.encode('utf-8')
+    try:  # Python3
+        sys.stdout.buffer.write(text)
+    except AttributeError:
+        sys.stdout.write(text)
+
+
+def wrap_read():
+    """
+    :rtype: str
+    """
+    try:
+        return sys.stdin.read()
+    except AttributeError:
+        return sys.stdin.buffer.read()
+
+
+def escape_md(text):
+    """
+    Escapes markdown-sensitive characters within other markdown
+    constructs.
+    """
+    return config.RE_MD_CHARS_MATCHER.sub(r"\\\1", text)
+
+
+def escape_md_section(text, snob=False):
+    """
+    Escapes markdown-sensitive characters across whole document sections.
+    """
+    text = config.RE_MD_BACKSLASH_MATCHER.sub(r"\\\1", text)
+
+    if snob:
+        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r"\\\1", text)
+
+    text = config.RE_MD_DOT_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_PLUS_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_DASH_MATCHER.sub(r"\1\\\2", text)
+
+    return text
diff --git a/setup.py b/setup.py
index 7a47563..e8d939f 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.9.8",
+    version="2014.9.25",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
@@ -62,12 +62,11 @@
     ],
     entry_points="""
         [console_scripts]
-        html2text=html2text:main
+        html2text=html2text.cli:main
     """,
     license='GNU GPL 3',
     requires=requires_list,
-    py_modules=['html2text'],
-    packages=find_packages(),
+    packages=find_packages(exclude=['test']),
     include_package_data=True,
     zip_safe=False,
 )
diff --git a/test/test_html2text.py b/test/test_html2text.py
index 78b8bdd..2ea839d 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -39,8 +39,7 @@
 
 def test_command(fn, *args):
     args = list(args)
-    cmd_name = os.path.join(os.path.dirname(fn), '..', 'html2text/__init__.py')
-    cmd = [sys.executable, cmd_name]
+    cmd = [sys.executable, '-m', 'html2text.__init__']
 
     if '--googledoc' in args:
         args.remove('--googledoc')

=====================================================================
start time: Mon Sep 08 00:00:00 CST 2014
end time: Thu Sep 25 00:00:00 CST 2014
description: 
=========
----
* Feature #29, #27: Add simple table support with bypass option.
* Fix #20: Replace project website with: https://alir3z4.github.io/html2text/ .

commit message: 
commit 4d145e3f801ac54b15e23cf60e1ad0436717c0b1+ 1410181739 -----sp :: Include html2text pkg
commit 09fb2d4d46accd71887f32db7655df11e1aa1fc0 1410182073 -----sp :: Bump the version number
commit a2190c53f3dd7089e1b1022826fc829b32a24fb9+ 1410457895 -----sp :: Added simple tables support with bypass option
commit da214cabd55c03bb2d9e3f5399f9ac397acc7bd5+ 1410593418 -----sp :: Updated table implementation
commit fdb94c6252baf2719e6a7786d3d21054d450fd2e 1410593580 -----sp :: Fixed import typo
commit 98abe1aad101f1c1e688c337570ae2dd152418dc+ 1411135508 -----sp :: Remove old website address

hunks: 
diff --git a/ChangeLog.rst b/ChangeLog.rst
index a063208..52a440f 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,10 @@
+2014.9.8 - 2014-09-08
+=====================
+----
+
+* Fix #28: missing ``html2text`` package in installation.
+
+
 2014.9.7 - 2014-09-07
 =====================
 ----
diff --git a/README.md b/README.md
index ceafb3c..3eabd82 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# [html2text](http://www.aaronsw.com/2002/html2text/)
+# html2text
 
 [![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2text)
 [![Coverage Status](https://coveralls.io/repos/Alir3z4/html2text/badge.png)](https://coveralls.io/r/Alir3z4/html2text)
diff --git a/html2text/__init__.py b/html2text/__init__.py
index 6d0b700..6f1badb 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -5,7 +5,7 @@
 from html2text import config
 
 
-__version__ = "2014.9.7"
+__version__ = "2014.9.8"
 
 
 # TODO:
diff --git a/setup.py b/setup.py
index 63c3f38..7a47563 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.9.7",
+    version="2014.9.8",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",

=====================================================================
start time: Sun Sep 07 00:00:00 CST 2014
end time: Mon Sep 08 00:00:00 CST 2014
description: 
========
----
* Fix #28: missing ``html2text`` package in installation.

commit message: 
commit 750a66d7074cc13cfdf8a736df40a2f6ed637a8a+ 1410096080 -----sp :: Update changelog for #25
commit db19569c9bcbfc96e8c1d61aa03232a608c34191+ 1410096117 -----sp :: Better to be authors/contributors ;)
commit f24283171c663502ce90d5e4bc418fdb575bf8de+ 1410096239 -----sp :: Bump version for release 2014.9.7

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
index b62454d..bf17c10 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -1,6 +1,6 @@
 ``html2text`` was Originally written by Aaron Swartz.
 
-The AUTHORS are (and/or have been):
+The AUTHORS/Contributors are (and/or have been):
 
     * Aaron Swartz
     * Yariv Barkan
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 01bb626..a063208 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,4 +1,4 @@
-0000.0.0 - 0000-00-00
+2014.9.7 - 2014-09-07
 =====================
 ----
 
diff --git a/html2text/__init__.py b/html2text/__init__.py
index e6f6120..6d0b700 100644
--- a/html2text/__init__.py
+++ b/html2text/__init__.py
@@ -5,7 +5,7 @@
 from html2text import config
 
 
-__version__ = "2014.7.3"
+__version__ = "2014.9.7"
 
 
 # TODO:
diff --git a/setup.py b/setup.py
index 550e4f7..439d2a4 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
 
 setup(
     name="html2text",
-    version="2014.7.3",
+    version="2014.9.7",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",

=====================================================================
start time: Thu Jul 03 00:00:00 CST 2014
end time: Sun Sep 07 00:00:00 CST 2014
description: 
========
----
* Fix ``unicode``/``type`` error in memory leak unit-test.
* Feature #16: Remove ``install_deps.py``.
* Feature #17: Add status badges via pypin.
* Feature #18: Add ``Python`` ``3.4`` to travis config file.
* Feature #19: Bring ``html2text`` to a separate module and take out the ``conf``/``constant`` variables.
* Feature #21: Remove meta vars from ``html2text.py`` file header.
* Fix: Fix TypeError when parsing tags like <img src='foo' alt>. Fixed in #25.

commit message: 
commit f91a6aa2928378e89b8cdceec2f4ada5abfd9801 1404321416 -----sp :: Don't bring value of previous calls of handle() to the new one.
commit d1c591bbaf16e30a0c5dd7374bda62089da4a778 1404321913 -----sp :: Add coverageall to .travis.yml
commit 009623b63b3b9dfeb0814331d5850852a2f54ccf 1404409857 -----sp :: Merge pull request #12 from mcepl/11_kill_outtext
commit a1373ae778b5f831e51866e8d5cb2657c34eb760 1404410247 -----sp :: Merge branch 'development' of https://github.com/html2text/html2text
commit 06c2d4e9cafe060a08b7ceb2c243bfb5b2fe2544 1404410394 -----sp :: Update changelog
commit 9bc91a85e6ffc8170caf3044289cffe2653ade1c 1404410606 -----sp :: Remove the weirdness
commit 20f87643f7af660566729f6c4c1e3b8f67908b12 1404410622 -----sp :: Fix copy typo
commit 7cd5f309807c0f61f54a2ad5a1af16df77edc7fa 1404410640 -----sp :: Remove the prs since it's unnessary
commit a1a66d70d2b154b81e5708002caf5506ea8cf262 1404410920 -----sp :: Remove anchor-undefined-href to test module
commit 7bb3e60658248262a769c554ee420efc231481f8 1404410976 -----sp :: Update version number
commit bdbc9ff55ec4595d7a0dcd57fbdccaa5bf6b4ed5 1404411026 -----sp :: Ignore .coverage
commit aaa52040d00115fab5a6a6e4672217f9c24ff7b0 1404411857 -----sp :: bump the version in setup.py
commit 96c2b096dedff6b32996c23fdc9e333c5c6c34af 1404453990 -----sp :: Options in table
commit 4118a447488b3995b38b2eacdde5348ac31d5f04 1404454126 -----sp :: Some markdown eye candy job
commit 1fa339cfb6496c0323da9c187230908a8b3971f2 1404454198 -----sp :: Fix running tests command
commit 53c683b06e35b309fefaceeedcd09365259b8877+ 1404456825 -----sp :: Remove meta vars
commit 8e05335c5d914792ce08a9289f431cf39cd90b6a 1404456897 -----sp :: Explicit except
commit ca7354b5be2b18bb91a2a26d62efef72e22de570 1404457171 -----sp :: Add docstring to dumb_property_dict
commit 939f8eddd105570271503b127bb7b2bcf6e06b81 1404457179 -----sp :: Add docstring to dumb_css_parser
commit 0c20cf12ef95906f9e595ccfb5c06673c9c0d440 1404457190 -----sp :: Add docstring to element_style
commit 7eb2e4eba74129b29c0ce1c5d70774228099f2a0+ 1404457757 -----sp :: Move html2text to separate python package
commit 60c3709f858b0694441fdfbd1e2390d02207cb3d 1404457770 -----sp :: Fix cmd_name
commit c2da06b05d25c195eeb3112f0e76f1495abc8989 1404457823 -----sp :: Tiny pep8
commit 02d126c0260692338ce9075e0711e0967c960f4e+ 1404458412 -----sp :: Move const and conf vars to config.py module
commit 192ca940f8f65b4489d46ae523e9689fd1ca0366+ 1404458421 -----sp :: Using config module
commit 75dfb51b436e5a6888be6ba0207fb625f0176d73 1404458524 -----sp :: Code eye candy everybody
commit f93441c184fd5efeff6abccfc8b4c180cc197be9 1404459713 -----sp :: Eye candy and docstring
commit b1733bf8a160558eb77eaf3d5a0fb95424a72205 1404459800 -----sp :: Docstring on escape_md_section
commit ce58eb5bb04e01d5d2a66e432fbbf0497710a145 1404459816 -----sp :: Docstring on escape_md
commit dc3dfc6b6de5b8dc190470aabbe85ed42628281b 1404459843 -----sp :: remove regex compiled vars to config
commit c5c89e9a25cb2f5b6d7a7dee4219b3b2211b7b36 1404459861 -----sp :: config var names refactoring
commit 08c136697e1006b1b45ef7f80b9813ce74b9af8f 1404460067 -----sp :: Eye candy on defining options
commit 08683776e959b13fb179b8a17daca18af9f9536d 1404460142 -----sp :: Merge branch 'master' of github.com:Alir3z4/html2text
commit 2f33f950be23c11c810703de65507429b63b30f4 1404460231 -----sp :: Add --escape-all option to readme
commit 0d50cac958c144eaa147b923453340a1d0b19b29 1404475765 -----sp :: Fix setup.py test to actually fail when it should.
commit 30aec19fd5b8d382bfe842ffa99572237d2ead2b 1404475796 -----sp :: Python 3.2 doesn't have unicode strings.
commit 2d62f7837fd6943f6aeeca52ec6822cf7b7b5282+ 1404523337 -----sp :: add python 3.4
commit 6ac6cc78d8cec3a8a70f18cd29f251737bd271b7+ 1404523729 -----sp :: Merge pull request #18 from sciunto/travis
commit 01d21b37cf7b1e17062fdd8caa8d72fdbac7988b+ 1404524045 -----sp :: Fix badge status before going for pypim
commit 9b0223d57ca0699a8e99492c27407facf2cfccc9 1404690105 -----sp :: Add more docstring to optwrap
commit f69a8e09f689a6ba162d43faca40206769bd4b55 1404690116 -----sp :: Add more docstring to google_nest_count
commit c340b99bb0a808803b7d222a9cdf557ba0513f34 1404690138 -----sp :: Removed 2 blank lines to make the file fully PEP8 ;)
commit 5f44c9dd80d85ce64933bf956a6b4aec7dd145b4 1404690671 -----sp :: Merge branch 'master' of github.com:html2text/html2text
commit c1cb8cb3f9912ac6e11dd1b6d4039ea086d9990e 1404691815 -----sp :: Set the issue number
commit 10181387695af6682c6168168a827b877c0c5b68 1404691833 -----sp :: Update the changelog
commit efa5200d15304dba5ae1b4fd290b0c9758cc28fc+ 1404692159 -----sp :: Remove install_deps.py
commit 5e80d707c2d16455a2a5605c1ecbfb1adb952c40 1404692637 -----sp :: Merge pull request #22 from Alir3z4/feature-#16-remove-install-deps-py
commit a020e4207b2a25ff6ca42e5ed9dd5eefd860432b 1404693425 -----sp :: Add Downloads
commit c17e48f5b52fb7e986f6a46997fec02bd501a36d+ 1404693433 -----sp :: Add version badge
commit 84c73f7d6cddd592d24dc4c62cb2e865c6e17439+ 1404693445 -----sp :: Add Egg badge
commit 7f0d6dec88c1ba8af5ef2d027a6a6026ccffc642+ 1404693455 -----sp :: Add Wheel badge
commit a8e73a82b3a3bfe91b6eed5227d8870d5b0b4177+ 1404693465 -----sp :: Add format badge
commit e47b9ce86146014ebc01ad63d8d7c1bc19ca215c+ 1404693477 -----sp :: Add License badge
commit d2de82921abbb5fa9e5e704c676c62e9c2c72c0c 1404693569 -----sp :: Update changelog
commit f61bdf4322f40bfba6c539905055f1986a75ecd5 1404693688 -----sp :: Merge pull request #23 from Alir3z4/feature-#17-pypin-time
commit aa9ae9cda56d6f3e38544bd6cff080fb59a37be6+ 1407544016 -----sp :: Fix TypeError when parsing tags like <img src='foo' alt>
commit 53eb2a5884ed9e489bee079e4a6f9071ca072515+ 1407546539 -----sp :: Fix TypeError when attrs['href'] is None in handle_tag.
commit 4f46c7d40828d307fd476f555beaf8aa93a1f22a+ 1407604008 -----sp :: Merge pull request #25 from inboxapp/master

hunks: 
diff --git a/.gitignore b/.gitignore
index 5fa75b9..0eaa555 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,4 @@
 dist
 *.egg-info
 .idea
+.coverage
diff --git a/.travis.yml b/.travis.yml
index 02b10c8..66b5fe4 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,6 +5,12 @@
   - "pypy"
   - "3.2"
   - "3.3"
+  - "3.4"
+install:
+    - pip install coveralls
 before_script:
-  - "python install_deps.py"
-script: PYTHONPATH=$PYTHONPATH:. python test/test_html2text.py -v
+  - '[ "${TRAVIS_PYTHON_VERSION}" = "2.6" ] && pip install --use-mirrors unittest2 || /bin/true'
+script:
+  PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
+after_success:
+    coveralls
diff --git a/AUTHORS.rst b/AUTHORS.rst
index c7ea1ce..b62454d 100644
--- a/AUTHORS.rst
+++ b/AUTHORS.rst
@@ -3,7 +3,6 @@
 The AUTHORS are (and/or have been):
 
     * Aaron Swartz
-    * Alireza Savand
     * Yariv Barkan
     * Alex Musayev
     * Matěj Cepl
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 56adc71..83cc1f5 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,3 +1,24 @@
+0000.0.0 - 0000-00-00
+=====================
+----
+
+* Fix ``unicode``/``type`` error in memory leak unit-test.
+* Feature #16: Remove ``install_deps.py``.
+* Feature #17: Add status badges via pypin.
+* Feature #18: Add ``Python`` ``3.4`` to travis config file.
+* Feature #19: Bring ``html2text`` to a separate module and take out the ``conf``/``constant`` variables.
+* Feature #21: Remove meta vars from ``html2text.py`` file header.
+
+
+2014.7.3 - 2014-07-03
+=====================
+----
+
+* Fix #8: Remove ``How to do a release`` section from README.md.
+* Fix #11: Include test directory markdown, html files.
+* Fix #13:  memory leak in using ``handle`` while keeping the old instance of ``html2text``.
+
+
 2014.4.5 - 2014-04-05
 =====================
 ----
diff --git a/README.md b/README.md
index 229e3e5..ceafb3c 100644
--- a/README.md
+++ b/README.md
@@ -1,29 +1,37 @@
 # [html2text](http://www.aaronsw.com/2002/html2text/)
 
 [![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2text)
+[![Coverage Status](https://coveralls.io/repos/Alir3z4/html2text/badge.png)](https://coveralls.io/r/Alir3z4/html2text)
+[![Downloads](https://pypip.in/d/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Version](https://pypip.in/v/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Egg?](https://pypip.in/egg/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Wheel?](https://pypip.in/wheel/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![Format](https://pypip.in/format/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
+[![License](https://pypip.in/license/html2text/badge.png)](https://pypi.python.org/pypi/html2text/)
 
 
 html2text is a Python script that converts a page of HTML into clean, easy-to-read plain ASCII text. Better yet, that ASCII also happens to be valid Markdown (a text-to-HTML format).
 
+
 Usage: `html2text.py [(filename|url) [encoding]]`
 
-    Options:
-      --version             show program's version number and exit
-      -h, --help            show this help message and exit
-      --ignore-links        don't include any formatting for links
-      --ignore-images       don't include any formatting for images
-      -g, --google-doc      convert an html-exported Google Document
-      -d, --dash-unordered-list
-                            use a dash rather than a star for unordered list items
-      -b BODY_WIDTH, --body-width=BODY_WIDTH
-                            number of characters per output line, 0 for no wrap
-      -i LIST_INDENT, --google-list-indent=LIST_INDENT
-                            number of pixels Google indents nested lists
-      -s, --hide-strikethrough
-                            hide strike-through text. only relevent when -g is
-                            specified as well
 
-Or you can use it from within Python:
+| Option                                                 | Description            
+|--------------------------------------------------------|--------------------------------------------------
+| `--version`                                            | Show program's version number and exit 
+| `-h`, `--help`                                         | Show this help message and exit      
+| `--ignore-links`                                       | Don't include any formatting for links
+|`--ignore-images`                                       | Don't include any formatting for images
+|`-g`, `--google-doc`                                    | Convert an html-exported Google Document
+|`-d`, `--dash-unordered-list`                           | Use a dash rather than a star for unordered list items
+|`-b` `BODY_WIDTH`, `--body-width`=`BODY_WIDTH`          | Number of characters per output line, `0` for no wrap
+|`-i` `LIST_INDENT`, `--google-list-indent`=`LIST_INDENT`| Number of pixels Google indents nested lists
+|`-s`, `--hide-strikethrough`                            | Hide strike-through text. only relevent when `-g` is specified as well
+|`--escape-all`                                          | Escape all special characters.  Output is less readable, but avoids corner case formatting issues.
+
+
+
+Or you can use it from within `Python`:
 
     import html2text
     print html2text.html2text("<p>Hello, world.</p>")
@@ -48,12 +56,6 @@
 ```
 
 
-## How to do a release
-
-1. Update the version in `html2text.py`
-2. Update the version in `setup.py`
-3. Run `python setup.py sdist upload`
-
 ## How to run unit tests
 
-    python test/test_html2text.py -v
+    PYTHONPATH=$PYTHONPATH:. coverage run --source=html2text setup.py test -v
diff --git a/anchor-undefined-href.html b/anchor-undefined-href.html
deleted file mode 100644
index 2019751..0000000
--- a/anchor-undefined-href.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<html>
-   <body>
-      <a href class="nolink">anchor</a>
-   </body>
-</html>
diff --git a/html2text.py b/html2text.py
deleted file mode 100755
index f1e3984..0000000
--- a/html2text.py
+++ /dev/null
@@ -1,1038 +0,0 @@
-#!/usr/bin/env python
-# coding: utf-8
-"""html2text: Turn HTML into equivalent Markdown-structured text."""
-from __future__ import division
-__version__ = "2014.4.5"
-__author__ = "Aaron Swartz (me@aaronsw.com)"
-__copyright__ = "(C) 2004-2008 Aaron Swartz. GNU GPL 3."
-__contributors__ = ["Martin 'Joey' Schulze", "Ricardo Reyes",
-                    "Kevin Jay North", "Matěj Cepl"]
-
-# TODO:
-#   Support decoded entities with unifiable.
-
-try:
-    True
-except NameError:
-    setattr(__builtins__, 'True', 1)
-    setattr(__builtins__, 'False', 0)
-
-
-try:
-    import htmlentitydefs
-    import urlparse
-    import HTMLParser
-except ImportError:  # Python3
-    import html.entities as htmlentitydefs
-    import urllib.parse as urlparse
-    import html.parser as HTMLParser
-try:  # Python3
-    import urllib.request as urllib
-except:
-    import urllib
-import optparse
-import re
-import sys
-
-try:
-    from textwrap import wrap
-except:
-    pass
-
-# Use Unicode characters instead of their ascii psuedo-replacements
-UNICODE_SNOB = 0
-
-# Escape all special characters.  Output is less readable, but avoids
-# corner case formatting issues.
-ESCAPE_SNOB = 0
-
-# Put the links after each paragraph instead of at the end.
-LINKS_EACH_PARAGRAPH = 0
-
-# Wrap long lines at position. 0 for no wrapping. (Requires Python 2.3.)
-BODY_WIDTH = 78
-
-# Don't show internal links (href="#local-anchor") -- corresponding link
-# targets won't be visible in the plain text file anyway.
-SKIP_INTERNAL_LINKS = True
-
-# Use inline, rather than reference, formatting for images and links
-INLINE_LINKS = True
-
-# Number of pixels Google indents nested lists
-GOOGLE_LIST_INDENT = 36
-
-IGNORE_ANCHORS = False
-IGNORE_IMAGES = False
-IGNORE_EMPHASIS = False
-
-### Entity Nonsense ###
-# For checking space-only lines on line 771
-SPACE_RE = re.compile(r'\s\+')
-
-
-def name2cp(k):
-    if k == 'apos':
-        return ord("'")
-    return htmlentitydefs.name2codepoint[k]
-
-
-unifiable = {'rsquo': "'", 'lsquo': "'", 'rdquo': '"', 'ldquo': '"',
-             'copy': '(C)', 'mdash': '--', 'nbsp': ' ', 'rarr': '->',
-             'larr': '<-', 'middot': '*', 'ndash': '-', 'oelig': 'oe',
-             'aelig': 'ae', 'agrave': 'a', 'aacute': 'a', 'acirc': 'a',
-             'atilde': 'a', 'auml': 'a', 'aring': 'a', 'egrave': 'e',
-             'eacute': 'e', 'ecirc': 'e', 'euml': 'e', 'igrave': 'i',
-             'iacute': 'i', 'icirc': 'i', 'iuml': 'i', 'ograve': 'o',
-             'oacute': 'o', 'ocirc': 'o', 'otilde': 'o', 'ouml': 'o',
-             'ugrave': 'u', 'uacute': 'u', 'ucirc': 'u', 'uuml': 'u',
-             'lrm': '', 'rlm': ''}
-
-unifiable_n = {}
-
-for k in unifiable.keys():
-    unifiable_n[name2cp(k)] = unifiable[k]
-
-
-### End Entity Nonsense ###
-def hn(tag):
-    if tag[0] == 'h' and len(tag) == 2:
-        try:
-            n = int(tag[1])
-            if n in range(1, 10):
-                return n
-        except ValueError:
-            return 0
-
-
-def dumb_property_dict(style):
-    """returns a hash of css attributes"""
-    out = dict([(x.strip(), y.strip()) for x, y in
-               [z.split(':', 1) for z in
-               style.split(';') if ':' in z]])
-    return out
-
-
-def dumb_css_parser(data):
-    """returns a hash of css selectors, each of which contains a hash of
-    css attributes"""
-    # remove @import sentences
-    data += ';'
-    importIndex = data.find('@import')
-    while importIndex != -1:
-        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
-        importIndex = data.find('@import')
-
-    # parse the css. reverted from dictionary compehension in order to
-    # support older pythons
-    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
-    try:
-        elements = dict([(a.strip(), dumb_property_dict(b))
-                        for a, b in elements])
-    except ValueError:
-        elements = {}  # not that important
-
-    return elements
-
-
-def element_style(attrs, style_def, parent_style):
-    """returns a hash of the 'final' style attributes of the element"""
-    style = parent_style.copy()
-    if 'class' in attrs:
-        for css_class in attrs['class'].split():
-            css_style = style_def['.' + css_class]
-            style.update(css_style)
-    if 'style' in attrs:
-        immediate_style = dumb_property_dict(attrs['style'])
-        style.update(immediate_style)
-    return style
-
-
-def google_list_style(style):
-    """finds out whether this is an ordered or unordered list"""
-    if 'list-style-type' in style:
-        list_style = style['list-style-type']
-        if list_style in ['disc', 'circle', 'square', 'none']:
-            return 'ul'
-    return 'ol'
-
-
-def google_has_height(style):
-    """check if the style of the element has the 'height' attribute
-    explicitly defined"""
-    if 'height' in style:
-        return True
-    return False
-
-
-def google_text_emphasis(style):
-    """return a list of all emphasis modifiers of the element"""
-    emphasis = []
-    if 'text-decoration' in style:
-        emphasis.append(style['text-decoration'])
-    if 'font-style' in style:
-        emphasis.append(style['font-style'])
-    if 'font-weight' in style:
-        emphasis.append(style['font-weight'])
-    return emphasis
-
-
-def google_fixed_width_font(style):
-    """check if the css of the current element defines a fixed width font"""
-    font_family = ''
-    if 'font-family' in style:
-        font_family = style['font-family']
-    if 'Courier New' == font_family or 'Consolas' == font_family:
-        return True
-    return False
-
-
-def list_numbering_start(attrs):
-    """extract numbering from list element attributes"""
-    if 'start' in attrs:
-        try:
-            return int(attrs['start']) - 1
-        except ValueError:
-            pass
-
-    return 0
-
-
-class HTML2Text(HTMLParser.HTMLParser):
-    def __init__(self, out=None, baseurl='', bodywidth=BODY_WIDTH):
-        HTMLParser.HTMLParser.__init__(self)
-
-        # Config options
-        self.unicode_snob = UNICODE_SNOB
-        self.escape_snob = ESCAPE_SNOB
-        self.links_each_paragraph = LINKS_EACH_PARAGRAPH
-        self.body_width = bodywidth
-        self.skip_internal_links = SKIP_INTERNAL_LINKS
-        self.inline_links = INLINE_LINKS
-        self.google_list_indent = GOOGLE_LIST_INDENT
-        self.ignore_links = IGNORE_ANCHORS
-        self.ignore_images = IGNORE_IMAGES
-        self.ignore_emphasis = IGNORE_EMPHASIS
-        self.google_doc = False
-        self.ul_item_mark = '*'
-        self.emphasis_mark = '_'
-        self.strong_mark = '**'
-
-        if out is None:
-            self.out = self.outtextf
-        else:
-            self.out = out
-
-        # empty list to store output characters before they are "joined"
-        self.outtextlist = []
-
-        try:
-            self.outtext = unicode()
-        except NameError:  # Python3
-            self.outtext = str()
-
-        self.quiet = 0
-        self.p_p = 0  # number of newline character to print before next output
-        self.outcount = 0
-        self.start = 1
-        self.space = 0
-        self.a = []
-        self.astack = []
-        self.maybe_automatic_link = None
-        self.absolute_url_matcher = re.compile(r'^[a-zA-Z+]+://')
-        self.acount = 0
-        self.list = []
-        self.blockquote = 0
-        self.pre = 0
-        self.startpre = 0
-        self.code = False
-        self.br_toggle = ''
-        self.lastWasNL = 0
-        self.lastWasList = False
-        self.style = 0
-        self.style_def = {}
-        self.tag_stack = []
-        self.emphasis = 0
-        self.drop_white_space = 0
-        self.inheader = False
-        self.abbr_title = None  # current abbreviation definition
-        self.abbr_data = None  # last inner HTML (for abbr being defined)
-        self.abbr_list = {}  # stack of abbreviations to write later
-        self.baseurl = baseurl
-
-        try:
-            del unifiable_n[name2cp('nbsp')]
-        except KeyError:
-            pass
-        unifiable['nbsp'] = '&nbsp_place_holder;'
-
-    def feed(self, data):
-        data = data.replace("</' + 'script>", "</ignore>")
-        HTMLParser.HTMLParser.feed(self, data)
-
-    def handle(self, data):
-        self.feed(data)
-        self.feed("")
-        return self.optwrap(self.close())
-
-    def outtextf(self, s):
-        self.outtextlist.append(s)
-        if s:
-            self.lastWasNL = s[-1] == '\n'
-
-    def close(self):
-        HTMLParser.HTMLParser.close(self)
-
-        try:
-            nochr = unicode('')
-        except NameError:
-            nochr = str('')
-
-        self.pbr()
-        self.o('', 0, 'end')
-
-        self.outtext = nochr.join(self.outtextlist)
-        if self.unicode_snob:
-            try:
-                nbsp = unichr(name2cp('nbsp'))
-            except NameError:
-                nbsp = chr(name2cp('nbsp'))
-        else:
-            try:
-                nbsp = unichr(32)
-            except NameError:
-                nbsp = chr(32)
-        try:
-            self.outtext = self.outtext.replace(unicode('&nbsp_place_holder;'),
-                                                nbsp)
-        except NameError:
-            self.outtext = self.outtext.replace('&nbsp_place_holder;', nbsp)
-
-        # Clear self.outtextlist to avoid memory leak of its content to
-        # the next handling.
-        self.outtextlist = []
-
-        return self.outtext
-
-    def handle_charref(self, c):
-        self.o(self.charref(c), 1)
-
-    def handle_entityref(self, c):
-        self.o(self.entityref(c), 1)
-
-    def handle_starttag(self, tag, attrs):
-        self.handle_tag(tag, attrs, 1)
-
-    def handle_endtag(self, tag):
-        self.handle_tag(tag, None, 0)
-
-    def previousIndex(self, attrs):
-        """ returns the index of certain set of attributes (of a link) in the
-            self.a list
-
-            If the set of attributes is not found, returns None
-        """
-        if 'href' not in attrs:
-            return None
-
-        i = -1
-        for a in self.a:
-            i += 1
-            match = 0
-
-            if ('href' in a) and a['href'] == attrs['href']:
-                if ('title' in a) or ('title' in attrs):
-                        if (('title' in a) and ('title' in attrs) and
-                                a['title'] == attrs['title']):
-                            match = True
-                else:
-                    match = True
-
-            if match:
-                return i
-
-    def drop_last(self, nLetters):
-        if not self.quiet:
-            self.outtext = self.outtext[:-nLetters]
-
-    def handle_emphasis(self, start, tag_style, parent_style):
-        """handles various text emphases"""
-        tag_emphasis = google_text_emphasis(tag_style)
-        parent_emphasis = google_text_emphasis(parent_style)
-
-        # handle Google's text emphasis
-        strikethrough = 'line-through' in \
-            tag_emphasis and self.hide_strikethrough
-        bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
-        italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
-        fixed = google_fixed_width_font(tag_style) and not \
-            google_fixed_width_font(parent_style) and not self.pre
-
-        if start:
-            # crossed-out text must be handled before other attributes
-            # in order not to output qualifiers unnecessarily
-            if bold or italic or fixed:
-                self.emphasis += 1
-            if strikethrough:
-                self.quiet += 1
-            if italic:
-                self.o(self.emphasis_mark)
-                self.drop_white_space += 1
-            if bold:
-                self.o(self.strong_mark)
-                self.drop_white_space += 1
-            if fixed:
-                self.o('`')
-                self.drop_white_space += 1
-                self.code = True
-        else:
-            if bold or italic or fixed:
-                # there must not be whitespace before closing emphasis mark
-                self.emphasis -= 1
-                self.space = 0
-                self.outtext = self.outtext.rstrip()
-            if fixed:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(1)
-                    self.drop_white_space -= 1
-                else:
-                    self.o('`')
-                self.code = False
-            if bold:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(2)
-                    self.drop_white_space -= 1
-                else:
-                    self.o(self.strong_mark)
-            if italic:
-                if self.drop_white_space:
-                    # empty emphasis, drop it
-                    self.drop_last(1)
-                    self.drop_white_space -= 1
-                else:
-                    self.o(self.emphasis_mark)
-            # space is only allowed after *all* emphasis marks
-            if (bold or italic) and not self.emphasis:
-                    self.o(" ")
-            if strikethrough:
-                self.quiet -= 1
-
-    def handle_tag(self, tag, attrs, start):
-        #attrs = fixattrs(attrs)
-        # attrs is None for endtags
-        if attrs is None:
-            attrs = {}
-        else:
-            attrs = dict(attrs)
-
-        if self.google_doc:
-            # the attrs parameter is empty for a closing tag. in addition, we
-            # need the attributes of the parent nodes in order to get a
-            # complete style description for the current element. we assume
-            # that google docs export well formed html.
-            parent_style = {}
-            if start:
-                if self.tag_stack:
-                    parent_style = self.tag_stack[-1][2]
-                tag_style = element_style(attrs, self.style_def, parent_style)
-                self.tag_stack.append((tag, attrs, tag_style))
-            else:
-                dummy, attrs, tag_style = self.tag_stack.pop()
-                if self.tag_stack:
-                    parent_style = self.tag_stack[-1][2]
-
-        if hn(tag):
-            self.p()
-            if start:
-                self.inheader = True
-                self.o(hn(tag) * "#" + ' ')
-            else:
-                self.inheader = False
-                return  # prevent redundant emphasis marks on headers
-
-        if tag in ['p', 'div']:
-            if self.google_doc:
-                if start and google_has_height(tag_style):
-                    self.p()
-                else:
-                    self.soft_br()
-            else:
-                self.p()
-
-        if tag == "br" and start:
-            self.o("  \n")
-
-        if tag == "hr" and start:
-            self.p()
-            self.o("* * *")
-            self.p()
-
-        if tag in ["head", "style", 'script']:
-            if start:
-                self.quiet += 1
-            else:
-                self.quiet -= 1
-
-        if tag == "style":
-            if start:
-                self.style += 1
-            else:
-                self.style -= 1
-
-        if tag in ["body"]:
-            self.quiet = 0  # sites like 9rules.com never close <head>
-
-        if tag == "blockquote":
-            if start:
-                self.p()
-                self.o('> ', 0, 1)
-                self.start = 1
-                self.blockquote += 1
-            else:
-                self.blockquote -= 1
-                self.p()
-
-        if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
-            self.o(self.emphasis_mark)
-        if tag in ['strong', 'b'] and not self.ignore_emphasis:
-            self.o(self.strong_mark)
-        if tag in ['del', 'strike', 's']:
-            if start:
-                self.o("<" + tag + ">")
-            else:
-                self.o("</" + tag + ">")
-
-        if self.google_doc:
-            if not self.inheader:
-                # handle some font attributes, but leave headers clean
-                self.handle_emphasis(start, tag_style, parent_style)
-
-        if tag in ["code", "tt"] and not self.pre:
-            self.o('`')  # TODO: `` `this` ``
-        if tag == "abbr":
-            if start:
-                self.abbr_title = None
-                self.abbr_data = ''
-                if ('title' in attrs):
-                    self.abbr_title = attrs['title']
-            else:
-                if self.abbr_title is not None:
-                    self.abbr_list[self.abbr_data] = self.abbr_title
-                    self.abbr_title = None
-                self.abbr_data = ''
-
-        if tag == "a" and not self.ignore_links:
-            if start:
-                if ('href' in attrs) and \
-                        (attrs['href'] is not None) and \
-                            not (self.skip_internal_links and
-                                attrs['href'].startswith('#')):
-                    self.astack.append(attrs)
-                    self.maybe_automatic_link = attrs['href']
-                else:
-                    self.astack.append(None)
-            else:
-                if self.astack:
-                    a = self.astack.pop()
-                    if self.maybe_automatic_link:
-                        self.maybe_automatic_link = None
-                    elif a:
-                        if self.inline_links:
-                            self.o("](" + escape_md(a['href']) + ")")
-                        else:
-                            i = self.previousIndex(a)
-                            if i is not None:
-                                a = self.a[i]
-                            else:
-                                self.acount += 1
-                                a['count'] = self.acount
-                                a['outcount'] = self.outcount
-                                self.a.append(a)
-                            self.o("][" + str(a['count']) + "]")
-
-        if tag == "img" and start and not self.ignore_images:
-            if ('src' in attrs):
-                attrs['href'] = attrs['src']
-                alt = attrs.get('alt', '')
-                self.o("![" + escape_md(alt) + "]")
-
-                if self.inline_links:
-                    self.o("(" + escape_md(attrs['href']) + ")")
-                else:
-                    i = self.previousIndex(attrs)
-                    if i is not None:
-                        attrs = self.a[i]
-                    else:
-                        self.acount += 1
-                        attrs['count'] = self.acount
-                        attrs['outcount'] = self.outcount
-                        self.a.append(attrs)
-                    self.o("[" + str(attrs['count']) + "]")
-
-        if tag == 'dl' and start:
-            self.p()
-        if tag == 'dt' and not start:
-            self.pbr()
-        if tag == 'dd' and start:
-            self.o('    ')
-        if tag == 'dd' and not start:
-            self.pbr()
-
-        if tag in ["ol", "ul"]:
-            # Google Docs create sub lists as top level lists
-            if (not self.list) and (not self.lastWasList):
-                self.p()
-            if start:
-                if self.google_doc:
-                    list_style = google_list_style(tag_style)
-                else:
-                    list_style = tag
-                numbering_start = list_numbering_start(attrs)
-                self.list.append({
-                    'name': list_style,
-                    'num': numbering_start
-                })
-            else:
-                if self.list:
-                    self.list.pop()
-            self.lastWasList = True
-        else:
-            self.lastWasList = False
-
-        if tag == 'li':
-            self.pbr()
-            if start:
-                if self.list:
-                    li = self.list[-1]
-                else:
-                    li = {'name': 'ul', 'num': 0}
-                if self.google_doc:
-                    nest_count = self.google_nest_count(tag_style)
-                else:
-                    nest_count = len(self.list)
-                # TODO: line up <ol><li>s > 9 correctly.
-                self.o("  " * nest_count)
-                if li['name'] == "ul":
-                    self.o(self.ul_item_mark + " ")
-                elif li['name'] == "ol":
-                    li['num'] += 1
-                    self.o(str(li['num']) + ". ")
-                self.start = 1
-
-        if tag in ["table", "tr"] and start:
-            self.p()
-        if tag == 'td':
-            self.pbr()
-
-        if tag == "pre":
-            if start:
-                self.startpre = 1
-                self.pre = 1
-            else:
-                self.pre = 0
-            self.p()
-
-    def pbr(self):
-        if self.p_p == 0:
-            self.p_p = 1
-
-    def p(self):
-        self.p_p = 2
-
-    def soft_br(self):
-        self.pbr()
-        self.br_toggle = '  '
-
-    def o(self, data, puredata=0, force=0):
-        if self.abbr_data is not None:
-            self.abbr_data += data
-
-        if not self.quiet:
-            if self.google_doc:
-                # prevent white space immediately after 'begin emphasis'
-                # marks ('**' and '_')
-                lstripped_data = data.lstrip()
-                if self.drop_white_space and not (self.pre or self.code):
-                    data = lstripped_data
-                if lstripped_data != '':
-                    self.drop_white_space = 0
-
-            if puredata and not self.pre:
-                # This is a very dangerous call ... it could mess up
-                # all handling of &nbsp; when not handled properly
-                # (see entityref)
-                data = re.sub(r'\s+', r' ', data)
-                if data and data[0] == ' ':
-                    self.space = 1
-                    data = data[1:]
-            if not data and not force:
-                return
-
-            if self.startpre:
-                #self.out(" :") #TODO: not output when already one there
-                if not data.startswith("\n"):  # <pre>stuff...
-                    data = "\n" + data
-
-            bq = (">" * self.blockquote)
-            if not (force and data and data[0] == ">") and self.blockquote:
-                bq += " "
-
-            if self.pre:
-                if not self.list:
-                    bq += "    "
-                #else: list content is already partially indented
-                for i in range(len(self.list)):
-                    bq += "    "
-                data = data.replace("\n", "\n" + bq)
-
-            if self.startpre:
-                self.startpre = 0
-                if self.list:
-                    # use existing initial indentation
-                    data = data.lstrip("\n")
-
-            if self.start:
-                self.space = 0
-                self.p_p = 0
-                self.start = 0
-
-            if force == 'end':
-                # It's the end.
-                self.p_p = 0
-                self.out("\n")
-                self.space = 0
-
-            if self.p_p:
-                self.out((self.br_toggle + '\n' + bq) * self.p_p)
-                self.space = 0
-                self.br_toggle = ''
-
-            if self.space:
-                if not self.lastWasNL:
-                    self.out(' ')
-                self.space = 0
-
-            if self.a and ((self.p_p == 2 and self.links_each_paragraph)
-                           or force == "end"):
-                if force == "end":
-                    self.out("\n")
-
-                newa = []
-                for link in self.a:
-                    if self.outcount > link['outcount']:
-                        self.out("   [" + str(link['count']) + "]: " +
-                                 urlparse.urljoin(self.baseurl, link['href']))
-                        if 'title' in link:
-                            self.out(" (" + link['title'] + ")")
-                        self.out("\n")
-                    else:
-                        newa.append(link)
-
-                # Don't need an extra line when nothing was done.
-                if self.a != newa:
-                    self.out("\n")
-
-                self.a = newa
-
-            if self.abbr_list and force == "end":
-                for abbr, definition in self.abbr_list.items():
-                    self.out("  *[" + abbr + "]: " + definition + "\n")
-
-            self.p_p = 0
-            self.out(data)
-            self.outcount += 1
-
-    def handle_data(self, data):
-        if r'\/script>' in data:
-            self.quiet -= 1
-
-        if self.style:
-            self.style_def.update(dumb_css_parser(data))
-
-        if not self.maybe_automatic_link is None:
-            href = self.maybe_automatic_link
-            if href == data and self.absolute_url_matcher.match(href):
-                self.o("<" + data + ">")
-                return
-            else:
-                self.o("[")
-                self.maybe_automatic_link = None
-
-        if not self.code and not self.pre:
-            data = escape_md_section(data, snob=self.escape_snob)
-        self.o(data, 1)
-
-    def unknown_decl(self, data):
-        pass
-
-    def charref(self, name):
-        if name[0] in ['x', 'X']:
-            c = int(name[1:], 16)
-        else:
-            c = int(name)
-
-        if not self.unicode_snob and c in unifiable_n.keys():
-            return unifiable_n[c]
-        else:
-            try:
-                return unichr(c)
-            except NameError:  # Python3
-                return chr(c)
-
-    def entityref(self, c):
-        if not self.unicode_snob and c in unifiable.keys():
-            return unifiable[c]
-        else:
-            try:
-                name2cp(c)
-            except KeyError:
-                return "&" + c + ';'
-            else:
-                if c == 'nbsp':
-                    return unifiable[c]
-                else:
-                    try:
-                        return unichr(name2cp(c))
-                    except NameError:  # Python3
-                        return chr(name2cp(c))
-
-    def replaceEntities(self, s):
-        s = s.group(1)
-        if s[0] == "#":
-            return self.charref(s[1:])
-        else:
-            return self.entityref(s)
-
-    r_unescape = re.compile(r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));")
-
-    def unescape(self, s):
-        return self.r_unescape.sub(self.replaceEntities, s)
-
-    def google_nest_count(self, style):
-        """calculate the nesting count of google doc lists"""
-        nest_count = 0
-        if 'margin-left' in style:
-            nest_count = int(style['margin-left'][:-2]) \
-                // self.google_list_indent
-        return nest_count
-
-    def optwrap(self, text):
-        """Wrap all paragraphs in the provided text."""
-        if not self.body_width:
-            return text
-
-        assert wrap, "Requires Python 2.3."
-        result = ''
-        newlines = 0
-        for para in text.split("\n"):
-            if len(para) > 0:
-                if not skipwrap(para):
-                    result += "\n".join(wrap(para, self.body_width))
-                    if para.endswith('  '):
-                        result += "  \n"
-                        newlines = 1
-                    else:
-                        result += "\n\n"
-                        newlines = 2
-                else:
-                    # Warning for the tempted!!!
-                    # Be aware that obvious replacement of this with
-                    # line.isspace()
-                    # DOES NOT work! Explanations are welcome.
-                    if not SPACE_RE.match(para):
-                        result += para + "\n"
-                        newlines = 1
-            else:
-                if newlines < 2:
-                    result += "\n"
-                    newlines += 1
-        return result
-
-ordered_list_matcher = re.compile(r'\d+\.\s')
-unordered_list_matcher = re.compile(r'[-\*\+]\s')
-md_chars_matcher = re.compile(r"([\\\[\]\(\)])")
-md_chars_matcher_all = re.compile(r"([`\*_{}\[\]\(\)#!])")
-md_dot_matcher = re.compile(r"""
-    ^             # start of line
-    (\s*\d+)      # optional whitespace and a number
-    (\.)          # dot
-    (?=\s)        # lookahead assert whitespace
-    """, re.MULTILINE | re.VERBOSE)
-md_plus_matcher = re.compile(r"""
-    ^
-    (\s*)
-    (\+)
-    (?=\s)
-    """, flags=re.MULTILINE | re.VERBOSE)
-md_dash_matcher = re.compile(r"""
-    ^
-    (\s*)
-    (-)
-    (?=\s|\-)     # followed by whitespace (bullet list, or spaced out hr)
-                  # or another dash (header or hr)
-    """, flags=re.MULTILINE | re.VERBOSE)
-slash_chars = r'\`*_{}[]()#+-.!'
-md_backslash_matcher = re.compile(r'''
-    (\\)          # match one slash
-    (?=[%s])      # followed by a char that requires escaping
-    ''' % re.escape(slash_chars),
-    flags=re.VERBOSE)
-
-
-def skipwrap(para):
-    # If the text begins with four spaces or one tab, it's a code block;
-    # don't wrap
-    if para[0:4] == '    ' or para[0] == '\t':
-        return True
-    # If the text begins with only two "--", possibly preceded by
-    # whitespace, that's an emdash; so wrap.
-    stripped = para.lstrip()
-    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
-        return False
-    # I'm not sure what this is for; I thought it was to detect lists,
-    # but there's a <br>-inside-<span> case in one of the tests that
-    # also depends upon it.
-    if stripped[0:1] == '-' or stripped[0:1] == '*':
-        return True
-    # If the text begins with a single -, *, or +, followed by a space,
-    # or an integer, followed by a ., followed by a space (in either
-    # case optionally preceeded by whitespace), it's a list; don't wrap.
-    if ordered_list_matcher.match(stripped) or \
-            unordered_list_matcher.match(stripped):
-        return True
-    return False
-
-
-def wrapwrite(text):
-    text = text.encode('utf-8')
-    try:  # Python3
-        sys.stdout.buffer.write(text)
-    except AttributeError:
-        sys.stdout.write(text)
-
-
-def html2text(html, baseurl='', bodywidth=BODY_WIDTH):
-    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
-    return h.handle(html)
-
-
-def unescape(s, unicode_snob=False):
-    h = HTML2Text()
-    h.unicode_snob = unicode_snob
-    return h.unescape(s)
-
-
-def escape_md(text):
-    """Escapes markdown-sensitive characters within other markdown
-    constructs."""
-    return md_chars_matcher.sub(r"\\\1", text)
-
-
-def escape_md_section(text, snob=False):
-    """Escapes markdown-sensitive characters across whole document sections."""
-    text = md_backslash_matcher.sub(r"\\\1", text)
-    if snob:
-        text = md_chars_matcher_all.sub(r"\\\1", text)
-    text = md_dot_matcher.sub(r"\1\\\2", text)
-    text = md_plus_matcher.sub(r"\1\\\2", text)
-    text = md_dash_matcher.sub(r"\1\\\2", text)
-    return text
-
-
-def main():
-    baseurl = ''
-
-    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
-                              version='%prog ' + __version__)
-    p.add_option("--ignore-emphasis", dest="ignore_emphasis",
-                 action="store_true", default=IGNORE_EMPHASIS,
-                 help="don't include any formatting for emphasis")
-    p.add_option("--ignore-links", dest="ignore_links", action="store_true",
-                 default=IGNORE_ANCHORS,
-                 help="don't include any formatting for links")
-    p.add_option("--ignore-images", dest="ignore_images", action="store_true",
-                 default=IGNORE_IMAGES,
-                 help="don't include any formatting for images")
-    p.add_option("-g", "--google-doc", action="store_true", dest="google_doc",
-                 default=False,
-                 help="convert an html-exported Google Document")
-    p.add_option("-d", "--dash-unordered-list", action="store_true",
-                 dest="ul_style_dash", default=False,
-                 help="use a dash rather than a star for unordered list items")
-    p.add_option("-e", "--asterisk-emphasis", action="store_true",
-                 dest="em_style_asterisk", default=False,
-                 help="use an asterisk rather than an underscore " +
-                 "for emphasized text")
-    p.add_option("-b", "--body-width", dest="body_width", action="store",
-                 type="int", default=BODY_WIDTH,
-                 help="number of characters per output line, 0 for no wrap")
-    p.add_option("-i", "--google-list-indent", dest="list_indent",
-                 action="store", type="int", default=GOOGLE_LIST_INDENT,
-                 help="number of pixels Google indents nested lists")
-    p.add_option("-s", "--hide-strikethrough", action="store_true",
-                 dest="hide_strikethrough", default=False,
-                 help="hide strike-through text. only relevant when -g is " +
-                 "specified as well")
-    p.add_option("--escape-all", action="store_true", dest="escape_snob",
-                 default=False,
-                 help="Escape all special characters.  Output is less " +
-                 "readable, but avoids corner case formatting issues.")
-    (options, args) = p.parse_args()
-
-    # process input
-    encoding = "utf-8"
-    if len(args) > 0:
-        file_ = args[0]
-        if len(args) == 2:
-            encoding = args[1]
-        if len(args) > 2:
-            p.error('Too many arguments')
-
-        if file_.startswith('http://') or file_.startswith('https://'):
-            baseurl = file_
-            j = urllib.urlopen(baseurl)
-            data = j.read()
-            if encoding is None:
-                try:
-                    from feedparser import _getCharacterEncoding as enc
-                except ImportError:
-                    enc = lambda x, y: ('utf-8', 1)
-                encoding = enc(j.headers, data)[0]
-                if encoding == 'us-ascii':
-                    encoding = 'utf-8'
-        else:
-            data = open(file_, 'rb').read()
-            if encoding is None:
-                try:
-                    from chardet import detect
-                except ImportError:
-                    detect = lambda x: {'encoding': 'utf-8'}
-                encoding = detect(data)['encoding']
-    else:
-        data = sys.stdin.read()
-
-    data = data.decode(encoding)
-    h = HTML2Text(baseurl=baseurl)
-    # handle options
-    if options.ul_style_dash:
-        h.ul_item_mark = '-'
-    if options.em_style_asterisk:
-        h.emphasis_mark = '*'
-        h.strong_mark = '__'
-
-    h.body_width = options.body_width
-    h.list_indent = options.list_indent
-    h.ignore_emphasis = options.ignore_emphasis
-    h.ignore_links = options.ignore_links
-    h.ignore_images = options.ignore_images
-    h.google_doc = options.google_doc
-    h.hide_strikethrough = options.hide_strikethrough
-    h.escape_snob = options.escape_snob
-
-    wrapwrite(h.handle(data))
-
-
-if __name__ == "__main__":
-    main()
diff --git a/html2text/__init__.py b/html2text/__init__.py
new file mode 100644
index 0000000..e6f6120
--- /dev/null
+++ b/html2text/__init__.py
@@ -0,0 +1,1063 @@
+#!/usr/bin/env python
+# coding: utf-8
+"""html2text: Turn HTML into equivalent Markdown-structured text."""
+from __future__ import division
+from html2text import config
+
+
+__version__ = "2014.7.3"
+
+
+# TODO:
+#   Support decoded entities with UNIFIABLE.
+
+try:
+    import htmlentitydefs
+    import urlparse
+    import HTMLParser
+except ImportError:  # Python3
+    import html.entities as htmlentitydefs
+    import urllib.parse as urlparse
+    import html.parser as HTMLParser
+try:  # Python3
+    import urllib.request as urllib
+except ImportError:
+    import urllib
+import optparse
+import re
+import sys
+
+try:
+    from textwrap import wrap
+except ImportError:
+    pass
+
+
+def name2cp(k):
+    if k == 'apos':
+        return ord("'")
+    return htmlentitydefs.name2codepoint[k]
+
+unifiable_n = {}
+
+for k in config.UNIFIABLE.keys():
+    unifiable_n[name2cp(k)] = config.UNIFIABLE[k]
+
+
+def hn(tag):
+    if tag[0] == 'h' and len(tag) == 2:
+        try:
+            n = int(tag[1])
+            if n in range(1, 10):
+                return n
+        except ValueError:
+            return 0
+
+
+def dumb_property_dict(style):
+    """
+    :returns: A hash of css attributes
+    """
+    out = dict([(x.strip(), y.strip()) for x, y in
+               [z.split(':', 1) for z in
+               style.split(';') if ':' in z]])
+    return out
+
+
+def dumb_css_parser(data):
+    """
+    :type data: str
+
+    :returns: A hash of css selectors, each of which contains a hash of
+    css attributes.
+    :rtype: dict
+    """
+    # remove @import sentences
+    data += ';'
+    importIndex = data.find('@import')
+    while importIndex != -1:
+        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
+        importIndex = data.find('@import')
+
+    # parse the css. reverted from dictionary comprehension in order to
+    # support older pythons
+    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
+    try:
+        elements = dict([(a.strip(), dumb_property_dict(b))
+                        for a, b in elements])
+    except ValueError:
+        elements = {}  # not that important
+
+    return elements
+
+
+def element_style(attrs, style_def, parent_style):
+    """
+    :type attrs: dict
+    :type style_def: dict
+    :type style_def: dict
+
+    :returns: A hash of the 'final' style attributes of the element
+    :rtype: dict
+    """
+    style = parent_style.copy()
+    if 'class' in attrs:
+        for css_class in attrs['class'].split():
+            css_style = style_def['.' + css_class]
+            style.update(css_style)
+    if 'style' in attrs:
+        immediate_style = dumb_property_dict(attrs['style'])
+        style.update(immediate_style)
+    return style
+
+
+def google_list_style(style):
+    """
+    Finds out whether this is an ordered or unordered list
+
+    :type style: dict
+
+    :rtype: str
+    """
+    if 'list-style-type' in style:
+        list_style = style['list-style-type']
+        if list_style in ['disc', 'circle', 'square', 'none']:
+            return 'ul'
+    return 'ol'
+
+
+def google_has_height(style):
+    """
+    Check if the style of the element has the 'height' attribute
+    explicitly defined
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    if 'height' in style:
+        return True
+    return False
+
+
+def google_text_emphasis(style):
+    """
+    :type style: dict
+
+    :returns: A list of all emphasis modifiers of the element
+    :rtype: list
+    """
+    emphasis = []
+    if 'text-decoration' in style:
+        emphasis.append(style['text-decoration'])
+    if 'font-style' in style:
+        emphasis.append(style['font-style'])
+    if 'font-weight' in style:
+        emphasis.append(style['font-weight'])
+    return emphasis
+
+
+def google_fixed_width_font(style):
+    """
+    Check if the css of the current element defines a fixed width font
+
+    :type style: dict
+
+    :rtype: bool
+    """
+    font_family = ''
+    if 'font-family' in style:
+        font_family = style['font-family']
+    if 'Courier New' == font_family or 'Consolas' == font_family:
+        return True
+    return False
+
+
+def list_numbering_start(attrs):
+    """
+    Extract numbering from list element attributes
+
+    :type attrs: dict
+
+    :rtype: int or None
+    """
+    if 'start' in attrs:
+        try:
+            return int(attrs['start']) - 1
+        except ValueError:
+            pass
+
+    return 0
+
+
+class HTML2Text(HTMLParser.HTMLParser):
+    def __init__(self, out=None, baseurl='', bodywidth=config.BODY_WIDTH):
+        """
+        Input parameters:
+            out: possible custom replacement for self.outtextf (which
+                 appends lines of text).
+            baseurl: base URL of the document we process
+        """
+        HTMLParser.HTMLParser.__init__(self)
+
+        # Config options
+        self.unicode_snob = config.UNICODE_SNOB
+        self.escape_snob = config.ESCAPE_SNOB
+        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH
+        self.body_width = bodywidth
+        self.skip_internal_links = config.SKIP_INTERNAL_LINKS
+        self.inline_links = config.INLINE_LINKS
+        self.google_list_indent = config.GOOGLE_LIST_INDENT
+        self.ignore_links = config.IGNORE_ANCHORS
+        self.ignore_images = config.IGNORE_IMAGES
+        self.ignore_emphasis = config.IGNORE_EMPHASIS
+        self.google_doc = False
+        self.ul_item_mark = '*'
+        self.emphasis_mark = '_'
+        self.strong_mark = '**'
+
+        if out is None:
+            self.out = self.outtextf
+        else:
+            self.out = out
+
+        # empty list to store output characters before they are "joined"
+        self.outtextlist = []
+
+        self.quiet = 0
+        self.p_p = 0  # number of newline character to print before next output
+        self.outcount = 0
+        self.start = 1
+        self.space = 0
+        self.a = []
+        self.astack = []
+        self.maybe_automatic_link = None
+        self.absolute_url_matcher = re.compile(r'^[a-zA-Z+]+://')
+        self.acount = 0
+        self.list = []
+        self.blockquote = 0
+        self.pre = 0
+        self.startpre = 0
+        self.code = False
+        self.br_toggle = ''
+        self.lastWasNL = 0
+        self.lastWasList = False
+        self.style = 0
+        self.style_def = {}
+        self.tag_stack = []
+        self.emphasis = 0
+        self.drop_white_space = 0
+        self.inheader = False
+        self.abbr_title = None  # current abbreviation definition
+        self.abbr_data = None  # last inner HTML (for abbr being defined)
+        self.abbr_list = {}  # stack of abbreviations to write later
+        self.baseurl = baseurl
+
+        try:
+            del unifiable_n[name2cp('nbsp')]
+        except KeyError:
+            pass
+        config.UNIFIABLE['nbsp'] = '&nbsp_place_holder;'
+
+    def feed(self, data):
+        data = data.replace("</' + 'script>", "</ignore>")
+        HTMLParser.HTMLParser.feed(self, data)
+
+    def handle(self, data):
+        self.feed(data)
+        self.feed("")
+        return self.optwrap(self.close())
+
+    def outtextf(self, s):
+        self.outtextlist.append(s)
+        if s:
+            self.lastWasNL = s[-1] == '\n'
+
+    def close(self):
+        HTMLParser.HTMLParser.close(self)
+
+        try:
+            nochr = unicode('')
+        except NameError:
+            nochr = str('')
+
+        self.pbr()
+        self.o('', 0, 'end')
+
+        outtext = nochr.join(self.outtextlist)
+        if self.unicode_snob:
+            try:
+                nbsp = unichr(name2cp('nbsp'))
+            except NameError:
+                nbsp = chr(name2cp('nbsp'))
+        else:
+            try:
+                nbsp = unichr(32)
+            except NameError:
+                nbsp = chr(32)
+        try:
+            outtext = outtext.replace(unicode('&nbsp_place_holder;'), nbsp)
+        except NameError:
+            outtext = outtext.replace('&nbsp_place_holder;', nbsp)
+
+        # Clear self.outtextlist to avoid memory leak of its content to
+        # the next handling.
+        self.outtextlist = []
+
+        return outtext
+
+    def handle_charref(self, c):
+        self.o(self.charref(c), 1)
+
+    def handle_entityref(self, c):
+        self.o(self.entityref(c), 1)
+
+    def handle_starttag(self, tag, attrs):
+        self.handle_tag(tag, attrs, 1)
+
+    def handle_endtag(self, tag):
+        self.handle_tag(tag, None, 0)
+
+    def previousIndex(self, attrs):
+        """
+        :type attrs: dict
+
+        :returns: The index of certain set of attributes (of a link) in the
+        self.a list. If the set of attributes is not found, returns None
+        :rtype: int
+        """
+        if 'href' not in attrs:
+            return None
+
+        i = -1
+        for a in self.a:
+            i += 1
+            match = 0
+
+            if ('href' in a) and a['href'] == attrs['href']:
+                if ('title' in a) or ('title' in attrs):
+                        if (('title' in a) and ('title' in attrs) and
+                                a['title'] == attrs['title']):
+                            match = True
+                else:
+                    match = True
+
+            if match:
+                return i
+
+    def handle_emphasis(self, start, tag_style, parent_style):
+        """
+        Handles various text emphases
+        """
+        tag_emphasis = google_text_emphasis(tag_style)
+        parent_emphasis = google_text_emphasis(parent_style)
+
+        # handle Google's text emphasis
+        strikethrough = 'line-through' in \
+            tag_emphasis and self.hide_strikethrough
+        bold = 'bold' in tag_emphasis and not 'bold' in parent_emphasis
+        italic = 'italic' in tag_emphasis and not 'italic' in parent_emphasis
+        fixed = google_fixed_width_font(tag_style) and not \
+            google_fixed_width_font(parent_style) and not self.pre
+
+        if start:
+            # crossed-out text must be handled before other attributes
+            # in order not to output qualifiers unnecessarily
+            if bold or italic or fixed:
+                self.emphasis += 1
+            if strikethrough:
+                self.quiet += 1
+            if italic:
+                self.o(self.emphasis_mark)
+                self.drop_white_space += 1
+            if bold:
+                self.o(self.strong_mark)
+                self.drop_white_space += 1
+            if fixed:
+                self.o('`')
+                self.drop_white_space += 1
+                self.code = True
+        else:
+            if bold or italic or fixed:
+                # there must not be whitespace before closing emphasis mark
+                self.emphasis -= 1
+                self.space = 0
+            if fixed:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o('`')
+                self.code = False
+            if bold:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o(self.strong_mark)
+            if italic:
+                if self.drop_white_space:
+                    # empty emphasis, drop it
+                    self.drop_white_space -= 1
+                else:
+                    self.o(self.emphasis_mark)
+            # space is only allowed after *all* emphasis marks
+            if (bold or italic) and not self.emphasis:
+                    self.o(" ")
+            if strikethrough:
+                self.quiet -= 1
+
+    def handle_tag(self, tag, attrs, start):
+        # attrs is None for endtags
+        if attrs is None:
+            attrs = {}
+        else:
+            attrs = dict(attrs)
+
+        if self.google_doc:
+            # the attrs parameter is empty for a closing tag. in addition, we
+            # need the attributes of the parent nodes in order to get a
+            # complete style description for the current element. we assume
+            # that google docs export well formed html.
+            parent_style = {}
+            if start:
+                if self.tag_stack:
+                    parent_style = self.tag_stack[-1][2]
+                tag_style = element_style(attrs, self.style_def, parent_style)
+                self.tag_stack.append((tag, attrs, tag_style))
+            else:
+                dummy, attrs, tag_style = self.tag_stack.pop()
+                if self.tag_stack:
+                    parent_style = self.tag_stack[-1][2]
+
+        if hn(tag):
+            self.p()
+            if start:
+                self.inheader = True
+                self.o(hn(tag) * "#" + ' ')
+            else:
+                self.inheader = False
+                return  # prevent redundant emphasis marks on headers
+
+        if tag in ['p', 'div']:
+            if self.google_doc:
+                if start and google_has_height(tag_style):
+                    self.p()
+                else:
+                    self.soft_br()
+            else:
+                self.p()
+
+        if tag == "br" and start:
+            self.o("  \n")
+
+        if tag == "hr" and start:
+            self.p()
+            self.o("* * *")
+            self.p()
+
+        if tag in ["head", "style", 'script']:
+            if start:
+                self.quiet += 1
+            else:
+                self.quiet -= 1
+
+        if tag == "style":
+            if start:
+                self.style += 1
+            else:
+                self.style -= 1
+
+        if tag in ["body"]:
+            self.quiet = 0  # sites like 9rules.com never close <head>
+
+        if tag == "blockquote":
+            if start:
+                self.p()
+                self.o('> ', 0, 1)
+                self.start = 1
+                self.blockquote += 1
+            else:
+                self.blockquote -= 1
+                self.p()
+
+        if tag in ['em', 'i', 'u'] and not self.ignore_emphasis:
+            self.o(self.emphasis_mark)
+        if tag in ['strong', 'b'] and not self.ignore_emphasis:
+            self.o(self.strong_mark)
+        if tag in ['del', 'strike', 's']:
+            if start:
+                self.o("<" + tag + ">")
+            else:
+                self.o("</" + tag + ">")
+
+        if self.google_doc:
+            if not self.inheader:
+                # handle some font attributes, but leave headers clean
+                self.handle_emphasis(start, tag_style, parent_style)
+
+        if tag in ["code", "tt"] and not self.pre:
+            self.o('`')  # TODO: `` `this` ``
+        if tag == "abbr":
+            if start:
+                self.abbr_title = None
+                self.abbr_data = ''
+                if ('title' in attrs):
+                    self.abbr_title = attrs['title']
+            else:
+                if self.abbr_title is not None:
+                    self.abbr_list[self.abbr_data] = self.abbr_title
+                    self.abbr_title = None
+                self.abbr_data = ''
+
+        if tag == "a" and not self.ignore_links:
+            if start:
+                if ('href' in attrs) and \
+                        (attrs['href'] is not None) and \
+                        not (self.skip_internal_links and
+                             attrs['href'].startswith('#')):
+                    self.astack.append(attrs)
+                    self.maybe_automatic_link = attrs['href']
+                else:
+                    self.astack.append(None)
+            else:
+                if self.astack:
+                    a = self.astack.pop()
+                    if self.maybe_automatic_link:
+                        self.maybe_automatic_link = None
+                    elif a:
+                        if self.inline_links:
+                            self.o("](" + escape_md(a['href']) + ")")
+                        else:
+                            i = self.previousIndex(a)
+                            if i is not None:
+                                a = self.a[i]
+                            else:
+                                self.acount += 1
+                                a['count'] = self.acount
+                                a['outcount'] = self.outcount
+                                self.a.append(a)
+                            self.o("][" + str(a['count']) + "]")
+
+        if tag == "img" and start and not self.ignore_images:
+            if 'src' in attrs:
+                attrs['href'] = attrs['src']
+                alt = attrs.get('alt') or ''
+                self.o("![" + escape_md(alt) + "]")
+
+                if self.inline_links:
+                    href = attrs.get('href') or ''
+                    self.o("(" + escape_md(href) + ")")
+                else:
+                    i = self.previousIndex(attrs)
+                    if i is not None:
+                        attrs = self.a[i]
+                    else:
+                        self.acount += 1
+                        attrs['count'] = self.acount
+                        attrs['outcount'] = self.outcount
+                        self.a.append(attrs)
+                    self.o("[" + str(attrs['count']) + "]")
+
+        if tag == 'dl' and start:
+            self.p()
+        if tag == 'dt' and not start:
+            self.pbr()
+        if tag == 'dd' and start:
+            self.o('    ')
+        if tag == 'dd' and not start:
+            self.pbr()
+
+        if tag in ["ol", "ul"]:
+            # Google Docs create sub lists as top level lists
+            if (not self.list) and (not self.lastWasList):
+                self.p()
+            if start:
+                if self.google_doc:
+                    list_style = google_list_style(tag_style)
+                else:
+                    list_style = tag
+                numbering_start = list_numbering_start(attrs)
+                self.list.append({
+                    'name': list_style,
+                    'num': numbering_start
+                })
+            else:
+                if self.list:
+                    self.list.pop()
+            self.lastWasList = True
+        else:
+            self.lastWasList = False
+
+        if tag == 'li':
+            self.pbr()
+            if start:
+                if self.list:
+                    li = self.list[-1]
+                else:
+                    li = {'name': 'ul', 'num': 0}
+                if self.google_doc:
+                    nest_count = self.google_nest_count(tag_style)
+                else:
+                    nest_count = len(self.list)
+                # TODO: line up <ol><li>s > 9 correctly.
+                self.o("  " * nest_count)
+                if li['name'] == "ul":
+                    self.o(self.ul_item_mark + " ")
+                elif li['name'] == "ol":
+                    li['num'] += 1
+                    self.o(str(li['num']) + ". ")
+                self.start = 1
+
+        if tag in ["table", "tr"] and start:
+            self.p()
+        if tag == 'td':
+            self.pbr()
+
+        if tag == "pre":
+            if start:
+                self.startpre = 1
+                self.pre = 1
+            else:
+                self.pre = 0
+            self.p()
+
+    def pbr(self):
+        if self.p_p == 0:
+            self.p_p = 1
+
+    def p(self):
+        self.p_p = 2
+
+    def soft_br(self):
+        self.pbr()
+        self.br_toggle = '  '
+
+    def o(self, data, puredata=0, force=0):
+        """
+        Deal with indentation and whitespace
+        """
+        if self.abbr_data is not None:
+            self.abbr_data += data
+
+        if not self.quiet:
+            if self.google_doc:
+                # prevent white space immediately after 'begin emphasis'
+                # marks ('**' and '_')
+                lstripped_data = data.lstrip()
+                if self.drop_white_space and not (self.pre or self.code):
+                    data = lstripped_data
+                if lstripped_data != '':
+                    self.drop_white_space = 0
+
+            if puredata and not self.pre:
+                # This is a very dangerous call ... it could mess up
+                # all handling of &nbsp; when not handled properly
+                # (see entityref)
+                data = re.sub(r'\s+', r' ', data)
+                if data and data[0] == ' ':
+                    self.space = 1
+                    data = data[1:]
+            if not data and not force:
+                return
+
+            if self.startpre:
+                #self.out(" :") #TODO: not output when already one there
+                if not data.startswith("\n"):  # <pre>stuff...
+                    data = "\n" + data
+
+            bq = (">" * self.blockquote)
+            if not (force and data and data[0] == ">") and self.blockquote:
+                bq += " "
+
+            if self.pre:
+                if not self.list:
+                    bq += "    "
+                #else: list content is already partially indented
+                for i in range(len(self.list)):
+                    bq += "    "
+                data = data.replace("\n", "\n" + bq)
+
+            if self.startpre:
+                self.startpre = 0
+                if self.list:
+                    # use existing initial indentation
+                    data = data.lstrip("\n")
+
+            if self.start:
+                self.space = 0
+                self.p_p = 0
+                self.start = 0
+
+            if force == 'end':
+                # It's the end.
+                self.p_p = 0
+                self.out("\n")
+                self.space = 0
+
+            if self.p_p:
+                self.out((self.br_toggle + '\n' + bq) * self.p_p)
+                self.space = 0
+                self.br_toggle = ''
+
+            if self.space:
+                if not self.lastWasNL:
+                    self.out(' ')
+                self.space = 0
+
+            if self.a and ((self.p_p == 2 and self.links_each_paragraph)
+                           or force == "end"):
+                if force == "end":
+                    self.out("\n")
+
+                newa = []
+                for link in self.a:
+                    if self.outcount > link['outcount']:
+                        self.out("   [" + str(link['count']) + "]: " +
+                                 urlparse.urljoin(self.baseurl, link['href']))
+                        if 'title' in link:
+                            self.out(" (" + link['title'] + ")")
+                        self.out("\n")
+                    else:
+                        newa.append(link)
+
+                # Don't need an extra line when nothing was done.
+                if self.a != newa:
+                    self.out("\n")
+
+                self.a = newa
+
+            if self.abbr_list and force == "end":
+                for abbr, definition in self.abbr_list.items():
+                    self.out("  *[" + abbr + "]: " + definition + "\n")
+
+            self.p_p = 0
+            self.out(data)
+            self.outcount += 1
+
+    def handle_data(self, data):
+        if r'\/script>' in data:
+            self.quiet -= 1
+
+        if self.style:
+            self.style_def.update(dumb_css_parser(data))
+
+        if not self.maybe_automatic_link is None:
+            href = self.maybe_automatic_link
+            if href == data and self.absolute_url_matcher.match(href):
+                self.o("<" + data + ">")
+                return
+            else:
+                self.o("[")
+                self.maybe_automatic_link = None
+
+        if not self.code and not self.pre:
+            data = escape_md_section(data, snob=self.escape_snob)
+        self.o(data, 1)
+
+    def unknown_decl(self, data):
+        pass
+
+    def charref(self, name):
+        if name[0] in ['x', 'X']:
+            c = int(name[1:], 16)
+        else:
+            c = int(name)
+
+        if not self.unicode_snob and c in unifiable_n.keys():
+            return unifiable_n[c]
+        else:
+            try:
+                return unichr(c)
+            except NameError:  # Python3
+                return chr(c)
+
+    def entityref(self, c):
+        if not self.unicode_snob and c in config.UNIFIABLE.keys():
+            return config.UNIFIABLE[c]
+        else:
+            try:
+                name2cp(c)
+            except KeyError:
+                return "&" + c + ';'
+            else:
+                if c == 'nbsp':
+                    return config.UNIFIABLE[c]
+                else:
+                    try:
+                        return unichr(name2cp(c))
+                    except NameError:  # Python3
+                        return chr(name2cp(c))
+
+    def replaceEntities(self, s):
+        s = s.group(1)
+        if s[0] == "#":
+            return self.charref(s[1:])
+        else:
+            return self.entityref(s)
+
+    def unescape(self, s):
+        return config.RE_UNESCAPE.sub(self.replaceEntities, s)
+
+    def google_nest_count(self, style):
+        """
+        Calculate the nesting count of google doc lists
+
+        :type style: dict
+
+        :rtype: int
+        """
+        nest_count = 0
+        if 'margin-left' in style:
+            nest_count = int(style['margin-left'][:-2]) \
+                // self.google_list_indent
+
+        return nest_count
+
+    def optwrap(self, text):
+        """
+        Wrap all paragraphs in the provided text.
+
+        :type text: str
+
+        :rtype: str
+        """
+        if not self.body_width:
+            return text
+
+        assert wrap, "Requires Python 2.3."
+        result = ''
+        newlines = 0
+        for para in text.split("\n"):
+            if len(para) > 0:
+                if not skipwrap(para):
+                    result += "\n".join(wrap(para, self.body_width))
+                    if para.endswith('  '):
+                        result += "  \n"
+                        newlines = 1
+                    else:
+                        result += "\n\n"
+                        newlines = 2
+                else:
+                    # Warning for the tempted!!!
+                    # Be aware that obvious replacement of this with
+                    # line.isspace()
+                    # DOES NOT work! Explanations are welcome.
+                    if not config.RE_SPACE.match(para):
+                        result += para + "\n"
+                        newlines = 1
+            else:
+                if newlines < 2:
+                    result += "\n"
+                    newlines += 1
+        return result
+
+
+def skipwrap(para):
+    # If the text begins with four spaces or one tab, it's a code block;
+    # don't wrap
+    if para[0:4] == '    ' or para[0] == '\t':
+        return True
+
+    # If the text begins with only two "--", possibly preceded by
+    # whitespace, that's an emdash; so wrap.
+    stripped = para.lstrip()
+    if stripped[0:2] == "--" and len(stripped) > 2 and stripped[2] != "-":
+        return False
+
+    # I'm not sure what this is for; I thought it was to detect lists,
+    # but there's a <br>-inside-<span> case in one of the tests that
+    # also depends upon it.
+    if stripped[0:1] == '-' or stripped[0:1] == '*':
+        return True
+
+    # If the text begins with a single -, *, or +, followed by a space,
+    # or an integer, followed by a ., followed by a space (in either
+    # case optionally proceeded by whitespace), it's a list; don't wrap.
+    if config.RE_ORDERED_LIST_MATCHER.match(stripped) or \
+            config.RE_UNORDERED_LIST_MATCHER.match(stripped):
+        return True
+
+    return False
+
+
+def wrapwrite(text):
+    text = text.encode('utf-8')
+    try:  # Python3
+        sys.stdout.buffer.write(text)
+    except AttributeError:
+        sys.stdout.write(text)
+
+
+def html2text(html, baseurl='', bodywidth=config.BODY_WIDTH):
+    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)
+
+    return h.handle(html)
+
+
+def unescape(s, unicode_snob=False):
+    h = HTML2Text()
+    h.unicode_snob = unicode_snob
+
+    return h.unescape(s)
+
+
+def escape_md(text):
+    """
+    Escapes markdown-sensitive characters within other markdown
+    constructs.
+    """
+    return config.RE_MD_CHARS_MATCHER.sub(r"\\\1", text)
+
+
+def escape_md_section(text, snob=False):
+    """
+    Escapes markdown-sensitive characters across whole document sections.
+    """
+    text = config.RE_MD_BACKSLASH_MATCHER.sub(r"\\\1", text)
+
+    if snob:
+        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r"\\\1", text)
+
+    text = config.RE_MD_DOT_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_PLUS_MATCHER.sub(r"\1\\\2", text)
+    text = config.RE_MD_DASH_MATCHER.sub(r"\1\\\2", text)
+
+    return text
+
+
+def main():
+    baseurl = ''
+
+    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
+                              version='%prog ' + __version__)
+    p.add_option(
+        "--ignore-emphasis",
+        dest="ignore_emphasis",
+        action="store_true",
+        default=config.IGNORE_EMPHASIS,
+        help="don't include any formatting for emphasis"
+    )
+    p.add_option(
+        "--ignore-links",
+        dest="ignore_links",
+        action="store_true",
+        default=config.IGNORE_ANCHORS,
+        help="don't include any formatting for links")
+    p.add_option(
+        "--ignore-images",
+        dest="ignore_images",
+        action="store_true",
+        default=config.IGNORE_IMAGES,
+        help="don't include any formatting for images"
+    )
+    p.add_option(
+        "-g", "--google-doc",
+        action="store_true",
+        dest="google_doc",
+        default=False,
+        help="convert an html-exported Google Document"
+    )
+    p.add_option(
+        "-d", "--dash-unordered-list",
+        action="store_true",
+        dest="ul_style_dash",
+        default=False,
+        help="use a dash rather than a star for unordered list items"
+    )
+    p.add_option(
+        "-e", "--asterisk-emphasis",
+        action="store_true",
+        dest="em_style_asterisk",
+        default=False,
+        help="use an asterisk rather than an underscore for emphasized text"
+    )
+    p.add_option(
+        "-b", "--body-width",
+        dest="body_width",
+        action="store",
+        type="int",
+        default=config.BODY_WIDTH,
+        help="number of characters per output line, 0 for no wrap"
+    )
+    p.add_option(
+        "-i", "--google-list-indent",
+        dest="list_indent",
+        action="store",
+        type="int",
+        default=config.GOOGLE_LIST_INDENT,
+        help="number of pixels Google indents nested lists"
+    )
+    p.add_option(
+        "-s", "--hide-strikethrough",
+        action="store_true",
+        dest="hide_strikethrough",
+        default=False,
+        help="hide strike-through text. only relevant when -g is "
+             "specified as well"
+    )
+    p.add_option(
+        "--escape-all",
+        action="store_true",
+        dest="escape_snob",
+        default=False,
+        help="Escape all special characters.  Output is less readable, but "
+             "avoids corner case formatting issues."
+    )
+    (options, args) = p.parse_args()
+
+    # process input
+    encoding = "utf-8"
+    if len(args) > 0:
+        file_ = args[0]
+        if len(args) == 2:
+            encoding = args[1]
+        if len(args) > 2:
+            p.error('Too many arguments')
+
+        if file_.startswith('http://') or file_.startswith('https://'):
+            baseurl = file_
+            j = urllib.urlopen(baseurl)
+            data = j.read()
+            if encoding is None:
+                try:
+                    from feedparser import _getCharacterEncoding as enc
+                except ImportError:
+                    enc = lambda x, y: ('utf-8', 1)
+                encoding = enc(j.headers, data)[0]
+                if encoding == 'us-ascii':
+                    encoding = 'utf-8'
+        else:
+            data = open(file_, 'rb').read()
+            if encoding is None:
+                try:
+                    from chardet import detect
+                except ImportError:
+                    detect = lambda x: {'encoding': 'utf-8'}
+                encoding = detect(data)['encoding']
+    else:
+        data = sys.stdin.read()
+
+    data = data.decode(encoding)
+    h = HTML2Text(baseurl=baseurl)
+    # handle options
+    if options.ul_style_dash:
+        h.ul_item_mark = '-'
+    if options.em_style_asterisk:
+        h.emphasis_mark = '*'
+        h.strong_mark = '__'
+
+    h.body_width = options.body_width
+    h.list_indent = options.list_indent
+    h.ignore_emphasis = options.ignore_emphasis
+    h.ignore_links = options.ignore_links
+    h.ignore_images = options.ignore_images
+    h.google_doc = options.google_doc
+    h.hide_strikethrough = options.hide_strikethrough
+    h.escape_snob = options.escape_snob
+
+    wrapwrite(h.handle(data))
+
+
+if __name__ == "__main__":
+    main()
diff --git a/html2text/config.py b/html2text/config.py
new file mode 100644
index 0000000..8fe02a2
--- /dev/null
+++ b/html2text/config.py
@@ -0,0 +1,103 @@
+import re
+
+# Use Unicode characters instead of their ascii psuedo-replacements
+UNICODE_SNOB = 0
+
+# Escape all special characters.  Output is less readable, but avoids
+# corner case formatting issues.
+ESCAPE_SNOB = 0
+
+# Put the links after each paragraph instead of at the end.
+LINKS_EACH_PARAGRAPH = 0
+
+# Wrap long lines at position. 0 for no wrapping. (Requires Python 2.3.)
+BODY_WIDTH = 78
+
+# Don't show internal links (href="#local-anchor") -- corresponding link
+# targets won't be visible in the plain text file anyway.
+SKIP_INTERNAL_LINKS = True
+
+# Use inline, rather than reference, formatting for images and links
+INLINE_LINKS = True
+
+# Number of pixels Google indents nested lists
+GOOGLE_LIST_INDENT = 36
+
+IGNORE_ANCHORS = False
+IGNORE_IMAGES = False
+IGNORE_EMPHASIS = False
+
+# For checking space-only lines on line 771
+RE_SPACE = re.compile(r'\s\+')
+
+RE_UNESCAPE = re.compile(r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));")
+RE_ORDERED_LIST_MATCHER = re.compile(r'\d+\.\s')
+RE_UNORDERED_LIST_MATCHER = re.compile(r'[-\*\+]\s')
+RE_MD_CHARS_MATCHER = re.compile(r"([\\\[\]\(\)])")
+RE_MD_CHARS_MATCHER_ALL = re.compile(r"([`\*_{}\[\]\(\)#!])")
+RE_MD_DOT_MATCHER = re.compile(r"""
+    ^             # start of line
+    (\s*\d+)      # optional whitespace and a number
+    (\.)          # dot
+    (?=\s)        # lookahead assert whitespace
+    """, re.MULTILINE | re.VERBOSE)
+RE_MD_PLUS_MATCHER = re.compile(r"""
+    ^
+    (\s*)
+    (\+)
+    (?=\s)
+    """, flags=re.MULTILINE | re.VERBOSE)
+RE_MD_DASH_MATCHER = re.compile(r"""
+    ^
+    (\s*)
+    (-)
+    (?=\s|\-)     # followed by whitespace (bullet list, or spaced out hr)
+                  # or another dash (header or hr)
+    """, flags=re.MULTILINE | re.VERBOSE)
+RE_SLASH_CHARS = r'\`*_{}[]()#+-.!'
+RE_MD_BACKSLASH_MATCHER = re.compile(r'''
+    (\\)          # match one slash
+    (?=[%s])      # followed by a char that requires escaping
+    ''' % re.escape(RE_SLASH_CHARS),
+    flags=re.VERBOSE)
+
+UNIFIABLE = {
+    'rsquo': "'",
+    'lsquo': "'",
+    'rdquo': '"',
+    'ldquo': '"',
+    'copy': '(C)',
+    'mdash': '--',
+    'nbsp': ' ',
+    'rarr': '->',
+    'larr': '<-',
+    'middot': '*',
+    'ndash': '-',
+    'oelig': 'oe',
+    'aelig': 'ae',
+    'agrave': 'a',
+    'aacute': 'a',
+    'acirc': 'a',
+    'atilde': 'a',
+    'auml': 'a',
+    'aring': 'a',
+    'egrave': 'e',
+    'eacute': 'e',
+    'ecirc': 'e',
+    'euml': 'e',
+    'igrave': 'i',
+    'iacute': 'i',
+    'icirc': 'i',
+    'iuml': 'i',
+    'ograve': 'o',
+    'oacute': 'o',
+    'ocirc': 'o',
+    'otilde': 'o',
+    'ouml': 'o',
+    'ugrave': 'u',
+    'uacute': 'u',
+    'ucirc': 'u',
+    'uuml': 'u',
+    'lrm': '',
+    'rlm': ''
+}
diff --git a/install_deps.py b/install_deps.py
deleted file mode 100644
index 51ec53a..0000000
--- a/install_deps.py
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/usr/bin/python
-import sys
-import subprocess
-
-if sys.version_info[:2] < (2, 7):
-    subprocess.call('pip install unittest2 --use-mirrors', shell=True)
diff --git a/setup.py b/setup.py
index 0b2cf08..550e4f7 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 # coding: utf-8
 import sys
-from setuptools import setup, find_packages, Command
+from setuptools import setup, Command
 
 requires_list = []
 try:
@@ -28,12 +28,13 @@
     def run(self):
         tests = unittest.TestLoader().discover('.')
         runner = unittest.TextTestRunner()
-        runner.run(tests)
+        results = runner.run(tests)
+        sys.exit(not results.wasSuccessful())
 
 
 setup(
     name="html2text",
-    version="2014.4.5",
+    version="2014.7.3",
     description="Turn HTML into equivalent Markdown-structured text.",
     author="Aaron Swartz",
     author_email="me@aaronsw.com",
diff --git a/test/anchor-undefined-href.html b/test/anchor-undefined-href.html
new file mode 100644
index 0000000..2019751
--- /dev/null
+++ b/test/anchor-undefined-href.html
@@ -0,0 +1,5 @@
+<html>
+   <body>
+      <a href class="nolink">anchor</a>
+   </body>
+</html>
diff --git a/test/test_html2text.py b/test/test_html2text.py
index afae910..929a6af 100644
--- a/test/test_html2text.py
+++ b/test/test_html2text.py
@@ -4,16 +4,19 @@
 import re
 import subprocess
 import sys
+
 if sys.version_info[:2] < (2, 7):
     import unittest2 as unittest
 else:
     import unittest
 import logging
+
 logging.basicConfig(format='%(levelname)s:%(funcName)s:%(message)s',
                     level=logging.DEBUG)
 
 import html2text
 
+
 def test_module(fn, google_doc=False, **kwargs):
     h = html2text.HTML2Text()
     h.fn = fn
@@ -33,9 +36,10 @@
     inf.close()
     return result, actual
 
+
 def test_command(fn, *args):
     args = list(args)
-    cmd_name = os.path.join(os.path.dirname(fn), '..', 'html2text.py')
+    cmd_name = os.path.join(os.path.dirname(fn), '..', 'html2text/__init__.py')
     cmd = [sys.executable, cmd_name]
 
     if '--googledoc' in args:
@@ -61,12 +65,15 @@
 
     return result, actual
 
+
 def get_dump_name(fn, suffix):
     return '%s-%s_output.md' % (os.path.splitext(fn)[0], suffix)
 
+
 def get_baseline_name(fn):
     return os.path.splitext(fn)[0] + '.md'
 
+
 def get_baseline(fn):
     name = get_baseline_name(fn)
     f = codecs.open(name, mode='r', encoding='utf8')
@@ -74,9 +81,11 @@
     f.close()
     return out
 
+
 class TestHTML2Text(unittest.TestCase):
     pass
 
+
 def generate_test(fn):
     def test_mod(self):
         self.maxDiff = None
diff --git a/test/test_memleak.py b/test/test_memleak.py
index fd2ae18..27999fb 100644
--- a/test/test_memleak.py
+++ b/test/test_memleak.py
@@ -29,4 +29,4 @@
         h2t = html2text.HTML2Text()
         h2t.handle(self.instr)
         # And even less when the input is empty
-        self.assertEqual(h2t.handle(''), u'\n\n')
+        self.assertEqual(h2t.handle(''), '\n\n')
diff --git a/test/url-escaping.html b/test/url-escaping.html
index 5c5693c..c4f68b9 100644
--- a/test/url-escaping.html
+++ b/test/url-escaping.html
@@ -16,3 +16,4 @@
 <img src="http://placehold.it/350x150#[banana]" width="350" height="150" alt="[banana]"><br>
 <img src="http://placehold.it/350x150#{banana}" width="350" height="150" alt="{banana}"><br>
 <img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt="([{}])">
+<img src="http://placehold.it/350x150#([{}])" width="350" height="150" alt>
diff --git a/test/url-escaping.md b/test/url-escaping.md
index ffb2bc8..f409d40 100644
--- a/test/url-escaping.md
+++ b/test/url-escaping.md
@@ -16,4 +16,5 @@
 ![\[banana\]](http://placehold.it/350x150#\[banana\])  
 ![{banana}](http://placehold.it/350x150#{banana})  
 ![\(\[{}\]\)](http://placehold.it/350x150#\(\[{}\]\))
+![](http://placehold.it/350x150#\(\[{}\]\))
 

=====================================================================
start time: Sat Apr 05 00:00:00 CST 2014
end time: Thu Jul 03 00:00:00 CST 2014
description: 
========
----
* Fix #8: Remove ``How to do a release`` section from README.md.
* Fix #11: Include test directory markdown, html files.
* Fix #13:  memory leak in using ``handle`` while keeping the old instance of ``html2text``.

commit message: 
commit 6f5a8224c0495fcd57eedc8697794900b413433a 1396706589 -----sp :: Add ChangeLog.rst file.
commit e31a3f840bb44ab27716cabcaae935b226e430c1 1396706805 -----sp :: Merge pull request #3 from Alir3z4/feature-#1-add-changelog-file
commit 7c6d78c175eb5de2a2d86ca5386dcf6cf11929e3 1396707283 -----sp :: Add AUTHORS.rst file.
commit 05feed1e22e65ebad825d0f7acba32ef6971e58b 1396707303 -----sp :: Add changelog.rst and authors.rst file to manifest.in
commit 3a571d8e6c2ccd92fd87c8221e00f89ef2840320 1396707409 -----sp :: Merge pull request #4 from Alir3z4/feature-#2-add-authors-file
commit 104059506bca9814b8aa2441a865f56a6dd60eac 1396707490 -----sp :: Update to Alir3z4's account
commit 567a795accc94d7c42a01bf5b5bede3bf6e3d41b 1396707595 -----sp :: Bump version number
commit 878b147a7b23bd10ce4433b36f74691610ad282f 1396707901 -----sp :: Add "How to install" section to readme
commit 79db293c34d1ed4948b3ba5e4710432ed366e1eb 1396707920 -----sp :: Move travis-ci build status image to top of the readme
commit a352b55187a8d8dd241384b44ff8ffb7b74e192b 1396708010 -----sp :: Update version number to today for the release
commit 0fc7276a70b00769b23d622c7ffa69529a2d9069 1396708100 -----sp :: Fix classifier
commit 1d9d9bb4ede0474acc19ccd5d097f2448da22b5b+ 1397083331 -----sp :: Remove `How to do a release` section from README.md
commit 3232f42dc2d0d1ae43000919e9b7668526153081+ 1397083412 -----sp :: Update the changlog for fixing #8
commit 6781a49f6934e5f1d670f10540ee0f11e0724ae1 1397394999 -----sp :: Merge pull request #9 from Alir3z4/feature-#8-remove-how-to-do-a-release-section-from-readmemd
commit 082e6112b4b60dab981fdc90e4830e71648345a3+ 1398184243 -----sp :: Include test directory markdown, html files.
commit 8bfec190e79069d04c3c97a621ef1251aa327f82 1398184319 -----sp :: Merge pull request #12 from Alir3z4/fix-#11-include-test-md-html-files
commit cefe76cf31f5e01f0da6ffdf44c13be55f829efe 1400936271 -----sp :: handle undefined href attribute
commit 5bcb656541a2c12cec16147ababf40a18f64b6e9+ 1400945279 -----sp :: the html
commit eff61949743c588734fdaa2647b899e0cef430e3+ 1400945409 -----sp :: the markdown
commit 3c4fe0ef950518bb94068ed0a4c05d6dd78b2a08 1401082371 -----sp :: Merge pull request #6 from szepeviktor/patch-1
commit 938d0dc83e8810171ee733580e46b3337fc6dddd+ 1401082398 -----sp :: Merge pull request #8 from szepeviktor/development
commit 460566d3a8f0ac8e7f291c7673daa8113c4304aa 1401096501 -----sp :: Merge branch 'development' of https://github.com/html2text/html2text
commit e0cf94ec35c7a9cc393cf761b86dd8994d6d0059 1401398289 -----sp :: Don't install tests (but include them in PyPI package).
commit a8a0bb3c40c46b291ab0ff46e5d748e36f29c700 1404293888 -----sp :: Merge pull request #10 from mcepl/dont_install_tests

hunks: 
diff --git a/AUTHORS.rst b/AUTHORS.rst
new file mode 100644
index 0000000..c7ea1ce
--- /dev/null
+++ b/AUTHORS.rst
@@ -0,0 +1,14 @@
+``html2text`` was Originally written by Aaron Swartz.
+
+The AUTHORS are (and/or have been):
+
+    * Aaron Swartz
+    * Alireza Savand
+    * Yariv Barkan
+    * Alex Musayev
+    * Matěj Cepl
+    * Stefano Rivera
+
+Maintainer:
+
+    * Alireza Savand
diff --git a/ChangeLog.rst b/ChangeLog.rst
index 77eb355..56adc71 100644
--- a/ChangeLog.rst
+++ b/ChangeLog.rst
@@ -1,5 +1,6 @@
-0000.0.0
-========
+2014.4.5 - 2014-04-05
+=====================
 ----
 
-* Fix #1: Add ChangeLog.rst file.
+* Fix #1: Add ``ChangeLog.rst`` file.
+* Fix #2: Add ``AUTHORS.rst`` file.
diff --git a/MANIFEST.in b/MANIFEST.in
index 2301d36..6217360 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,2 +1,5 @@
 include COPYING
 include README.md
+include ChangeLog.rst
+include AUTHORS.rst
+recursive-include test *.html *.md *.py
diff --git a/README.md b/README.md
index 78ea8a7..229e3e5 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,8 @@
 # [html2text](http://www.aaronsw.com/2002/html2text/)
 
+[![Build Status](https://secure.travis-ci.org/Alir3z4/html2text.png)](http://travis-ci.org/Alir3z4/html2tex