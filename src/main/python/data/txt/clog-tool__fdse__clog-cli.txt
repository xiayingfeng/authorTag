repo name: clog-tool/clog-cli
=====================================================================
start time: Sun Oct 25 00:00:00 CST 2015
end time: Mon Apr 04 00:00:00 CST 2016
description: 
#### Bug Fixes
*   Support --to option ([1e28a670](https://github.com/clog-tool/clog-cli/commit/1e28a6705883fe4a74ba825c00e4722ebec22bec))
<a name="0.9.1"></a>

commit message: 
commit 81e5e6a738830c72e5c040c4bb83b11c88edfe4a+ 1445777006 -----sp :: chore: update deps and cut 0.9.1
commit 180c6039094d535032e494d015412d823f4222f3 1446097691 -----sp :: chore: dep update
commit 24bd4bb6d77b20776afdc1d106fec6968d53c016 1446112546 -----sp :: Merge pull request #78 from clog-tool/dep-update
commit 1b917bac70bfa5214d81ba0ce87136c0ad6d4785 1455289325 -----sp :: Typo fix applicaiton -> application
commit 7117658418cc6d75ce345bdd9852da27f9ba2439 1455448702 -----sp :: Merge pull request #82 from nvanheuverzwijn/patch-1
commit abc55dda9a8450312656381246f2456821f7edf1 1455611164 -----sp :: refactor: Remove dependency on regex_macro
commit 2b28ac32524b60085e4baafa83762ccf8fd422f8 1457563455 -----sp :: Merge pull request #84 from badboy/no-regex-macro
commit 1e28a6705883fe4a74ba825c00e4722ebec22bec+ 1457710354 -----sp :: fix: Support --to option

hunks: 
diff --git a/Cargo.lock b/Cargo.lock
index b277c63..a31bb01 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,11 +1,10 @@
 [root]
 name = "clog-cli"
-version = "0.9.0"
+version = "0.9.1"
 dependencies = [
  "ansi_term 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "clap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 1.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "clog 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex_macros 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
  "time 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -24,11 +23,17 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
+name = "bitflags"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
 name = "clap"
-version = "1.3.2"
+version = "1.4.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "ansi_term 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "strsim 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -53,7 +58,7 @@
 
 [[package]]
 name = "libc"
-version = "0.1.10"
+version = "0.1.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -61,7 +66,7 @@
 version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -80,14 +85,6 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
-name = "regex_macros"
-version = "0.1.21"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
 name = "rustc-serialize"
 version = "0.3.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -108,7 +105,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "kernel32-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 6f677ee..11a8b25 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,14 +14,10 @@
 
 [dependencies]
 semver = "~0.1.20"
-clap = "~1.3.0"
+clap = "~1.4"
 time = "~0.1.32"
 clog = "~0.9.0"
 
-[dependencies.regex_macros]
-version = "~0.1.21"
-optional = true
-
 [dependencies.ansi_term]
 version = "~0.6.3"
 optional = true
@@ -34,7 +30,4 @@
 # For debugging output
 debug = []
 
-# for building with nightly and unstable features
-# until regex_macros compiles with nightly again, this should be commented out
-# unstable = ["regex_macros"]
 unstable = []
diff --git a/README.md b/README.md
index 99ed5a7..2630f24 100644
--- a/README.md
+++ b/README.md
@@ -19,7 +19,7 @@
 
 ## Usage
 
-There are two ways to use `clog`, as a binary via the command line or as a library in your applicaitons via [clog-lib](https://github.com/clog-tool/clog-lib).
+There are two ways to use `clog`, as a binary via the command line or as a library in your applications via [clog-lib](https://github.com/clog-tool/clog-lib).
 
 ### Binary (Command Line)
 
diff --git a/src/main.rs b/src/main.rs
index f286daa..48c74de 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -213,6 +213,10 @@
         clog.from = clog.get_latest_tag();
     }
 
+    if let Some(to) = matches.value_of("to") {
+        clog.to = to.to_owned();
+    }
+
     if let Some(repo) = matches.value_of("repo") {
         clog.repo = repo.to_owned();
     }

=====================================================================
start time: Thu Jul 02 00:00:00 CST 2015
end time: Sun Oct 25 00:00:00 CST 2015
description: 
<a name="0.8.2"></a>

commit message: 
commit ef184ba290f67fb53ad0ae8d981a2f1689418eb4 1435797090 -----sp :: docs: adds initial documentation
commit a1dc0317f12a95ab3807ab3ba4b993386df4f7c3 1435797312 -----sp :: chore: builds docs
commit 338e2a4629d2fa4b6e5b9d5e4ba7773f93391d44 1435798035 -----sp :: chore: adds makefile to auto-build docs
commit 24b2dc5bac8b6952b074e9967a93b9a10575584c 1435798688 -----sp :: chore: rebuilds docs with readme included
commit 5bdbb32cba4366d796a0b588801e8451dc7b544e 1435838048 -----sp :: chore: cuts the 0.8.0 release
commit 017066fa5fd63d33b885cacfc6500b67edb68d2d 1435838579 -----sp :: fix(Cargo.toml): patch up version number
commit 80a87acfb642810263d8305c11bec56b939c5729 1435838613 -----sp :: chore: cuts the 0.8.1 release
commit bee2505c20469b48916432c913e15397ef4bb62e 1435846665 -----sp :: fix(CLI): fixes a bug when passing config at command line
commit 4931650b7230f0c6aa500ddeb838ca77330cd0fd 1435846782 -----sp :: docs(README.md): fixes usage blurb with config-bug fix
commit c3edaf3efb0b304716ef06f748fc230823d0d26a 1435847273 -----sp :: Merge pull request #46 from thoughtram/config-bug
commit 51e8c3cae082b7ecf5fcb9ab8f606c9abffb491d 1435847345 -----sp :: chore: cuts the 0.8.1 release
commit 7076e78eccc1de6da1dccd0bacbc223575ffdb76 1435970626 -----sp :: docs(README.md): adds installation and usage instructions
commit 0fd317324e3c51b2ef5839e3b74759fd68806e09 1435997236 -----sp :: Merge pull request #48 from thoughtram/issue-47
commit 2359c7125ec04068d5c849522c4c4ed3ae345a71 1436232309 -----sp :: perf(Regexs): compiles regexs only once and gets more specific for increased performance
commit 761e8ae790844c17128ea7f8d9ec7ebda578399f 1436346452 -----sp :: docs(readme): adds info about commitizen
commit 86dc57a09b909d35d30921555ee2ac5a02b9d2b1 1436346533 -----sp :: Merge pull request #50 from thoughtram/imp-regex
commit 32f8a15d6ff11ab38397cf78d62fd2812ebb03a7 1436382569 -----sp :: fix: dep bug fix when parsing --from="" from command line
commit 12e69bb60b821cca9ac30f9b8fd96b47b1e94aa0 1436383237 -----sp :: Merge pull request #51 from thoughtram/dep-update
commit 84507cc008ef53fbd3a20f87bc8f6029a7b87c68 1436838494 -----sp :: feat: implements better errors, abstract writers, and defaults to stdout
commit d6ca47871dd1673ca91f50228f8520fd05e6a378 1436842942 -----sp :: tests: fixes failing doc tests
commit 6e52f04e95f7d51b962cfe3141cf0b64bbc3b1d0 1436843080 -----sp :: chore: updates travis to container based builds and builds with beta
commit ccce70e839aed3cb9fdb623195bb5e0588da6c95 1436843482 -----sp :: docs: adds docs for new items
commit ee4730764666f4b9792c6fe9f811b662f86122bd 1436904599 -----sp :: docs: corrects and better explains the write_changelog* methods
commit bbc0e01dd3cc3d006fea1a029896a59eb1826c5a 1437104381 -----sp :: feat: allows reading old changelog data from one file and outputting to another
commit d25a0aaf5a2d6193b21d5b33a134e8828b20c28b 1437104437 -----sp :: docs: updates readme with new instructions and changes
commit 80c72ffa55286aea327af8e5dd9ab2402f2b2a1c 1437104844 -----sp :: chore: updates makefile for building docs
commit 48232754b1dd6bbcce2192c35522cbd3d2738e7e 1437105322 -----sp :: docs: rebuild docs
commit d6165bc2428e1ee4f2688f787537fbcce9c29a37 1437106042 -----sp :: test: fixes failing doc tests
commit 2f13ff1e9f210f84b1b1fe6104fd5c410004ded5 1437255228 -----sp :: chore: dep update to fix compiling on windows
commit 622770bff00cc95f2dfe8136e672681534d1acc1 1437710559 -----sp :: feat: implements a json writer output format
commit 0719f36c92a24456c76a4697e6f34172b6d1072d 1437712050 -----sp :: test: fixes failing doc tests
commit a61fd7e44789d0fcabfa8bdb44f2fc58f339b126 1437788209 -----sp :: docs: updates docs to new implementations
commit 6504c656fdde6682accb5a6f73924f971b5b768d 1438136347 -----sp :: fix(Markdown Writer): adds a colon ':' after the component in changelogs
commit ce5a19434aa7342be775ca55891d71b4615c3fb2 1438211924 -----sp :: fix(Markdown Writer): fixes a minor bug when writing on top of an old log
commit 12d310f68910492c045d7a6611ead5b3e86d8fad 1438357665 -----sp :: Merge pull request #67 from thoughtram/newline-bug
commit 8ba413584ce6652da5eb20665746d94fc76d9474 1438655484 -----sp :: chore(Cargo.toml): adds docs directory to exclude list
commit 3ed1264f64ae044b09ae68089e41e45c43553836 1438655729 -----sp :: Merge pull request #69 from thoughtram/issue-68
commit 48a82aef1e1538f2976f2b931fa6f9266047076c 1438953884 -----sp :: docs: Add note about clog-cli
commit c0529284e63b6012c35e59d849e4beca940c499a 1438954235 -----sp :: Merge pull request #72 from kentcdodds/patch-1
commit 88135640fcc968f6daa9ade694542d9e7566f061 1438986802 -----sp :: feat(Errors): improves error messages generated by cli
commit 489442fb653b0534b3981b8b6f303faa9c9f51c5 1438987644 -----sp :: docs(README.md): removes lib specific verbage
commit 50ad83bb9df525c26d084f18ce675d35a2e58cb3 1438987704 -----sp :: refactor: removes compile time warnings
commit 8678fabcf3010c77b7f52590a7caeab8b0d9ed67 1438997602 -----sp :: chore: updates clog-lib dep after bugfix
commit c18fade5a1ba00ee86b2c25da61c1ff7aadbf829 1439071009 -----sp :: chore(Cargo.toml): use clog-lib from crates.io
commit 14dbbcbe7e24902a0b239689b4bf434b4bc14f0e 1441154935 -----sp :: chore: updates deps and cuts 0.9.0 release
commit 99a06ed69f7796015f7e2c019494bb80a7ad0c8e 1441248325 -----sp :: Merge pull request #74 from clog-tool/updates
commit badf73590faf14e832e2d37bfd66283776ad4dad 1441715915 -----sp :: chore: reformat code using rustfmt
commit 5227f730da21ad00bdf7d2edddf37d4f6289a87e 1443742334 -----sp :: style: another rustfmt run
commit 025239a25b6416db451a1980bee55a8563c001ac 1443758418 -----sp :: Merge pull request #75 from clog-tool/rustfmt

hunks: 
diff --git a/.clog.toml b/.clog.toml
index 73e8eca..5d2448d 100644
--- a/.clog.toml
+++ b/.clog.toml
@@ -1,3 +1,3 @@
 [clog]
-repository = "https://github.com/thoughtram/clog"
+repository = "https://github.com/clog-tool/clog-cli"
 from-latest-tag = true
diff --git a/.gitignore b/.gitignore
index d5c842c..11e3320 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,6 @@
 
 # Temporary files
 .*~
+
+# Backup files
+*.bk
diff --git a/.travis.yml b/.travis.yml
index 77b3cad..a68a2bd 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,6 +1,8 @@
 language: rust
+sudo: false
 rust:
 - nightly
+- beta
 - stable
 before_script:
 - git clone --depth 1 https://github.com/kbknapp/travis-cargo
diff --git a/Cargo.lock b/Cargo.lock
index 23ff3e4..c464cb4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,21 +1,21 @@
 [root]
-name = "clog"
-version = "0.7.0"
+name = "clog-cli"
+version = "0.8.2"
 dependencies = [
- "clap 1.0.0-beta (registry+https://github.com/rust-lang/crates.io-index)",
- "regex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex_macros 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
- "semver 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
- "time 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
- "toml 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ansi_term 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clog 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex_macros 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)",
+ "semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
+ "time 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "aho-corasick"
-version = "0.2.1"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "memchr 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -25,7 +25,7 @@
 
 [[package]]
 name = "clap"
-version = "1.0.0-beta"
+version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "ansi_term 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -33,58 +33,68 @@
 ]
 
 [[package]]
-name = "kernel32-sys"
-version = "0.1.2"
+name = "clog"
+version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "winapi 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi-build 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)",
+ "time 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)",
+ "toml 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "kernel32-sys"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "libc"
-version = "0.1.8"
+version = "0.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "memchr"
-version = "0.1.3"
+version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "regex"
-version = "0.1.38"
+version = "0.1.41"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "aho-corasick 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "memchr 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex-syntax 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "aho-corasick 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex-syntax 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "regex-syntax"
-version = "0.1.2"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "regex_macros"
-version = "0.1.20"
+version = "0.1.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "regex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "rustc-serialize"
-version = "0.3.15"
+version = "0.3.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "semver"
-version = "0.1.19"
+version = "0.1.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -94,32 +104,29 @@
 
 [[package]]
 name = "time"
-version = "0.1.30"
+version = "0.1.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "kernel32-sys 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)",
+ "kernel32-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "toml"
-version = "0.1.21"
+version = "0.1.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "winapi"
-version = "0.1.23"
+version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
-]
 
 [[package]]
 name = "winapi-build"
-version = "0.1.0"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
diff --git a/Cargo.toml b/Cargo.toml
index b1f5fcf..a3016f3 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,32 +1,40 @@
 [package]
-
-repository = "https://github.com/thoughtram/clog"
+repository = "https://github.com/clog-tool/clog-cli"
 readme = "README.md"
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
-name = "clog"
-version = "0.7.0"
+name = "clog-cli"
+version = "0.9.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
+exclude = ["docs/*"]
+
+[[bin]]
+name = "clog"
 
 [dependencies]
-regex = "*"
-semver = "*"
-toml = "*"
-clap = "*"
-time = "*"
+semver = "~0.1.20"
+clap = "~1.3.0"
+time = "~0.1.32"
+clog = "~0.8.2"
 
 [dependencies.regex_macros]
-version = "*"
+version = "~0.1.21"
+optional = true
+
+[dependencies.ansi_term]
+version = "~0.6.3"
 optional = true
 
 [features]
-default=[]
+default = ["color"]
+
+color = ["ansi_term"]
 
 # For debugging output
-debug=[]
+debug = []
 
 # for building with nightly and unstable features
 # until regex_macros compiles with nightly again, this should be commented out
 # unstable = ["regex_macros"]
-unstable=[]
+unstable = []
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..a622070
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,26 @@
+THIS_MAKEFILE_PATH:=$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
+THIS_DIR:=$(shell cd $(dir $(THIS_MAKEFILE_PATH));pwd)
+
+test:
+	cargo test
+
+build:
+	cargo build
+
+doc:
+	cd "$(THIS_DIR)"
+	cp src/lib.rs code.bak
+	cat README.md | sed -e 's/^/\/\/! /g' > readme.bak
+	sed -i '/\/\/ DOCS/r readme.bak' src/lib.rs
+	cat src/lib.rs | sed -e 's/`rust/`ignore/g' > src/lib.rs.tmp
+	cat src/lib.rs.tmp | sed -e 's/`toml/`ignore/g' > src/lib.rs
+	cat src/lib.rs | sed -e 's/\`sh/`ignore/g' > src/lib.rs.tmp
+	rm -rf docs/*
+	(cargo doc --no-deps && make clean) || (make clean && false)
+
+clean:
+	cp -r target/doc/* docs/
+	cd "$(THIS_DIR)"
+	mv code.bak src/lib.rs || true
+	rm src/lib.rs.t* || true
+	rm *.bak || true
diff --git a/README.md b/README.md
index cea2220..99ed5a7 100644
--- a/README.md
+++ b/README.md
@@ -1,35 +1,91 @@
-clog
+clog-cli
 ====
 
 [![Join the chat at https://gitter.im/thoughtram/clog](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/thoughtram/clog?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
 
-[![Build Status](https://travis-ci.org/thoughtram/clog.png?branch=master)](https://travis-ci.org/thoughtram/clog)
+[![Build Status](https://travis-ci.org/clog-tool/clog-cli.png?branch=master)](https://travis-ci.org/clog-tool/clog-cli)
 
 A [conventional][convention] changelog for the rest of us
 
 [convention]: https://github.com/ajoslin/conventional-changelog/blob/a5505865ff3dd710cf757f50530e73ef0ca641da/conventions/angular.md
 
-### About
+## About
 
-`clog` creates a changelog automatically from your local git metadata. See the `clog`s [changelog.md](https://github.com/thoughtram/clog/blob/master/changelog.md) for an example.
+`clog` creates a changelog automatically from your local git metadata. See the `clog`s [changelog.md](https://github.com/clog-tool/clog-cli/blob/master/changelog.md) for an example.
 
-The way this works, is every time you make a commit, you ensure your commit subject line follows the [conventional](https://github.com/thoughtram/clog/blob/master/changelog.md) format. Then when you wish to update your changelog, you simply run `clog` inside your local repository with any options you'd like to specify.
+The way this works, is every time you make a commit, you ensure your commit subject line follows the [conventional](https://github.com/ajoslin/conventional-changelog/blob/a5505865ff3dd710cf757f50530e73ef0ca641da/conventions/angular.md) format. Then when you wish to update your changelog, you simply run `clog` inside your local repository with any options you'd like to specify.
 
 *NOTE:* `clog` also supports empty components by making commit messages such as `alias: message` or `alias(): message` (i.e. without the component)
 
+## Usage
 
-### Usage
+There are two ways to use `clog`, as a binary via the command line or as a library in your applicaitons via [clog-lib](https://github.com/clog-tool/clog-lib).
 
-There are two ways to use `clog`, via the command line or a library in your applicaitons.
+### Binary (Command Line)
 
-#### Command Line
+In order to use `clog` via the command line you must first obtain a binary by either compiling it yourself, or downlading and installing one of the precompiled binaries.
 
+#### Compiling
+
+Follow these instructions to compile `clog`, then skip down to Installation.
+
+ 1. Ensure you have current version of `cargo` and [Rust](https://www.rust-lang.org) installed
+ 2. Clone the project `$ git clone https://github.com/clog-tool/clog-cli && cd clog-cli`
+ 3. Build the project `$ cargo build --release`
+ 4. Once complete, the binary will be located at `target/release/clog`
+
+#### Using a Precompiled Binary
+
+There are several precompiled binaries readily availbe. Browse to http://wod.twentyfives.net/bin/clog/ and download the latest binary for your particular OS. Once you download and extract the tar file (or zip for Windows), the binary will be located at `bin/clog`
+
+**Note**: The Mac distribution is available on npm via [clog-cli](http://npm.im/clog-cli).
+
+#### Installation
+
+Once you have downloaded, or compiled, `clog` you simply need to place the binary somewhere in your `$PATH`. If you are not familiar with `$PATH` read-on; otherwise skip down to Using clog.
+
+##### Arch Linux
+
+You can use `clog-bin` from the AUR, or follow the instructions for Linux / OS X
+
+##### Linux / OS X
+
+You have two options, place `clog` into a directory that is already located in your `$PATH` variable (To see which directories those are, open a terminal and type `echo "${PATH//:/\n}"`, the quotation marks are important), or you can add a custom directory to your `$PATH`
+
+**Option 1**
+If you have write permission to a directory listed in your `$PATH` or you have root permission (or via `sudo`), simply copy the `clog` to that directory `# sudo cp clog /usr/local/bin`
+
+**Option 2**
+If you do not have root, `sudo`, or write permission to any directory already in `$PATH` you can create a directory inside your home directory, and add that. Many people use `$HOME/.bin` to keep it hidden (and not clutter your home directory), or `$HOME/bin` if you want it to be always visible. Here is an example to make the directory, add it to `$PATH`, and copy `clog` there.
+
+Simply change `bin` to whatever you'd like to name the directory, and `.bashrc` to whatever your shell startup file is (usually `.bashrc`, `.bash_profile`, or `.zshrc`)
+
+```sh
+$ mkdir ~/bin
+$ echo "export PATH=$PATH:$HOME/bin" >> ~/.bashrc
+$ cp clog ~/bin
+$ source ~/.bashrc
 ```
+
+##### Windows
+
+On Windows 7/8 you can add directory to the `PATH` variable by opening a command line as an administrator and running
+
+```sh
+C:\> setx path "%path%;C:\path\to\clog\binary"
+```
+
+Otherwise, ensure you have the `clog` binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to `C:\my_project\` to use `clog` ensure `clog.exe` is inside that directory as well).
+
+#### Using clog from the Command Line
+
+`clog` works by reading your `git` metadata and specially crafted commit messages and subjects to create a changelog. `clog` has the following options availble.
+
+```sh
 USAGE:
     clog [FLAGS] [OPTIONS]
 
 FLAGS:
-    -c, --config             The Clog Configuration TOML file to use (Defaults to '.clog.toml')**
     -F, --from-latest-tag    use latest tag as start (instead of --from)
     -h, --help               Prints help information
     -M, --major              Increment major version by one (Sets minor and patch to 0)
@@ -38,19 +94,31 @@
     -V, --version            Prints version information
 
 OPTIONS:
-    -f, --from <from>                e.g. 12a8546
-    -g, --git-dir <gitdir>           Local .git directory (defaults to current dir + '.git')*
-    -o, --outfile <outfile>          Where to write the changelog (Defaults to 'changelog.md')
-    -r, --repository <repo>          Repo used for link generation (without the .git, e.g. https://github.com/thoughtram/clog)
-    -l, --link-style <style>         The style of repository link to generate (Defaults to github) [values: Github, Gitlab, Stash]
-    -s, --subtitle <subtitle>        e.g. "Crazy Release Title"
-    -t, --to <to>                    e.g. 8057684 (Defaults to HEAD when omitted)
-        --setversion <ver>           e.g. 1.0.1
-    -w, --work-tree <workdir>        Local working tree of the git project (defaults to current dir)*
+    -C, --changelog <changelog>    A previous changelog to prepend new changes to (this is like
+                                   using the same file for both --infile and --outfile and
+                                   should not be used in conjuction with either)
+    -c, --config <config>          The Clog Configuration TOML file to use (Defaults to
+                                   '.clog.toml')**
+    -T, --format <format>          The output format, defaults to markdown
+                                   (valid values: markdown, json)
+    -f, --from <from>              e.g. 12a8546
+    -g, --git-dir <gitdir>         Local .git directory (defaults to current dir + '.git')*
+    -i, --infile <infile>          A changelog to append to, but *NOT* write to (Useful in
+                                   conjunction with --outfile)
+    -o, --outfile <outfile>        Where to write the changelog (Defaults to stdout when omitted)
+    -r, --repository <repo>        Repository used for generating commit and issue links
+                                   (without the .git, e.g. https://github.com/clog-tool/clog-cli)
+    -l, --link-style <style>       The style of repository link to generate
+                                   (Defaults to github) [values: Github Gitlab Stash]
+    -s, --subtitle <subtitle>      e.g. "Crazy Release Title"
+    -t, --to <to>                  e.g. 8057684 (Defaults to HEAD when omitted)
+        --setversion <ver>         e.g. 1.0.1
+    -w, --work-tree <workdir>      Local working tree of the git project
+                                   (defaults to current dir)*
 
 * If your .git directory is a child of your project directory (most common, such as
 /myproject/.git) AND not in the current working directory (i.e you need to use --work-tree or
---git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e. 
+--git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e.
 /myproject/.git), you don't need to use both.
 
 ** If using the --config to specify a clog configuration TOML file NOT in the current working
@@ -58,64 +126,29 @@
 project directory (i.e. /myproject/.clog.toml) you do not need to use --work-tree or --git-dir.
 ```
 
-##### Try it!
+#### Try it!
 
-1. Clone the repo `git clone https://github.com/thoughtram/clog && cd clog`
+In order to see it in action, you'll need a repository that already has some of those specially crafted commit messages in it's history. For this, we'll use the `clog` repository itself.
 
-2. Build clog `cargo build --release`
+1. Clone the repo `git clone https://github.com/clog-tool/clog-cli && cd clog-cli`
 
-3. Delete the old changelog file `rm changelog.md`
+2. Ensure you already `clog` binary from any of the steps above
 
-3. Run clog `./target/release/clog -r https://github.com/thoughtram/clog --setversion 0.1.0 --subtitle crazy-dog --from 6d8183f`
+4. There are many, many ways to run `clog`. Note, in these examples we will be typing the same options over and over again, in times like that we could a [clog TOML configuration file](https://github.com/clog-tool/clog-cli#default-options) to specify those options that don't normally change. Also note, all these CLI options have short versions as well, we're using the long version because they're easier to understand.
+ a. Let's start by picking up only new commits since our last release (this may not be a lot...or none)
+ b. Run `clog -r https://github.com/clog-tool/clog-cli --outfile only_new.md`
+ c. By default, `clog` outputs to `stdout` unless you have a file set inside a TOML configuration file. (Note, we could have used the shell `>` operator instead of `--outfile`)
+ d. Anything options you set via the CLI will override anything you set the configuration file.
+ e. Let's now tell `clog` where it can find our old changelog, and prepend any new commits to that old data
+ f. Run `clog -r https://github.com/clog-tool/clog-cli --infile changelog.md --outfile new_combined.md`
+ g. Finally, let's assume like most projects we just want to use one file, and prepend all new data to our old changelog (most useful)
+ h. First make a backup of the `changelog.md` so you can compare it later `cp changelog.md changelog.md.bak`
+ i. Run `clog -r https://github.com/clog-tool/clog-cli --changelog changelog.md`
+ j. Try viewing any of the `only_new.md`, `new_combined.md`, `changelog.md.bak`, or `changelog.md` in your favorite markdown viewer to compare them.
 
-#### As a Library
+### As a Library
 
-See the documentation for information on using `clog` in your applications.
-
-##### Try it!
-
- 1. Clone the `clog` repo so that you have something to search through (Because `clog` uses 
-    specially formatted commit messages)
-```
-$ git clone https://github.com/thoughtram/clog ~/clog
-```
-
- 2. Add `clog` as a dependency in your `Cargo.toml` 
-
-```toml
-[dependencies]
-clog = "*"
-```
-
- 3. Use the following in your `src/main.rs`
-
-```rust
-extern crate clog;
-
-use clog::Clog;
-
-fn main() {
-    // Create the struct
-    let mut clog = Clog::with_dir("~/clog").unwrap_or_else(|e| { 
-        println!("{}",e); 
-        std::process::exit(1); 
-    });
-
-    // Set some options
-    clog.repository("https://github.com/thoughtram/clog")
-        .subtitle("Crazy Dog")
-        .from("6d8183f")
-        .version("0.1.0");
-
-    // Write the changelog to the current working directory
-    //
-    // Alternatively we could have used .write_changelog_to("/somedir/some_file.md")
-    clog.write_changelog();
-}
-```
-
- 4. Compile and run `$ cargo build --release && ./target/release/bin_name
- 5. View the output in your favorite markdown viewer! `$ vim changelog.md`
+See the [documentation](http://clog-tool.github.io/clog-lib/) or [clog-lib](https://github.com/clog-tool/clog-lib) for information on using `clog` in your applications. You can also see the [clog crates.io page](https://crates.io/crates/clog).
 
 ### Default Options
 
@@ -123,15 +156,44 @@
 
 ```toml
 [clog]
-repository = "https://github.com/thoughtram/clog"
+# A repository link with the trailing '.git' which will be used to generate
+# all commit and issue links
+repository = "https://github.com/clog-tool/clog-cli"
+# A constant release title
 subtitle = "my awesome title"
 
 # specify the style of commit links to generate, defaults to "github" if omitted
 link-style = "github"
 
-# sets the changelog output file, defaults to "changelog.md" if omitted
+# The preferred way to set a constant changelog. This file will be read for old changelog
+# data, then prepended to for new changelog data. It's the equivilant to setting
+# both infile and outfile to the same file.
+#
+# Do not use with outfile or infile fields!
+#
+# Defaults to stdout when omitted
+changelog = "mychangelog.md"
+
+# This sets an output file only! If it exists already, new changelog data will be
+# prepended, if not it will be created.
+#
+# This is useful in conjunction with the infile field if you have a separate file
+# that you would like to append after newly created clog data
+#
+# Defaults to stdout when omitted
 outfile = "MyChangelog.md"
 
+# This sets the input file old! Any data inside this file will be appended to any
+# new data that clog picks up
+#
+# This is useful in conjunction with the outfile field where you may wish to read
+# from one file and append that data to the clog output in another
+infile = "My_old_changelog.md"
+
+# This sets the output format. There are two options "json" or "markdown" and
+# defaults to "markdown" when omitted
+output-format = "json"
+
 # If you use tags, you can set the following if you wish to only pick
 # up changes since your latest tag
 from-latest-tag = true
@@ -141,9 +203,9 @@
 
 *Note:* Any options you specify at the command line will override options set in your `.clog.toml`
 
-#### Custom Sections
+### Custom Sections
 
-By default, `clog` will display two sections in your changelog, `Features` and `Bug Fixes`. You can add additional sections by using a `.clog.toml` file. To add more sections, simply add a `[sections]` table, along with the section name and aliases you'd like to use in your commit messages:
+By default, `clog` will display three sections in your changelog, `Features`, `Performance`, and `Bug Fixes`. You can add additional sections by using a `.clog.toml` file. To add more sections, simply add a `[sections]` table, along with the section name and aliases you'd like to use in your commit messages:
 
 ```toml
 [sections]
@@ -154,6 +216,10 @@
 
 *NOTE:* Sections with spaces are suppported, such as `"My Special Section" = ["ms", "mysec"]`
 
+## Companion Projects
+
+- [Commitizen](http://commitizen.github.io/cz-cli/) - A command line tool that helps you writing better commit messages.
+
 ## LICENSE
 
-clog is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository.
+`clog` is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository.
diff --git a/changelog.md b/changelog.md
index c509d7c..60ce796 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,41 @@
+<a name="0.8.2"></a>
+### 0.8.2 (2015-07-02)
+
+
+#### Bug Fixes
+
+* **CLI**  fixes a bug when passing config at command line ([bee2505c](https://github.com/thoughtram/clog/commit/bee2505c20469b48916432c913e15397ef4bb62e))
+
+
+
+<a name="0.8.1"></a>
+## 0.8.1 (2015-07-02)
+
+
+#### Bug Fixes
+
+* **Cargo.toml**  patch up version number ([017066fa](https://github.com/thoughtram/clog/commit/017066fa5fd63d33b885cacfc6500b67edb68d2d))
+
+
+
+<a name="0.8.0"></a>
+## 0.8.0 (2015-07-02)
+
+
+#### Features
+
+*   adds automatic changelog writing for lib ([a790b703](https://github.com/thoughtram/clog/commit/a790b7034119f49ddff3464b2a3fb81ac20c6744))
+*   improves non-cli lib use and configuration ([c0e969c3](https://github.com/thoughtram/clog/commit/c0e969c335bebbe1aa79269c5e05680b09f77fcf))
+*   split bin from lib ([218f1d04](https://github.com/thoughtram/clog/commit/218f1d047309a66c3cd132e762df3b2b9f22a5f7))
+
+#### Bug Fixes
+
+*   fixes bug when using current working dir and default config ([f90f0f0e](https://github.com/thoughtram/clog/commit/f90f0f0ebf567f59469f64186440231cf84c130e))
+*   fixes bug with non-cli configuration ([731c71d3](https://github.com/thoughtram/clog/commit/731c71d39aab95cc8667e8a42218f821425c3d88))
+* **Rust Nightly**  fixes to compile on nightly again ([d2f9afe4](https://github.com/thoughtram/clog/commit/d2f9afe41734ee3a62e645fc3510c1d9c4a5e72b))
+
+
+
 <a name="0.7.0"></a>
 ## 0.7.0 (2015-05-29)
 
diff --git a/rustfmt.toml b/rustfmt.toml
new file mode 100644
index 0000000..2649606
--- /dev/null
+++ b/rustfmt.toml
@@ -0,0 +1,5 @@
+fn_brace_style = "PreferSameLine"
+struct_trailing_comma = "Never"
+struct_lit_trailing_comma = "Never"
+struct_lit_multiline_style = "ForceMulti"
+enum_trailing_comma = false
diff --git a/src/bin/clog.rs b/src/bin/clog.rs
deleted file mode 100644
index 0acdd4f..0000000
--- a/src/bin/clog.rs
+++ /dev/null
@@ -1,78 +0,0 @@
-#[macro_use]
-extern crate clap;
-extern crate time;
-extern crate clog;
-
-use std::fs::File;
-use std::io::Read;
-use std::path::Path;
-use std::collections::BTreeMap;
-
-use clap::{App, Arg, ArgGroup};
-
-use clog::{LinkStyle, Clog, LogWriter, SectionMap};
-
-fn main () {
-    let styles = LinkStyle::variants();
-    let matches = App::new("clog")
-        // Pull version from Cargo.toml
-        .version(&format!("v{}", crate_version!())[..])
-        .about("a conventional changelog for the rest of us")
-        .args_from_usage("-r, --repository=[repo]   'Repo used for link generation (without the .git, e.g. https://github.com/thoughtram/clog)'
-                          -f, --from=[from]         'e.g. 12a8546'
-                          -M, --major               'Increment major version by one (Sets minor and patch to 0)'
-                          -g, --git-dir=[gitdir]    'Local .git directory (defaults to current dir + \'.git\')*'
-                          -w, --work-tree=[workdir] 'Local working tree of the git project (defaults to current dir)*' 
-                          -m, --minor               'Increment minor version by one (Sets patch to 0)'
-                          -p, --patch               'Increment patch version by one'
-                          -s, --subtitle=[subtitle] 'e.g. \"Crazy Release Title\"'
-                          -t, --to=[to]             'e.g. 8057684 (Defaults to HEAD when omitted)'
-                          -o, --outfile=[outfile]   'Where to write the changelog (Defaults to \'changelog.md\')'
-                          -c, --config              'The Clog Configuration TOML file to use (Defaults to \'.clog.toml\')**'
-                          --setversion=[ver]        'e.g. 1.0.1'")
-        // Because --from-latest-tag can't be used with --from, we add it seperately so we can
-        // specify a .conflicts_with()
-        .arg(Arg::from_usage("-F, --from-latest-tag 'use latest tag as start (instead of --from)'")
-                .conflicts_with("from"))
-        // Because we may want to add more "flavors" at a later date, we can automate the process
-        // of enumerating all possible values with clap
-        .arg(Arg::from_usage("-l, --link-style=[style]     'The style of repository link to generate (Defaults to github)'")
-            .possible_values(&styles))
-        // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
-        // set those as exclusions
-        .arg_group(ArgGroup::with_name("setver")
-                .add_all(vec!["major", "minor", "patch", "ver"]))
-        .after_help("\
-* If your .git directory is a child of your project directory (most common, such as\n\
-/myproject/.git) AND not in the current working directory (i.e you need to use --work-tree or\n\
---git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e. \n\
-/myproject/.git), you don't need to use both.\n\n\
-
-** If using the --config to specify a clog configuration TOML file NOT in the current working\n\
-directory (meaning you need to use --work-tree or --git-dir) AND the TOML file is inside your\n\
-project directory (i.e. /myproject/.clog.toml) you do not need to use --work-tree or --git-dir.")
-        .get_matches();
-
-    let start_nsec = time::get_time().nsec;
-
-    let clog = Clog::from_matches(&matches).unwrap_or_else(|e| { println!("{}",e); std::process::exit(1); });
-
-    let sm = SectionMap::from_commits(clog.get_commits());
-
-    let mut contents = String::new();
-
-    File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-
-    let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
-    let mut writer = LogWriter::new(&mut file, &clog);
-
-    writer.write_header().ok().expect("failed to write header");
-    for (sec, secmap) in sm.sections {
-        writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
-    }
-    writer.write(&contents[..]).ok().expect("failed to write contents");
-
-    let end_nsec = time::get_time().nsec;
-    let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
-    println!("changelog updated. (took {} ms)", elapsed_mssec);
-}
diff --git a/src/clog.rs b/src/clog.rs
deleted file mode 100644
index 6990141..0000000
--- a/src/clog.rs
+++ /dev/null
@@ -1,1031 +0,0 @@
-use std::collections::{HashMap, BTreeMap};
-use std::convert::AsRef;
-use std::env;
-use std::fmt::{self, Display};
-use std::fs::File;
-use std::io::Read;
-use std::path::{Path, PathBuf};
-use std::process::Command;
-
-use clap::ArgMatches;
-use toml::{Value, Parser};
-use semver;
-
-use git::{Commits, Commit};
-use log_writer::LogWriter;
-use sectionmap::SectionMap;
-
-use CLOG_CONFIG_FILE;
-
-/// Determines the link style used in commit links. Defaults to `LinksStyle::Github`
-///
-/// # Example
-/// ```no_run
-/// # use clog::{LinkStyle, Clog};
-/// let mut clog = Clog::new().unwrap();
-/// clog.link_style(LinkStyle::Stash);
-/// ```
-arg_enum!{
-    #[derive(Debug)]
-    pub enum LinkStyle {
-        Github,
-        Gitlab,
-        Stash
-    }
-}
-
-impl LinkStyle {
-    /// Gets a link to an issue in the specified format.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::{LinkStyle, Clog};
-    /// let link = LinkStyle::Github;
-    /// let issue = link.issue_link("141", "https://github.com/thoughtram/clog");
-    /// assert_eq!("[#141](https://github.com/thoughtram/clog/issues/141", issue);
-    /// ```
-    pub fn issue_link<S: AsRef<str>>(&self, issue: S, repo: S) -> String {
-        match repo.as_ref() {
-            "" => format!("(#{})", issue.as_ref()),
-            link => {
-                match *self {
-                    LinkStyle::Github => format!("[#{}]({}/issues/{})", issue.as_ref(), link, issue.as_ref()),
-                    LinkStyle::Gitlab => format!("[#{}]({}/issues/{})", issue.as_ref(), link, issue.as_ref()),
-                    LinkStyle::Stash  => format!("(#{})", issue.as_ref()) // Stash doesn't support issue links
-                }
-            }
-        }
-    }
-
-    /// Gets a link to an commit in the specified format.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::{LinkStyle, Clog};
-    /// let link = LinkStyle::Github;
-    /// let commit = link.commit_link("123abc891234567890abcdefabc4567898724", "https://github.com/thoughtram/clog");
-    /// assert_eq!("[#123abc89](https://github.com/thoughtram/clog/commit/123abc891234567890abcdefabc4567898724", commit);
-    /// ```
-    pub fn commit_link<S: AsRef<str>>(&self, hash: S, repo: S) -> String {
-        let short_hash = &hash.as_ref()[0..8];
-        match repo.as_ref() {
-            "" => format!("({})", short_hash),
-            link => {
-                match *self {
-                    LinkStyle::Github => format!("[{}]({}/commit/{})", short_hash, link, hash.as_ref()),
-                    LinkStyle::Gitlab => format!("[{}]({}/commit/{})", short_hash, link, hash.as_ref()),
-                    LinkStyle::Stash  => format!("[{}]({}/commits/{})", short_hash, link, hash.as_ref())
-                }
-            }
-        }
-    }
-}
-
-/// The base struct used to set options and interact with the library.
-pub struct Clog {
-    /// The grep search pattern used to find commits we are interested in (Defaults to: 
-    /// "^ft|^feat|^fx|^fix|^unk|BREAKING\'")
-    pub grep: String,
-    /// The format of the commit output from `git log` (Defaults to: "%H%n%s%n%b%n==END==")
-    pub format: String,
-    /// The repository used for the base of hyper-links
-    pub repo: String,
-    /// The link style to used for commit and issue hyper-links
-    pub link_style: LinkStyle,
-    /// The version tag for the release (Defaults to the short hash of the latest commit)
-    pub version: String,
-    /// Whether or not this is a patch version update or not. Patch versions use a lower markdown
-    /// header (`###` instead of `##` for major and minor releases)
-    pub patch_ver: bool,
-    /// The subtitle for the release
-    pub subtitle: String,
-    /// Where to start looking for commits using a hash (or short hash)
-    pub from: String,
-    /// Where to stop looking for commits using a hash (or short hash). (Defaults to `HEAD`)
-    pub to: String,
-    /// The file to use as the changelog. (Defaults to `changelog.md`)
-    pub changelog: String,
-    /// Maps out the sections and aliases used to trigger those sections. The keys are the section
-    /// name, and the values are an array of aliases.
-    pub section_map: HashMap<String, Vec<String>>,
-    /// The git dir with all the meta-data (Typically the `.git` sub-directory of the project)
-    pub git_dir: Option<PathBuf>,
-    /// The working directory of the git project (typically the project directory, or parent of the
-    /// `.git` directory)
-    pub git_work_tree: Option<PathBuf>, 
-}
-
-impl fmt::Debug for Clog {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "{{
-            grep: {:?}
-            format: {:?}
-            repo: {:?}
-            link_style: {:?}
-            version: {:?}
-            patch_ver: {:?}
-            subtitle: {:?}
-            from: {:?}
-            to: {:?}
-            changelog: {:?}
-            section_map: {:?}
-            git_dir: {:?}
-            git_work_tree: {:?}
-        }}",
-        self.grep,
-        self.format,
-        self.repo,
-        self.link_style,
-        self.version,
-        self.patch_ver,
-        self.subtitle,
-        self.from,
-        self.to,
-        self.changelog,
-        self.section_map,
-        self.git_dir,
-        self.git_work_tree
-        ) 
-    }
-}
-
-/// Convienience type for returning results of building a `Clog` struct
-///
-/// # Example
-/// ```no_run
-/// # use clog::Clog;
-/// let clog = Clog::new().unwrap_or_else(|e| {
-///     println!("Error initializing: {}", e);
-///     std::process::exit(1);
-/// });
-/// ```
-pub type ClogResult = Result<Clog, Box<Display>>;
-
-impl Clog {
-    fn _new() -> Clog {
-        debugln!("Creating private default clog");
-        let mut sections = HashMap::new();
-        sections.insert("Features".to_owned(), vec!["ft".to_owned(), "feat".to_owned()]);
-        sections.insert("Bug Fixes".to_owned(), vec!["fx".to_owned(), "fix".to_owned()]);
-        sections.insert("Unknown".to_owned(), vec!["unk".to_owned()]);
-        sections.insert("Breaks".to_owned(), vec![]);
-
-        Clog {
-            grep: format!("{}BREAKING'",
-                sections.values()
-                        .map(|v| v.iter().fold(String::new(), |acc, al| {
-                            acc + &format!("^{}|", al)[..]
-                        }))
-                        .fold(String::new(), |acc, al| {
-                            acc + &format!("^{}|", al)[..]
-                        })),
-            format: "%H%n%s%n%b%n==END==".to_owned(),
-            repo: "".to_owned(),
-            link_style: LinkStyle::Github,
-            version: "".to_owned(),
-            patch_ver: false,
-            subtitle: "".to_owned(),
-            from: "".to_owned(),
-            to: "HEAD".to_owned(),
-            changelog: "changelog.md".to_owned(),
-            section_map: sections,
-            git_dir: None,
-            git_work_tree: None,
-        }
-    }
-
-    /// Creates a default `Clog` struct using the current working directory and searches for the
-    /// default `.clog.toml` configuration file.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn new() -> ClogResult {
-        debugln!("Creating public default clog");
-        Clog::from_file(CLOG_CONFIG_FILE)
-    }
-
-    /// Creates a `Clog` struct using a specific git working directory and project directory as
-    /// well as a custom named TOML configuration file.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::with_all("/myproject/.git",
-    ///                           "/myproject",
-    ///                           "/myproject/clog_conf.toml").unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn with_all<P: AsRef<Path>>(git_dir: P, work_tree: P, cfg_file: P) -> ClogResult {
-        debugln!("Creating clog with \n\tgit_dir: {:?}\n\twork_tree: {:?}\n\tcfg_file: {:?}", 
-            git_dir.as_ref(), 
-            work_tree.as_ref(), 
-            cfg_file.as_ref());
-        let clog = try!(Clog::with_dirs(git_dir, 
-                                            work_tree));
-        clog.try_config_file(cfg_file.as_ref())   
-    }
-
-    /// Creates a `Clog` struct using a specific git working directory OR project directory as
-    /// well as a custom named TOML configuration file.
-    ///
-    /// **NOTE:** If you specify a `.git` folder the parent will be used as the working tree, and
-    /// vice versa.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::with_dir_and_file("/myproject",
-    ///                           "/myproject/clog_conf.toml").unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn with_dir_and_file<P: AsRef<Path>>(dir: P, cfg_file: P) -> ClogResult {
-        debugln!("Creating clog with \n\tdir: {:?}\n\tcfg_file: {:?}", 
-            dir.as_ref(), 
-            cfg_file.as_ref());
-        let clog = try!(Clog::_with_dir(dir));
-        clog.try_config_file(cfg_file.as_ref())   
-    }
-
-    fn _with_dir<P: AsRef<Path>>(dir: P) -> ClogResult {
-        debugln!("Creating private clog with \n\tdir: {:?}", dir.as_ref());
-        let mut clog = Clog::_new();
-        if dir.as_ref().ends_with(".git") {
-            debugln!("dir ends with .git");
-            let mut wd = dir.as_ref().to_path_buf();
-            clog.git_dir = Some(wd.clone());
-            wd.pop();
-            clog.git_work_tree = Some(wd);
-        } else {
-            debugln!("dir doesn't end with .git");
-            let mut gd = dir.as_ref().to_path_buf();
-            clog.git_work_tree = Some(gd.clone());
-            gd.push(".git");
-            clog.git_dir = Some(gd);
-        }
-
-        debugln!("Returning clog:\n{:?}", clog);
-        Ok(clog)
-    }
-
-    /// Creates a `Clog` struct using a specific git working directory OR project directory.
-    /// Searches for the default configuration TOML file `.clog.toml`
-    ///
-    /// **NOTE:** If you specify a `.git` folder the parent will be used as the working tree, and
-    /// vice versa.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::with_dir("/myproject").unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn with_dir<P: AsRef<Path>>(dir: P) -> ClogResult {
-        debugln!("Creating clog with \n\tdir: {:?}", dir.as_ref());
-        let clog = try!(Clog::_with_dir(dir));
-        clog.try_config_file(Path::new(CLOG_CONFIG_FILE))
-    }
-
-    /// Creates a `Clog` struct using a specific git working directory AND a project directory.
-    /// Searches for the default configuration TOML file `.clog.toml`
-    ///
-    /// **NOTE:** If you specify a `.git` folder the parent will be used as the working tree, and
-    /// vice versa.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::with_dirs("/myproject", "/myproject/.git").unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn with_dirs<P: AsRef<Path>>(git_dir: P, work_tree: P) -> ClogResult {
-        debugln!("Creating clog with \n\tgit_dir: {:?}\n\twork_tree: {:?}", 
-            git_dir.as_ref(), 
-            work_tree.as_ref());
-        let mut clog = Clog::_new();
-        clog.git_dir = Some(git_dir.as_ref().to_path_buf());
-        clog.git_work_tree = Some(work_tree.as_ref().to_path_buf());
-        clog.try_config_file(Path::new(CLOG_CONFIG_FILE))
-    }
-
-    /// Creates a `Clog` struct a custom named TOML configuration file. Sets the parent directory
-    /// of the configuration file to the working tree and sibling `.git` directory as the git
-    /// directory.
-    ///
-    /// **NOTE:** If you specify a `.git` folder the parent will be used as the working tree, and
-    /// vice versa.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let clog = Clog::from_file("/myproject/clog_conf.toml").unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn from_file<P: AsRef<Path>>(file: P) -> ClogResult {
-        debugln!("Creating clog with \n\tfile: {:?}", file.as_ref());
-        // Determine if the cfg_file was relative or not
-        let cfg_file = if file.as_ref().is_relative() {
-            debugln!("file is relative");
-            let cwd = match env::current_dir() {
-                Ok(d)  => d,
-                Err(e) => return Err(Box::new(e)),
-            };
-            Path::new(&cwd).join(file.as_ref())
-        } else {
-            debugln!("file is absolute");
-            file.as_ref().to_path_buf()
-        };
-
-        // We assume whatever dir the .clog.toml file is also contains the git metadata
-        let mut dir = cfg_file.clone();
-        dir.pop();
-        Clog::with_dir_and_file(dir, cfg_file)
-    }
-
-    fn try_config_file(mut self, cfg_file: &Path) -> ClogResult {
-        debugln!("Trying to use config file: {:?}", cfg_file);
-        let mut toml_from_latest = None;
-        let mut toml_repo = None;
-        let mut toml_subtitle = None;
-        let mut toml_link_style = None;
-        let mut toml_outfile = None;
-
-        if let Ok(ref mut toml_f) = File::open(cfg_file) {
-            debugln!("Found file");
-            let mut toml_s = String::with_capacity(100);
-
-            if let Err(e) = toml_f.read_to_string(&mut toml_s) {
-                return Err(Box::new(e))
-            }
-
-            toml_s.shrink_to_fit();
-
-            let mut toml = Parser::new(&toml_s[..]);
-
-            let toml_table = match toml.parse() {
-                Some(table) => table,
-                None        => {
-                    return Err(Box::new(format!("Error parsing file: {}\n\nPlease check the format or specify the options manually", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"))))
-                }
-            };
-
-            let clog_table = match toml_table.get("clog") {
-                Some(table) => table,
-                None        => {
-                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"))))
-                }
-            };
-
-            toml_from_latest = clog_table.lookup("from-latest-tag").unwrap_or(&Value::Boolean(false)).as_bool();
-            toml_repo = match clog_table.lookup("repository") {
-                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
-                None      => Some("".to_owned())
-            };
-            toml_subtitle = match clog_table.lookup("subtitle") {
-                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
-                None      => Some("".to_owned())
-            };
-            toml_link_style = match clog_table.lookup("link-style") {
-                Some(val) => match val.as_str().unwrap_or("github").parse::<LinkStyle>() {
-                    Ok(style) => Some(style),
-                    Err(err)   => {
-                        return Err(Box::new(format!("Error parsing file {}\n\n{}", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"), err)))
-                    }
-                },
-                None      => Some(LinkStyle::Github)
-            };
-            toml_outfile = match clog_table.lookup("outfile") {
-                Some(val) => Some(val.as_str().unwrap_or("changelog.md").to_owned()),
-                None      => None
-            };
-            match toml_table.get("sections") {
-                Some(table) => {
-                    match table.as_table() {
-                        Some(table) => {
-                            for (sec, val) in table.iter() {
-                                if let Some(vec) = val.as_slice() {
-                                    let alias_vec = vec.iter().map(|v| v.as_str().unwrap_or("").to_owned()).collect::<Vec<_>>();
-                                    self.section_map.insert(sec.to_owned(), alias_vec);
-                                }
-                            }
-                        },
-                        None        => ()
-                    }
-                },
-                None        => ()
-            };
-        };
-
-        if toml_from_latest.unwrap_or(false) {
-            self.from = self.get_latest_tag();
-        }
-
-        if let Some(repo) = toml_repo {
-            self.repo = repo;
-        }
-
-        if let Some(ls) = toml_link_style {
-            self.link_style = ls;
-        }
-
-        if let Some(subtitle) = toml_subtitle {
-            self.subtitle = subtitle;
-        }
-
-        if let Some(outfile) = toml_outfile {
-            self.changelog = outfile;
-        }
-
-        debugln!("Returning clog:\n{:?}", self);
-        Ok(self)
-    }
-
-    /// Creates a `Clog` struct from command line `clap::ArgMatches`
-    ///
-    /// # Example
-    ///
-    /// ```ignore
-    /// # use clog::Clog;
-    ///
-    /// let matches = // clap settings...
-    ///
-    /// let clog = Clog::from_matches(matches).unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// ```
-    pub fn from_matches(matches: &ArgMatches) -> ClogResult {
-        debugln!("Creating clog from matches");
-        let mut clog = if let Some(cfg) = matches.value_of("config") {
-        debugln!("User passed in config file: {:?}", cfg);
-            if matches.is_present("workdir") && matches.is_present("gitdir") {
-                debugln!("User passed in both\n\tworking dir: {:?}\n\tgit dir: {:?}", matches.value_of("workdir"), matches.value_of("gitdir"));
-               // use --config --work-tree --git-dir
-               try!(Clog::with_all(matches.value_of("gitdir").unwrap(),
-                              matches.value_of("workdir").unwrap(),
-                              cfg))
-            } else if let Some(dir) = matches.value_of("workdir") {
-                debugln!("User passed in working dir: {:?}", dir);
-               // use --config --work-tree
-               try!(Clog::with_dir_and_file(dir, cfg))
-            } else if let Some(dir) = matches.value_of("gitdir") {
-                debugln!("User passed in git dir: {:?}", dir);
-               // use --config --git-dir
-               try!(Clog::with_dir_and_file(dir, cfg))
-            } else {
-                debugln!("User only passed config");
-               // use --config only
-               try!(Clog::from_file(cfg))
-            }
-        } else {
-            debugln!("User didn't pass in a config");
-            if matches.is_present("gitdir") && matches.is_present("workdir") {
-                let wdir = matches.value_of("workdir").unwrap();
-                let gdir = matches.value_of("gitdir").unwrap();
-                debugln!("User passed in both\n\tworking dir: {:?}\n\tgit dir: {:?}", wdir, gdir);
-                try!(Clog::with_dirs(gdir, wdir))
-            } else if let Some(dir) = matches.value_of("gitdir") {
-                debugln!("User passed in git dir: {:?}", dir);
-                try!(Clog::with_dir(dir))
-            } else if let Some(dir) = matches.value_of("workdir") {
-                debugln!("User passed in working dir: {:?}", dir);
-                try!(Clog::with_dir(dir))
-            } else {
-                debugln!("Trying the default config file");
-                try!(Clog::from_file(CLOG_CONFIG_FILE))
-            }
-        };
-
-        // compute version early, so we can exit on error
-        clog.version = {
-            // less typing later...
-            let (major, minor, patch) = (matches.is_present("major"), matches.is_present("minor"), matches.is_present("patch"));
-            if matches.is_present("ver") {
-                matches.value_of("ver").unwrap().to_owned()
-            } else if major || minor || patch {
-                let mut had_v = false;
-                let v_string = clog.get_latest_tag_ver();
-                let first_char = v_string.chars().nth(0).unwrap_or(' ');
-                let v_slice = if first_char == 'v' || first_char == 'V' {
-                    had_v = true;
-                    v_string.trim_left_matches(|c| c == 'v' || c == 'V')
-                } else {
-                    &v_string[..]
-                };
-                match semver::Version::parse(v_slice) {
-                    Ok(ref mut v) => {
-                        // if-else may be quicker, but it's longer mentally, and this isn't slow
-                        match (major, minor, patch) {
-                            (true,_,_) => { v.major += 1; v.minor = 0; v.patch = 0; },
-                            (_,true,_) => { v.minor += 1; v.patch = 0; },
-                            (_,_,true) => { v.patch += 1; clog.patch_ver = true; },
-                            _          => unreachable!()
-                        }
-                        format!("{}{}", if had_v{"v"}else{""}, v)
-                    },
-                    Err(e) => {
-                        return Err(Box::new(format!("Error: {}\n\n\tEnsure the tag format follows Semantic Versioning such as N.N.N\n\tor set the version manually with --setversion <version>" , e )));
-                    }
-                }
-            } else {
-                clog.version
-            }
-        };
-
-        if let Some(from) = matches.value_of("from") {
-            clog.from = from.to_owned();
-        } else if matches.is_present("from-latest-tag") {
-            clog.from = clog.get_latest_tag();
-        }
-
-        if let Some(repo) = matches.value_of("repo") {
-            clog.repo = repo.to_owned();
-        }
-
-        if matches.is_present("link-style") {
-            clog.link_style = value_t!(matches.value_of("link-style"), LinkStyle).unwrap_or(LinkStyle::Github);
-        } 
-
-        if let Some(subtitle) = matches.value_of("subtitle") {
-            clog.subtitle = subtitle.to_owned();
-        }
-
-        if let Some(file) = matches.value_of("outfile") {
-            clog.changelog = file.to_owned();
-        }
-
-        debugln!("Returning clog:\n{:?}", clog);
-        Ok(clog)
-    }
-
-    /// Sets the grep search pattern for finding commits.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.grep("BREAKS");
-    /// ```
-    pub fn grep<S: Into<String>>(&mut self, g: S) -> &mut Clog {
-        self.grep = g.into();
-        self
-    }
-
-    /// Sets the format for `git log` output
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.format("%H%n%n==END==");
-    /// ```
-    pub fn format<S: Into<String>>(&mut self, f: S) -> &mut Clog {
-        self.format = f.into();
-        self
-    }
-
-    /// Sets the repository used for the base of hyper-links
-    ///
-    /// **NOTE:** Leave off the trailing `.git`
-    ///
-    /// **NOTE:** Anything set here will override anything in a configuration TOML file
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.repository("https://github.com/thoughtram/clog");
-    /// ```
-    pub fn repository<S: Into<String>>(&mut self, r: S) -> &mut Clog {
-        self.repo = r.into();
-        self
-    }
-
-    /// Sets the link style to use for hyper-links
-    ///
-    /// **NOTE:** Anything set here will override anything in a configuration TOML file
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::{Clog, LinkStyle};
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.link_style(LinkStyle::Stash);
-    /// ```
-    pub fn link_style(&mut self, l: LinkStyle) -> &mut Clog {
-        self.link_style = l;
-        self
-    }
-
-    /// Sets the version for the release
-    ///
-    /// **NOTE:** Anything set here will override anything in a configuration TOML file
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.version("v0.2.1-beta3");
-    /// ```
-    pub fn version<S: Into<String>>(&mut self, v: S) -> &mut Clog {
-        self.version = v.into();
-        self
-    }
-
-    /// Sets the subtitle for the release
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.subtitle("My Awesome Release Title");
-    /// ```
-    pub fn subtitle<S: Into<String>>(&mut self, s: S) -> &mut Clog {
-        self.subtitle = s.into();
-        self
-    }
-
-    /// Sets how far back to begin searching commits using a short hash or full hash
-    ///
-    /// **NOTE:** Anything set here will override anything in a configuration TOML file
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.from("6d8183f");
-    /// ```
-    pub fn from<S: Into<String>>(&mut self, f: S) -> &mut Clog {
-        self.from = f.into();
-        self
-    }
-
-    /// Sets what point to stop searching for commits using a short hash or full hash (Defaults to
-    /// `HEAD`)
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.to("123abc4d");
-    /// ```
-    pub fn to<S: Into<String>>(&mut self, t: S) -> &mut Clog {
-        self.to = t.into();
-        self
-    }
-
-    /// Sets the changelog file to output or prepend to (Defaults to `changelog.md`)
-    ///
-    /// **NOTE:** Anything set here will override anything in a configuration TOML file
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.changelog("/myproject/my_changelog.md");
-    /// ```
-    pub fn changelog<S: Into<String>>(&mut self, c: S) -> &mut Clog {
-        self.changelog = c.into();
-        self
-    }
-
-    /// Sets the `git` metadata directory (typically `.git` child of your project working tree)
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.git_dir("/myproject/.git");
-    /// ```
-    pub fn git_dir<P: AsRef<Path>>(&mut self, d: P) -> &mut Clog {
-        self.git_dir = Some(d.as_ref().to_path_buf());
-        self
-    }
-
-    /// Sets the `git` working tree directory (typically your project directory)
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.git_work_tree("/myproject");
-    /// ```
-    pub fn git_work_tree<P: AsRef<Path>>(&mut self, d: P) -> &mut Clog {
-        self.git_work_tree = Some(d.as_ref().to_path_buf());
-        self
-    }
-
-    /// Sets whether or not this is a patch release (defaults to `false`)
-    ///
-    /// **NOTE:** Setting this to true will cause the release subtitle to use a smaller markdown
-    /// heading
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.patch_ver(true);
-    /// ```
-    pub fn patch_ver(&mut self, p: bool) -> &mut Clog {
-        self.patch_ver = p;
-        self
-    }
-
-    /// Retrieves a `Vec<Commit>` of only commits we care about.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// let commits = clog.get_commits();
-    /// ```
-    pub fn get_commits(&self) -> Commits {
-        let range = match &self.from[..] {
-            "" => "HEAD".to_owned(),
-            _  => format!("{}..{}", self.from, self.to)
-        };
-
-        let output = Command::new("git")
-                .arg(&self.get_git_dir()[..])
-                .arg(&self.get_git_work_tree()[..])
-                .arg("log")
-                .arg("-E")
-                .arg(&format!("--grep={}", self.grep))
-                .arg(&format!("--format={}", self.format))
-                .arg(&range)
-                .output().unwrap_or_else(|e| panic!("Failed to run 'git log' with error: {}", e));
-
-        String::from_utf8_lossy(&output.stdout)
-                .split("\n==END==\n")
-                .map(|commit_str| { self.parse_raw_commit(commit_str) })
-                .filter(| entry| entry.commit_type != "Unknown")
-                .collect()
-    }
-
-    fn parse_raw_commit(&self, commit_str:&str) -> Commit {
-        let mut lines = commit_str.split('\n');
-
-        let hash = lines.next().unwrap_or("").to_owned();
-
-        let commit_pattern = regex!(r"^(.*?)(?:\((.*)?\))?:(.*)");
-        let (subject, component, commit_type) =
-            match lines.next().and_then(|s| commit_pattern.captures(s)) {
-                Some(caps) => {
-                    let commit_type = self.section_for(caps.at(1).unwrap_or("")).to_owned();
-                    let component = caps.at(2);
-                    let subject = caps.at(3);
-                    (subject, component, commit_type)
-               },
-               None => (Some(""), Some(""), self.section_for("unk").clone())
-            };
-        let closes_pattern = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
-        let closes = lines.filter_map(|line| closes_pattern.captures(line))
-                          .map(|caps| caps.at(2).unwrap_or("").to_owned())
-                          .collect();
-
-        Commit {
-            hash: hash,
-            subject: subject.unwrap().to_owned(),
-            component: component.unwrap_or("").to_owned(),
-            closes: closes,
-            breaks: vec![],
-            commit_type: commit_type
-        }
-    }
-
-    /// Retrieves the latest tag from the git directory
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// let tag = clog.get_latest_tag();
-    /// ```
-    pub fn get_latest_tag(&self) -> String {
-        let output = Command::new("git")
-                .arg(&self.get_git_dir()[..])
-                .arg(&self.get_git_work_tree()[..])
-                .arg("rev-list")
-                .arg("--tags")
-                .arg("--max-count=1")
-                .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-list' with error: {}",e));
-        let buf = String::from_utf8_lossy(&output.stdout);
-
-        buf.trim_matches('\n').to_owned()
-    }
-
-    /// Retrieves the latest tag version from the git directory
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// let tag_ver = clog.get_latest_tag_ver();
-    /// ```
-    pub fn get_latest_tag_ver(&self) -> String {
-        let output = Command::new("git")
-                .arg(&self.get_git_dir()[..])
-                .arg(&self.get_git_work_tree()[..])
-                .arg("describe")
-                .arg("--tags")
-                .arg("--abbrev=0")
-                .output().unwrap_or_else(|e| panic!("Failed to run 'git describe' with error: {}",e));
-
-        String::from_utf8_lossy(&output.stdout).into_owned()
-    }
-
-    /// Retrieves the hash of the most recent commit from the git directory (i.e. HEAD)
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// let head_hash = clog.get_last_commit();
-    /// ```
-    pub fn get_last_commit(&self) -> String {
-        let output = Command::new("git")
-                .arg(&self.get_git_dir()[..])
-                .arg(&self.get_git_work_tree()[..])
-                .arg("rev-parse")
-                .arg("HEAD")
-                .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-parse' with error: {}", e));
-
-        String::from_utf8_lossy(&output.stdout).into_owned()
-    }
-
-    fn get_git_work_tree(&self) -> String {
-        // Check if user supplied a local git dir and working tree
-        if self.git_work_tree.is_none() && self.git_dir.is_none() {
-            // None was provided
-            "".to_owned()
-        } else if self.git_dir.is_some() {
-            // user supplied both
-            format!("--work-tree={}", self.git_work_tree.clone().unwrap().to_str().unwrap())
-        } else {
-            // user only supplied a working tree i.e. /home/user/mycode
-            let mut w = self.git_work_tree.clone().unwrap();
-            w.pop();
-            format!("--work-tree={}", w.to_str().unwrap())
-        }
-
-    }
-
-    fn get_git_dir(&self) -> String {
-        // Check if user supplied a local git dir and working tree
-        if self.git_dir.is_none() && self.git_work_tree.is_none() {
-            // None was provided
-            "".to_owned()
-        } else if self.git_work_tree.is_some() {
-            // user supplied both
-            format!("--git-dir={}", self.git_dir.clone().unwrap().to_str().unwrap())
-        } else {
-            // user only supplied a git dir i.e. /home/user/mycode/.git
-            let mut g =  self.git_dir.clone().unwrap();
-            g.push(".git");
-            format!("--git-dir={}", g.to_str().unwrap())
-        }
-    }
-
-    /// Retrieves the section title for a given alias
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// let section = clog.section_for("feat");
-    /// assert_eq!("Features", section);
-    /// ```
-    pub fn section_for(&self, alias: &str) -> &String {
-        self.section_map.iter().filter(|&(_, v)| v.iter().any(|s| s == alias)).map(|(k, _)| k).next().unwrap_or(self.section_map.keys().filter(|&k| *k == "Unknown".to_owned()).next().unwrap())
-    }
-
-    /// Writes the changelog to a specified file, and prepends new commits if file exists, or
-    /// creates the file if it doesn't
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.write_changelog_to("/myproject/new_changelog.md");
-    /// ```
-    pub fn write_changelog_to<P: AsRef<Path>>(&self, cl: P) {
-        let sm = SectionMap::from_commits(self.get_commits());
-
-        let mut contents = String::new();
-
-        File::open(cl.as_ref()).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-
-        let mut file = File::create(cl.as_ref()).ok().unwrap();
-        let mut writer = LogWriter::new(&mut file, self);
-
-        writer.write_header().ok().expect("failed to write header");
-        for (sec, secmap) in sm.sections {
-            writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
-        }
-        writer.write(&contents[..]).ok().expect("failed to write contents");
-    }
-
-    /// Writes the changelog to the default location and file or wherever was specified by the TOML
-    /// or configuration options. `Clog` prepends new commits if file exists, or
-    /// creates the file if it doesn't.
-    ///
-    /// # Example
-    /// ```no_run
-    /// # use clog::Clog;
-    /// let mut clog = Clog::new().unwrap_or_else(|e| {
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    /// 
-    /// clog.write_changelog();
-    /// ```
-    pub fn write_changelog(&self) {
-        self.write_changelog_to(&self.changelog[..]);
-    }
-}
diff --git a/src/error.rs b/src/error.rs
new file mode 100644
index 0000000..006a73e
--- /dev/null
+++ b/src/error.rs
@@ -0,0 +1,71 @@
+use std::convert::From;
+use std::error::Error;
+use std::fmt::{Display, Formatter};
+use std::fmt::Result as FmtResult;
+
+use clog::error::Error as ClogErr;
+
+use fmt::Format;
+
+#[derive(Debug)]
+#[allow(dead_code)]
+pub enum CliError {
+    Semver(Box<Error>, String),
+    Generic(String),
+    Unknown
+}
+
+// Copies clog::error::Error;
+impl CliError {
+    /// Return whether this was a fatal error or not.
+    pub fn is_fatal(&self) -> bool {
+        // For now all errors are fatal
+        true
+    }
+
+    /// Print this error and immediately exit the program.
+    ///
+    /// If the error is non-fatal then the error is printed to stdout and the
+    /// exit status will be `0`. Otherwise, when the error is fatal, the error
+    /// is printed to stderr and the exit status will be `1`.
+    pub fn exit(&self) -> ! {
+        if self.is_fatal() {
+            wlnerr!("{}", self);
+            ::std::process::exit(1)
+        } else {
+            println!("{}", self);
+            ::std::process::exit(0)
+        }
+    }
+}
+
+impl Display for CliError {
+    fn fmt(&self, f: &mut Formatter) -> FmtResult {
+        write!(f, "{} {}", Format::Error("error:"), self.description())
+    }
+}
+
+impl Error for CliError {
+    fn description<'a>(&'a self) -> &'a str {
+        match *self {
+            CliError::Semver(_, ref s) => &*s,
+            CliError::Generic(ref d) => &*d,
+            CliError::Unknown =>
+                "An unknown fatal error has occurred, please consider filing a bug-report!",
+        }
+    }
+
+    fn cause(&self) -> Option<&Error> {
+        match *self {
+            CliError::Semver(ref e, _) => Some(&**e),
+            CliError::Generic(..) => None,
+            CliError::Unknown => None,
+        }
+    }
+}
+
+impl From<ClogErr> for CliError {
+    fn from(ce: ClogErr) -> Self {
+        CliError::Generic(ce.description().to_owned())
+    }
+}
diff --git a/src/fmt.rs b/src/fmt.rs
new file mode 100644
index 0000000..814864b
--- /dev/null
+++ b/src/fmt.rs
@@ -0,0 +1,50 @@
+use std::fmt;
+
+#[cfg(all(feature = "color", not(target_os = "windows")))]
+use ansi_term::Colour::{Red, Green, Yellow};
+#[cfg(all(feature = "color", not(target_os = "windows")))]
+use ansi_term::ANSIString;
+
+#[allow(dead_code)]
+pub enum Format<T> {
+    Error(T),
+    Warning(T),
+    Good(T)
+}
+
+#[cfg(all(feature = "color", not(target_os = "windows")))]
+impl<T: AsRef<str>> Format<T> {
+    fn format(&self) -> ANSIString {
+        match *self {
+            Format::Error(ref e) => Red.bold().paint(e.as_ref()),
+            Format::Warning(ref e) => Yellow.paint(e.as_ref()),
+            Format::Good(ref e) => Green.paint(e.as_ref()),
+        }
+    }
+
+}
+
+#[cfg(all(feature = "color", not(target_os = "windows")))]
+impl<T: AsRef<str>> fmt::Display for Format<T> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{}", &self.format())
+    }
+}
+
+#[cfg(any(not(feature = "color"), target_os = "windows"))]
+impl<T: fmt::Display> Format<T> {
+    fn format(&self) -> &T {
+        match *self {
+            Format::Error(ref e) => e,
+            Format::Warning(ref e) => e,
+            Format::Good(ref e) => e,
+        }
+    }
+}
+
+#[cfg(any(not(feature = "color"), target_os = "windows"))]
+impl<T: fmt::Display> fmt::Display for Format<T> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{}", &self.format())
+    }
+}
diff --git a/src/git.rs b/src/git.rs
deleted file mode 100644
index 896f6c6..0000000
--- a/src/git.rs
+++ /dev/null
@@ -1,34 +0,0 @@
-use std::fmt;
-
-/// The struct representation of a `Commit`
-#[derive(Clone)]
-pub struct Commit {
-    /// The 40 char hash
-    pub hash: String,
-    /// The commit subject
-    pub subject: String,
-    /// The component (if any)
-    pub component: String,
-    /// Any issues this commit closes
-    pub closes: Vec<String>,
-    /// Any issues this commit breaks
-    pub breaks: Vec<String>,
-    /// The commit type (or alias)
-    pub commit_type: String 
-}
-
-/// A convienience type for multiple commits
-pub type Commits = Vec<Commit>;
-
-impl fmt::Debug for Commit {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "{{
-            hash:{:?},
-            subject: {:?},
-            commit_type: {:?},
-            component: {:?},
-            closes: {:?},
-            breaks: {:?}
-        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
-    }
-}
diff --git a/src/lib.rs b/src/lib.rs
deleted file mode 100644
index fba02ee..0000000
--- a/src/lib.rs
+++ /dev/null
@@ -1,25 +0,0 @@
-// Until regex_macros compiles with nightly, these should be commented out
-//
-// #![cfg_attr(feature = "unstable", feature(plugin))]
-// #![cfg_attr(feature = "unstable", plugin(regex_macros))]
-
-extern crate regex;
-extern crate semver;
-extern crate toml;
-#[macro_use]
-extern crate clap;
-extern crate time;
-
-#[macro_use]
-mod macros;
-pub mod git;
-mod log_writer;
-mod sectionmap;
-mod clog;
-
-pub use clog::{Clog, LinkStyle};
-pub use log_writer::LogWriter;
-pub use sectionmap::SectionMap;
-
-// The default config file
-const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
\ No newline at end of file
diff --git a/src/log_writer.rs b/src/log_writer.rs
deleted file mode 100644
index 7408abf..0000000
--- a/src/log_writer.rs
+++ /dev/null
@@ -1,178 +0,0 @@
-use std::collections::BTreeMap;
-use std::io::{Write, Result};
-
-use time;
-
-use git::Commit;
-use clog::Clog;
-
-/// Writes commits to a specified `Write` object
-pub struct LogWriter<'a, 'cc> {
-    /// The `Write` object
-    writer: &'a mut (Write + 'a),
-    /// The options used when writing sections and commits
-    options: &'cc Clog
-}
-
-impl<'a, 'cc> LogWriter<'a, 'cc> {
-    /// Creates a new instance of the LogWriter using a `Write` object and a `Clog` object as the
-    /// configuration options to use while writing.
-    ///
-    /// # Example
-    ///
-    /// ```no_run
-    /// # use std::fs::File;
-    /// # use std::io::Read;
-    /// # use std::path::Path;
-    /// # use std::collections::BTreeMap;
-    /// # use clog::{Clog, LogWriter};
-    /// let clog = Clog::new().unwrap_or_else(|e| { 
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    ///
-    /// // Open and prepend, or create the changelog file...
-    /// let mut contents = String::new();
-    /// File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-    /// let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
-    ///
-    /// // Create the LogWriter... 
-    /// let mut writer = LogWriter::new(&mut file, &clog);
-    /// ```
-    pub fn new<T>(writer: &'a mut T, options: &'cc Clog) -> LogWriter<'a, 'cc>
-        where T: Write + Send {
-        LogWriter {
-            writer: writer,
-            options: options
-        }
-    }
-
-    /// Writes the initial header inforamtion for a release
-    ///
-    /// # Example
-    ///
-    /// ```no_run
-    /// # use std::fs::File;
-    /// # use std::io::Read;
-    /// # use std::path::Path;
-    /// # use std::collections::BTreeMap;
-    /// # use clog::{Clog, LogWriter, SectionMap};
-    /// let clog = Clog::new().unwrap_or_else(|e| { 
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    ///
-    /// // Get the commits we're interested in...
-    /// let sm = SectionMap::from_commits(clog.get_commits());
-    ///
-    /// // Open and prepend, or create the changelog file...
-    /// let mut contents = String::new();
-    /// File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-    /// let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
-    ///
-    /// // Write the header...
-    /// let mut writer = LogWriter::new(&mut file, &clog);
-    /// writer.write_header().ok().expect("failed to write header");
-    /// ```
-    pub fn write_header(&mut self) -> Result<()> {
-        let subtitle = match self.options.subtitle.len() {
-            0 => self.options.subtitle.to_owned(),
-            _ => format!(" {}", self.options.subtitle)
-        };
-
-        let version_text = if self.options.patch_ver {
-            format!("### {}{}", self.options.version, subtitle)
-        } else {
-            format!("## {}{}", self.options.version, subtitle)
-        };
-
-        let date = time::now_utc();
-
-        match date.strftime("%Y-%m-%d") {
-            Ok(date) => write!(self.writer, "<a name=\"{}\"></a>\n{} ({})\n\n", self.options.version, version_text, date),
-            Err(_)   => write!(self.writer, "<a name=\"{}\"></a>\n{} ({})\n\n", self.options.version, version_text, "XXXX-XX-XX")
-        }
-    }
-
-    /// Writes a particular section of a changelog 
-    ///
-    /// # Example
-    ///
-    /// ```no_run
-    /// # use std::fs::File;
-    /// # use std::io::Read;
-    /// # use std::path::Path;
-    /// # use std::collections::BTreeMap;
-    /// # use clog::{Clog, LogWriter, SectionMap};
-    /// let clog = Clog::new().unwrap_or_else(|e| { 
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    ///
-    /// // Get the commits we're interested in...
-    /// let sm = SectionMap::from_commits(clog.get_commits());
-    ///
-    /// // Open and prepend, or create the changelog file...
-    /// let mut contents = String::new();
-    /// File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-    /// let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
-    ///
-    /// // Write the header...
-    /// let mut writer = LogWriter::new(&mut file, &clog);
-    /// writer.write_header().ok().expect("failed to write header");
-    ///
-    /// // Write the sections
-    /// for (sec, secmap) in sm.sections {
-    ///    writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
-    /// }
-    /// writer.write(&contents[..]).ok().expect("failed to write contents");
-    /// ```
-    pub fn write_section(&mut self, title: &str, section: &BTreeMap<&String, &Vec<Commit>>)
-                            -> Result<()> {
-        if section.len() == 0 { return Ok(()) }
-
-        try!(self.writer.write(&format!("\n#### {}\n\n", title)[..].as_bytes()));
-
-        for (component, entries) in section.iter() {
-            let nested = (entries.len() > 1) && !component.is_empty();
-
-            let prefix = if nested {
-                try!(write!(self.writer, "* **{}**\n", component));
-                "  *".to_owned()
-            } else if !component.is_empty() {
-                format!("* **{}**", component)
-            } else {
-                format!("* ")
-            };
-
-            for entry in entries.iter() {
-                try!(write!(self.writer, "{} {} ({}",
-                                         prefix,
-                                         entry.subject,
-                                         self.options.link_style
-                                             .commit_link(&entry.hash[..], &self.options.repo[..])));
-
-                if entry.closes.len() > 0 {
-                    let closes_string = entry.closes.iter()
-                                                    .map(|s| self.options.link_style.issue_link(&s[..], &self.options.repo[..]))
-                                                    // FIXME: Connect should be
-                                                    // used on the Iterator
-                                                    .collect::<Vec<String>>()
-                                                    .connect(", ");
-
-                    try!(write!(self.writer, ", closes {}", closes_string));
-                }
-
-                try!(write!(self.writer, ")\n"));
-            }
-        }
-
-        Ok(())
-    }
-
-    /// Writes some contents to the `Write` writer object
-    pub fn write(&mut self, content: &str)  -> Result<()> {
-        try!(write!(self.writer, "\n\n\n"));
-        write!(self.writer, "{}", content)
-    }
-}
diff --git a/src/macros.rs b/src/macros.rs
index 49549f7..0554623 100644
--- a/src/macros.rs
+++ b/src/macros.rs
@@ -1,9 +1,16 @@
-// regex cheat thanks to https://github.com/BurntSushi
+// Convenience for writing to stderr thanks to https://github.com/BurntSushi
+macro_rules! wlnerr(
+    ($($arg:tt)*) => ({
+        use std::io::{Write, stderr};
+        writeln!(&mut stderr(), $($arg)*).ok();
+    })
+);
 
-// Until regex_macros compiles with nightly again, this directive should be commented out
-// #[cfg(not(unstable))]
-macro_rules! regex(
-    ($s:expr) => (::regex::Regex::new($s).unwrap());
+macro_rules! werr(
+    ($($arg:tt)*) => ({
+        use std::io::{Write, stderr};
+        write!(&mut stderr(), $($arg)*).ok();
+    })
 );
 
 #[cfg(feature = "debug")]
@@ -29,7 +36,3 @@
     ($fmt:expr) => ();
     ($fmt:expr, $($arg:tt)*) => ();
 }
-
-macro_rules! werr {
-    () => ()
-}
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
new file mode 100644
index 0000000..f286daa
--- /dev/null
+++ b/src/main.rs
@@ -0,0 +1,249 @@
+#[macro_use]
+extern crate clap;
+extern crate time;
+extern crate clog;
+extern crate semver;
+#[cfg(feature = "color")]
+extern crate ansi_term;
+
+use clap::{App, Arg, ArgGroup, ArgMatches};
+
+use clog::{LinkStyle, Clog};
+use clog::fmt::ChangelogFormat;
+
+#[macro_use]
+mod macros;
+mod error;
+mod fmt;
+
+use error::CliError;
+
+pub type CliResult<T> = Result<T, CliError>;
+const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
+
+fn main() {
+    let styles = LinkStyle::variants();
+    let matches = App::new("clog")
+        // Pull version from Cargo.toml
+        .version(&format!("v{}", crate_version!())[..])
+        .about("a conventional changelog for the rest of us")
+        .args_from_usage("-r, --repository=[repo]     'Repository used for generating commit and issue links{n}\
+                                                       (without the .git, e.g. https://github.com/thoughtram/clog)'
+                          -f, --from=[from]           'e.g. 12a8546'
+                          -T, --format=[format]       'The output format, defaults to markdown{n}\
+                                                       (valid values: markdown, json)'
+                          -M, --major                 'Increment major version by one (Sets minor and patch to 0)'
+                          -g, --git-dir=[gitdir]      'Local .git directory (defaults to current dir + \'.git\')*'
+                          -w, --work-tree=[workdir]   'Local working tree of the git project{n}\
+                                                       (defaults to current dir)*'
+                          -m, --minor                 'Increment minor version by one (Sets patch to 0)'
+                          -p, --patch                 'Increment patch version by one'
+                          -s, --subtitle=[subtitle]   'e.g. \"Crazy Release Title\"'
+                          -t, --to=[to]               'e.g. 8057684 (Defaults to HEAD when omitted)'
+                          -o, --outfile=[outfile]     'Where to write the changelog (Defaults to stdout when omitted)'
+                          -c, --config=[config]       'The Clog Configuration TOML file to use (Defaults to{n}\
+                                                       \'.clog.toml\')**'
+                          -i, --infile=[infile]       'A changelog to append to, but *NOT* write to (Useful in{n}\
+                                                       conjunction with --outfile)'
+                          --setversion=[ver]          'e.g. 1.0.1'")
+        // Because --from-latest-tag can't be used with --from, we add it seperately so we can
+        // specify a .conflicts_with()
+        .arg(Arg::from_usage("-F, --from-latest-tag 'use latest tag as start (instead of --from)'")
+                .conflicts_with("from"))
+        // Because we may want to add more "flavors" at a later date, we can automate the process
+        // of enumerating all possible values with clap
+        .arg(Arg::from_usage("-l, --link-style=[style]     'The style of repository link to generate{n}(Defaults to github)'")
+            .possible_values(&styles))
+        // Because no one should use --changelog and either an --infile or --outfile, we add those
+        // to conflicting lists
+        .arg(Arg::from_usage("-C, --changelog=[changelog] 'A previous changelog to prepend new changes to (this is like{n}\
+                                                           using the same file for both --infile and --outfile and{n}\
+                                                           should not be used in conjuction with either)'")
+            .conflicts_with("infile")
+            .conflicts_with("outfile"))
+        // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
+        // set those as exclusions
+        .arg_group(ArgGroup::with_name("setver")
+                .add_all(&["major", "minor", "patch", "ver"]))
+        .after_help("\
+* If your .git directory is a child of your project directory (most common, such as\n\
+/myproject/.git) AND not in the current working directory (i.e you need to use --work-tree or\n\
+--git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e. \n\
+/myproject/.git), you don't need to use both.\n\n\
+
+** If using the --config to specify a clog configuration TOML file NOT in the current working\n\
+directory (meaning you need to use --work-tree or --git-dir) AND the TOML file is inside your\n\
+project directory (i.e. /myproject/.clog.toml) you do not need to use --work-tree or --git-dir.")
+        .get_matches();
+
+    let start_nsec = time::get_time().nsec;
+
+    let clog = from_matches(&matches).unwrap_or_else(|e| e.exit());
+
+    if let Some(ref file) = clog.outfile {
+        clog.write_changelog_to(file).unwrap_or_else(|e| e.exit());
+
+        let end_nsec = time::get_time().nsec;
+        let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
+        println!("changelog written. (took {} ms)", elapsed_mssec);
+    } else {
+        clog.write_changelog().unwrap_or_else(|e| e.exit());
+    }
+}
+
+/// Creates a `Clog` struct from command line `clap::ArgMatches`
+///
+/// # Example
+///
+/// ```ignore
+/// # use clog::Clog;
+///
+/// let matches = // clap settings...
+///
+/// let clog = Clog::from_matches(matches).unwrap_or_else(|e| {
+///     e.exit();
+/// });
+/// ```
+pub fn from_matches(matches: &ArgMatches) -> CliResult<Clog> {
+    debugln!("Creating clog from matches");
+    let mut clog = if let Some(cfg) = matches.value_of("config") {
+        debugln!("User passed in config file: {:?}", cfg);
+        if matches.is_present("workdir") && matches.is_present("gitdir") {
+            debugln!("User passed in both\n\tworking dir: {:?}\n\tgit dir: {:?}",
+                     matches.value_of("workdir"),
+                     matches.value_of("gitdir"));
+           // use --config --work-tree --git-dir
+            try!(Clog::with_all(matches.value_of("gitdir").unwrap(),
+                                matches.value_of("workdir").unwrap(),
+                                cfg))
+        } else if let Some(dir) = matches.value_of("workdir") {
+            debugln!("User passed in working dir: {:?}", dir);
+           // use --config --work-tree
+            try!(Clog::with_dir_and_file(dir, cfg))
+        } else if let Some(dir) = matches.value_of("gitdir") {
+            debugln!("User passed in git dir: {:?}", dir);
+           // use --config --git-dir
+            try!(Clog::with_dir_and_file(dir, cfg))
+        } else {
+            debugln!("User only passed config");
+           // use --config only
+            try!(Clog::from_file(cfg))
+        }
+    } else {
+        debugln!("User didn't pass in a config");
+        if matches.is_present("gitdir") && matches.is_present("workdir") {
+            let wdir = matches.value_of("workdir").unwrap();
+            let gdir = matches.value_of("gitdir").unwrap();
+            debugln!("User passed in both\n\tworking dir: {:?}\n\tgit dir: {:?}",
+                     wdir,
+                     gdir);
+            try!(Clog::with_dirs(gdir, wdir))
+        } else if let Some(dir) = matches.value_of("gitdir") {
+            debugln!("User passed in git dir: {:?}", dir);
+            try!(Clog::with_dir(dir))
+        } else if let Some(dir) = matches.value_of("workdir") {
+            debugln!("User passed in working dir: {:?}", dir);
+            try!(Clog::with_dir(dir))
+        } else {
+            debugln!("Trying the default config file");
+            try!(Clog::from_file(CLOG_CONFIG_FILE))
+        }
+    };
+
+    // compute version early, so we can exit on error
+    clog.version = {
+        // less typing later...
+        let (major, minor, patch) = (matches.is_present("major"),
+                                     matches.is_present("minor"),
+                                     matches.is_present("patch"));
+        if matches.is_present("ver") {
+            matches.value_of("ver").unwrap().to_owned()
+        } else if major || minor || patch {
+            let mut had_v = false;
+            let v_string = clog.get_latest_tag_ver();
+            let first_char = v_string.chars().nth(0).unwrap_or(' ');
+            let v_slice = if first_char == 'v' || first_char == 'V' {
+                had_v = true;
+                v_string.trim_left_matches(|c| c == 'v' || c == 'V')
+            } else {
+                &v_string[..]
+            };
+            match semver::Version::parse(v_slice) {
+                Ok(ref mut v) => {
+                    // if-else may be quicker, but it's longer mentally, and this isn't slow
+                    match (major, minor, patch) {
+                        (true,_,_) => {
+                            v.major += 1;
+                            v.minor = 0;
+                            v.patch = 0;
+                        }
+                        (_,true,_) => {
+                            v.minor += 1;
+                            v.patch = 0;
+                        }
+                        (_,_,true) => {
+                            v.patch += 1;
+                            clog.patch_ver = true;
+                        }
+                        _ => unreachable!(),
+                    }
+                    format!("{}{}",
+                            if had_v {
+                                "v"
+                            } else {
+                                ""
+                            },
+                            v)
+                }
+                Err(e) => {
+                    return Err(CliError::Semver(Box::new(e),
+                                                String::from("Failed to parse version into \
+                                                              valid SemVer. Ensure the version \
+                                                              is in the X.Y.Z format.")));
+                }
+            }
+        } else {
+            clog.version
+        }
+    };
+
+    if let Some(from) = matches.value_of("from") {
+        clog.from = from.to_owned();
+    } else if matches.is_present("from-latest-tag") {
+        clog.from = clog.get_latest_tag();
+    }
+
+    if let Some(repo) = matches.value_of("repo") {
+        clog.repo = repo.to_owned();
+    }
+
+    if matches.is_present("link-style") {
+        clog.link_style = value_t!(matches.value_of("link-style"), LinkStyle)
+                              .unwrap_or(LinkStyle::Github);
+    }
+
+    if let Some(subtitle) = matches.value_of("subtitle") {
+        clog.subtitle = subtitle.to_owned();
+    }
+
+    if let Some(file) = matches.value_of("outfile") {
+        clog.outfile = Some(file.to_owned());
+    }
+
+    if let Some(file) = matches.value_of("infile") {
+        clog.infile = Some(file.to_owned());
+    }
+
+    if let Some(file) = matches.value_of("changelog") {
+        clog.infile = Some(file.to_owned());
+        clog.outfile = Some(file.to_owned());
+    }
+
+    if matches.is_present("format") {
+        clog.out_format = value_t_or_exit!(matches.value_of("format"), ChangelogFormat);
+    }
+
+    debugln!("Returning clog:\n{:?}", clog);
+
+    Ok(clog)
+}
diff --git a/src/sectionmap.rs b/src/sectionmap.rs
deleted file mode 100644
index c127b25..0000000
--- a/src/sectionmap.rs
+++ /dev/null
@@ -1,64 +0,0 @@
-use std::collections::HashMap;
-use std::collections::BTreeMap;
-
-use git::Commit;
-
-/// A convenience type for a map of components to commits 
-pub type ComponentMap = BTreeMap<String, Vec<Commit>>;
-
-/// A struct which holds sections to and components->commits map
-pub struct SectionMap {
-    pub sections: HashMap<String, ComponentMap>
-}
-
-impl SectionMap {
-    /// Creates a section map from a vector of commits, which we can then iterate through and write
-    ///
-    /// # Example
-    ///
-    /// ```no_run
-    /// # use std::fs::File;
-    /// # use std::io::Read;
-    /// # use std::path::Path;
-    /// # use std::collections::BTreeMap;
-    /// # use clog::{Clog, LogWriter, SectionMap};
-    /// let clog = Clog::new().unwrap_or_else(|e| { 
-    ///     println!("Error initializing: {}", e);
-    ///     std::process::exit(1);
-    /// });
-    ///
-    /// // Get the commits we're interested in and create the section map...
-    /// let sm = SectionMap::from_commits(clog.get_commits());
-    ///
-    /// // Open and prepend, or create the changelog file...
-    /// let mut contents = String::new();
-    /// File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-    /// let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
-    ///
-    /// // Write the header...
-    /// let mut writer = LogWriter::new(&mut file, &clog);
-    /// writer.write_header().ok().expect("failed to write header");
-    ///
-    /// // Write the sections
-    /// for (sec, secmap) in sm.sections {
-    ///    writer.write_section(&sec[..], &secmap.iter()
-    ///                                          .collect::<BTreeMap<_,_>>())
-    ///          .ok()
-    ///          .expect(&format!("failed to write {}", sec)[..]);
-    /// }
-    /// writer.write(&contents[..]).ok().expect("failed to write contents");
-    /// ```
-    pub fn from_commits(commits: Vec<Commit>) -> SectionMap {
-        let mut sm = SectionMap {
-            sections: HashMap::new()
-        };
-
-        commits.into_iter().map(|entry| {
-            let comp_map = sm.sections.entry(entry.commit_type.clone()).or_insert(BTreeMap::new());
-            let sec_map = comp_map.entry(entry.component.clone()).or_insert(vec![]);
-            sec_map.push(entry);
-        }).collect::<Vec<_>>();
-
-        sm
-    }
-}

=====================================================================
start time: Fri May 29 00:00:00 CST 2015
end time: Thu Jul 02 00:00:00 CST 2015
description: 
#### Features
*   adds automatic changelog writing for lib ([a790b703](https://github.com/thoughtram/clog/commit/a790b7034119f49ddff3464b2a3fb81ac20c6744))
*   improves non-cli lib use and configuration ([c0e969c3](https://github.com/thoughtram/clog/commit/c0e969c335bebbe1aa79269c5e05680b09f77fcf))
*   split bin from lib ([218f1d04](https://github.com/thoughtram/clog/commit/218f1d047309a66c3cd132e762df3b2b9f22a5f7))
#### Bug Fixes
*   fixes bug when using current working dir and default config ([f90f0f0e](https://github.com/thoughtram/clog/commit/f90f0f0ebf567f59469f64186440231cf84c130e))
*   fixes bug with non-cli configuration ([731c71d3](https://github.com/thoughtram/clog/commit/731c71d39aab95cc8667e8a42218f821425c3d88))
* **Rust Nightly**  fixes to compile on nightly again ([d2f9afe4](https://github.com/thoughtram/clog/commit/d2f9afe41734ee3a62e645fc3510c1d9c4a5e72b))
<a name="0.7.0"></a>

commit message: 
commit e6fd33d23d272a8dce1c788085b050ebefa2c127 1432901867 -----sp :: Merge pull request #39 from orclev/feature/stash_support
commit a78603745136d412aacf3a9018aa49ca7fbd5764 1432902139 -----sp :: docs(README.md): change repoflavor -> link-style
commit 5437a4bd23df790772496663051af9d210ba0f27+ 1432902354 -----sp :: chore: cuts the 0.7.0 release
commit 262e964d107c5fc7da8dd9b31449ed3529b2e0e3 1434799043 -----sp :: Fix Link to Conventions
commit 97377c2b62f6cd99470af05238acd3e3feb185c4 1434842206 -----sp :: Merge pull request #42 from killercup/patch-1
commit d2f9afe41734ee3a62e645fc3510c1d9c4a5e72b+ 1434859280 -----sp :: fix(Rust Nightly): fixes to compile on nightly again
commit 218f1d047309a66c3cd132e762df3b2b9f22a5f7+ 1435711999 -----sp :: feat: split bin from lib
commit 00d8316b5e53dd45cf4e524f0e7b61c00ec530f4 1435712263 -----sp :: chore: update deps
commit c0e969c335bebbe1aa79269c5e05680b09f77fcf+ 1435755342 -----sp :: feat: improves non-cli lib use and configuration
commit 731c71d39aab95cc8667e8a42218f821425c3d88+ 1435763430 -----sp :: fix: fixes bug with non-cli configuration
commit f90f0f0ebf567f59469f64186440231cf84c130e+ 1435764192 -----sp :: fix: fixes bug when using current working dir and default config
commit a790b7034119f49ddff3464b2a3fb81ac20c6744+ 1435764840 -----sp :: feat: adds automatic changelog writing for lib

hunks: 
diff --git a/Cargo.lock b/Cargo.lock
index 86068cd..23ff3e4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,33 +1,45 @@
 [root]
 name = "clog"
-version = "0.6.0"
+version = "0.7.0"
 dependencies = [
- "clap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex_macros 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 1.0.0-beta (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex_macros 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
- "time 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
- "toml 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
+ "time 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
+ "toml 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "aho-corasick"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "memchr 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "ansi_term"
-version = "0.5.2"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "clap"
-version = "0.10.0"
+version = "1.0.0-beta"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "ansi_term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "strsim 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ansi_term 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "strsim 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
-name = "gcc"
-version = "0.3.5"
+name = "kernel32-sys"
+version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-build 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
 name = "libc"
@@ -35,21 +47,39 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
+name = "memchr"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
 name = "regex"
-version = "0.1.30"
+version = "0.1.38"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "aho-corasick 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex-syntax 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "regex_macros"
-version = "0.1.17"
+version = "0.1.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "rustc-serialize"
-version = "0.3.14"
+version = "0.3.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -59,23 +89,37 @@
 
 [[package]]
 name = "strsim"
-version = "0.3.0"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "time"
-version = "0.1.25"
+version = "0.1.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "gcc 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "kernel32-sys 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "toml"
-version = "0.1.20"
+version = "0.1.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "rustc-serialize 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "winapi"
+version = "0.1.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "winapi-build"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
diff --git a/Cargo.toml b/Cargo.toml
index 8e19913..da11ce1 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.6.0"
+version = "0.7.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
@@ -21,6 +21,9 @@
 
 [features]
 default=[]
+debug=[]
 
 # for building with nightly and unstable features
-unstable=["regex_macros"]
+# until regex_macros compiles with nightly again, this should be commented out
+# unstable = ["regex_macros"]
+unstable=[]
diff --git a/README.md b/README.md
index 33742bc..f9c9049 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,9 @@
 
 [![Build Status](https://travis-ci.org/thoughtram/clog.png?branch=master)](https://travis-ci.org/thoughtram/clog)
 
-A [conventional](https://github.com/ajoslin/conventional-changelog/blob/master/CONVENTIONS.md) changelog for the rest of us
+A [conventional][convention] changelog for the rest of us
+
+[convention]: https://github.com/ajoslin/conventional-changelog/blob/a5505865ff3dd710cf757f50530e73ef0ca641da/conventions/angular.md
 
 ### About
 
@@ -34,7 +36,7 @@
         --from <from>                e.g. 12a8546
     -o, --outfile <outfile>          Where to write the changelog (Defaults to 'changelog.md')
     -r, --repository <repository>    e.g. https://github.com/thoughtram/clog
-        --repoflavor <flavor>        e.g. github
+        --link-style <style>         The commit link style to use, defaults to github [values: Github, Gitlab, Stash]
         --subtitle <subtitle>        e.g. crazy-release-title
         --to <to>                    e.g. 8057684 (Defaults to HEAD when omitted)
         --setversion <ver>           e.g. 1.0.1
@@ -59,8 +61,8 @@
 repository = "https://github.com/thoughtram/clog"
 subtitle = "my awesome title"
 
-# specify the flavor of repo links to generate, defaults to "github" if omitted
-repo-flavor = "github"
+# specify the style of commit links to generate, defaults to "github" if omitted
+link-style = "github"
 
 # sets the changelog output file, defaults to "changelog.md" if omitted
 outfile = "MyChangelog.md"
diff --git a/changelog.md b/changelog.md
index 21d8437..c509d7c 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,15 @@
+<a name="0.7.0"></a>
+## 0.7.0 (2015-05-29)
+
+
+#### Features
+
+* **repoflavor**  allows specifying the flavor of link to generate ([b3dd5762](https://github.com/thoughtram/clog/commit/b3dd5762544f05b7ed7da5dc67d9d17ba80332ff))
+* **sections**  allows users to use empty components in commit subjects ([71b32ee6](https://github.com/thoughtram/clog/commit/71b32ee6776d9f05771ee884b12c25d98a7eb59f), closes [#2](https://github.com/thoughtram/clog/issues/2))
+* **version headers**  distinguishes between minor and patch version headers ([c5c02764](https://github.com/thoughtram/clog/commit/c5c02764bc715dbf6cc758f7b628b29036ad8e80), closes [#5](https://github.com/thoughtram/clog/issues/5))
+
+
+
 <a name="v0.6.0"></a>
 ## v0.6.0 (2015-05-05)
 
diff --git a/src/bin/clog.rs b/src/bin/clog.rs
new file mode 100644
index 0000000..0acdd4f
--- /dev/null
+++ b/src/bin/clog.rs
@@ -0,0 +1,78 @@
+#[macro_use]
+extern crate clap;
+extern crate time;
+extern crate clog;
+
+use std::fs::File;
+use std::io::Read;
+use std::path::Path;
+use std::collections::BTreeMap;
+
+use clap::{App, Arg, ArgGroup};
+
+use clog::{LinkStyle, Clog, LogWriter, SectionMap};
+
+fn main () {
+    let styles = LinkStyle::variants();
+    let matches = App::new("clog")
+        // Pull version from Cargo.toml
+        .version(&format!("v{}", crate_version!())[..])
+        .about("a conventional changelog for the rest of us")
+        .args_from_usage("-r, --repository=[repo]   'Repo used for link generation (without the .git, e.g. https://github.com/thoughtram/clog)'
+                          -f, --from=[from]         'e.g. 12a8546'
+                          -M, --major               'Increment major version by one (Sets minor and patch to 0)'
+                          -g, --git-dir=[gitdir]    'Local .git directory (defaults to current dir + \'.git\')*'
+                          -w, --work-tree=[workdir] 'Local working tree of the git project (defaults to current dir)*' 
+                          -m, --minor               'Increment minor version by one (Sets patch to 0)'
+                          -p, --patch               'Increment patch version by one'
+                          -s, --subtitle=[subtitle] 'e.g. \"Crazy Release Title\"'
+                          -t, --to=[to]             'e.g. 8057684 (Defaults to HEAD when omitted)'
+                          -o, --outfile=[outfile]   'Where to write the changelog (Defaults to \'changelog.md\')'
+                          -c, --config              'The Clog Configuration TOML file to use (Defaults to \'.clog.toml\')**'
+                          --setversion=[ver]        'e.g. 1.0.1'")
+        // Because --from-latest-tag can't be used with --from, we add it seperately so we can
+        // specify a .conflicts_with()
+        .arg(Arg::from_usage("-F, --from-latest-tag 'use latest tag as start (instead of --from)'")
+                .conflicts_with("from"))
+        // Because we may want to add more "flavors" at a later date, we can automate the process
+        // of enumerating all possible values with clap
+        .arg(Arg::from_usage("-l, --link-style=[style]     'The style of repository link to generate (Defaults to github)'")
+            .possible_values(&styles))
+        // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
+        // set those as exclusions
+        .arg_group(ArgGroup::with_name("setver")
+                .add_all(vec!["major", "minor", "patch", "ver"]))
+        .after_help("\
+* If your .git directory is a child of your project directory (most common, such as\n\
+/myproject/.git) AND not in the current working directory (i.e you need to use --work-tree or\n\
+--git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e. \n\
+/myproject/.git), you don't need to use both.\n\n\
+
+** If using the --config to specify a clog configuration TOML file NOT in the current working\n\
+directory (meaning you need to use --work-tree or --git-dir) AND the TOML file is inside your\n\
+project directory (i.e. /myproject/.clog.toml) you do not need to use --work-tree or --git-dir.")
+        .get_matches();
+
+    let start_nsec = time::get_time().nsec;
+
+    let clog = Clog::from_matches(&matches).unwrap_or_else(|e| { println!("{}",e); std::process::exit(1); });
+
+    let sm = SectionMap::from_commits(clog.get_commits());
+
+    let mut contents = String::new();
+
+    File::open(&Path::new(&clog.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
+
+    let mut file = File::create(&Path::new(&clog.changelog[..])).ok().unwrap();
+    let mut writer = LogWriter::new(&mut file, &clog);
+
+    writer.write_header().ok().expect("failed to write header");
+    for (sec, secmap) in sm.sections {
+        writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
+    }
+    writer.write(&contents[..]).ok().expect("failed to write contents");
+
+    let end_nsec = time::get_time().nsec;
+    let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
+    println!("changelog updated. (took {} ms)", elapsed_mssec);
+}
diff --git a/src/clog.rs b/src/clog.rs
new file mode 100644
index 0000000..151a9d4
--- /dev/null
+++ b/src/clog.rs
@@ -0,0 +1,580 @@
+use std::collections::{HashMap, BTreeMap};
+use std::convert::AsRef;
+use std::env;
+use std::fmt::Display;
+use std::fs::File;
+use std::io::Read;
+use std::path::{Path, PathBuf};
+use std::process::Command;
+
+use clap::ArgMatches;
+use toml::{Value, Parser};
+use semver;
+
+use git::{Commits, Commit};
+use log_writer::LogWriter;
+use sectionmap::SectionMap;
+
+use CLOG_CONFIG_FILE;
+
+arg_enum!{
+    pub enum LinkStyle {
+        Github,
+        Gitlab,
+        Stash
+    }
+}
+
+impl LinkStyle {
+    pub fn issue_link<S: AsRef<str>>(&self, issue: S, repo: S) -> String {
+        match repo.as_ref() {
+            "" => format!("(#{})", issue.as_ref()),
+            link => {
+                match *self {
+                    LinkStyle::Github => format!("[#{}]({}/issues/{})", issue.as_ref(), link, issue.as_ref()),
+                    LinkStyle::Gitlab => format!("[#{}]({}/issues/{})", issue.as_ref(), link, issue.as_ref()),
+                    LinkStyle::Stash  => format!("(#{})", issue.as_ref()) // Stash doesn't support issue links
+                }
+            }
+        }
+    }
+
+    pub fn commit_link<S: AsRef<str>>(&self, hash: S, repo: S) -> String {
+        let short_hash = &hash.as_ref()[0..8];
+        match repo.as_ref() {
+            "" => format!("({})", short_hash),
+            link => {
+                match *self {
+                    LinkStyle::Github => format!("[{}]({}/commit/{})", short_hash, link, hash.as_ref()),
+                    LinkStyle::Gitlab => format!("[{}]({}/commit/{})", short_hash, link, hash.as_ref()),
+                    LinkStyle::Stash  => format!("[{}]({}/commits/{})", short_hash, link, hash.as_ref())
+                }
+            }
+        }
+    }
+}
+
+pub struct Clog {
+    pub grep: String,
+    pub format: String,
+    pub repo: String,
+    pub link_style: LinkStyle,
+    pub version: String,
+    pub patch_ver: bool,
+    pub subtitle: String,
+    pub from: String,
+    pub to: String,
+    pub changelog: String,
+    pub section_map: HashMap<String, Vec<String>>,
+    pub git_dir: Option<PathBuf>,
+    pub git_work_tree: Option<PathBuf>, 
+}
+
+pub type ClogResult = Result<Clog, Box<Display>>;
+
+impl Clog {
+    fn _new() -> Clog {
+        debugln!("Creating private default clog");
+        let mut sections = HashMap::new();
+        sections.insert("Features".to_owned(), vec!["ft".to_owned(), "feat".to_owned()]);
+        sections.insert("Bug Fixes".to_owned(), vec!["fx".to_owned(), "fix".to_owned()]);
+        sections.insert("Unknown".to_owned(), vec!["unk".to_owned()]);
+        sections.insert("Breaks".to_owned(), vec![]);
+
+        Clog {
+            grep: format!("{}BREAKING'",
+                sections.values()
+                        .map(|v| v.iter().fold(String::new(), |acc, al| {
+                            acc + &format!("^{}|", al)[..]
+                        }))
+                        .fold(String::new(), |acc, al| {
+                            acc + &format!("^{}|", al)[..]
+                        })),
+            format: "%H%n%s%n%b%n==END==".to_owned(),
+            repo: "".to_owned(),
+            link_style: LinkStyle::Github,
+            version: "".to_owned(),
+            patch_ver: false,
+            subtitle: "".to_owned(),
+            from: "".to_owned(),
+            to: "HEAD".to_owned(),
+            changelog: "changelog.md".to_owned(),
+            section_map: sections,
+            git_dir: None,
+            git_work_tree: None,
+        }
+    }
+
+    pub fn new() -> ClogResult {
+        debugln!("Creating public default clog");
+        Clog::from_file(CLOG_CONFIG_FILE)
+    }
+
+    pub fn with_all<P: AsRef<Path>>(git_dir: P, work_tree: P, cfg_file: P) -> ClogResult {
+        debugln!("Creating clog with \n\tgit_dir: {:?}\n\twork_tree: {:?}\n\tcfg_file: {:?}", 
+            git_dir.as_ref(), 
+            work_tree.as_ref(), 
+            cfg_file.as_ref());
+        let clog = try!(Clog::with_dirs(git_dir, 
+                                            work_tree));
+        clog.try_config_file(cfg_file.as_ref())   
+    }
+
+    pub fn with_dir_and_file<P: AsRef<Path>>(dir: P, cfg_file: P) -> ClogResult {
+        debugln!("Creating clog with \n\tdir: {:?}\n\tcfg_file: {:?}", 
+            dir.as_ref(), 
+            cfg_file.as_ref());
+        let clog = try!(Clog::_with_dir(dir));
+        clog.try_config_file(cfg_file.as_ref())   
+    }
+
+    fn _with_dir<P: AsRef<Path>>(dir: P) -> ClogResult {
+        debugln!("Creating private clog with \n\tdir: {:?}", dir.as_ref());
+        let mut clog = Clog::_new();
+        if dir.as_ref().ends_with(".git") {
+            debugln!("dir ends with .git");
+            let mut wd = dir.as_ref().to_path_buf();
+            clog.git_dir = Some(wd.clone());
+            wd.pop();
+            clog.git_work_tree = Some(wd);
+        } else {
+            debugln!("dir doesn't end with .git");
+            let mut gd = dir.as_ref().to_path_buf();
+            clog.git_work_tree = Some(gd.clone());
+            gd.push(".git");
+            clog.git_dir = Some(gd);
+        }
+
+        Ok(clog)
+    }
+
+    pub fn with_dir<P: AsRef<Path>>(dir: P) -> ClogResult {
+        let clog = try!(Clog::_with_dir(dir));
+        clog.try_config_file(Path::new(CLOG_CONFIG_FILE))
+    }
+
+    pub fn with_dirs<P: AsRef<Path>>(git_dir: P, work_tree: P) -> ClogResult {
+        debugln!("Creating clog with \n\tgit_dir: {:?}\n\twork_tree: {:?}", 
+            git_dir.as_ref(), 
+            work_tree.as_ref());
+        let mut clog = Clog::_new();
+        clog.git_dir = Some(git_dir.as_ref().to_path_buf());
+        clog.git_work_tree = Some(work_tree.as_ref().to_path_buf());
+        clog.try_config_file(Path::new(CLOG_CONFIG_FILE))
+    }
+
+    pub fn from_file<P: AsRef<Path>>(file: P) -> ClogResult {
+        debugln!("Creating clog with \n\tfile: {:?}", file.as_ref());
+        // Determine if the cfg_file was relative or not
+        let cfg_file = if file.as_ref().is_relative() {
+            debugln!("file is relative");
+            let cwd = match env::current_dir() {
+                Ok(d)  => d,
+                Err(e) => return Err(Box::new(e)),
+            };
+            Path::new(&cwd).join(file.as_ref())
+        } else {
+            debugln!("file is absolute");
+            file.as_ref().to_path_buf()
+        };
+
+        // We assume whatever dir the .clog.toml file is also contains the git metadata
+        let mut dir = cfg_file.clone();
+        dir.pop();
+        Clog::with_dir_and_file(dir, cfg_file)
+    }
+
+    fn try_config_file(mut self, cfg_file: &Path) -> ClogResult {
+        debugln!("Trying to use config file: {:?}", cfg_file);
+        let mut toml_from_latest = None;
+        let mut toml_repo = None;
+        let mut toml_subtitle = None;
+        let mut toml_link_style = None;
+        let mut toml_outfile = None;
+
+        if let Ok(ref mut toml_f) = File::open(cfg_file) {
+            let mut toml_s = String::with_capacity(100);
+
+            if let Err(e) = toml_f.read_to_string(&mut toml_s) {
+                return Err(Box::new(e))
+            }
+
+            toml_s.shrink_to_fit();
+
+            let mut toml = Parser::new(&toml_s[..]);
+
+            let toml_table = match toml.parse() {
+                Some(table) => table,
+                None        => {
+                    return Err(Box::new(format!("Error parsing file: {}\n\nPlease check the format or specify the options manually", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"))))
+                }
+            };
+
+            let clog_table = match toml_table.get("clog") {
+                Some(table) => table,
+                None        => {
+                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"))))
+                }
+            };
+
+            toml_from_latest = clog_table.lookup("from-latest-tag").unwrap_or(&Value::Boolean(false)).as_bool();
+            toml_repo = match clog_table.lookup("repository") {
+                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
+                None      => Some("".to_owned())
+            };
+            toml_subtitle = match clog_table.lookup("subtitle") {
+                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
+                None      => Some("".to_owned())
+            };
+            toml_link_style = match clog_table.lookup("link-style") {
+                Some(val) => match val.as_str().unwrap_or("github").parse::<LinkStyle>() {
+                    Ok(style) => Some(style),
+                    Err(err)   => {
+                        return Err(Box::new(format!("Error parsing file {}\n\n{}", cfg_file.to_str().unwrap_or("UNABLE TO DISPLAY"), err)))
+                    }
+                },
+                None      => Some(LinkStyle::Github)
+            };
+            toml_outfile = match clog_table.lookup("outfile") {
+                Some(val) => Some(val.as_str().unwrap_or("changelog.md").to_owned()),
+                None      => None
+            };
+            match toml_table.get("sections") {
+                Some(table) => {
+                    match table.as_table() {
+                        Some(table) => {
+                            for (sec, val) in table.iter() {
+                                if let Some(vec) = val.as_slice() {
+                                    let alias_vec = vec.iter().map(|v| v.as_str().unwrap_or("").to_owned()).collect::<Vec<_>>();
+                                    self.section_map.insert(sec.to_owned(), alias_vec);
+                                }
+                            }
+                        },
+                        None        => ()
+                    }
+                },
+                None        => ()
+            };
+        };
+
+        if toml_from_latest.unwrap_or(false) {
+            self.from = self.get_latest_tag();
+        }
+
+        if let Some(repo) = toml_repo {
+            self.repo = repo;
+        }
+
+        if let Some(ls) = toml_link_style {
+            self.link_style = ls;
+        }
+
+        if let Some(subtitle) = toml_subtitle {
+            self.subtitle = subtitle;
+        }
+
+        if let Some(outfile) = toml_outfile {
+            self.changelog = outfile;
+        }
+
+        Ok(self)
+    }
+
+    pub fn from_matches(matches: &ArgMatches) -> ClogResult {
+        let mut clog = if let Some(cfg) = matches.value_of("config") {
+            if matches.is_present("workdir") && matches.is_present("gitdir") {
+               // use --config --work-tree --git-dir
+               try!(Clog::with_all(matches.value_of("gitdir").unwrap(),
+                              matches.value_of("workdir").unwrap(),
+                              cfg))
+            } else if let Some(dir) = matches.value_of("workdir") {
+               // use --config --work-tree
+               try!(Clog::with_dir_and_file(dir, cfg))
+            } else if let Some(dir) = matches.value_of("gitdir") {
+               // use --config --git-dir
+               try!(Clog::with_dir_and_file(dir, cfg))
+            } else {
+               // use --config only
+               try!(Clog::from_file(cfg))
+            }
+        } else {
+            if matches.is_present("gitdir") && matches.is_present("workdir") {
+                let wdir = matches.value_of("workdir").unwrap();
+                let gdir = matches.value_of("gitdir").unwrap();
+                try!(Clog::with_dirs(gdir, wdir))
+            } else if let Some(dir) = matches.value_of("gitdir") {
+                try!(Clog::with_dir(dir))
+            } else if let Some(dir) = matches.value_of("workdir") {
+                try!(Clog::with_dir(dir))
+            } else {
+                try!(Clog::from_file(CLOG_CONFIG_FILE))
+            }
+        };
+
+        // compute version early, so we can exit on error
+        clog.version = {
+            // less typing later...
+            let (major, minor, patch) = (matches.is_present("major"), matches.is_present("minor"), matches.is_present("patch"));
+            if matches.is_present("ver") {
+                matches.value_of("ver").unwrap().to_owned()
+            } else if major || minor || patch {
+                let mut had_v = false;
+                let v_string = clog.get_latest_tag_ver();
+                let first_char = v_string.chars().nth(0).unwrap_or(' ');
+                let v_slice = if first_char == 'v' || first_char == 'V' {
+                    had_v = true;
+                    v_string.trim_left_matches(|c| c == 'v' || c == 'V')
+                } else {
+                    &v_string[..]
+                };
+                match semver::Version::parse(v_slice) {
+                    Ok(ref mut v) => {
+                        // if-else may be quicker, but it's longer mentally, and this isn't slow
+                        match (major, minor, patch) {
+                            (true,_,_) => { v.major += 1; v.minor = 0; v.patch = 0; },
+                            (_,true,_) => { v.minor += 1; v.patch = 0; },
+                            (_,_,true) => { v.patch += 1; clog.patch_ver = true; },
+                            _          => unreachable!()
+                        }
+                        format!("{}{}", if had_v{"v"}else{""}, v)
+                    },
+                    Err(e) => {
+                        return Err(Box::new(format!("Error: {}\n\n\tEnsure the tag format follows Semantic Versioning such as N.N.N\n\tor set the version manually with --setversion <version>" , e )));
+                    }
+                }
+            } else {
+                clog.version
+            }
+        };
+
+        if let Some(from) = matches.value_of("from") {
+            clog.from = from.to_owned();
+        } else if matches.is_present("from-latest-tag") {
+            clog.from = clog.get_latest_tag();
+        }
+
+        if let Some(repo) = matches.value_of("repo") {
+            clog.repo = repo.to_owned();
+        }
+
+        if matches.is_present("link-style") {
+            clog.link_style = value_t!(matches.value_of("link-style"), LinkStyle).unwrap_or(LinkStyle::Github);
+        } 
+
+        if let Some(subtitle) = matches.value_of("subtitle") {
+            clog.subtitle = subtitle.to_owned();
+        }
+
+        if let Some(file) = matches.value_of("outfile") {
+            clog.changelog = file.to_owned();
+        }
+
+        Ok(clog)
+    }
+
+    pub fn grep<S: Into<String>>(&mut self, g: S) -> &mut Clog {
+        self.grep = g.into();
+        self
+    }
+
+    pub fn format<S: Into<String>>(&mut self, f: S) -> &mut Clog {
+        self.format = f.into();
+        self
+    }
+
+    pub fn repository<S: Into<String>>(&mut self, r: S) -> &mut Clog {
+        self.repo = r.into();
+        self
+    }
+
+    pub fn link_style(&mut self, l: LinkStyle) -> &mut Clog {
+        self.link_style = l;
+        self
+    }
+
+    pub fn version<S: Into<String>>(&mut self, v: S) -> &mut Clog {
+        self.version = v.into();
+        self
+    }
+
+    pub fn subtitle<S: Into<String>>(&mut self, s: S) -> &mut Clog {
+        self.subtitle = s.into();
+        self
+    }
+
+    pub fn from<S: Into<String>>(&mut self, f: S) -> &mut Clog {
+        self.from = f.into();
+        self
+    }
+
+    pub fn to<S: Into<String>>(&mut self, t: S) -> &mut Clog {
+        self.to = t.into();
+        self
+    }
+
+    pub fn changelog<S: Into<String>>(&mut self, c: S) -> &mut Clog {
+        self.changelog = c.into();
+        self
+    }
+
+    pub fn git_dir<P: AsRef<Path>>(&mut self, d: P) -> &mut Clog {
+        self.git_dir = Some(d.as_ref().to_path_buf());
+        self
+    }
+    pub fn git_work_tree<P: AsRef<Path>>(&mut self, d: P) -> &mut Clog {
+        self.git_work_tree = Some(d.as_ref().to_path_buf());
+        self
+    }
+
+    pub fn patch_version(&mut self, p: bool) -> &mut Clog {
+        self.patch_ver = p;
+        self
+    }
+
+    pub fn get_commits(&self) -> Commits {
+        let range = match &self.from[..] {
+            "" => "HEAD".to_owned(),
+            _  => format!("{}..{}", self.from, self.to)
+        };
+
+        let output = Command::new("git")
+                .arg(&self.get_git_dir()[..])
+                .arg(&self.get_git_work_tree()[..])
+                .arg("log")
+                .arg("-E")
+                .arg(&format!("--grep={}", self.grep))
+                .arg(&format!("--format={}", self.format))
+                .arg(&range)
+                .output().unwrap_or_else(|e| panic!("Failed to run 'git log' with error: {}", e));
+
+        String::from_utf8_lossy(&output.stdout)
+                .split("\n==END==\n")
+                .map(|commit_str| { self.parse_raw_commit(commit_str) })
+                .filter(| entry| entry.commit_type != "Unknown")
+                .collect()
+    }
+
+    fn parse_raw_commit(&self, commit_str:&str) -> Commit {
+        let mut lines = commit_str.split('\n');
+
+        let hash = lines.next().unwrap_or("").to_owned();
+
+        let commit_pattern = regex!(r"^(.*?)(?:\((.*)?\))?:(.*)");
+        let (subject, component, commit_type) =
+            match lines.next().and_then(|s| commit_pattern.captures(s)) {
+                Some(caps) => {
+                    let commit_type = self.section_for(caps.at(1).unwrap_or("")).to_owned();
+                    let component = caps.at(2);
+                    let subject = caps.at(3);
+                    (subject, component, commit_type)
+               },
+               None => (Some(""), Some(""), self.section_for("unk").clone())
+            };
+        let closes_pattern = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
+        let closes = lines.filter_map(|line| closes_pattern.captures(line))
+                          .map(|caps| caps.at(2).unwrap_or("").to_owned())
+                          .collect();
+
+        Commit {
+            hash: hash,
+            subject: subject.unwrap().to_owned(),
+            component: component.unwrap_or("").to_owned(),
+            closes: closes,
+            breaks: vec![],
+            commit_type: commit_type
+        }
+    }
+    pub fn get_latest_tag(&self) -> String {
+        let output = Command::new("git")
+                .arg(&self.get_git_dir()[..])
+                .arg(&self.get_git_work_tree()[..])
+                .arg("rev-list")
+                .arg("--tags")
+                .arg("--max-count=1")
+                .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-list' with error: {}",e));
+        let buf = String::from_utf8_lossy(&output.stdout);
+
+        buf.trim_matches('\n').to_owned()
+    }
+
+    pub fn get_latest_tag_ver(&self) -> String {
+        let output = Command::new("git")
+                .arg(&self.get_git_dir()[..])
+                .arg(&self.get_git_work_tree()[..])
+                .arg("describe")
+                .arg("--tags")
+                .arg("--abbrev=0")
+                .output().unwrap_or_else(|e| panic!("Failed to run 'git describe' with error: {}",e));
+
+        String::from_utf8_lossy(&output.stdout).into_owned()
+    }
+
+    pub fn get_last_commit(&self) -> String {
+        let output = Command::new("git")
+                .arg(&self.get_git_dir()[..])
+                .arg(&self.get_git_work_tree()[..])
+                .arg("rev-parse")
+                .arg("HEAD")
+                .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-parse' with error: {}", e));
+
+        String::from_utf8_lossy(&output.stdout).into_owned()
+    }
+
+    fn get_git_work_tree(&self) -> String {
+        // Check if user supplied a local git dir and working tree
+        if self.git_work_tree.is_none() && self.git_dir.is_none() {
+            // None was provided
+            "".to_owned()
+        } else if self.git_dir.is_some() {
+            // user supplied both
+            format!("--work-tree={}", self.git_work_tree.clone().unwrap().to_str().unwrap())
+        } else {
+            // user only supplied a working tree i.e. /home/user/mycode
+            let mut w = self.git_work_tree.clone().unwrap();
+            w.pop();
+            format!("--work-tree={}", w.to_str().unwrap())
+        }
+
+    }
+
+    fn get_git_dir(&self) -> String {
+        // Check if user supplied a local git dir and working tree
+        if self.git_dir.is_none() && self.git_work_tree.is_none() {
+            // None was provided
+            "".to_owned()
+        } else if self.git_work_tree.is_some() {
+            // user supplied both
+            format!("--git-dir={}", self.git_dir.clone().unwrap().to_str().unwrap())
+        } else {
+            // user only supplied a git dir i.e. /home/user/mycode/.git
+            let mut g =  self.git_dir.clone().unwrap();
+            g.push(".git");
+            format!("--git-dir={}", g.to_str().unwrap())
+        }
+    }
+
+    pub fn section_for(&self, alias: &str) -> &String {
+        self.section_map.iter().filter(|&(_, v)| v.iter().any(|s| s == alias)).map(|(k, _)| k).next().unwrap_or(self.section_map.keys().filter(|&k| *k == "Unknown".to_owned()).next().unwrap())
+    }
+
+    pub fn write_changelog_to<P: AsRef<Path>>(&self, cl: P) {
+        let sm = SectionMap::from_commits(self.get_commits());
+
+        let mut contents = String::new();
+
+        File::open(cl.as_ref()).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
+
+        let mut file = File::create(cl.as_ref()).ok().unwrap();
+        let mut writer = LogWriter::new(&mut file, self);
+
+        writer.write_header().ok().expect("failed to write header");
+        for (sec, secmap) in sm.sections {
+            writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
+        }
+        writer.write(&contents[..]).ok().expect("failed to write contents");
+    }
+
+    pub fn write_changelog(&self) {
+        self.write_changelog_to(&self.changelog[..]);
+    }
+}
diff --git a/src/clogconfig.rs b/src/clogconfig.rs
deleted file mode 100644
index 2e1592f..0000000
--- a/src/clogconfig.rs
+++ /dev/null
@@ -1,213 +0,0 @@
-use std::fs::File;
-use std::io::Read;
-use std::path::Path;
-use std::fmt::Display;
-use std::env;
-use std::collections::HashMap;
-
-use clap::ArgMatches;
-use toml::{Value, Parser};
-use semver;
-
-use git;
-use CLOG_CONFIG_FILE;
-
-arg_enum!{
-    pub enum LinkStyle {
-        Github,
-        Gitlab,
-        Stash
-    }
-}
-
-pub struct ClogConfig {
-    pub grep: String,
-    pub format: String,
-    pub repo: String,
-    pub link_style: LinkStyle,
-    pub version: String,
-    pub patch_ver: bool,
-    pub subtitle: String,
-    pub from: String,
-    pub to: String,
-    pub changelog: String,
-    pub section_map: HashMap<String, Vec<String>>
-}
-
-pub type ConfigResult = Result<ClogConfig, Box<Display>>;
-
-impl ClogConfig {
-    pub fn from_matches(matches: &ArgMatches) -> ConfigResult {
-        // compute version early, so we can exit on error
-        let mut patch_ver = false;
-        let version =  {
-            // less typing later...
-            let (major, minor, patch) = (matches.is_present("major"), matches.is_present("minor"), matches.is_present("patch"));
-            if matches.is_present("ver") {
-                matches.value_of("ver").unwrap().to_owned()
-            } else if major || minor || patch {
-                let mut had_v = false;
-                let v_string = git::get_latest_tag_ver();
-                let first_char = v_string.chars().nth(0).unwrap_or(' ');
-                let v_slice = if first_char == 'v' || first_char == 'V' {
-                    had_v = true;
-                    v_string.trim_left_matches(|c| c == 'v' || c == 'V')
-                } else {
-                    &v_string[..]
-                };
-                match semver::Version::parse(v_slice) {
-                    Ok(ref mut v) => {
-                        // if-else may be quicker, but it's longer mentally, and this isn't slow
-                        match (major, minor, patch) {
-                            (true,_,_) => { v.major += 1; v.minor = 0; v.patch = 0; },
-                            (_,true,_) => { v.minor += 1; v.patch = 0; },
-                            (_,_,true) => { v.patch += 1; patch_ver = true; },
-                            _          => unreachable!()
-                        }
-                        format!("{}{}", if had_v{"v"}else{""}, v)
-                    },
-                    Err(e) => {
-                        return Err(Box::new(format!("Error: {}\n\n\tEnsure the tag format follows Semantic Versioning such as N.N.N\n\tor set the version manually with --setversion <version>" , e )));
-                    }
-                }
-            } else {
-                // Use short hash
-                (&git::get_last_commit()[0..8]).to_owned()
-            }
-        };
-
-        let cwd = match env::current_dir() {
-            Ok(d)  => d,
-            Err(e) => return Err(Box::new(e)),
-        };
-
-        let mut sections = HashMap::new();
-        sections.insert("Features".to_owned(), vec!["ft".to_owned(), "feat".to_owned()]);
-        sections.insert("Bug Fixes".to_owned(), vec!["fx".to_owned(), "fix".to_owned()]);
-        sections.insert("Unknown".to_owned(), vec!["unk".to_owned()]);
-        sections.insert("Breaks".to_owned(), vec![]);
-
-        let cfg_file = Path::new(&cwd).join(CLOG_CONFIG_FILE);
-        let mut toml_from_latest = None;
-        let mut toml_repo = None;
-        let mut toml_subtitle = None;
-        let mut toml_link_style = None;
-
-        let mut outfile = None;
-
-        if let Ok(ref mut toml_f) = File::open(cfg_file){
-            let mut toml_s = String::with_capacity(100);
-
-            if let Err(e) = toml_f.read_to_string(&mut toml_s) {
-                return Err(Box::new(e))
-            }
-
-            toml_s.shrink_to_fit();
-
-            let mut toml = Parser::new(&toml_s[..]);
-
-            let toml_table = match toml.parse() {
-                Some(table) => table,
-                None        => {
-                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", CLOG_CONFIG_FILE)))
-                }
-            };
-
-            let clog_table = match toml_table.get("clog") {
-                Some(table) => table,
-                None        => {
-                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", CLOG_CONFIG_FILE)))
-                }
-            };
-
-            toml_from_latest = clog_table.lookup("from-latest-tag").unwrap_or(&Value::Boolean(false)).as_bool();
-            toml_repo = match clog_table.lookup("repository") {
-                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
-                None      => Some("".to_owned())
-            };
-            toml_subtitle = match clog_table.lookup("subtitle") {
-                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
-                None      => Some("".to_owned())
-            };
-            toml_link_style = match clog_table.lookup("link-style") {
-                Some(val) => match val.as_str().unwrap_or("github").parse::<LinkStyle>() {
-                    Ok(style) => Some(style),
-                    Err(err)   => {
-                        return Err(Box::new(format!("Error parsing file {}\n\n{}", CLOG_CONFIG_FILE, err)))
-                    }
-                },
-                None      => Some(LinkStyle::Github)
-            };
-            outfile = match clog_table.lookup("outfile") {
-                Some(val) => Some(val.as_str().unwrap_or("changelog.md").to_owned()),
-                None      => None
-            };
-            match toml_table.get("sections") {
-                Some(table) => {
-                    match table.as_table() {
-                        Some(table) => {
-                            for (sec, val) in table.iter() {
-                                if let Some(vec) = val.as_slice() {
-                                    let alias_vec = vec.iter().map(|v| v.as_str().unwrap_or("").to_owned()).collect::<Vec<_>>();
-                                    sections.insert(sec.to_owned(), alias_vec);
-                                }
-                            }
-                        },
-                        None        => ()
-                    }
-                },
-                None        => ()
-            };
-        };
-
-        let from = if let Some(from) = matches.value_of("from") {
-            from.to_owned()
-        } else if matches.is_present("from-latest-tag") || toml_from_latest.unwrap_or(false) {
-            git::get_latest_tag()
-        } else {
-           "".to_owned()
-        };
-
-        let repo = match matches.value_of("repository") {
-            Some(repo) => repo.to_owned(),
-            None       => toml_repo.unwrap_or("".to_owned())
-        };
-
-        let link_style = value_t!(matches.value_of("link-style"), LinkStyle).unwrap_or(toml_link_style.unwrap_or(LinkStyle::Github));
-
-
-        let subtitle = match matches.value_of("subtitle") {
-            Some(title) => title.to_owned(),
-            None        => toml_subtitle.unwrap_or("".to_owned())
-        };
-
-        if let Some(file) = matches.value_of("outfile") {
-            outfile = Some(file.to_owned());
-        }
-
-        Ok(ClogConfig{
-            grep: format!("{}BREAKING'",
-                sections.values()
-                        .map(|v| v.iter().fold(String::new(), |acc, al| {
-                            acc + &format!("^{}|", al)[..]
-                        }))
-                        .fold(String::new(), |acc, al| {
-                            acc + &format!("^{}|", al)[..]
-                        })),
-            format: "%H%n%s%n%b%n==END==".to_owned(),
-            repo: repo,
-            link_style: link_style,
-            version: version,
-            patch_ver: patch_ver,
-            subtitle: subtitle,
-            from: from,
-            to: matches.value_of("to").unwrap_or("HEAD").to_owned(),
-            changelog: outfile.unwrap_or("changelog.md".to_owned()),
-            section_map: sections
-        })
-    }
-
-    pub fn section_for(&self, alias: &str) -> &String {
-        self.section_map.iter().filter(|&(_, v)| v.iter().any(|s| s == alias)).map(|(k, _)| k).next().unwrap_or(self.section_map.keys().filter(|&k| *k == "Unknown".to_owned()).next().unwrap())
-    }
-}
diff --git a/src/git.rs b/src/git.rs
index e3a8872..eef42d6 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -1,88 +1,26 @@
-use std::process::Command;
+use std::fmt;
 
-use clogconfig::ClogConfig;
-use logentry::LogEntry;
-
-pub fn get_latest_tag() -> String {
-    let output = Command::new("git")
-            .arg("rev-list")
-            .arg("--tags")
-            .arg("--max-count=1")
-            .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-list' with error: {}",e));
-    let buf = String::from_utf8_lossy(&output.stdout);
-
-    buf.trim_matches('\n').to_owned()
+#[derive(Clone)]
+pub struct Commit {
+    pub hash: String,
+    pub subject: String,
+    pub component: String,
+    pub closes: Vec<String>,
+    pub breaks: Vec<String>,
+    pub commit_type: String 
 }
 
-pub fn get_latest_tag_ver() -> String {
-    let output = Command::new("git")
-            .arg("describe")
-            .arg("--tags")
-            .arg("--abbrev=0")
-            .output().unwrap_or_else(|e| panic!("Failed to run 'git describe' with error: {}",e));
+pub type Commits = Vec<Commit>;
 
-    String::from_utf8_lossy(&output.stdout).into_owned()
-}
-
-pub fn get_last_commit() -> String {
-    let output = Command::new("git")
-            .arg("rev-parse")
-            .arg("HEAD")
-            .output().unwrap_or_else(|e| panic!("Failed to run 'git rev-parse' with error: {}", e));
-
-    String::from_utf8_lossy(&output.stdout).into_owned()
-}
-
-pub fn get_log_entries(config: &ClogConfig) -> Vec<LogEntry>{
-
-    let range = match &config.from[..] {
-        "" => "HEAD".to_owned(),
-        _  => format!("{}..{}", config.from, config.to)
-    };
-
-    let output = Command::new("git")
-            .arg("log")
-            .arg("-E")
-            .arg(&format!("--grep={}", config.grep))
-            .arg(&format!("--format={}", config.format))
-            .arg(&range)
-            .output().unwrap_or_else(|e| panic!("Failed to run 'git log' with error: {}", e));
-
-    String::from_utf8_lossy(&output.stdout)
-            .split("\n==END==\n")
-            .map(|commit_str| { parse_raw_commit(commit_str, config) })
-            .filter(| entry| entry.commit_type != "Unknown")
-            .collect()
-}
-
-
-fn parse_raw_commit<'a>(commit_str:&str, config: &'a ClogConfig) -> LogEntry<'a> {
-    let mut lines = commit_str.split('\n');
-
-    let hash = lines.next().unwrap_or("").to_owned();
-
-    let commit_pattern = regex!(r"^(.*?)(?:\((.*)?\))?:(.*)");
-    let (subject, component, commit_type) =
-        match lines.next().and_then(|s| commit_pattern.captures(s)) {
-            Some(caps) => {
-                let commit_type = config.section_for(caps.at(1).unwrap_or(""));
-                let component = caps.at(2);
-                let subject = caps.at(3);
-                (subject, component, commit_type)
-           },
-           None => (Some(""), Some(""), config.section_for("unk"))
-        };
-    let closes_pattern = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
-    let closes = lines.filter_map(|line| closes_pattern.captures(line))
-                      .map(|caps| caps.at(2).unwrap_or("").to_owned())
-                      .collect();
-
-    LogEntry {
-        hash: hash,
-        subject: subject.unwrap().to_owned(),
-        component: component.unwrap_or("").to_owned(),
-        closes: closes,
-        breaks: vec![],
-        commit_type: commit_type
+impl fmt::Debug for Commit {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{{
+            hash:{:?},
+            subject: {:?},
+            commit_type: {:?},
+            component: {:?},
+            closes: {:?},
+            breaks: {:?}
+        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
     }
 }
diff --git a/src/lib.rs b/src/lib.rs
new file mode 100644
index 0000000..fba02ee
--- /dev/null
+++ b/src/lib.rs
@@ -0,0 +1,25 @@
+// Until regex_macros compiles with nightly, these should be commented out
+//
+// #![cfg_attr(feature = "unstable", feature(plugin))]
+// #![cfg_attr(feature = "unstable", plugin(regex_macros))]
+
+extern crate regex;
+extern crate semver;
+extern crate toml;
+#[macro_use]
+extern crate clap;
+extern crate time;
+
+#[macro_use]
+mod macros;
+pub mod git;
+mod log_writer;
+mod sectionmap;
+mod clog;
+
+pub use clog::{Clog, LinkStyle};
+pub use log_writer::LogWriter;
+pub use sectionmap::SectionMap;
+
+// The default config file
+const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
\ No newline at end of file
diff --git a/src/log_writer.rs b/src/log_writer.rs
index 64d00ad..0189542 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -3,38 +3,15 @@
 
 use time;
 
-use logentry::LogEntry;
-use clogconfig::ClogConfig;
-use clogconfig::LinkStyle;
+use git::Commit;
+use clog::Clog;
 
 pub struct LogWriter<'a, 'cc> {
     writer: &'a mut (Write + 'a),
-    options: &'cc ClogConfig
+    options: &'cc Clog
 }
 
 impl<'a, 'cc> LogWriter<'a, 'cc> {
-    fn commit_link(hash: &String, options: &ClogConfig) -> String {
-        let short_hash = &hash[0..8];
-        match &options.repo[..] {
-            "" => format!("({})", short_hash),
-            link => match options.link_style {
-                LinkStyle::Github => format!("[{}]({}/commit/{})", short_hash, link, hash),
-                LinkStyle::Gitlab => format!("[{}]({}/commit/{})", short_hash, link, hash),
-                LinkStyle::Stash  => format!("[{}]({}/commits/{})", short_hash, link, hash)
-            }
-        }
-    }
-
-    fn issue_link(&self, issue: &String, options: &ClogConfig) -> String {
-        match &self.options.repo[..] {
-            "" => format!("(#{})", issue),
-            link => match options.link_style {
-                LinkStyle::Github => format!("[#{}]({}/issues/{})", issue, link, issue),
-                LinkStyle::Gitlab => format!("[#{}]({}/issues/{})", issue, link, issue),
-                LinkStyle::Stash  => format!("(#{})", issue) // Stash doesn't support issue links
-            }
-        }
-    }
 
     pub fn write_header(&mut self) -> Result<()> {
         let subtitle = match self.options.subtitle.len() {
@@ -56,7 +33,7 @@
         }
     }
 
-    pub fn write_section(&mut self, title: &str, section: &BTreeMap<&String, &Vec<LogEntry>>)
+    pub fn write_section(&mut self, title: &str, section: &BTreeMap<&String, &Vec<Commit>>)
                             -> Result<()> {
         if section.len() == 0 { return Ok(()) }
 
@@ -78,11 +55,12 @@
                 try!(write!(self.writer, "{} {} ({}",
                                          prefix,
                                          entry.subject,
-                                         LogWriter::commit_link(&entry.hash, &self.options)));
+                                         self.options.link_style
+                                             .commit_link(&entry.hash[..], &self.options.repo[..])));
 
                 if entry.closes.len() > 0 {
                     let closes_string = entry.closes.iter()
-                                                    .map(|s| self.issue_link(s, &self.options))
+                                                    .map(|s| self.options.link_style.issue_link(&s[..], &self.options.repo[..]))
                                                     // FIXME: Connect should be
                                                     // used on the Iterator
                                                     .collect::<Vec<String>>()
@@ -104,7 +82,7 @@
         write!(self.writer, "{}", content)
     }
 
-    pub fn new<T>(writer: &'a mut T, options: &'cc ClogConfig) -> LogWriter<'a, 'cc>
+    pub fn new<T>(writer: &'a mut T, options: &'cc Clog) -> LogWriter<'a, 'cc>
         where T: Write + Send {
         LogWriter {
             writer: writer,
diff --git a/src/logentry.rs b/src/logentry.rs
deleted file mode 100644
index 4d73b36..0000000
--- a/src/logentry.rs
+++ /dev/null
@@ -1,24 +0,0 @@
-use std::fmt;
-
-#[derive(Clone)]
-pub struct LogEntry<'a> {
-    pub hash: String,
-    pub subject: String,
-    pub component: String,
-    pub closes: Vec<String>,
-    pub breaks: Vec<String>,
-    pub commit_type: &'a String 
-}
-
-impl<'a> fmt::Debug for LogEntry<'a> {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "{{
-            hash:{:?},
-            subject: {:?},
-            commit_type: {:?},
-            component: {:?},
-            closes: {:?},
-            breaks: {:?}
-        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
-    }
-}
diff --git a/src/macros.rs b/src/macros.rs
index 7beec55..49549f7 100644
--- a/src/macros.rs
+++ b/src/macros.rs
@@ -1,5 +1,35 @@
 // regex cheat thanks to https://github.com/BurntSushi
-#[cfg(not(unstable))]
+
+// Until regex_macros compiles with nightly again, this directive should be commented out
+// #[cfg(not(unstable))]
 macro_rules! regex(
     ($s:expr) => (::regex::Regex::new($s).unwrap());
 );
+
+#[cfg(feature = "debug")]
+macro_rules! debugln {
+    ($fmt:expr) => (println!(concat!("**DEBUG** ", $fmt)));
+    ($fmt:expr, $($arg:tt)*) => (println!(concat!("**DEBUG** ",$fmt), $($arg)*));
+}
+
+#[cfg(feature = "debug")]
+macro_rules! debug {
+    ($fmt:expr) => (print!(concat!("**DEBUG** ", $fmt)));
+    ($fmt:expr, $($arg:tt)*) => (println!(concat!("**DEBUG** ",$fmt), $($arg)*));
+}
+
+#[cfg(not(feature = "debug"))]
+macro_rules! debugln {
+    ($fmt:expr) => ();
+    ($fmt:expr, $($arg:tt)*) => ();
+}
+
+#[cfg(not(feature = "debug"))]
+macro_rules! debug {
+    ($fmt:expr) => ();
+    ($fmt:expr, $($arg:tt)*) => ();
+}
+
+macro_rules! werr {
+    () => ()
+}
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
deleted file mode 100644
index 2418824..0000000
--- a/src/main.rs
+++ /dev/null
@@ -1,92 +0,0 @@
-#![crate_name = "clog"]
-
-#![cfg_attr(feature = "unstable", feature(plugin))]
-#![cfg_attr(feature = "unstable", plugin(regex_macros))]
-extern crate regex;
-extern crate time;
-extern crate semver;
-extern crate toml;
-
-#[macro_use]
-extern crate clap;
-
-use std::fs::File;
-use std::io::Read;
-use std::path::Path;
-use std::collections::BTreeMap;
-
-use clap::{App, Arg, ArgGroup};
-
-use log_writer::LogWriter;
-use clogconfig::{LinkStyle, ClogConfig};
-use sectionmap::SectionMap;
-
-#[macro_use]
-mod macros;
-mod logentry;
-mod git;
-mod log_writer;
-mod sectionmap;
-mod clogconfig;
-
-// for now the clog configuration file is .clog.toml (perhaps change to use definable
-// in a future version...)
-const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
-
-fn main () {
-
-    let styles = LinkStyle::variants();
-    let matches = App::new("clog")
-        // Pull version from Cargo.toml
-        .version(&format!("v{}", crate_version!())[..])
-        .about("a conventional changelog for the rest of us")
-        .args_from_usage("-r --repository=[repository]  'e.g. https://github.com/thoughtram/clog'
-                          --from=[from]                 'e.g. 12a8546'
-                          --major                       'Increment major version by one (Sets minor and patch to 0)'
-                          --minor                       'Increment minor version by one (Sets patch to 0)'
-                          --patch                       'Increment patch version by one'
-                          --subtitle=[subtitle]         'e.g. crazy-release-title'
-                          --to=[to]                     'e.g. 8057684 (Defaults to HEAD when omitted)'
-                          -o --outfile=[outfile]        'Where to write the changelog (Defaults to \'changelog.md\')'
-                          --setversion=[ver]            'e.g. 1.0.1'")
-        // Because --from-latest-tag can't be used with --from, we add it seperately so we can
-        // specify a .mutually_excludes()
-        .arg(Arg::from_usage("--from-latest-tag 'use latest tag as start (instead of --from)'")
-                .mutually_excludes("from"))
-        // Because we may want to add more "flavors" at a later date, we can automate the process
-        // of enumerating all possible values with clap
-        .arg(Arg::from_usage("--link-style=[style]     'The style of repository link to generate, defaults to github'")
-            .possible_values(&styles))
-        // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
-        // set those as exclusions
-        .arg_group(ArgGroup::with_name("setver")
-                .add_all(vec!["major", "minor", "patch", "ver"]))
-        .get_matches();
-
-    let start_nsec = time::get_time().nsec;
-
-    let clog_config = ClogConfig::from_matches(&matches).unwrap_or_else(|e| { println!("{}",e); std::process::exit(1); });
-
-    let commits = git::get_log_entries(&clog_config);
-
-    let sm = SectionMap::from_entries(commits);
-
-    let mut contents = String::new();
-
-    File::open(&Path::new(&clog_config.changelog[..])).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
-
-    let mut file = File::create(&Path::new(&clog_config.changelog[..])).ok().unwrap();
-    let mut writer = LogWriter::new(&mut file, &clog_config);
-
-    writer.write_header().ok().expect("failed to write header");
-    for (sec, secmap) in sm.sections {
-        writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
-    }
-    // writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");
-    // writer.write_section("Features", &sections.features).ok().expect("failed to write features");
-    writer.write(&contents[..]).ok().expect("failed to write contents");
-
-    let end_nsec = time::get_time().nsec;
-    let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
-    println!("changelog updated. (took {} ms)", elapsed_mssec);
-}
diff --git a/src/sectionmap.rs b/src/sectionmap.rs
index 20e093c..99beffb 100644
--- a/src/sectionmap.rs
+++ b/src/sectionmap.rs
@@ -1,16 +1,16 @@
 use std::collections::HashMap;
 use std::collections::BTreeMap;
 
-use logentry::LogEntry;
+use git::Commit;
 
-pub type ComponentMap<'a> = BTreeMap<String, Vec<LogEntry<'a>>>;
+pub type ComponentMap = BTreeMap<String, Vec<Commit>>;
 
-pub struct SectionMap<'a> {
-    pub sections: HashMap<String, ComponentMap<'a>>
+pub struct SectionMap {
+    pub sections: HashMap<String, ComponentMap>
 }
 
-impl<'a> SectionMap<'a> {
-    pub fn from_entries(log_entries: Vec<LogEntry>) -> SectionMap {
+impl SectionMap {
+    pub fn from_commits(log_entries: Vec<Commit>) -> SectionMap {
         let mut sm = SectionMap {
             sections: HashMap::new()
         };

=====================================================================
start time: Tue May 05 00:00:00 CST 2015
end time: Fri May 29 00:00:00 CST 2015
description: 
#### Features
* **repoflavor**  allows specifying the flavor of link to generate ([b3dd5762](https://github.com/thoughtram/clog/commit/b3dd5762544f05b7ed7da5dc67d9d17ba80332ff))
* **sections**  allows users to use empty components in commit subjects ([71b32ee6](https://github.com/thoughtram/clog/commit/71b32ee6776d9f05771ee884b12c25d98a7eb59f), closes [#2](https://github.com/thoughtram/clog/issues/2))
* **version headers**  distinguishes between minor and patch version headers ([c5c02764](https://github.com/thoughtram/clog/commit/c5c02764bc715dbf6cc758f7b628b29036ad8e80), closes [#5](https://github.com/thoughtram/clog/issues/5))
<a name="v0.6.0"></a>

commit message: 
commit 7fa505aa918832fb2301570c365201cb93ea84ac+ 1430827968 -----sp :: feat(changelog.md): allows specifying custom file for changelog
commit 0955013711534df6b1410c9aed6e35739fa30b7d+ 1430838096 -----sp :: chore(*): cut the 0.6.0 release
commit ad5ff22e58321b1863ce23987d7cb4ba146270e9 1431286072 -----sp :: chore(*): update deps
commit d4dc365e16574779593068f79bd5bfbee0d11965 1431287141 -----sp :: docs(README.md): adds about section
commit 2d6140aefc0a3003196507bef77ca1fce2b8257e 1431287400 -----sp :: Merge pull request #36 from thoughtram/dep-update
commit 159b76c097a14b499f84c549b793b4ed541ae634 1431871581 -----sp :: chore(.travis.yml): updates to build with stable and nightly
commit 187dd81e27bd03e11cbd71eca54d4611f7c3c87e 1432041953 -----sp :: Merge pull request #37 from thoughtram/travis-stable
commit 71b32ee6776d9f05771ee884b12c25d98a7eb59f+ 1432236819 -----sp :: feat(sections): allows users to use empty components in commit subjects
commit 9df1372c6da63726d1e090c4880df9dbaab2f13a 1432237150 -----sp :: docs(README.md): adds details about empty components
commit 1fc96549f9217113a607931d85313c653123e480 1432239117 -----sp :: Merge pull request #40 from thoughtram/issue-2
commit b3dd5762544f05b7ed7da5dc67d9d17ba80332ff+ 1432252333 -----sp :: feat(repoflavor): allows specifying the flavor of link to generate
commit ada0cd4ca80e526a74c352e97626ca07d408dd97 1432252443 -----sp :: refactor(*): removes boiler plate provided by deps and unstable features
commit c5c02764bc715dbf6cc758f7b628b29036ad8e80+ 1432357724 -----sp :: feat(version headers): distinguishes between minor and patch version headers
commit a339e6d7ac0ceefd89bb4ca425c0267b417e9d6b 1432357855 -----sp :: chore(deps): dep update
commit ace4b4646b36d7484f2f93d3804f5fde9c70b0c7 1432363729 -----sp :: Merge pull request #41 from thoughtram/issue-5
commit ecd12a96b7918079e1f223f716f8dd466df53ff6 1432698346 -----sp :: refactor(repoflavor): changes name of repoflavor param to link-style

hunks: 
diff --git a/.travis.yml b/.travis.yml
index 2bab17a..77b3cad 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,7 +1,7 @@
 language: rust
 rust:
 - nightly
-- beta
+- stable
 before_script:
 - git clone --depth 1 https://github.com/kbknapp/travis-cargo
 - ln -s ./travis-cargo/travis-cargo.py tc
diff --git a/Cargo.lock b/Cargo.lock
index 118d216..9bdc324 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,8 +1,8 @@
 [root]
 name = "clog"
-version = "0.5.0"
+version = "0.6.0"
 dependencies = [
- "clap 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
  "regex_macros 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -11,18 +11,27 @@
 ]
 
 [[package]]
-name = "clap"
-version = "0.7.6"
+name = "ansi_term"
+version = "0.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
+name = "clap"
+version = "0.9.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "ansi_term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "strsim 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
 name = "gcc"
 version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "libc"
-version = "0.1.6"
+version = "0.1.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -49,12 +58,17 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
+name = "strsim"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
 name = "time"
 version = "0.1.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "gcc 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index 611171e..8e19913 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.5.0"
+version = "0.6.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
diff --git a/README.md b/README.md
index cd3e516..33742bc 100644
--- a/README.md
+++ b/README.md
@@ -7,11 +7,20 @@
 
 A [conventional](https://github.com/ajoslin/conventional-changelog/blob/master/CONVENTIONS.md) changelog for the rest of us
 
+### About
+
+`clog` creates a changelog automatically from your local git metadata. See the `clog`s [changelog.md](https://github.com/thoughtram/clog/blob/master/changelog.md) for an example.
+
+The way this works, is every time you make a commit, you ensure your commit subject line follows the [conventional](https://github.com/thoughtram/clog/blob/master/changelog.md) format. Then when you wish to update your changelog, you simply run `clog` inside your local repository with any options you'd like to specify.
+
+*NOTE:* `clog` also supports empty components by making commit messages such as `alias: message` or `alias(): message` (i.e. without the component)
+
+
 ### Usage
 
 ```
 USAGE:
-    clog [FLAGS] [OPTIONS]
+	clog [FLAGS] [OPTIONS]
 
 FLAGS:
         --from-latest-tag    use latest tag as start (instead of --from)
@@ -22,12 +31,13 @@
     -v, --version            Prints version information
 
 OPTIONS:
-        --from=from                   e.g. 12a8546
-    -r, --repository <repository>     e.g. https://github.com/thoughtram/clog
-        --setversion <setversion>     e.g. 1.0.1
-        --subtitle <subtitle>         e.g. crazy-release-title
-        --to <to>                     e.g. 8057684 (Defaults to HEAD when omitted)
-
+        --from <from>                e.g. 12a8546
+    -o, --outfile <outfile>          Where to write the changelog (Defaults to 'changelog.md')
+    -r, --repository <repository>    e.g. https://github.com/thoughtram/clog
+        --repoflavor <flavor>        e.g. github
+        --subtitle <subtitle>        e.g. crazy-release-title
+        --to <to>                    e.g. 8057684 (Defaults to HEAD when omitted)
+        --setversion <ver>           e.g. 1.0.1
 ```
 
 ### Try it!
@@ -38,27 +48,35 @@
 
 3. Delete the old changelog file `rm changelog.md`
 
-3. Run clog `./target/release/clog -r https://github.com/thoughtram/clog --setversion 0.1.0 --subtitle crazy-dog --from 88ccacd`
+3. Run clog `./target/release/clog -r https://github.com/thoughtram/clog --setversion 0.1.0 --subtitle crazy-dog --from 6d8183f`
 
 ### Default Options
 
-`clog` can also be configured using a default configuration file so that you don't have to specify all the options each time you want to update your changelog. To do this add a `.clog.toml` file to your repository. 
+`clog` can also be configured using a default configuration file so that you don't have to specify all the options each time you want to update your changelog. To do this add a `.clog.toml` file to your repository.
 
 ```toml
 [clog]
 repository = "https://github.com/thoughtram/clog"
 subtitle = "my awesome title"
-# If you use tags, you can set the following
+
+# specify the flavor of repo links to generate, defaults to "github" if omitted
+repo-flavor = "github"
+
+# sets the changelog output file, defaults to "changelog.md" if omitted
+outfile = "MyChangelog.md"
+
+# If you use tags, you can set the following if you wish to only pick
+# up changes since your latest tag
 from-latest-tag = true
 ```
 
-Now you can update your `changelog.md` with `clog --patch` (assuming you want to update from the latest tag version, and increment your patch version by 1).
+Now you can update your `MyChangelog.md` with `clog --patch` (assuming you want to update from the latest tag version, and increment your patch version by 1).
 
 *Note:* Any options you specify at the command line will override options set in your `.clog.toml`
 
 #### Custom Sections
 
-When using a `.clog.toml` file you can add your own custom sections to show up in your `changelog.md`. Add a `[sections]` table, along with the sections and aliases you'd like to use:
+By default, `clog` will display two sections in your changelog, `Features` and `Bug Fixes`. You can add additional sections by using a `.clog.toml` file. To add more sections, simply add a `[sections]` table, along with the section name and aliases you'd like to use in your commit messages:
 
 ```toml
 [sections]
@@ -67,6 +85,8 @@
 
 Now if you make a commit message such as `mysec(Component): some message` or `ms(Component): some message` there will be a new "MySection" section along side the "Features" and "Bug Fixes" areas.
 
+*NOTE:* Sections with spaces are suppported, such as `"My Special Section" = ["ms", "mysec"]`
+
 ## LICENSE
 
 clog is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository.
diff --git a/changelog.md b/changelog.md
index 18efbb5..21d8437 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,17 @@
+<a name="v0.6.0"></a>
+## v0.6.0 (2015-05-05)
+
+
+#### Bug Fixes
+
+* **--from**  fixes a bug where --from is ignored if from-latest-tag is true .clog.toml ([8e195799](https://github.com/thoughtram/clog/commit/8e1957995788e241626cd620f1117b75d8bff3ce))
+
+#### Features
+
+* **changelog.md**  allows specifying custom file for changelog ([7fa505aa](https://github.com/thoughtram/clog/commit/7fa505aa918832fb2301570c365201cb93ea84ac), closes [#34](https://github.com/thoughtram/clog/issues/34))
+
+
+
 <a name="v0.5.0"></a>
 ## v0.5.0 (2015-05-04)
 
diff --git a/src/clogconfig.rs b/src/clogconfig.rs
index ea6b888..7654160 100644
--- a/src/clogconfig.rs
+++ b/src/clogconfig.rs
@@ -12,10 +12,19 @@
 use git;
 use CLOG_CONFIG_FILE;
 
+arg_enum!{
+    pub enum LinkStyle {
+        Github,
+        Gitlab,
+        Stash
+    }
+}
+
 pub struct ClogConfig {
     pub grep: String,
     pub format: String,
     pub repo: String,
+    pub link_style: LinkStyle,
     pub version: String,
     pub subtitle: String,
     pub from: String,
@@ -80,6 +89,7 @@
         let mut toml_from_latest = None;
         let mut toml_repo = None;
         let mut toml_subtitle = None;
+        let mut toml_link_style = None;
 
         let mut outfile = None;
 
@@ -117,11 +127,16 @@
                 Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
                 None      => Some("".to_owned())
             };
-<<<<<<< HEAD
-            changelog = match clog_table.lookup("changelog") {
-=======
-            changelog = match clog_table.lookup("outfile") {
->>>>>>> da3e9b0... fixup! feat(changelog.md): allows specifying custom file for changelog
+            toml_link_style = match clog_table.lookup("link-style") {
+                Some(val) => match val.as_str().unwrap_or("github").parse::<LinkStyle>() {
+                    Ok(style) => Some(style),
+                    Err(err)   => {
+                        return Err(Box::new(format!("Error parsing file {}\n\n{}", CLOG_CONFIG_FILE, err)))
+                    }
+                },
+                None      => Some(LinkStyle::Github)
+            };
+            outfile = match clog_table.lookup("outfile") {
                 Some(val) => Some(val.as_str().unwrap_or("changelog.md").to_owned()),
                 None      => None
             };
@@ -143,10 +158,10 @@
             };
         };
 
-        let from = if matches.is_present("from-latest-tag") || toml_from_latest.unwrap_or(false) {
-            git::get_latest_tag()
-        } else if let Some(from) = matches.value_of("from") {
+        let from = if let Some(from) = matches.value_of("from") {
             from.to_owned()
+        } else if matches.is_present("from-latest-tag") || toml_from_latest.unwrap_or(false) {
+            git::get_latest_tag()
         } else {
            "".to_owned()
         };
@@ -156,6 +171,9 @@
             None       => toml_repo.unwrap_or("".to_owned())
         };
 
+        let link_style = value_t!(matches.value_of("link-style"), LinkStyle).unwrap_or(toml_link_style.unwrap_or(LinkStyle::Github));
+
+
         let subtitle = match matches.value_of("subtitle") {
             Some(title) => title.to_owned(),
             None        => toml_subtitle.unwrap_or("".to_owned())
@@ -176,6 +194,7 @@
                         })),
             format: "%H%n%s%n%b%n==END==".to_owned(),
             repo: repo,
+            link_style: link_style,
             version: version,
             subtitle: subtitle,
             from: from,
diff --git a/src/git.rs b/src/git.rs
index 18d30f3..e3a8872 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -20,7 +20,7 @@
             .arg("--tags")
             .arg("--abbrev=0")
             .output().unwrap_or_else(|e| panic!("Failed to run 'git describe' with error: {}",e));
-    
+
     String::from_utf8_lossy(&output.stdout).into_owned()
 }
 
@@ -61,7 +61,7 @@
 
     let hash = lines.next().unwrap_or("").to_owned();
 
-    let commit_pattern = regex!(r"^(.*)\((.*)\):(.*)");
+    let commit_pattern = regex!(r"^(.*?)(?:\((.*)?\))?:(.*)");
     let (subject, component, commit_type) =
         match lines.next().and_then(|s| commit_pattern.captures(s)) {
             Some(caps) => {
@@ -74,13 +74,13 @@
         };
     let closes_pattern = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
     let closes = lines.filter_map(|line| closes_pattern.captures(line))
-                      .map(|caps| caps.at(2).unwrap().to_owned())
+                      .map(|caps| caps.at(2).unwrap_or("").to_owned())
                       .collect();
 
     LogEntry {
         hash: hash,
         subject: subject.unwrap().to_owned(),
-        component: component.unwrap().to_owned(),
+        component: component.unwrap_or("").to_owned(),
         closes: closes,
         breaks: vec![],
         commit_type: commit_type
diff --git a/src/log_writer.rs b/src/log_writer.rs
index ac4d3d3..8444772 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -1,10 +1,11 @@
-use std::collections::HashMap;
+use std::collections::BTreeMap;
 use std::io::{Write, Result};
 
 use time;
 
 use logentry::LogEntry;
 use clogconfig::ClogConfig;
+use clogconfig::LinkStyle;
 
 pub struct LogWriter<'a, 'cc> {
     writer: &'a mut (Write + 'a),
@@ -16,15 +17,22 @@
         let short_hash = &hash[0..8];
         match &options.repo[..] {
             "" => format!("({})", short_hash),
-            link => format!("[{}]({}/commit/{})", short_hash, link, hash)
-
+            link => match options.link_style {
+                LinkStyle::Github => format!("[{}]({}/commit/{})", short_hash, link, hash),
+                LinkStyle::Gitlab => format!("[{}]({}/commit/{})", short_hash, link, hash),
+                LinkStyle::Stash  => format!("[{}]({}/commits/{})", short_hash, link, hash)
+            }
         }
     }
 
-    fn issue_link(&self, issue: &String) -> String {
+    fn issue_link(&self, issue: &String, options: &ClogConfig) -> String {
         match &self.options.repo[..] {
             "" => format!("(#{})", issue),
-            link => format!("[#{}]({}/issues/{})", issue, link, issue)
+            link => match options.link_style {
+                LinkStyle::Github => format!("[#{}]({}/issues/{})", issue, link, issue),
+                LinkStyle::Gitlab => format!("[#{}]({}/issues/{})", issue, link, issue),
+                LinkStyle::Stash  => format!("(#{})", issue) // Stash doesn't support issue links
+            }
         }
     }
 
@@ -44,21 +52,22 @@
         }
     }
 
-    pub fn write_section(&mut self, title: &str, section: &HashMap<String, Vec<LogEntry>>)
+    pub fn write_section(&mut self, title: &str, section: &BTreeMap<&String, &Vec<LogEntry>>)
                             -> Result<()> {
         if section.len() == 0 { return Ok(()) }
 
         try!(self.writer.write(&format!("\n#### {}\n\n", title)[..].as_bytes()));
 
         for (component, entries) in section.iter() {
-            let nested = entries.len() > 1;
+            let nested = (entries.len() > 1) && !component.is_empty();
 
-            //TODO: implement the empty component stuff
             let prefix = if nested {
                 try!(write!(self.writer, "* **{}**\n", component));
                 "  *".to_owned()
-            } else {
+            } else if !component.is_empty() {
                 format!("* **{}**", component)
+            } else {
+                format!("* ")
             };
 
             for entry in entries.iter() {
@@ -69,7 +78,7 @@
 
                 if entry.closes.len() > 0 {
                     let closes_string = entry.closes.iter()
-                                                    .map(|s| self.issue_link(s))
+                                                    .map(|s| self.issue_link(s, &self.options))
                                                     // FIXME: Connect should be
                                                     // used on the Iterator
                                                     .collect::<Vec<String>>()
diff --git a/src/main.rs b/src/main.rs
index 8175605..2418824 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -13,11 +13,12 @@
 use std::fs::File;
 use std::io::Read;
 use std::path::Path;
+use std::collections::BTreeMap;
 
 use clap::{App, Arg, ArgGroup};
 
 use log_writer::LogWriter;
-use clogconfig::ClogConfig;
+use clogconfig::{LinkStyle, ClogConfig};
 use sectionmap::SectionMap;
 
 #[macro_use]
@@ -33,6 +34,8 @@
 const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
 
 fn main () {
+
+    let styles = LinkStyle::variants();
     let matches = App::new("clog")
         // Pull version from Cargo.toml
         .version(&format!("v{}", crate_version!())[..])
@@ -50,6 +53,10 @@
         // specify a .mutually_excludes()
         .arg(Arg::from_usage("--from-latest-tag 'use latest tag as start (instead of --from)'")
                 .mutually_excludes("from"))
+        // Because we may want to add more "flavors" at a later date, we can automate the process
+        // of enumerating all possible values with clap
+        .arg(Arg::from_usage("--link-style=[style]     'The style of repository link to generate, defaults to github'")
+            .possible_values(&styles))
         // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
         // set those as exclusions
         .arg_group(ArgGroup::with_name("setver")
@@ -73,7 +80,7 @@
 
     writer.write_header().ok().expect("failed to write header");
     for (sec, secmap) in sm.sections {
-        writer.write_section(&sec[..], &secmap).ok().expect(&format!("failed to write {}", sec)[..]);
+        writer.write_section(&sec[..], &secmap.iter().collect::<BTreeMap<_,_>>()).ok().expect(&format!("failed to write {}", sec)[..]);
     }
     // writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");
     // writer.write_section("Features", &sections.features).ok().expect("failed to write features");
diff --git a/src/sectionmap.rs b/src/sectionmap.rs
index 9dd2504..20e093c 100644
--- a/src/sectionmap.rs
+++ b/src/sectionmap.rs
@@ -1,8 +1,9 @@
 use std::collections::HashMap;
+use std::collections::BTreeMap;
 
 use logentry::LogEntry;
 
-pub type ComponentMap<'a> = HashMap<String, Vec<LogEntry<'a>>>;
+pub type ComponentMap<'a> = BTreeMap<String, Vec<LogEntry<'a>>>;
 
 pub struct SectionMap<'a> {
     pub sections: HashMap<String, ComponentMap<'a>>
@@ -15,11 +16,11 @@
         };
 
         log_entries.into_iter().map(|entry| {
-            let comp_map = sm.sections.entry(entry.commit_type.clone()).or_insert(HashMap::new());
+            let comp_map = sm.sections.entry(entry.commit_type.clone()).or_insert(BTreeMap::new());
             let sec_map = comp_map.entry(entry.component.clone()).or_insert(vec![]);
             sec_map.push(entry);
         }).collect::<Vec<_>>();
 
         sm
     }
-}
\ No newline at end of file
+}

=====================================================================
start time: Mon May 04 00:00:00 CST 2015
end time: Tue May 05 00:00:00 CST 2015
description: 
#### Bug Fixes
* **--from**  fixes a bug where --from is ignored if from-latest-tag is true .clog.toml ([8e195799](https://github.com/thoughtram/clog/commit/8e1957995788e241626cd620f1117b75d8bff3ce))
#### Features
* **changelog.md**  allows specifying custom file for changelog ([7fa505aa](https://github.com/thoughtram/clog/commit/7fa505aa918832fb2301570c365201cb93ea84ac), closes [#34](https://github.com/thoughtram/clog/issues/34))
<a name="v0.5.0"></a>

commit message: 
commit 8f7a1878fddf629eddaf4b1f219d163b3ca18b18 1430687584 -----sp :: chore(argparsing): update clap
commit 9b2bdcd0003dccf4efebeb52e6cf12d49f556736 1430745266 -----sp :: Merge pull request #32 from thoughtram/patch-31
commit 57b68e8af4f0b87e88ac94cdfdf8e5dff4da669e 1430745369 -----sp :: chore(.travis.yml): build with both Rust beta and nightly
commit 90d18bb49de9953eeae5f3939d9c69ae391f8de8+ 1430745570 -----sp :: chore(*): cuts the 0.5.0 release
commit 2133e26afced2b267eaf27f75763434d9d7f8115 1430745677 -----sp :: chore(Cargo.lock): increase version

hunks: 
diff --git a/.travis.yml b/.travis.yml
index 22761ba..2bab17a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1 +1,11 @@
 language: rust
+rust:
+- nightly
+- beta
+before_script:
+- git clone --depth 1 https://github.com/kbknapp/travis-cargo
+- ln -s ./travis-cargo/travis-cargo.py tc
+script:
+- |
+  ./tc cargo build &&
+  ./tc cargo test
diff --git a/Cargo.lock b/Cargo.lock
index 185f011..52a3c5b 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,9 +1,10 @@
 [root]
 name = "clog"
-version = "0.4.0"
+version = "0.5.0"
 dependencies = [
- "clap 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex_macros 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
  "time 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
  "toml 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -11,7 +12,7 @@
 
 [[package]]
 name = "clap"
-version = "0.7.4"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -30,6 +31,14 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
+name = "regex_macros"
+version = "0.1.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
 name = "rustc-serialize"
 version = "0.3.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
diff --git a/Cargo.toml b/Cargo.toml
index 0f71b0d..611171e 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.4.0"
+version = "0.5.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
@@ -15,3 +15,12 @@
 clap = "*"
 semver = "*"
 toml = "*"
+
+[dependencies.regex_macros]
+optional = true
+
+[features]
+default=[]
+
+# for building with nightly and unstable features
+unstable=["regex_macros"]
diff --git a/README.md b/README.md
index 6e91265..cd3e516 100644
--- a/README.md
+++ b/README.md
@@ -56,6 +56,17 @@
 
 *Note:* Any options you specify at the command line will override options set in your `.clog.toml`
 
+#### Custom Sections
+
+When using a `.clog.toml` file you can add your own custom sections to show up in your `changelog.md`. Add a `[sections]` table, along with the sections and aliases you'd like to use:
+
+```toml
+[sections]
+MySection = ["mysec", "ms"]
+```
+
+Now if you make a commit message such as `mysec(Component): some message` or `ms(Component): some message` there will be a new "MySection" section along side the "Features" and "Bug Fixes" areas.
+
 ## LICENSE
 
 clog is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository.
diff --git a/changelog.md b/changelog.md
index 43ffd26..18efbb5 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,17 @@
+<a name="v0.5.0"></a>
+## v0.5.0 (2015-05-04)
+
+
+#### Bug Fixes
+
+* **autoversion**  correctly follow previous version's use of 'v', i.e. v1.2.3 vs 1.2.3 ([c6950fe5](https://github.com/thoughtram/clog/commit/c6950fe5baee959ee18ea2a07e3b5a8cbe5e3716))
+
+#### Features
+
+* **CustomSections**  allows addition of custom sections and aliases ([0fb0d5b7](https://github.com/thoughtram/clog/commit/0fb0d5b7e5189ce60b1effdb04ee7ac50b987ef4), closes [#31](https://github.com/thoughtram/clog/issues/31))
+
+
+
 <a name="v0.4.0"></a>
 ## 0.4.0 (2015-04-26)
 
diff --git a/src/clogconfig.rs b/src/clogconfig.rs
index e57cd54..eadc060 100644
--- a/src/clogconfig.rs
+++ b/src/clogconfig.rs
@@ -1,16 +1,15 @@
 use std::fs::File;
 use std::io::Read;
 use std::path::Path;
-use std::borrow::ToOwned;
 use std::fmt::Display;
 use std::env;
+use std::collections::HashMap;
 
 use clap::ArgMatches;
 use toml::{Value, Parser};
 use semver;
 
 use git;
-use common::CommitType;
 use CLOG_CONFIG_FILE;
 
 pub struct ClogConfig {
@@ -21,6 +20,7 @@
     pub subtitle: String,
     pub from: String,
     pub to: String,
+    pub section_map: HashMap<String, Vec<String>>
 }
 
 pub type ConfigResult = Result<ClogConfig, Box<Display>>;
@@ -69,6 +69,12 @@
             Err(e) => return Err(Box::new(e)),
         };
 
+        let mut sections = HashMap::new();
+        sections.insert("Features".to_owned(), vec!["ft".to_owned(), "feat".to_owned()]);
+        sections.insert("Bug Fixes".to_owned(), vec!["fx".to_owned(), "fix".to_owned()]);
+        sections.insert("Unknown".to_owned(), vec!["unk".to_owned()]);
+        sections.insert("Breaks".to_owned(), vec![]);
+
         let cfg_file = Path::new(&cwd).join(CLOG_CONFIG_FILE);
         let mut toml_from_latest = None;
         let mut toml_repo = None;
@@ -108,6 +114,22 @@
                 Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
                 None      => Some("".to_owned())
             };
+            match toml_table.get("sections") {
+                Some(table) => {
+                    match table.as_table() {
+                        Some(table) => {
+                            for (sec, val) in table.iter() {
+                                if let Some(vec) = val.as_slice() {
+                                    let alias_vec = vec.iter().map(|v| v.as_str().unwrap_or("").to_owned()).collect::<Vec<_>>();
+                                    sections.insert(sec.to_owned(), alias_vec);
+                                }
+                            }
+                        },
+                        None        => ()
+                    }
+                },
+                None        => ()
+            };
         };
 
         let from = if matches.is_present("from-latest-tag") || toml_from_latest.unwrap_or(false) {
@@ -128,15 +150,27 @@
             None        => toml_subtitle.unwrap_or("".to_owned())
         };
 
+
         Ok(ClogConfig{
-            grep: format!("{}BREAKING'", CommitType::all_aliases().iter().fold(String::new(),|acc, al| acc + &format!("^{}|", al)[..])),
+            grep: format!("{}BREAKING'", 
+                sections.values()
+                        .map(|v| v.iter().fold(String::new(), |acc, al| {
+                            acc + &format!("^{}|", al)[..]
+                        }))
+                        .fold(String::new(), |acc, al| {
+                            acc + &format!("^{}|", al)[..] 
+                        })),
             format: "%H%n%s%n%b%n==END==".to_owned(),
             repo: repo,
             version: version,
             subtitle: subtitle,
             from: from,
             to: matches.value_of("to").unwrap_or("HEAD").to_owned(),
+            section_map: sections
         })
     }
 
+    pub fn section_for(&self, alias: &str) -> &String {
+        self.section_map.iter().filter(|&(_, v)| v.iter().any(|s| s == alias)).map(|(k, _)| k).next().unwrap_or(self.section_map.keys().filter(|&k| *k == "Unknown".to_owned()).next().unwrap())
+    }
 }
\ No newline at end of file
diff --git a/src/common.rs b/src/common.rs
deleted file mode 100644
index 53fedea..0000000
--- a/src/common.rs
+++ /dev/null
@@ -1,45 +0,0 @@
-use std::fmt;
-use std::collections::HashMap;
-
-// Creates an enum where the poritions inside the '(' and ')' act as aliases for that
-// commit type. This macro auto-generates an "Unknown" variant for failures, no  need to specify
-//
-// Later you can call CommitType::Fix.aliases() to get all the aliases as a Vec<'static str>
-// or CommitType::all_aliases() to get a Vec<'static str> of all aliases
-// This macro also implements std::str::FromStr to allow things like "feat".parse<CommitType>();
-commit_type_enum!{
-    #[derive(Debug, PartialEq, Clone)]
-    pub enum CommitType {
-        Feature ( feat, ft ),
-        Fix ( fix, fx )
-    }
-}
-
-#[derive(Clone)]
-pub struct LogEntry {
-    pub hash: String,
-    pub subject: String,
-    pub component: String,
-    pub closes: Vec<String>,
-    pub breaks: Vec<String>,
-    pub commit_type: CommitType
-}
-
-impl fmt::Debug for LogEntry {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "{{
-            hash:{:?},
-            subject: {:?},
-            commit_type: {:?},
-            component: {:?},
-            closes: {:?},
-            breaks: {:?}
-        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
-    }
-}
-
-pub struct SectionMap {
-    pub features: HashMap<String, Vec<LogEntry>>,
-    pub fixes: HashMap<String, Vec<LogEntry>>,
-    pub breaks: HashMap<String, Vec<LogEntry>>
-}
diff --git a/src/git.rs b/src/git.rs
index 626dd26..18d30f3 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -1,8 +1,7 @@
 use std::process::Command;
-use std::borrow::ToOwned;
 
 use clogconfig::ClogConfig;
-use common::{ LogEntry, CommitType };
+use logentry::LogEntry;
 
 pub fn get_latest_tag() -> String {
     let output = Command::new("git")
@@ -51,13 +50,13 @@
 
     String::from_utf8_lossy(&output.stdout)
             .split("\n==END==\n")
-            .map(|commit_str| { parse_raw_commit(commit_str) })
-            .filter(| entry| entry.commit_type != CommitType::Unknown)
+            .map(|commit_str| { parse_raw_commit(commit_str, config) })
+            .filter(| entry| entry.commit_type != "Unknown")
             .collect()
 }
 
 
-fn parse_raw_commit(commit_str:&str) -> LogEntry {
+fn parse_raw_commit<'a>(commit_str:&str, config: &'a ClogConfig) -> LogEntry<'a> {
     let mut lines = commit_str.split('\n');
 
     let hash = lines.next().unwrap_or("").to_owned();
@@ -66,15 +65,12 @@
     let (subject, component, commit_type) =
         match lines.next().and_then(|s| commit_pattern.captures(s)) {
             Some(caps) => {
-                // The macro that made the CommitType automatically implements std::str::FromStr
-                // with all aliases or falls back to CommitType::Unknown on failure so we can 
-                // call unwrap().
-                let commit_type = caps.at(1).unwrap_or("").parse::<CommitType>().unwrap();
+                let commit_type = config.section_for(caps.at(1).unwrap_or(""));
                 let component = caps.at(2);
                 let subject = caps.at(3);
                 (subject, component, commit_type)
            },
-           None => (Some(""), Some(""), CommitType::Unknown)
+           None => (Some(""), Some(""), config.section_for("unk"))
         };
     let closes_pattern = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
     let closes = lines.filter_map(|line| closes_pattern.captures(line))
diff --git a/src/log_writer.rs b/src/log_writer.rs
index 3b065c7..ac4d3d3 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -1,10 +1,9 @@
 use std::collections::HashMap;
 use std::io::{Write, Result};
-use std::borrow::ToOwned;
 
 use time;
 
-use common::LogEntry;
+use logentry::LogEntry;
 use clogconfig::ClogConfig;
 
 pub struct LogWriter<'a, 'cc> {
diff --git a/src/logentry.rs b/src/logentry.rs
new file mode 100644
index 0000000..4d73b36
--- /dev/null
+++ b/src/logentry.rs
@@ -0,0 +1,24 @@
+use std::fmt;
+
+#[derive(Clone)]
+pub struct LogEntry<'a> {
+    pub hash: String,
+    pub subject: String,
+    pub component: String,
+    pub closes: Vec<String>,
+    pub breaks: Vec<String>,
+    pub commit_type: &'a String 
+}
+
+impl<'a> fmt::Debug for LogEntry<'a> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{{
+            hash:{:?},
+            subject: {:?},
+            commit_type: {:?},
+            component: {:?},
+            closes: {:?},
+            breaks: {:?}
+        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
+    }
+}
diff --git a/src/macros.rs b/src/macros.rs
index 04899ac..7beec55 100644
--- a/src/macros.rs
+++ b/src/macros.rs
@@ -1,44 +1,5 @@
 // regex cheat thanks to https://github.com/BurntSushi
+#[cfg(not(unstable))]
 macro_rules! regex(
     ($s:expr) => (::regex::Regex::new($s).unwrap());
 );
-
-// A macro creating an entry types, and their aliases
-macro_rules! commit_type_enum {
-    (#[derive($($d:ident),+)] pub enum $e:ident { $($v:ident ( $($a:ident),* ) ),+ }) => {
-        #[derive($($d,)+)]
-        pub enum $e {
-            Unknown,
-            $($v,)+
-        }
-
-        impl $e {
-            #[allow(dead_code)]
-            pub fn aliases(&self) -> Option<Vec<&'static str>> {
-                match *self {
-                    $e::Unknown => None,
-                    $($e::$v    => Some(vec![
-                        $( stringify!($a) ),*
-                    ]),)+
-                }
-            }
-            #[allow(dead_code)]
-            pub fn all_aliases() -> Vec<&'static str> {
-                vec![
-                   $( $( stringify!($a),)* )+
-                ]
-            }
-        }
-        impl ::std::str::FromStr for $e {
-            type Err = $e;
-
-            #[allow(dead_code)]
-            fn from_str(s: &str) -> Result<Self,Self::Err> {
-                match s {
-                    $(stringify!($v)  $( | stringify!($a) )* => Ok($e::$v),)+
-                    _                                        => Err($e::Unknown)
-                }
-            }
-        }
-    };
-}
diff --git a/src/main.rs b/src/main.rs
index b3a3f11..3dacb4a 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,5 +1,7 @@
 #![crate_name = "clog"]
 
+#![cfg_attr(feature = "unstable", feature(plugin))]
+#![cfg_attr(feature = "unstable", plugin(regex_macros))]
 extern crate regex;
 extern crate time;
 extern crate semver;
@@ -16,13 +18,14 @@
 
 use log_writer::LogWriter;
 use clogconfig::ClogConfig;
+use sectionmap::SectionMap;
 
 #[macro_use]
 mod macros;
-mod common;
+mod logentry;
 mod git;
 mod log_writer;
-mod section_builder;
+mod sectionmap;
 mod clogconfig;
 
 // for now the clog configuration file is .clog.toml (perhaps change to use definable
@@ -58,7 +61,7 @@
     
     let commits = git::get_log_entries(&clog_config);
 
-    let sections = section_builder::build_sections(commits);
+    let sm = SectionMap::from_entries(commits);
 
     let mut contents = String::new();
 
@@ -68,8 +71,11 @@
     let mut writer = LogWriter::new(&mut file, &clog_config);
 
     writer.write_header().ok().expect("failed to write header");
-    writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");
-    writer.write_section("Features", &sections.features).ok().expect("failed to write features");
+    for (sec, secmap) in sm.sections {
+        writer.write_section(&sec[..], &secmap).ok().expect(&format!("failed to write {}", sec)[..]);
+    }
+    // writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");
+    // writer.write_section("Features", &sections.features).ok().expect("failed to write features");
     writer.write(&contents[..]).ok().expect("failed to write contents");
 
     let end_nsec = time::get_time().nsec;
diff --git a/src/section_builder.rs b/src/section_builder.rs
deleted file mode 100644
index b5be0a8..0000000
--- a/src/section_builder.rs
+++ /dev/null
@@ -1,31 +0,0 @@
-use std::collections::HashMap;
-use common::{ LogEntry, SectionMap };
-use common::CommitType::{ Feature, Fix };
-
-pub fn build_sections(log_entries: Vec<LogEntry>) -> SectionMap {
-    let mut sections = SectionMap {
-        features: HashMap::new(),
-        fixes: HashMap::new(),
-        breaks: HashMap::new()
-    };
-
-    // see https://github.com/rust-lang/rfcs/issues/353
-    //     sections.features
-    //             .find_or_insert(entry.component.clone(), Vec::new())
-    //             .push(entry.clone());
-    log_entries.into_iter().map(|entry| {
-        match entry.commit_type {
-            Feature => {
-                let feature = sections.features.entry(entry.component.clone()).or_insert(vec![]);
-                feature.push(entry);
-            },
-            Fix     => {
-                let fix = sections.fixes.entry(entry.component.clone()).or_insert(vec![]);
-                fix.push(entry);
-            },
-            _ => (),
-        }
-    }).collect::<Vec<_>>();
-
-    sections
-}
diff --git a/src/sectionmap.rs b/src/sectionmap.rs
new file mode 100644
index 0000000..9dd2504
--- /dev/null
+++ b/src/sectionmap.rs
@@ -0,0 +1,25 @@
+use std::collections::HashMap;
+
+use logentry::LogEntry;
+
+pub type ComponentMap<'a> = HashMap<String, Vec<LogEntry<'a>>>;
+
+pub struct SectionMap<'a> {
+    pub sections: HashMap<String, ComponentMap<'a>>
+}
+
+impl<'a> SectionMap<'a> {
+    pub fn from_entries(log_entries: Vec<LogEntry>) -> SectionMap {
+        let mut sm = SectionMap {
+            sections: HashMap::new()
+        };
+
+        log_entries.into_iter().map(|entry| {
+            let comp_map = sm.sections.entry(entry.commit_type.clone()).or_insert(HashMap::new());
+            let sec_map = comp_map.entry(entry.component.clone()).or_insert(vec![]);
+            sec_map.push(entry);
+        }).collect::<Vec<_>>();
+
+        sm
+    }
+}
\ No newline at end of file

=====================================================================
start time: Sun Apr 26 00:00:00 CST 2015
end time: Mon May 04 00:00:00 CST 2015
description: 
#### Bug Fixes
* **autoversion**  correctly follow previous version's use of 'v', i.e. v1.2.3 vs 1.2.3 ([c6950fe5](https://github.com/thoughtram/clog/commit/c6950fe5baee959ee18ea2a07e3b5a8cbe5e3716))
#### Features
* **CustomSections**  allows addition of custom sections and aliases ([0fb0d5b7](https://github.com/thoughtram/clog/commit/0fb0d5b7e5189ce60b1effdb04ee7ac50b987ef4), closes [#31](https://github.com/thoughtram/clog/issues/31))
<a name="v0.4.0"></a>

commit message: 
commit b71db54ee61d93efe823a2739f0e88792d2cb618+ 1430020969 -----sp :: feat(clog): auto increment version with --major, --minor, or --patch
commit f7b3cb786f82ba47c16da69733b82da9890abe81 1430020970 -----sp :: feat(aliases): implement aliases for commit types
commit 7eb674ae028bac50a6eb10db209596ec64da48cc 1430021152 -----sp :: chore(Cargo.toml): update version number
commit c6950fe5baee959ee18ea2a07e3b5a8cbe5e3716+ 1430068645 -----sp :: fix(autoversion): correctly follow previous version's use of 'v', i.e. v1.2.3 vs 1.2.3
commit 6a74f204535c3a5ae0f175e3a1e2a70f42f28469 1430097610 -----sp :: Merge pull request #29 from thoughtram/fix-v
commit 6020982b7431607962d0d8239b85ceb15b337ea4 1430251645 -----sp :: docs(README.md): updates readme to include .clog.toml configs
commit 8ad4eae0e7f3d5e6c273a9443f8bb6b5db49c598 1430313598 -----sp :: Merge pull request #30 from thoughtram/patch-28

hunks: 
diff --git a/.clog.toml b/.clog.toml
new file mode 100644
index 0000000..73e8eca
--- /dev/null
+++ b/.clog.toml
@@ -0,0 +1,3 @@
+[clog]
+repository = "https://github.com/thoughtram/clog"
+from-latest-tag = true
diff --git a/.gitignore b/.gitignore
index b2d0b50..d5c842c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -12,3 +12,6 @@
 
 #Others
 .DS_Store
+
+# Temporary files
+.*~
diff --git a/Cargo.lock b/Cargo.lock
index 97b2b5b..8ee5c28 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,11 +1,12 @@
 [root]
 name = "clog"
-version = "0.3.2"
+version = "0.4.0"
 dependencies = [
  "clap 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.1.19 (registry+https://github.com/rust-lang/crates.io-index)",
  "time 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "toml 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -25,7 +26,12 @@
 
 [[package]]
 name = "regex"
-version = "0.1.29"
+version = "0.1.30"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "rustc-serialize"
+version = "0.3.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -42,3 +48,11 @@
  "libc 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "toml"
+version = "0.1.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "rustc-serialize 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
diff --git a/Cargo.toml b/Cargo.toml
index ac5d740..0f71b0d 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.3.2"
+version = "0.4.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
@@ -14,3 +14,4 @@
 time = "*"
 clap = "*"
 semver = "*"
+toml = "*"
diff --git a/README.md b/README.md
index 67cb3e5..6e91265 100644
--- a/README.md
+++ b/README.md
@@ -14,19 +14,23 @@
     clog [FLAGS] [OPTIONS]
 
 FLAGS:
-        --from-latest-tag    uses the latest tag as starting point (ignores other --from parameters)
+        --from-latest-tag    use latest tag as start (instead of --from)
+    -h, --help               Prints help information
+        --major              Increment major version by one (Sets minor and patch to 0)
+        --minor              Increment minor version by one (Sets patch to 0)
+        --patch              Increment patch version by one
     -v, --version            Prints version information
-    -h, --help               Prints this message
 
 OPTIONS:
-        --subtitle=subtitle         e.g. crazy-release-title
-    -r, --repository=repository     e.g. https://github.com/thoughtram/clog
-        --setversion=setversion     e.g. 1.0.1
-        --to=to                     e.g. 8057684 (Defaults to HEAD when omitted)
-        --from=from                 e.g. 12a8546
+        --from=from                   e.g. 12a8546
+    -r, --repository <repository>     e.g. https://github.com/thoughtram/clog
+        --setversion <setversion>     e.g. 1.0.1
+        --subtitle <subtitle>         e.g. crazy-release-title
+        --to <to>                     e.g. 8057684 (Defaults to HEAD when omitted)
+
 ```
 
-Try it!
+### Try it!
 
 1. Clone the repo `git clone https://github.com/thoughtram/clog && cd clog`
 
@@ -34,7 +38,23 @@
 
 3. Delete the old changelog file `rm changelog.md`
 
-3. Run clog `./target/release/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
+3. Run clog `./target/release/clog -r https://github.com/thoughtram/clog --setversion 0.1.0 --subtitle crazy-dog --from 88ccacd`
+
+### Default Options
+
+`clog` can also be configured using a default configuration file so that you don't have to specify all the options each time you want to update your changelog. To do this add a `.clog.toml` file to your repository. 
+
+```toml
+[clog]
+repository = "https://github.com/thoughtram/clog"
+subtitle = "my awesome title"
+# If you use tags, you can set the following
+from-latest-tag = true
+```
+
+Now you can update your `changelog.md` with `clog --patch` (assuming you want to update from the latest tag version, and increment your patch version by 1).
+
+*Note:* Any options you specify at the command line will override options set in your `.clog.toml`
 
 ## LICENSE
 
diff --git a/changelog.md b/changelog.md
index a42beac..43ffd26 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,16 @@
+<a name="v0.4.0"></a>
+## 0.4.0 (2015-04-26)
+
+
+#### Features
+
+* **aliases**  implement aliases for commit types ([44f7d493](https://github.com/thoughtram/clog/commit/44f7d49389cfae40ad09033c6deaf54852d75d70), closes [#3](https://github.com/thoughtram/clog/issues/3))
+* **clog**  auto increment version with --major, --minor, or --patch ([329e119a](https://github.com/thoughtram/clog/commit/329e119a0326e54cdf4d669b58f835ebb111d47f), closes [#19](https://github.com/thoughtram/clog/issues/19))
+* **build**  add travis-ci support ([671171bb](https://github.com/thoughtram/clog/commit/671171bbda6d3647e0118695b5282b3ed27270ee))
+* **config**  support .clog.toml configuration file ([bb3072b8](https://github.com/thoughtram/clog/commit/bb3072b80416fb3c874845360e9d46704cd53c79))
+
+
+
 <a name="0.3.2"></a>
 ## 0.3.2 (2015-04-08)
 
diff --git a/src/clogconfig.rs b/src/clogconfig.rs
new file mode 100644
index 0000000..057beea
--- /dev/null
+++ b/src/clogconfig.rs
@@ -0,0 +1,142 @@
+use std::fs::File;
+use std::io::Read;
+use std::path::Path;
+use std::borrow::ToOwned;
+use std::fmt::Display;
+use std::env;
+
+use clap::ArgMatches;
+use toml::{Value, Parser};
+use semver;
+
+use git;
+use common::CommitType;
+use CLOG_CONFIG_FILE;
+
+pub struct ClogConfig {
+    pub grep: String,
+    pub format: String,
+    pub repo: String,
+    pub version: String,
+    pub subtitle: String,
+    pub from: String,
+    pub to: String,
+}
+
+pub type ConfigResult = Result<ClogConfig, Box<Display>>;
+
+impl ClogConfig {
+    pub fn from_matches(matches: &ArgMatches) -> ConfigResult { 
+        // compute version early, so we can exit on error
+        let version =  {
+            // less typing later...
+            let (major, minor, patch) = (matches.is_present("major"), matches.is_present("minor"), matches.is_present("patch"));
+            if matches.is_present("setversion") {
+                matches.value_of("setversion").unwrap().to_owned()
+            } else if major || minor || patch {
+                let mut had_v = false;
+                let v_string = git::get_latest_tag_ver();
+                let first_char = v_string.chars().nth(0).unwrap_or(' ');
+                let v_slice = if first_char == 'v' || first_char == 'V' {
+                    had_v = true;
+                    v_string.trim_left_matches(|c| c == 'v' || c == 'V')   
+                } else {
+                    &v_string[..]
+                };
+                match semver::Version::parse(v_slice) {
+                    Ok(ref mut v) => {
+                        // if-else may be quicker, but it's longer mentally, and this isn't slow
+                        match (major, minor, patch) {
+                            (true,_,_) => { v.major += 1; v.minor = 0; v.patch = 0; },
+                            (_,true,_) => { v.minor += 1; v.patch = 0; },
+                            (_,_,true) => { v.patch += 1; },
+                            _          => unreachable!()
+                        }
+                        format!("{}{}", if had_v{"v"}else{""}, v)
+                    },
+                    Err(e) => {
+                        return Err(Box::new(format!("Error: {}\n\n\tEnsure the tag format follows Semantic Versioning such as N.N.N\n\tor set the version manually with --setversion <version>" , e )));
+                    }
+                }
+            } else {           
+                // Use short hash
+                (&git::get_last_commit()[0..8]).to_owned()
+            }
+        };
+
+        let cwd = match env::current_dir() {
+            Ok(d)  => d,
+            Err(e) => return Err(Box::new(e)),
+        };
+
+        let cfg_file = Path::new(&cwd).join(CLOG_CONFIG_FILE);
+        let mut toml_from_latest = None;
+        let mut toml_repo = None;
+        let mut toml_subtitle = None;
+
+        if let Ok(ref mut toml_f) = File::open(cfg_file){
+            let mut toml_s = String::with_capacity(100);
+
+            if let Err(e) = toml_f.read_to_string(&mut toml_s) {
+                return Err(Box::new(e))
+            }
+
+            toml_s.shrink_to_fit();
+
+            let mut toml = Parser::new(&toml_s[..]);
+
+            let toml_table = match toml.parse() {
+                Some(table) => table,
+                None        => {
+                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", CLOG_CONFIG_FILE)))
+                }
+            };
+
+            let clog_table = match toml_table.get("clog") {
+                Some(table) => table,
+                None        => {
+                    return Err(Box::new(format!("Error parsing file {}\n\nPlease check the format or specify the options manually", CLOG_CONFIG_FILE)))
+                }
+            };
+
+            toml_from_latest = clog_table.lookup("from-latest-tag").unwrap_or(&Value::Boolean(false)).as_bool();
+            toml_repo = match clog_table.lookup("repository") {
+                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
+                None      => Some("".to_owned())
+            };
+            toml_subtitle = match clog_table.lookup("subtitle") {
+                Some(val) => Some(val.as_str().unwrap_or("").to_owned()),
+                None      => Some("".to_owned())
+            };
+        };
+
+        let from = if matches.is_present("from-latest-tag") || toml_from_latest.unwrap_or(false) {
+            git::get_latest_tag() 
+        } else if let Some(from) = matches.value_of("from") { 
+            from.to_owned()
+        } else {
+           "".to_owned() 
+        };
+
+        let repo = match matches.value_of("repository") {
+            Some(repo) => repo.to_owned(),
+            None       => toml_repo.unwrap_or("".to_owned())
+        };
+
+        let subtitle = match matches.value_of("subtitle") {
+            Some(title) => title.to_owned(),
+            None        => toml_subtitle.unwrap_or("".to_owned())
+        };
+
+        Ok(ClogConfig{
+            grep: format!("{}BREAKING'", CommitType::all_aliases().iter().fold(String::new(),|acc, al| acc + &format!("^{}|", al)[..])),
+            format: "%H%n%s%n%b%n==END==".to_owned(),
+            repo: repo,
+            version: version,
+            subtitle: subtitle,
+            from: from,
+            to: matches.value_of("to").unwrap_or("HEAD").to_owned(),
+        })
+    }
+
+}
\ No newline at end of file
diff --git a/src/common.rs b/src/common.rs
index 0c999f8..53fedea 100644
--- a/src/common.rs
+++ b/src/common.rs
@@ -1,11 +1,18 @@
 use std::fmt;
 use std::collections::HashMap;
 
-#[derive(Debug, PartialEq, Clone)]
-pub enum CommitType {
-    Feature,
-    Fix,
-    Unknown
+// Creates an enum where the poritions inside the '(' and ')' act as aliases for that
+// commit type. This macro auto-generates an "Unknown" variant for failures, no  need to specify
+//
+// Later you can call CommitType::Fix.aliases() to get all the aliases as a Vec<'static str>
+// or CommitType::all_aliases() to get a Vec<'static str> of all aliases
+// This macro also implements std::str::FromStr to allow things like "feat".parse<CommitType>();
+commit_type_enum!{
+    #[derive(Debug, PartialEq, Clone)]
+    pub enum CommitType {
+        Feature ( feat, ft ),
+        Fix ( fix, fx )
+    }
 }
 
 #[derive(Clone)]
diff --git a/src/format_util.rs b/src/format_util.rs
deleted file mode 100644
index 27e2ad5..0000000
--- a/src/format_util.rs
+++ /dev/null
@@ -1,4 +0,0 @@
-
-pub fn get_short_hash(hash: &str) -> &str {
-    &hash[0..8]
-}
\ No newline at end of file
diff --git a/src/git.rs b/src/git.rs
index 02b468e..626dd26 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -1,19 +1,10 @@
 use std::process::Command;
-use common:: { LogEntry };
-use common::CommitType;
 use std::borrow::ToOwned;
 
-use semver; 
+use clogconfig::ClogConfig;
+use common::{ LogEntry, CommitType };
 
-#[derive(Debug)]
-pub struct LogReaderConfig {
-    pub grep: String,
-    pub format: String,
-    pub from: Option<String>,
-    pub to: String
-}
-
-pub fn get_latest_tag () -> String {
+pub fn get_latest_tag() -> String {
     let output = Command::new("git")
             .arg("rev-list")
             .arg("--tags")
@@ -24,17 +15,17 @@
     buf.trim_matches('\n').to_owned()
 }
 
-pub fn get_latest_tag_ver () -> Result<semver::Version, semver::ParseError> {
+pub fn get_latest_tag_ver() -> String {
     let output = Command::new("git")
             .arg("describe")
             .arg("--tags")
             .arg("--abbrev=0")
             .output().unwrap_or_else(|e| panic!("Failed to run 'git describe' with error: {}",e));
     
-    semver::Version::parse(&String::from_utf8_lossy(&output.stdout)[..])
+    String::from_utf8_lossy(&output.stdout).into_owned()
 }
 
-pub fn get_last_commit () -> String {
+pub fn get_last_commit() -> String {
     let output = Command::new("git")
             .arg("rev-parse")
             .arg("HEAD")
@@ -43,18 +34,18 @@
     String::from_utf8_lossy(&output.stdout).into_owned()
 }
 
-pub fn get_log_entries (config:LogReaderConfig) -> Vec<LogEntry>{
+pub fn get_log_entries(config: &ClogConfig) -> Vec<LogEntry>{
 
-    let range = match config.from {
-        Some(ref from) => format!("{}..{}", from, config.to),
-        None => "HEAD".to_owned()
+    let range = match &config.from[..] {
+        "" => "HEAD".to_owned(),
+        _  => format!("{}..{}", config.from, config.to)
     };
 
     let output = Command::new("git")
             .arg("log")
             .arg("-E")
-            .arg(&format!("--grep={}",config.grep))
-            .arg(&format!("--format={}", "%H%n%s%n%b%n==END=="))
+            .arg(&format!("--grep={}", config.grep))
+            .arg(&format!("--format={}", config.format))
             .arg(&range)
             .output().unwrap_or_else(|e| panic!("Failed to run 'git log' with error: {}", e));
 
@@ -75,11 +66,10 @@
     let (subject, component, commit_type) =
         match lines.next().and_then(|s| commit_pattern.captures(s)) {
             Some(caps) => {
-                let commit_type = match caps.at(1) {
-                    Some("feat") => CommitType::Feature,
-                    Some("fix")  => CommitType::Fix,
-                    _            => CommitType::Unknown
-                };
+                // The macro that made the CommitType automatically implements std::str::FromStr
+                // with all aliases or falls back to CommitType::Unknown on failure so we can 
+                // call unwrap().
+                let commit_type = caps.at(1).unwrap_or("").parse::<CommitType>().unwrap();
                 let component = caps.at(2);
                 let subject = caps.at(3);
                 (subject, component, commit_type)
diff --git a/src/log_writer.rs b/src/log_writer.rs
index feca9d6..3b065c7 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -1,26 +1,21 @@
 use std::collections::HashMap;
 use std::io::{Write, Result};
-use time;
-use format_util;
-use common::{ LogEntry };
 use std::borrow::ToOwned;
 
-pub struct LogWriter<'a, 'lwo> {
+use time;
+
+use common::LogEntry;
+use clogconfig::ClogConfig;
+
+pub struct LogWriter<'a, 'cc> {
     writer: &'a mut (Write + 'a),
-    options: LogWriterOptions<'lwo>
+    options: &'cc ClogConfig
 }
 
-pub struct LogWriterOptions<'a> {
-    pub repository_link: &'a str,
-    pub version: String,
-    pub subtitle: String 
-}
-
-impl<'a, 'lwo> LogWriter<'a, 'lwo> {
-
-    fn commit_link(hash: &String, options: &LogWriterOptions) -> String {
-        let short_hash = format_util::get_short_hash(&hash[..]);
-        match &options.repository_link[..] {
+impl<'a, 'cc> LogWriter<'a, 'cc> {
+    fn commit_link(hash: &String, options: &ClogConfig) -> String {
+        let short_hash = &hash[0..8];
+        match &options.repo[..] {
             "" => format!("({})", short_hash),
             link => format!("[{}]({}/commit/{})", short_hash, link, hash)
 
@@ -28,7 +23,7 @@
     }
 
     fn issue_link(&self, issue: &String) -> String {
-        match &self.options.repository_link[..] {
+        match &self.options.repo[..] {
             "" => format!("(#{})", issue),
             link => format!("[#{}]({}/issues/{})", issue, link, issue)
         }
@@ -97,7 +92,7 @@
         write!(self.writer, "{}", content)
     }
 
-    pub fn new<T>(writer: &'a mut T, options: LogWriterOptions<'lwo>) -> LogWriter<'a, 'lwo>
+    pub fn new<T>(writer: &'a mut T, options: &'cc ClogConfig) -> LogWriter<'a, 'cc>
         where T: Write + Send {
         LogWriter {
             writer: writer,
diff --git a/src/macros.rs b/src/macros.rs
new file mode 100644
index 0000000..04899ac
--- /dev/null
+++ b/src/macros.rs
@@ -0,0 +1,44 @@
+// regex cheat thanks to https://github.com/BurntSushi
+macro_rules! regex(
+    ($s:expr) => (::regex::Regex::new($s).unwrap());
+);
+
+// A macro creating an entry types, and their aliases
+macro_rules! commit_type_enum {
+    (#[derive($($d:ident),+)] pub enum $e:ident { $($v:ident ( $($a:ident),* ) ),+ }) => {
+        #[derive($($d,)+)]
+        pub enum $e {
+            Unknown,
+            $($v,)+
+        }
+
+        impl $e {
+            #[allow(dead_code)]
+            pub fn aliases(&self) -> Option<Vec<&'static str>> {
+                match *self {
+                    $e::Unknown => None,
+                    $($e::$v    => Some(vec![
+                        $( stringify!($a) ),*
+                    ]),)+
+                }
+            }
+            #[allow(dead_code)]
+            pub fn all_aliases() -> Vec<&'static str> {
+                vec![
+                   $( $( stringify!($a),)* )+
+                ]
+            }
+        }
+        impl ::std::str::FromStr for $e {
+            type Err = $e;
+
+            #[allow(dead_code)]
+            fn from_str(s: &str) -> Result<Self,Self::Err> {
+                match s {
+                    $(stringify!($v)  $( | stringify!($a) )* => Ok($e::$v),)+
+                    _                                        => Err($e::Unknown)
+                }
+            }
+        }
+    };
+}
diff --git a/src/main.rs b/src/main.rs
index c201f25..0204dda 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -3,34 +3,36 @@
 extern crate regex;
 extern crate time;
 extern crate semver;
+extern crate toml;
 
 #[macro_use]
 extern crate clap;
 
-use git::LogReaderConfig;
-use log_writer::{ LogWriter, LogWriterOptions };
 use std::fs::File;
 use std::io::Read;
 use std::path::Path;
-use std::borrow::ToOwned;
 
 use clap::{App, Arg};
 
-// regex cheat thanks to https://github.com/BurntSushi
-macro_rules! regex(
-    ($s:expr) => (::regex::Regex::new($s).unwrap());
-);
+use log_writer::LogWriter;
+use clogconfig::ClogConfig;
 
+#[macro_use]
+mod macros;
 mod common;
 mod git;
 mod log_writer;
 mod section_builder;
-mod format_util;
+mod clogconfig;
+
+// for now the clog configuration file is .clog.toml (perhaps change to use definable
+// in a future version...)
+const CLOG_CONFIG_FILE: &'static str = ".clog.toml";
 
 fn main () {
     let matches = App::new("clog")
         // Pull version from Cargo.toml
-        .version(&crate_version!()[..])
+        .version(&format!("v{}", crate_version!())[..])
         .about("a conventional changelog for the rest of us")
         .args_from_usage("-r --repository=[repository]  'e.g. https://github.com/thoughtram/clog'
                           --from=[from]                 'e.g. 12a8546'
@@ -43,66 +45,31 @@
         // specify a .mutually_excludes()
         .arg(Arg::from_usage("--from-latest-tag 'use latest tag as start (instead of --from)'")
                 .mutually_excludes("from"))
+        // Since --setversion shouldn't be used with any of the --major, --minor, or --match, we
+        // set those as exclusions
         .arg(Arg::from_usage("--setversion=[setversion]     'e.g. 1.0.1'")
                 .mutually_excludes_all(vec!["major", "minor", "patch"]))
         .get_matches();
 
     let start_nsec = time::get_time().nsec;
 
-    let log_reader_config = LogReaderConfig {
-        grep: "^feat|^fix|BREAKING'".to_owned(),
-        format: "%H%n%s%n%b%n==END==".to_owned(),
-        from: if matches.is_present("from-latest-tag") { Some(git::get_latest_tag()) } else { matches.value_of("from").map(|v| v.to_owned()) },
-        to: matches.value_of("to").unwrap_or("").to_owned()
-    };
+    let clog_config = ClogConfig::from_matches(&matches).unwrap_or_else(|e| { println!("{}",e); std::process::exit(1); });
+    
+    let commits = git::get_log_entries(&clog_config);
 
-    // compute version early, so we can exit on error
-    let version =  {
-        // less typing later...
-        let (major, minor, patch) = (matches.is_present("major"), matches.is_present("minor"), matches.is_present("patch"));
-        if matches.is_present("setversion") {
-            matches.value_of("setversion").unwrap().to_owned()
-        } else if major || minor || patch {
-            match git::get_latest_tag_ver() {
-                Ok(ref mut v) => {
-                    // if-else may be quicker, but it's longer mentally, and this isn't slow
-                    match (major, minor, patch) {
-                        (true,_,_) => { v.major += 1; v.minor = 0; v.patch = 0; },
-                        (_,true,_) => { v.minor += 1; v.patch = 0; },
-                        (_,_,true) => { v.patch += 1; },
-                        _          => unreachable!()
-                    }
-                    format!("{}", v)
-                },
-                Err(e) => {
-                    println!("Error parsing latest version: {}\nTry setting the version manually with --setversion=[version]", e );
-                    std::process::exit(1);
-                }
-            }
-        } else {           
-            format_util::get_short_hash(&git::get_last_commit()[..]).to_owned()
-        }
-    };
-
-    let commits = git::get_log_entries(log_reader_config);
-
-    let sections = section_builder::build_sections(commits.clone());
+    let sections = section_builder::build_sections(commits);
 
     let mut contents = String::new();
 
     File::open(&Path::new("changelog.md")).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
 
     let mut file = File::create(&Path::new("changelog.md")).ok().unwrap();
-    let mut writer = LogWriter::new(&mut file, LogWriterOptions {
-        repository_link: matches.value_of("repository").unwrap_or(""),
-        version: version,
-        subtitle: matches.value_of("subtitle").unwrap_or("").to_owned()
-    });
+    let mut writer = LogWriter::new(&mut file, &clog_config);
 
     writer.write_header().ok().expect("failed to write header");
-    writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");;
-    writer.write_section("Features", &sections.features).ok().expect("failed to write features");;
-    writer.write(&contents[..]).ok().expect("failed to write contents");;
+    writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");
+    writer.write_section("Features", &sections.features).ok().expect("failed to write features");
+    writer.write(&contents[..]).ok().expect("failed to write contents");
 
     let end_nsec = time::get_time().nsec;
     let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
diff --git a/src/section_builder.rs b/src/section_builder.rs
index 8edf358..b5be0a8 100644
--- a/src/section_builder.rs
+++ b/src/section_builder.rs
@@ -1,5 +1,4 @@
 use std::collections::HashMap;
-use std::collections::hash_map::Entry:: { Occupied, Vacant };
 use common::{ LogEntry, SectionMap };
 use common::CommitType::{ Feature, Fix };
 
@@ -10,36 +9,23 @@
         breaks: HashMap::new()
     };
 
-    for entry in log_entries.into_iter() {
+    // see https://github.com/rust-lang/rfcs/issues/353
+    //     sections.features
+    //             .find_or_insert(entry.component.clone(), Vec::new())
+    //             .push(entry.clone());
+    log_entries.into_iter().map(|entry| {
         match entry.commit_type {
             Feature => {
-                let feature = match sections.features.entry(entry.component.clone()) {
-                    Vacant(v) => v.insert(Vec::new()),
-                    Occupied(o) => o.into_mut()
-                };
-
-                feature.push(entry.clone());
-
-                // see https://github.com/rust-lang/rfcs/issues/353
-                /* sections.features
-                        .find_or_insert(entry.component.clone(), Vec::new())
-                        .push(entry.clone());*/
+                let feature = sections.features.entry(entry.component.clone()).or_insert(vec![]);
+                feature.push(entry);
             },
-            Fix => {
-                let fix = match sections.fixes.entry(entry.component.clone()) {
-                    Vacant(v) => v.insert(Vec::new()),
-                    Occupied(o) => o.into_mut()
-                };
-
-                fix.push(entry.clone());
-
-                /* sections.fixes
-                        .find_or_insert(entry.component.clone(), Vec::new())
-                        .push(entry.clone());*/
+            Fix     => {
+                let fix = sections.fixes.entry(entry.component.clone()).or_insert(vec![]);
+                fix.push(entry);
             },
-            _   => {}
+            _ => (),
         }
-    }
+    }).collect::<Vec<_>>();
 
     sections
 }

=====================================================================
start time: Wed Apr 08 00:00:00 CST 2015
end time: Sun Apr 26 00:00:00 CST 2015
description: 
#### Features
* **aliases**  implement aliases for commit types ([44f7d493](https://github.com/thoughtram/clog/commit/44f7d49389cfae40ad09033c6deaf54852d75d70), closes [#3](https://github.com/thoughtram/clog/issues/3))
* **clog**  auto increment version with --major, --minor, or --patch ([329e119a](https://github.com/thoughtram/clog/commit/329e119a0326e54cdf4d669b58f835ebb111d47f), closes [#19](https://github.com/thoughtram/clog/issues/19))
* **build**  add travis-ci support ([671171bb](https://github.com/thoughtram/clog/commit/671171bbda6d3647e0118695b5282b3ed27270ee))
* **config**  support .clog.toml configuration file ([bb3072b8](https://github.com/thoughtram/clog/commit/bb3072b80416fb3c874845360e9d46704cd53c79))
<a name="0.3.2"></a>

commit message: 
commit f6f3b3f7eb9929a078a697a21510c685df3a5b9b 1428462777 -----sp :: refactor(clog): update to beta compatible version of Rust
commit 275d1929669e7bb3919b8ba6f01a02961f5ec6d5 1428497915 -----sp :: Merge pull request #21 from kbknapp/beta-update
commit 39c852c89a1d3be4c60720f6a38785647445b140+ 1428498300 -----sp :: chore(*): cutting the 0.3.2 release
commit 27a3b727612fc8a25c898bbf9b2b976e9a67ab7f 1428501616 -----sp :: chore(Readme): adds Gitter badge
commit 45906c719046e6a335f7e84f1a3ea4398e35232e 1428503965 -----sp :: Merge pull request #23 from kbknapp/travis-ci
commit 386fee178eaae529a2e6b59a90b1969485cea2a9 1428504199 -----sp :: chore(Readme): adds travis badge
commit 671171bbda6d3647e0118695b5282b3ed27270ee+ 1428505548 -----sp :: feat(build): add travis-ci support
commit 409c1f762b9b1c466c0888d0e60191b212454dd8 1429305380 -----sp :: refactor(clap): update to new clap features
commit ea1d6727598fa99e057c1179b67bc2d9acacfef2 1429469586 -----sp :: refactor(clap): update to new less verbose features
commit 00f2662d66a748558a544576a0a95d989940cab3 1429485281 -----sp :: Merge pull request #25 from thoughtram/clap-update

hunks: 
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..22761ba
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1 @@
+language: rust
diff --git a/Cargo.lock b/Cargo.lock
index c0983f7..3b22e15 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,15 +1,15 @@
 [root]
 name = "clog"
-version = "0.3.1"
+version = "0.3.2"
 dependencies = [
- "clap 0.5.12 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)",
  "time 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "clap"
-version = "0.5.12"
+version = "0.6.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -24,7 +24,7 @@
 
 [[package]]
 name = "regex"
-version = "0.1.26"
+version = "0.1.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index 735f227..9e0741e 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.3.1"
+version = "0.3.2"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
diff --git a/README.md b/README.md
index ffa62ae..67cb3e5 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1,17 @@
 clog
 ====
 
+[![Join the chat at https://gitter.im/thoughtram/clog](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/thoughtram/clog?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
+[![Build Status](https://travis-ci.org/thoughtram/clog.png?branch=master)](https://travis-ci.org/thoughtram/clog)
+
 A [conventional](https://github.com/ajoslin/conventional-changelog/blob/master/CONVENTIONS.md) changelog for the rest of us
 
 ### Usage
 
 ```
 USAGE:
-    clog [FLAGS] [OPTIONS] 
+    clog [FLAGS] [OPTIONS]
 
 FLAGS:
         --from-latest-tag    uses the latest tag as starting point (ignores other --from parameters)
diff --git a/changelog.md b/changelog.md
index 70611d9..a42beac 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,13 @@
+<a name="0.3.2"></a>
+## 0.3.2 (2015-04-08)
+
+
+#### Bug Fixes
+
+* **main.rs**  changed the help message of the 'to' in order to reflect default value ([048d6418](https://github.com/thoughtram/clog/commit/048d6418b655153facc9dcbbf93b1ada9d0f3b42))
+
+
+
 <a name="0.3.1"></a>
 ## 0.3.1 (2015-04-01)
 
diff --git a/src/main.rs b/src/main.rs
index e245629..4aad62c 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -3,6 +3,7 @@
 extern crate regex;
 extern crate time;
 
+#[macro_use]
 extern crate clap;
 
 use git::LogReaderConfig;
@@ -26,40 +27,19 @@
 mod format_util;
 
 fn main () {
-    // Pull version from Cargo.toml
-    let version = format!("{}.{}.{}{}",
-                          env!("CARGO_PKG_VERSION_MAJOR"),
-                          env!("CARGO_PKG_VERSION_MINOR"),
-                          env!("CARGO_PKG_VERSION_PATCH"),
-                          option_env!("CARGO_PKG_VERSION_PRE").unwrap_or(""));
     let matches = App::new("clog")
-        .version(&version[..])
+        // Pull version from Cargo.toml
+        .version(&crate_version!()[..])
         .about("a conventional changelog for the rest of us")
-        .arg(Arg::new("repository")
-            .short("r")
-            .long("repository")
-            .takes_value(true)
-            .help("e.g. https://github.com/thoughtram/clog"))
-        .arg(Arg::new("setversion")
-            .long("setversion")
-            .help("e.g. 1.0.1")
-            .takes_value(true))
-        .arg(Arg::new("subtitle")
-            .long("subtitle")
-            .help("e.g. crazy-release-title")
-            .takes_value(true))
-        .arg(Arg::new("from")
-            .help("e.g. 12a8546")
-            .long("from")
-            .takes_value(true))
-        .arg(Arg::new("to")
-            .long("to")
-            .help("e.g. 8057684 (Defaults to HEAD when omitted)")
-            .takes_value(true))
-        .arg(Arg::new("from-latest-tag")
-            .long("from-latest-tag")
-            .help("uses the latest tag as starting point (ignores other --from parameters)")
-            .mutually_excludes("from"))
+        .args_from_usage("-r --repository=[repository]  'e.g. https://github.com/thoughtram/clog'
+                          --setversion=[setversion]     'e.g. 1.0.1'
+                          --from=[from]                 'e.g. 12a8546'
+                          --subtitle=[subtitle]         'e.g. crazy-release-title'
+                          --to=[to]                     'e.g. 8057684 (Defaults to HEAD when omitted)'")
+        // Because --from-latest-tag can't be used with --from, we add it seperately so we can
+        // specify a .mutually_excludes()
+        .arg(Arg::from_usage("--from-latest-tag 'use latest tag as start (instead of --from)'")
+                .mutually_excludes("from"))
         .get_matches();
 
     let start_nsec = time::get_time().nsec;

=====================================================================
start time: Wed Apr 01 00:00:00 CST 2015
end time: Wed Apr 08 00:00:00 CST 2015
description: 
#### Bug Fixes
* **main.rs**  changed the help message of the 'to' in order to reflect default value ([048d6418](https://github.com/thoughtram/clog/commit/048d6418b655153facc9dcbbf93b1ada9d0f3b42))
<a name="0.3.1"></a>

commit message: 
commit bcb7d425b4b4524bf548d3a3332dcd53beef0ecf+ 1427877729 -----sp :: fix(main): make --to param optional
commit 86dd25d477c27b1f2bd6889368f4a28c66edb6b0+ 1427878512 -----sp :: fix(main): make --from optional
commit df6cd68ef3635d57f5cc08d7f57c12d3a3bf3e38+ 1427878746 -----sp :: fix(main): make --repository optional
commit e0c31534000cef4b8e64e382ba725ebd0dbfe7b3+ 1427878910 -----sp :: fix(main): make --subtitle optional
commit 2f081dd51f3205d96d0dae1d4818944c8e930318+ 1427881527 -----sp :: fix(main): create changelog.md if it doesn't exist
commit 5eb9eb7d764a8e9a1005233844157ad1f7c337db 1427882033 -----sp :: chore(.gitignore): blacklist DS_Store
commit 15e1e1bdcdc729419d6b90ef081ad983b0e24c4c 1427882067 -----sp :: chore(Cargo.lock): update lock file
commit 2e6564c27a3d656eade821ee08df3eba8a88da05+ 1427882219 -----sp :: chore(*): cutting the 0.3.1 release
commit 45c2654c904d1d235266053ae31a274fa4a7febc 1427895639 -----sp :: docs(README.md): updated usage and build information
commit 048d6418b655153facc9dcbbf93b1ada9d0f3b42+ 1427895798 -----sp :: fix(main.rs): changed the help message of the 'to' in order to reflect default value

hunks: 
diff --git a/.gitignore b/.gitignore
index 37727f9..b2d0b50 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,6 @@
 
 # Generated by Cargo
 /target/
+
+#Others
+.DS_Store
diff --git a/Cargo.lock b/Cargo.lock
index 498b40c..2960b4f 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,6 +1,6 @@
 [root]
 name = "clog"
-version = "0.2.0"
+version = "0.3.1"
 dependencies = [
  "clap 0.5.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "regex 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)",
diff --git a/Cargo.toml b/Cargo.toml
index 196e067..f146f94 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,7 +5,7 @@
 keywords = ["git", "log", "changelog", "parser", "parse"]
 license = "MIT"
 name = "clog"
-version = "0.3.0"
+version = "0.3.1"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 description = "A conventional changelog for the rest of us"
 
diff --git a/README.md b/README.md
index 3b745c7..ffa62ae 100644
--- a/README.md
+++ b/README.md
@@ -6,26 +6,29 @@
 ### Usage
 
 ```
-Usage:
-  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle>
-        --from=<from> --to=<to> --from-latest-tag]
+USAGE:
+    clog [FLAGS] [OPTIONS] 
 
-Options:
-  -h --help               Show this screen.
-  --version               Show version
-  -r --repository=<link>  e.g https://github.com/thoughtram/clog
-  --setversion=<version>  e.g. 0.1.0
-  --subtitle=<subtitle>   e.g. crazy-release-name
-  --from=<from>           e.g. 12a8546
-  --to=<to>               e.g. 8057684
-  --from-latest-tag       uses the latest tag as starting point. Ignores other --from parameter
+FLAGS:
+        --from-latest-tag    uses the latest tag as starting point (ignores other --from parameters)
+    -v, --version            Prints version information
+    -h, --help               Prints this message
+
+OPTIONS:
+        --subtitle=subtitle         e.g. crazy-release-title
+    -r, --repository=repository     e.g. https://github.com/thoughtram/clog
+        --setversion=setversion     e.g. 1.0.1
+        --to=to                     e.g. 8057684 (Defaults to HEAD when omitted)
+        --from=from                 e.g. 12a8546
 ```
 
 Try it!
 
-1. Build clog `cargo build`
+1. Clone the repo `git clone https://github.com/thoughtram/clog && cd clog`
 
-2. Delete the old log file `rm changelog.md`
+2. Build clog `cargo build --release`
+
+3. Delete the old changelog file `rm changelog.md`
 
 3. Run clog `./target/release/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
 
diff --git a/changelog.md b/changelog.md
index 87d71c8..70611d9 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,19 @@
+<a name="0.3.1"></a>
+## 0.3.1 (2015-04-01)
+
+
+#### Bug Fixes
+
+* **main**
+  *  create changelog.md if it doesn't exist ([2f081dd5](https://github.com/thoughtram/clog/commit/2f081dd51f3205d96d0dae1d4818944c8e930318))
+  *  make --subtitle optional ([e0c31534](https://github.com/thoughtram/clog/commit/e0c31534000cef4b8e64e382ba725ebd0dbfe7b3))
+  *  make --repository optional ([df6cd68e](https://github.com/thoughtram/clog/commit/df6cd68ef3635d57f5cc08d7f57c12d3a3bf3e38))
+  *  make --from optional ([86dd25d4](https://github.com/thoughtram/clog/commit/86dd25d477c27b1f2bd6889368f4a28c66edb6b0))
+  *  make --to param optional ([bcb7d425](https://github.com/thoughtram/clog/commit/bcb7d425b4b4524bf548d3a3332dcd53beef0ecf))
+* **README.md**  update try instructions ([7a90b31f](https://github.com/thoughtram/clog/commit/7a90b31fb5d4ba667d6dcc7c433ed31b1427b716))
+
+
+
 ## 0.3.0 (2015-03-31)
 
 
diff --git a/src/main.rs b/src/main.rs
index 2270807..dc60fa4 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -37,7 +37,6 @@
             .short("r")
             .long("repository")
             .takes_value(true)
-            .required(true)
             .help("e.g. https://github.com/thoughtram/clog"))
         .arg(Arg::new("setversion")
             .long("setversion")
@@ -46,16 +45,14 @@
         .arg(Arg::new("subtitle")
             .long("subtitle")
             .help("e.g. crazy-release-title")
-            .takes_value(true)
-            .required(true))
+            .takes_value(true))
         .arg(Arg::new("from")
             .help("e.g. 12a8546")
             .long("from")
-            .required(true)
             .takes_value(true))
         .arg(Arg::new("to")
             .long("to")
-            .help("e.g. 8057684")
+            .help("e.g. 8057684 (Defaults to HEAD when omitted)")
             .takes_value(true))
         .arg(Arg::new("from-latest-tag")
             .long("from-latest-tag")
@@ -68,7 +65,7 @@
     let log_reader_config = LogReaderConfig {
         grep: "^feat|^fix|BREAKING'".to_owned(),
         format: "%H%n%s%n%b%n==END==".to_owned(),
-        from: if matches.is_present("from-latest-tag") { Some(git::get_latest_tag()) } else { Some(matches.value_of("from").unwrap().to_owned()) },
+        from: if matches.is_present("from-latest-tag") { Some(git::get_latest_tag()) } else { matches.value_of("from").map(|v| v.to_owned()) },
         to: matches.value_of("to").unwrap_or("").to_owned()
     };
 
@@ -77,20 +74,18 @@
     let sections = section_builder::build_sections(commits.clone());
 
     let mut contents = String::new();
-    match File::open(&Path::new("changelog.md")).ok().expect("couldn't open changelog.md").read_to_string(&mut contents) {
-        Ok(_) => (),
-        Err(_) => contents = "".to_owned()
-    }
+
+    File::open(&Path::new("changelog.md")).map(|mut f| f.read_to_string(&mut contents).ok()).ok();
 
     let mut file = File::create(&Path::new("changelog.md")).ok().unwrap();
     let mut writer = LogWriter::new(&mut file, LogWriterOptions {
-        repository_link: matches.value_of("repository").unwrap(),
+        repository_link: matches.value_of("repository").unwrap_or(""),
         version: if matches.is_present("setversion") {
                     matches.value_of("setversion").unwrap().to_owned()
                 } else {
                     format_util::get_short_hash(&git::get_last_commit()[..]).to_owned()
                 },
-        subtitle: matches.value_of("subtitle").unwrap().to_owned()
+        subtitle: matches.value_of("subtitle").unwrap_or("").to_owned()
     });
 
     writer.write_header().ok().expect("failed to write header");

=====================================================================
start time: Tue Mar 31 00:00:00 CST 2015
end time: Wed Apr 01 00:00:00 CST 2015
description: 
#### Bug Fixes
* **main**
  *  create changelog.md if it doesn't exist ([2f081dd5](https://github.com/thoughtram/clog/commit/2f081dd51f3205d96d0dae1d4818944c8e930318))
  *  make --subtitle optional ([e0c31534](https://github.com/thoughtram/clog/commit/e0c31534000cef4b8e64e382ba725ebd0dbfe7b3))
  *  make --repository optional ([df6cd68e](https://github.com/thoughtram/clog/commit/df6cd68ef3635d57f5cc08d7f57c12d3a3bf3e38))
  *  make --from optional ([86dd25d4](https://github.com/thoughtram/clog/commit/86dd25d477c27b1f2bd6889368f4a28c66edb6b0))
  *  make --to param optional ([bcb7d425](https://github.com/thoughtram/clog/commit/bcb7d425b4b4524bf548d3a3332dcd53beef0ecf))
* **README.md**  update try instructions ([7a90b31f](https://github.com/thoughtram/clog/commit/7a90b31fb5d4ba667d6dcc7c433ed31b1427b716))

commit message: 
commit d230dd8d323cc0edaebaa55e6a4b0e6a93e527ef+ 1427792771 -----sp :: fix(*): upgrade to latest Rust
commit bd6d59dc4860b6e9bf2996d2976305951ad84666 1427793489 -----sp :: chore(changelog.md): cut version 0.3.0
commit 7a90b31fb5d4ba667d6dcc7c433ed31b1427b716+ 1427793629 -----sp :: fix(README.md): update try instructions
commit fabfd058b881998b53ff1c93b01136c6c3c39598 1427794311 -----sp :: chore(Cargo.toml): add meta data

hunks: 
diff --git a/Cargo.toml b/Cargo.toml
index e36635e..196e067 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,11 +1,16 @@
 [package]
 
+repository = "https://github.com/thoughtram/clog"
+readme = "README.md"
+keywords = ["git", "log", "changelog", "parser", "parse"]
+license = "MIT"
 name = "clog"
-version = "0.2.0"
+version = "0.3.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
+description = "A conventional changelog for the rest of us"
 
 [dependencies]
 regex = "*"
 regex_macros = "*"
 time = "*"
-clap = "*"
\ No newline at end of file
+clap = "*"
diff --git a/README.md b/README.md
index 73812d1..3b745c7 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@
 
 2. Delete the old log file `rm changelog.md`
 
-3. Run clog `./target/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
+3. Run clog `./target/release/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
 
 ## LICENSE
 
diff --git a/changelog.md b/changelog.md
index 40d8a1d..87d71c8 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,25 @@
+## 0.3.0 (2015-03-31)
+
+
+#### Bug Fixes
+
+
+* **docopts.rs**  updated Cargo.lock to use the latest docopt.rs ([315ad76d](https://github.com/thoughtram/clog/commit/315ad76d238858a7bcae305dc627eb20b9b2c3c0))
+* *****  upgrade to latest Rust ([d230dd8d](https://github.com/thoughtram/clog/commit/d230dd8d323cc0edaebaa55e6a4b0e6a93e527ef))
+* **git**  get_mut_ref() was deprecated, use as_mut().unwrap() ([f073d69a](https://github.com/thoughtram/clog/commit/f073d69a0bc6c3c87fee4375dfc49211fdab6b44))
+* **section_builder**  find_or_insert was deprecated, only some verbose workarounds available yet ([88ccacd5](https://github.com/thoughtram/clog/commit/88ccacd5bd559e8af996f3e67a5d58fe31b3f87c))
+* **cargo**  track working master branch ([9496bc8b](https://github.com/thoughtram/clog/commit/9496bc8b7752d248c1781fbcbff0b969a10defe0))
+
+#### Features
+
+
+* **main**
+  *  implement fallback for --setversion ([d276786a](https://github.com/thoughtram/clog/commit/d276786a383813337a82b0a1f5e72333443517ab))
+  *  include links to closed issues ([602fb29e](https://github.com/thoughtram/clog/commit/602fb29e90aa2c87b14c395b11b3bbbf7ca0a69b))
+* **log_writer**  include anchor in header ([01645092](https://github.com/thoughtram/clog/commit/01645092893fcfb10d22c76624ce8ca493bf282d))
+
+
+
 ## 0.2.0 (2014-09-23)
 
 

=====================================================================
start time: Tue Sep 23 00:00:00 CST 2014
end time: Tue Mar 31 00:00:00 CST 2015
description: 
#### Bug Fixes
* **docopts.rs**  updated Cargo.lock to use the latest docopt.rs ([315ad76d](https://github.com/thoughtram/clog/commit/315ad76d238858a7bcae305dc627eb20b9b2c3c0))
* *****  upgrade to latest Rust ([d230dd8d](https://github.com/thoughtram/clog/commit/d230dd8d323cc0edaebaa55e6a4b0e6a93e527ef))
* **git**  get_mut_ref() was deprecated, use as_mut().unwrap() ([f073d69a](https://github.com/thoughtram/clog/commit/f073d69a0bc6c3c87fee4375dfc49211fdab6b44))
* **section_builder**  find_or_insert was deprecated, only some verbose workarounds available yet ([88ccacd5](https://github.com/thoughtram/clog/commit/88ccacd5bd559e8af996f3e67a5d58fe31b3f87c))
* **cargo**  track working master branch ([9496bc8b](https://github.com/thoughtram/clog/commit/9496bc8b7752d248c1781fbcbff0b969a10defe0))
#### Features
* **main**
  *  implement fallback for --setversion ([d276786a](https://github.com/thoughtram/clog/commit/d276786a383813337a82b0a1f5e72333443517ab))
  *  include links to closed issues ([602fb29e](https://github.com/thoughtram/clog/commit/602fb29e90aa2c87b14c395b11b3bbbf7ca0a69b))
* **log_writer**  include anchor in header ([01645092](https://github.com/thoughtram/clog/commit/01645092893fcfb10d22c76624ce8ca493bf282d))

commit message: 
commit 6eb6128d3d8a0c894c23a0e6c1fe6f2baa1d6464+ 1411480946 -----sp :: fix(cargo): temporally switch to docopt fork
commit 31c4d465285c4baa2a9f86fa66da5944ebbff49a+ 1411480977 -----sp :: feat(main): always prepend rather than append
commit 47e9250ec15dd5a7e81804b05c2ae50b79bc9ce8+ 1411481200 -----sp :: fix(main): don't fail if changelog.md does not exist
commit b1a6d6640c1087338aeb5f74a7e9052adf9c28f1 1411481237 -----sp :: chore(Cargo): bump version number
commit ec8907c5c3902c492933f6a5ca2c532fed86e924 1411481307 -----sp :: chore(changelog): update changelog
commit e0def50ea247413b19167bef359e9625613d6bf4 1411591776 -----sp :: chore(Cargo): bump version number
commit 5a247c568d999eed8e0d16d9845c91568bd64472 1411596560 -----sp :: chore(Readme): state license
commit 2b463a6368492ea089f50a1b2423dfb6bad33d58 1411643209 -----sp :: refactor(*): don't import individual methods
commit efefee2e6f2f01b4f4328b40f8c60475af82a041 1411643498 -----sp :: refactor(git): rename method
commit 602fb29e90aa2c87b14c395b11b3bbbf7ca0a69b+ 1411647802 -----sp :: feat(main): include links to closed issues
commit 30867f12a29a2e825fb25b93c1564d6f79f95d1c 1411648183 -----sp :: refactor(git): reduce boilerplate code
commit 9496bc8b7752d248c1781fbcbff0b969a10defe0+ 1411742755 -----sp :: fix(cargo): track working master branch
commit 4a546303ed2aab7895a610f8f312c9db8d6ec0b1 1411744731 -----sp :: refactor(LogReaderConfig): use Option rather than comparing to empty string
commit c6bd9febd6ca9281ef501af787b80e1dad4b96e1 1411744738 -----sp :: refactor(git): reduce intermediate values
commit 8667e3b4958d2b5947fec34cd120f5a225404566 1411745811 -----sp :: refactor(iter): use for loops rather than iter().all()
commit 494a5fb71db4a495ad5199f35eeb546e436861db 1411745901 -----sp :: docs(readme): add link to conventions
commit b86f1bcd02071c3569ed1ff20e03e776a483192e 1411745947 -----sp :: style(readme): trim spaces from line-ends
commit 3c03e275fe4a80c09c2334cb8a039a851245ba5d 1411748236 -----sp :: refactor(log_writer): use write! macro
commit 23a1d629a0ae7edba45b993f0f65b4aae6fd666c 1411748940 -----sp :: refactor(log_writer): change static methods to regular methods
commit c896bd61f67b335f6c671659aa5562f6aa7e74a3 1411749826 -----sp :: refactor(log_writer): return IoResult for error handling
commit df9c6f306910e84957a768ee7a52412767caa28e 1411814387 -----sp :: refactor(main): remove superfluous ::
commit d25e2ad524ae02416833a01c1920a43509dd3bed 1411814483 -----sp :: refactor(main): remove even more ::
commit d276786a383813337a82b0a1f5e72333443517ab+ 1411832490 -----sp :: feat(main): implement fallback for --setversion
commit 01645092893fcfb10d22c76624ce8ca493bf282d+ 1411854255 -----sp :: feat(log_writer): include anchor in header
commit 315ad76d238858a7bcae305dc627eb20b9b2c3c0+ 1414060239 -----sp :: fix(docopts.rs): updated Cargo.lock to use the latest docopt.rs
commit f073d69a0bc6c3c87fee4375dfc49211fdab6b44+ 1414060248 -----sp :: fix(git): get_mut_ref() was deprecated, use as_mut().unwrap()
commit 88ccacd5bd559e8af996f3e67a5d58fe31b3f87c+ 1414060256 -----sp :: fix(section_builder): find_or_insert was deprecated, only some verbose workarounds available yet

hunks: 
diff --git a/Cargo.lock b/Cargo.lock
index 7023fcf..e380d1a 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,21 +1,21 @@
 [root]
 name = "clog"
-version = "0.0.1"
+version = "0.2.0"
 dependencies = [
- "docopt 0.6.3 (git+https://github.com/cburgdorf/docopt.rs#3137f67bf2f4ec333362c2224df15ebbf8667242)",
- "docopt_macros 0.6.3 (git+https://github.com/cburgdorf/docopt.rs#3137f67bf2f4ec333362c2224df15ebbf8667242)",
+ "docopt 0.6.5 (git+https://github.com/docopt/docopt.rs#1c9a63e0362848570f7c503f8891770ebf2d1eab)",
+ "docopt_macros 0.6.5 (git+https://github.com/docopt/docopt.rs#1c9a63e0362848570f7c503f8891770ebf2d1eab)",
 ]
 
 [[package]]
 name = "docopt"
-version = "0.6.3"
-source = "git+https://github.com/cburgdorf/docopt.rs#3137f67bf2f4ec333362c2224df15ebbf8667242"
+version = "0.6.5"
+source = "git+https://github.com/docopt/docopt.rs#1c9a63e0362848570f7c503f8891770ebf2d1eab"
 
 [[package]]
 name = "docopt_macros"
-version = "0.6.3"
-source = "git+https://github.com/cburgdorf/docopt.rs#3137f67bf2f4ec333362c2224df15ebbf8667242"
+version = "0.6.5"
+source = "git+https://github.com/docopt/docopt.rs#1c9a63e0362848570f7c503f8891770ebf2d1eab"
 dependencies = [
- "docopt 0.6.3 (git+https://github.com/cburgdorf/docopt.rs#3137f67bf2f4ec333362c2224df15ebbf8667242)",
+ "docopt 0.6.5 (git+https://github.com/docopt/docopt.rs#1c9a63e0362848570f7c503f8891770ebf2d1eab)",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index cf09bed..efb36e5 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,11 +1,11 @@
 [package]
 
 name = "clog"
-version = "0.0.1"
+version = "0.2.0"
 authors = ["Christoph Burgdorf <christoph.burgdorf@bvsn.org>"]
 
 [dependencies.docopt]
-git = "https://github.com/cburgdorf/docopt.rs"
+git = "https://github.com/docopt/docopt.rs"
 
 [dependencies.docopt_macros]
-git = "https://github.com/cburgdorf/docopt.rs"
+git = "https://github.com/docopt/docopt.rs"
diff --git a/README.md b/README.md
index 81ff65c..73812d1 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1,13 @@
 clog
 ====
 
-A conventional changelog for the rest of us
+A [conventional](https://github.com/ajoslin/conventional-changelog/blob/master/CONVENTIONS.md) changelog for the rest of us
 
 ### Usage
 
 ```
 Usage:
-  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle> 
+  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle>
         --from=<from> --to=<to> --from-latest-tag]
 
 Options:
@@ -25,6 +25,10 @@
 
 1. Build clog `cargo build`
 
-2. Delete the old log file `rm changelog.md` 
+2. Delete the old log file `rm changelog.md`
 
 3. Run clog `./target/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
+
+## LICENSE
+
+clog is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository.
diff --git a/changelog.md b/changelog.md
index 967a4af..40d8a1d 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,3 +1,26 @@
+## 0.2.0 (2014-09-23)
+
+
+#### Bug Fixes
+
+
+* **cargo**  temporally switch to docopt fork ([6eb6128d](https://github.com/thoughtram/clog/commit/6eb6128d3d8a0c894c23a0e6c1fe6f2baa1d6464))
+* **main**  don't fail if changelog.md does not exist ([47e9250e](https://github.com/thoughtram/clog/commit/47e9250ec15dd5a7e81804b05c2ae50b79bc9ce8))
+
+#### Features
+
+
+* **readme**  cover new commands ([c7a1f1c7](https://github.com/thoughtram/clog/commit/c7a1f1c7e71d49bc5b1e43848a82a9697aeacd8f))
+* **main**
+  *  always prepend rather than append ([31c4d465](https://github.com/thoughtram/clog/commit/31c4d465285c4baa2a9f86fa66da5944ebbff49a))
+  *  print out notification ([81389b98](https://github.com/thoughtram/clog/commit/81389b980702684275789a7afd23425eeac92ba7))
+  *  always append to file ([b880ba1c](https://github.com/thoughtram/clog/commit/b880ba1c9d93aaa8f08a1ee7b3b88aaa819be133))
+  *  implement --from-latest-tag flag ([dfd420fc](https://github.com/thoughtram/clog/commit/dfd420fcee1695d2498ca2f1cc02d55c8e9503e9))
+  *  implement short param -r for repository ([192ae014](https://github.com/thoughtram/clog/commit/192ae0144eafe9c06e138c7609fd95c7d0521cd4))
+  *  give better help ([ca0236b6](https://github.com/thoughtram/clog/commit/ca0236b6243994f3c2d1c8eb2ff6a7e9696bb63c))
+
+
+
 ## 0.1.0 crazy-dog (2014-09-14)
 
 
diff --git a/src/common.rs b/src/common.rs
index 26403fd..389c53c 100644
--- a/src/common.rs
+++ b/src/common.rs
@@ -24,8 +24,10 @@
             hash:{}, 
             subject: {},
             commit_type: {},
-            component: {}
-        }}", self.hash, self.subject, self.commit_type, self.component)
+            component: {},
+            closes: {},
+            breaks: {}
+        }}", self.hash, self.subject, self.commit_type, self.component, self.closes, self.breaks)
     }
 }
 
diff --git a/src/format_util.rs b/src/format_util.rs
new file mode 100644
index 0000000..a6aa1b9
--- /dev/null
+++ b/src/format_util.rs
@@ -0,0 +1,4 @@
+
+pub fn get_short_hash(hash: &str) -> &str {
+    hash.slice_chars(0,8)
+}
\ No newline at end of file
diff --git a/src/git.rs b/src/git.rs
index 5718b06..8532944 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -6,7 +6,7 @@
 pub struct LogReaderConfig {
     pub grep: String,
     pub format: String,
-    pub from: String,
+    pub from: Option<String>,
     pub to: String
 }
 
@@ -18,19 +18,27 @@
             .arg("--max-count=1")
             .spawn()
             .ok().expect("failed to invoke ref-list")
-            .stdout.get_mut_ref().read_to_string()
+            .stdout.as_mut().unwrap().read_to_string()
             .ok().expect("failed to get latest git log")
             .as_slice().trim_chars('\n')
             .to_string()
 }
 
-pub fn get_commits (config:LogReaderConfig) -> Vec<LogEntry>{
+pub fn get_last_commit () -> String {
+    Command::new("git")
+            .arg("rev-parse")
+            .arg("HEAD")
+            .spawn()
+            .ok().expect("failed to invoke rev-parse")
+            .stdout.as_mut().unwrap().read_to_string()
+            .ok().expect("failed to get last commit")
+}
 
-    let range = if config.from.len() == 0 {
-        "HEAD".to_string()
-    }
-    else {
-        format!("{}..{}", config.from, config.to)
+pub fn get_log_entries (config:LogReaderConfig) -> Vec<LogEntry>{
+
+    let range = match config.from {
+        Some(ref from) => format!("{}..{}", from, config.to),
+        None => "HEAD".to_string()
     };
 
     Command::new("git")
@@ -41,7 +49,7 @@
             .arg(range)
             .spawn()
             .ok().expect("failed to invoke `git log`")
-            .stdout.get_mut_ref().read_to_string()
+            .stdout.as_mut().unwrap().read_to_string()
             .ok().expect("failed to read git log")
             .as_slice()
             .split_str("\n==END==\n")
@@ -51,37 +59,37 @@
 }
 
 static COMMIT_PATTERN: Regex = regex!(r"^(.*)\((.*)\):(.*)");
+static CLOSES_PATTERN: Regex = regex!(r"(?:Closes|Fixes|Resolves)\s((?:#(\d+)(?:,\s)?)+)");
 
 fn parse_raw_commit(commit_str:&str) -> LogEntry {
+    let mut lines = commit_str.split('\n');
 
-    let mut lines = commit_str.split('\n').collect::<Vec<&str>>();
+    let hash = lines.next().unwrap_or("").to_string();
 
-    //println!("parsed: {}", lines);
+    let (subject, component, commit_type) =
+        match lines.next().and_then(|s| COMMIT_PATTERN.captures(s)) {
+            Some(caps) => {
+                let commit_type = match caps.at(1) {
+                    "feat" => Feature,
+                    "fix"  => Fix,
+                    _      => Unknown
+                };
+                let component = caps.at(2).to_string();
+                let subject = caps.at(3).to_string();
+                (subject, component, commit_type)
+           },
+           None => ("".to_string(), "".to_string(), Unknown)
+        };
+    let closes = lines.filter_map(|line| CLOSES_PATTERN.captures(line))
+                      .map(|caps| caps.at(2).to_string())
+                      .collect();
 
-    let hash = lines.remove(0).unwrap_or("").to_string();
-    let temp_subject = lines.remove(0).unwrap_or("").to_string();
-
-    let mut entry = LogEntry {
+    LogEntry {
         hash: hash,
-        subject: "".to_string(),
-        component: "".to_string(),
-        closes: vec!(),
+        subject: subject,
+        component: component,
+        closes: closes,
         breaks: vec!(),
-        commit_type: Unknown
-    };
-
-    match COMMIT_PATTERN.captures(temp_subject.as_slice()) {
-        Some(caps) => {
-            entry.commit_type = match caps.at(1) {
-                "feat" => Feature,
-                "fix"  => Fix,
-                _      => Unknown
-            };
-            entry.component = caps.at(2).to_string();
-            entry.subject = caps.at(3).to_string();
-        },
-        _ => ()
-    };
-
-    entry
-}
\ No newline at end of file
+        commit_type: commit_type
+    }
+}
diff --git a/src/log_writer.rs b/src/log_writer.rs
index 35af910..9148552 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -1,6 +1,7 @@
 use std::collections::hashmap::HashMap;
-use std::io::Writer;
-use time::now_utc;
+use std::io::{Writer, IoResult};
+use time;
+use format_util;
 use common::{ LogEntry };
 
 pub struct LogWriter<'a> {
@@ -16,68 +17,80 @@
 
 impl<'a> LogWriter<'a> {
 
-    fn get_commit_link (repository: &String, hash: &String) -> String {
-        let short_hash = hash.as_slice().slice_chars(0,8);
-        if repository.len() > 0 {
-            format!("[{}]({}/commit/{})", short_hash, repository, hash)
-        }
-        else {
-            format!("({})", short_hash)
+    fn commit_link(&self, hash: &String) -> String {
+        let short_hash = format_util::get_short_hash(hash.as_slice());
+        match self.options.repository_link.as_slice() {
+            "" => format!("({})", short_hash),
+            link => format!("[{}]({}/commit/{})", short_hash, link, hash)
+
         }
     }
 
-    pub fn write_header (&mut self) {
+    fn issue_link(&self, issue: &String) -> String {
+        match self.options.repository_link.as_slice() {
+            "" => format!("(#{})", issue),
+            link => format!("[#{}]({}/issues/{})", issue, link, issue)
+        }
+    }
 
+    pub fn write_header(&mut self) -> IoResult<()> {
         let subtitle = match self.options.subtitle.len() {
             0 => self.options.subtitle.clone(),
             _ => format!(" {}", self.options.subtitle)
         };
 
         let version_text = format!("## {}{}", self.options.version, subtitle);
-    
-        fn get_date () -> String {
-            now_utc().strftime("%Y-%m-%d")
-        }
 
-        if self.options.repository_link.len() > 0 {
-            self.writer.write(format!("{} ({})\n\n", version_text, get_date()).as_bytes());
-        }
-        else {
-            self.writer.write(format!("<a name=\"{}\"</a>\n{} ({})\n\n", self.options.version, version_text, get_date()).as_bytes());
-        }
+        let date = time::now_utc().strftime("%Y-%m-%d");
+
+        write!(self.writer, "<a name=\"{}\"></a>\n{} ({})\n\n", self.options.version, version_text, date)
     }
 
-    pub fn write_section (&mut self, title: &str, section: &HashMap<String, Vec<LogEntry>>) {
+    pub fn write_section(&mut self, title: &str, section: &HashMap<String, Vec<LogEntry>>)
+                            -> IoResult<()> {
+        if section.len() == 0 { return Ok(()) }
 
-        if section.len() == 0 {
-            return;
-        }
+        try!(self.writer.write_line(format!("\n#### {}\n\n", title).as_slice()));
 
-        self.writer.write_line(format!("\n#### {}\n\n", title).as_slice());
-
-        section.iter().all(|(component, entries)| {
-            let mut prefix:String;
+        for (component, entries) in section.iter() {
             let nested = entries.len() > 1;
 
             //TODO: implement the empty component stuff
-            if nested {
-                self.writer.write(format!("* **{}**\n", component).as_bytes());
-                prefix = "  *".to_string();
+            let prefix = if nested {
+                try!(write!(self.writer, "* **{}**\n", component));
+                "  *".to_string()
+            } else {
+                format!("* **{}**", component)
+            };
+
+            for entry in entries.iter() {
+                try!(write!(self.writer, "{} {} ({}",
+                                         prefix,
+                                         entry.subject,
+                                         self.commit_link(&entry.hash)));
+
+                if entry.closes.len() > 0 {
+                    let closes_string = entry.closes.iter()
+                                                    .map(|s| self.issue_link(s))
+                                                    // FIXME: Connect should be
+                                                    // used on the Iterator
+                                                    .collect::<Vec<String>>()
+                                                    .connect(", ");
+
+                    try!(write!(self.writer, ", closes {}", closes_string));
+                }
+
+                try!(write!(self.writer, ")\n"));
             }
-            else {
-                prefix = format!("* **{}**", component)
-            }
+        }
 
-            entries.iter().all(|entry| {
-                self.writer.write(format!("{} {} ({}", prefix, entry.subject, LogWriter::get_commit_link(&self.options.repository_link, &entry.hash)).as_bytes());
-                //TODO: implement closes stuff
+        Ok(())
+    }
 
-                self.writer.write(")\n".as_bytes());
 
-                true
-            });
-            true
-        });
+    pub fn write(&mut self, content: &str)  -> IoResult<()> {
+        try!(write!(self.writer, "\n\n\n"));
+        write!(self.writer, "{}", content)
     }
 
     pub fn new<T:Writer + Send>(writer: &'a mut T, options: LogWriterOptions) -> LogWriter<'a> {
@@ -86,4 +99,4 @@
             options: options
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main.rs b/src/main.rs
index 35b50c1..4ed9488 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -11,22 +11,21 @@
 extern crate docopt;
 extern crate time;
 
-use git::{ LogReaderConfig, get_commits, get_latest_tag };
+use git::LogReaderConfig;
 use log_writer::{ LogWriter, LogWriterOptions };
-use section_builder::build_sections;
-use std::io::{File, Append, Write};
+use std::io::{File, Open, Write};
 use docopt::FlagParser;
-use time::get_time;
 
 mod common;
 mod git;
 mod log_writer;
 mod section_builder;
+mod format_util;
 
 docopt!(Args, "clog
 
 Usage:
-  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle> 
+  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle>
         --from=<from> --to=<to> --from-latest-tag]
 
 Options:
@@ -37,35 +36,45 @@
   --subtitle=<subtitle>   e.g. crazy-release-name
   --from=<from>           e.g. 12a8546
   --to=<to>               e.g. 8057684
-  --from-latest-tag       uses the latest tag as starting point. Ignores other --from parameter")
+  --from-latest-tag       uses the latest tag as starting point. Ignores other --from parameter",
+  flag_from: Option<String>,
+  flag_setversion: Option<String>)
 
 fn main () {
 
-    let start_nsec = get_time().nsec;
+    let start_nsec = time::get_time().nsec;
     let args: Args = FlagParser::parse().unwrap_or_else(|e| e.exit());
 
     let log_reader_config = LogReaderConfig {
         grep: "^feat|^fix|BREAKING'".to_string(),
         format: "%H%n%s%n%b%n==END==".to_string(),
-        from: if args.flag_from_latest_tag { get_latest_tag() } else { args.flag_from },
+        from: if args.flag_from_latest_tag { Some(git::get_latest_tag()) } else { args.flag_from },
         to: args.flag_to
     };
 
-    let commits = get_commits(log_reader_config);
+    let commits = git::get_log_entries(log_reader_config);
 
-    let sections = build_sections(commits.clone());
-    let mut file = File::open_mode(&Path::new("changelog.md"), Append, Write).ok().unwrap();
-    let mut writer = LogWriter::new(&mut file, LogWriterOptions { 
+    let sections = section_builder::build_sections(commits.clone());
+
+    let contents = match File::open(&Path::new("changelog.md")).read_to_string() {
+      Ok(content) => content,
+      Err(_)      => "".to_string()
+    };
+
+    let mut file = File::open_mode(&Path::new("changelog.md"), Open, Write).ok().unwrap();
+    let mut writer = LogWriter::new(&mut file, LogWriterOptions {
         repository_link: args.flag_repository,
-        version: args.flag_setversion,
+        version: args.flag_setversion
+                     .unwrap_or_else(|| format_util::get_short_hash(git::get_last_commit().as_slice()).to_string()),
         subtitle: args.flag_subtitle
     });
 
-    writer.write_header();
-    writer.write_section("Bug Fixes", &sections.fixes);
-    writer.write_section("Features", &sections.features);
-    
-    let end_nsec = get_time().nsec;
+    writer.write_header().ok().expect("failed to write header");
+    writer.write_section("Bug Fixes", &sections.fixes).ok().expect("failed to write bugfixes");;
+    writer.write_section("Features", &sections.features).ok().expect("failed to write features");;
+    writer.write(contents.as_slice()).ok().expect("failed to write contents");;
+
+    let end_nsec = time::get_time().nsec;
     let elapsed_mssec = (end_nsec - start_nsec) / 1000000;
     println!("changelog updated. (took {} ms)", elapsed_mssec);
 }
diff --git a/src/section_builder.rs b/src/section_builder.rs
index 3bf0965..160721d 100644
--- a/src/section_builder.rs
+++ b/src/section_builder.rs
@@ -1,32 +1,44 @@
 use std::collections::hashmap::HashMap;
+use std::collections::hashmap;
 use common::{ LogEntry, SectionMap, Feature, Fix };
 
 pub fn build_sections(log_entries: Vec<LogEntry>) -> SectionMap {
-
     let mut sections = SectionMap {
         features: HashMap::new(),
         fixes: HashMap::new(),
         breaks: HashMap::new()
     };
 
-    log_entries.iter().all(|entry| {
-
+    for entry in log_entries.into_iter() {
         match entry.commit_type {
             Feature => {
-                sections.features
+                let feature = match sections.features.entry(entry.component.clone()) {
+                    hashmap::Vacant(v) => v.set(Vec::new()),
+                    hashmap::Occupied(o) => o.into_mut()
+                };
+
+                feature.push(entry.clone());
+
+                // see https://github.com/rust-lang/rfcs/issues/353
+                /* sections.features
                         .find_or_insert(entry.component.clone(), Vec::new())
-                        .push(entry.clone());
+                        .push(entry.clone());*/
             },
             Fix => {
-                sections.fixes
+                let fix = match sections.fixes.entry(entry.component.clone()) {
+                    hashmap::Vacant(v) => v.set(Vec::new()),
+                    hashmap::Occupied(o) => o.into_mut()
+                };
+
+                fix.push(entry.clone());
+
+                /* sections.fixes
                         .find_or_insert(entry.component.clone(), Vec::new())
-                        .push(entry.clone());
+                        .push(entry.clone());*/
             },
             _   => {}
         }
-
-        true
-    });
+    }
 
     sections
-}
\ No newline at end of file
+}

=====================================================================
start time: Sun Sep 14 00:00:00 CST 2014
end time: Tue Sep 23 00:00:00 CST 2014
description: 
#### Bug Fixes
* **cargo**  temporally switch to docopt fork ([6eb6128d](https://github.com/thoughtram/clog/commit/6eb6128d3d8a0c894c23a0e6c1fe6f2baa1d6464))
* **main**  don't fail if changelog.md does not exist ([47e9250e](https://github.com/thoughtram/clog/commit/47e9250ec15dd5a7e81804b05c2ae50b79bc9ce8))
#### Features
* **readme**  cover new commands ([c7a1f1c7](https://github.com/thoughtram/clog/commit/c7a1f1c7e71d49bc5b1e43848a82a9697aeacd8f))
* **main**
  *  always prepend rather than append ([31c4d465](https://github.com/thoughtram/clog/commit/31c4d465285c4baa2a9f86fa66da5944ebbff49a))
  *  print out notification ([81389b98](https://github.com/thoughtram/clog/commit/81389b980702684275789a7afd23425eeac92ba7))
  *  always append to file ([b880ba1c](https://github.com/thoughtram/clog/commit/b880ba1c9d93aaa8f08a1ee7b3b88aaa819be133))
  *  implement --from-latest-tag flag ([dfd420fc](https://github.com/thoughtram/clog/commit/dfd420fcee1695d2498ca2f1cc02d55c8e9503e9))
  *  implement short param -r for repository ([192ae014](https://github.com/thoughtram/clog/commit/192ae0144eafe9c06e138c7609fd95c7d0521cd4))
  *  give better help ([ca0236b6](https://github.com/thoughtram/clog/commit/ca0236b6243994f3c2d1c8eb2ff6a7e9696bb63c))

commit message: 
commit 12a85460a3149a9dea6510e9ee9bb648960be217 1410647413 -----sp :: feat(main): parse --repository option from CLI
commit f92e838bd48c8176c31658fe9fd53b9334f62ba3 1410647439 -----sp :: chore(changelog): add first self generated changelog
commit e85854f3840e8b77b0a385200bb17ea0ea6b75ab 1410647595 -----sp :: feat(Readme): describe basic usage
commit f21f1b0173d6c60ff9142137b3a28a3c9ffa282b 1410647632 -----sp :: chore(changelog): update changelog
commit 4f7e1ab656896ef6325f7c6c9c7de6342a371d5b 1410647893 -----sp :: chore(LogWriter): remove commented code
commit c667e1e889d7c875a322e6431637b4679c48874e 1410729554 -----sp :: feat(main): write proper header
commit 80576844a99bb9a61b36cdf7c8a25c7e46b29635 1410729718 -----sp :: chore(changelog): update changelog for fun and profit
commit 790c695d089dbed3fc4672aa38c68a0250b8c7ae 1410730128 -----sp :: chore(Readme): describe new parameter
commit 2d9f73a80d547ec0cdbf803edcd197369802caf7 1410901089 -----sp :: feat(main): implement from/to range specifier
commit ca0236b6243994f3c2d1c8eb2ff6a7e9696bb63c+ 1410965423 -----sp :: feat(main): give better help
commit c46c6b09c336b47a2dad11b5d4f58c6e344c175b 1410965749 -----sp :: Update README.md
commit 192ae0144eafe9c06e138c7609fd95c7d0521cd4+ 1410969991 -----sp :: feat(main): implement short param -r for repository
commit dfd420fcee1695d2498ca2f1cc02d55c8e9503e9+ 1410987432 -----sp :: feat(main): implement --from-latest-tag flag
commit b880ba1c9d93aaa8f08a1ee7b3b88aaa819be133+ 1410989065 -----sp :: feat(main): always append to file
commit c7a1f1c7e71d49bc5b1e43848a82a9697aeacd8f+ 1410989280 -----sp :: feat(readme): cover new commands
commit 81389b980702684275789a7afd23425eeac92ba7+ 1410990853 -----sp :: feat(main): print out notification

hunks: 
diff --git a/README.md b/README.md
index 47201f9..81ff65c 100644
--- a/README.md
+++ b/README.md
@@ -2,3 +2,29 @@
 ====
 
 A conventional changelog for the rest of us
+
+### Usage
+
+```
+Usage:
+  clog [--repository=<link> --setversion=<version> --subtitle=<subtitle> 
+        --from=<from> --to=<to> --from-latest-tag]
+
+Options:
+  -h --help               Show this screen.
+  --version               Show version
+  -r --repository=<link>  e.g https://github.com/thoughtram/clog
+  --setversion=<version>  e.g. 0.1.0
+  --subtitle=<subtitle>   e.g. crazy-release-name
+  --from=<from>           e.g. 12a8546
+  --to=<to>               e.g. 8057684
+  --from-latest-tag       uses the latest tag as starting point. Ignores other --from parameter
+```
+
+Try it!
+
+1. Build clog `cargo build`
+
+2. Delete the old log file `rm changelog.md` 
+
+3. Run clog `./target/clog --repository=https://github.com/thoughtram/clog --setversion=0.1.0 --subtitle=crazy-dog`
diff --git a/changelog.md b/changelog.md
new file mode 100644
index 0000000..967a4af
--- /dev/null
+++ b/changelog.md
@@ -0,0 +1,16 @@
+## 0.1.0 crazy-dog (2014-09-14)
+
+
+#### Bug Fixes
+
+
+* **log_writer**  write fallback links ([e7ea409e](https://github.com/thoughtram/clog/commit/e7ea409e0daca6fc6e95a6c965876813e93ce685))
+
+#### Features
+
+
+* **main**
+  *  write proper header ([c667e1e8](https://github.com/thoughtram/clog/commit/c667e1e889d7c875a322e6431637b4679c48874e))
+  *  parse --repository option from CLI ([12a85460](https://github.com/thoughtram/clog/commit/12a85460a3149a9dea6510e9ee9bb648960be217))
+  *  add basic functionality ([05199ce1](https://github.com/thoughtram/clog/commit/05199ce128315f03204a3fc4722440a753bfdccc))
+* **Readme**  describe basic usage ([e85854f3](https://github.com/thoughtram/clog/commit/e85854f3840e8b77b0a385200bb17ea0ea6b75ab))
diff --git a/src/git.rs b/src/git.rs
index d091d7c..5718b06 100644
--- a/src/git.rs
+++ b/src/git.rs
@@ -2,6 +2,7 @@
 use regex::Regex;
 use common:: { LogEntry, Feature, Fix, Unknown };
 
+#[deriving(Show)]
 pub struct LogReaderConfig {
     pub grep: String,
     pub format: String,
@@ -9,13 +10,35 @@
     pub to: String
 }
 
+pub fn get_latest_tag () -> String {
+
+    Command::new("git")
+            .arg("rev-list")
+            .arg("--tags")
+            .arg("--max-count=1")
+            .spawn()
+            .ok().expect("failed to invoke ref-list")
+            .stdout.get_mut_ref().read_to_string()
+            .ok().expect("failed to get latest git log")
+            .as_slice().trim_chars('\n')
+            .to_string()
+}
+
 pub fn get_commits (config:LogReaderConfig) -> Vec<LogEntry>{
+
+    let range = if config.from.len() == 0 {
+        "HEAD".to_string()
+    }
+    else {
+        format!("{}..{}", config.from, config.to)
+    };
+
     Command::new("git")
             .arg("log")
             .arg("-E")
             .arg(format!("--grep={}",config.grep))
             .arg(format!("--format={}", "%H%n%s%n%b%n==END=="))
-            //.arg("FROM..TO")
+            .arg(range)
             .spawn()
             .ok().expect("failed to invoke `git log`")
             .stdout.get_mut_ref().read_to_string()
diff --git a/src/log_writer.rs b/src/log_writer.rs
index 8096ce9..35af910 100644
--- a/src/log_writer.rs
+++ b/src/log_writer.rs
@@ -1,5 +1,6 @@
 use std::collections::hashmap::HashMap;
 use std::io::Writer;
+use time::now_utc;
 use common::{ LogEntry };
 
 pub struct LogWriter<'a> {
@@ -9,7 +10,8 @@
 
 pub struct LogWriterOptions<'a> {
     pub repository_link: String,
-    //pub writer: &'a mut Writer+'a
+    pub version: String,
+    pub subtitle: String
 }
 
 impl<'a> LogWriter<'a> {
@@ -24,6 +26,27 @@
         }
     }
 
+    pub fn write_header (&mut self) {
+
+        let subtitle = match self.options.subtitle.len() {
+            0 => self.options.subtitle.clone(),
+            _ => format!(" {}", self.options.subtitle)
+        };
+
+        let version_text = format!("## {}{}", self.options.version, subtitle);
+    
+        fn get_date () -> String {
+            now_utc().strftime("%Y-%m-%d")
+        }
+
+        if self.options.repository_link.len() > 0 {
+            self.writer.write(format!("{} ({})\n\n", version_text, get_date()).as_bytes());
+        }
+        else {
+            self.writer.write(format!("<a name=\"{}\"</a>\n{} ({})\n\n", self.options.version, version_text, get_date()).as_bytes());
+        }
+    }
+
     pub fn write_section (&mut self, title: &str, section: &HashMap<String, Vec<LogEntry>>) {
 
         if section.len() == 0 {
diff --git a/src/main.rs b/src/main.rs
index 57c40b0..