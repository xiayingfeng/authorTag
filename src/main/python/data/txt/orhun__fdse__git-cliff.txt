repo name: orhun/git-cliff
=====================================================================
start time: Sat Feb 12 00:00:00 CST 2022
end time: Sun Mar 13 00:00:00 CST 2022
description: 
### Bug Fixes
- Do not skip all tags when `skip_tags` is empty (#63)
- Use root commit when --latest and there is only one tag (#59)
- Use the correct branch for codecov (#65)
- Fix `keepachangelog` config example (#66)
### Documentation
- Add another option of GitHub Actions (#64)
- Document timestamp format of `Release` struct (#67)
### Miscellaneous Tasks
- Upgrade regex dependency to fix CVE-2022-24713
- Upgrade dependencies

commit message: 
commit a3980f4632cea95d939c044ef5687123f5b91546+ 1644683421 -----sp :: feat(changelog, config)!: replace --topo-order by --date-order (#58)
commit 5bfb45411da940eb7d0df874558b31b50911bb59+ 1644683999 -----sp :: fix(ci): update grcov download command
commit 4863e946c0b3cd6d1471704efd6ab7e63dc6afdf+ 1644691801 -----sp :: chore(deps): upgrade dependencies
commit 58165c730e4ef370a448001193d90ff29a57449d+ 1644691952 -----sp :: fix(tests): update custom error tests
commit 0a3c56c7ecdf01133d0e857269076052febadd91+ 1644691993 -----sp :: docs(readme): update copyright years
commit d4cbb857388f8d5686715fcba62f8adaeb92230a+ 1644692168 -----sp :: chore(docker): bump the Rust version in Dockerfile
commit cfe41fe56eddb38c109e178e02d3567d10ad78ff+ 1644692546 -----sp :: chore(ci): run cargo-audit for checking vulnerabilities
commit 960cb4ac6f4ffb0398a39c36637f53c1307d44ab+ 1644692675 -----sp :: chore(cd): update the runner to macos-11
commit 761669eb575cd3195554e2a5c680c62bcee4f99b 1644692797 -----sp :: chore(release): prepare for v0.6.0
commit ff1d981fd9a5dba26422f56582e06b3b463eb8a3+ 1645307896 -----sp :: fix(changelog): do not skip all tags when `skip_tags` is empty (#63)
commit 3ccec7f93a917a4feaa5baf17b604fe3de76b0e1+ 1645367171 -----sp :: fix(changelog): use root commit when --latest and there is only one tag (#59)
commit db7edf5707f2bfdf49c749026969fd1833530ed7+ 1646591367 -----sp :: docs(readme): add another option of GitHub Actions (#64)
commit 8f3325e758d25d814c5c9831d128907696a12536+ 1646591367 -----sp :: fix(project): use the correct branch for codecov (#65)
commit 9b5f0bb5fdadf15cccb738f1bb96937be058795e+ 1646591367 -----sp :: fix(example): fix keepachangelog config example (#66)
commit 8dc367fdf9e14ee3b84d60750bb0593550d850ed+ 1646591367 -----sp :: chore(deps): upgrade regex dependency to fix CVE-2022-24713
commit 66f65800b39b5724df1ae572ea5907f73bbbcf7e+ 1646591367 -----sp :: chore(deps): upgrade dependencies
commit d68eb120c0a0a98bc1e7264a3aede17b5f5c54be+ 1646591367 -----sp :: docs(core): document timestamp format of Release struct (#67)
hunks: 
diff --git a/.cargo/audit.toml b/.cargo/audit.toml
new file mode 100644
index 0000000..a8f6bfe
--- /dev/null
+++ b/.cargo/audit.toml
@@ -0,0 +1,8 @@
+[advisories]
+ignore = [
+    "RUSTSEC-2020-0159", # `chrono` localtime_r segfault
+]
+
+[output]
+quiet = false
+deny = ["warnings"]
\ No newline at end of file
diff --git a/.github/fixtures/test-fixtures-locally.sh b/.github/fixtures/test-fixtures-locally.sh
new file mode 100755
index 0000000..850e427
--- /dev/null
+++ b/.github/fixtures/test-fixtures-locally.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+set -e
+
+SCRIPT_DIR=$(readlink -f "$(dirname "$0")")
+
+if [ -z "$1" ]; then
+    echo "Please input a fixture name."
+    exit 1
+fi
+
+export FIXTURES_DIR="$SCRIPT_DIR/$1"
+
+# Set up a temporary repository
+cd "$(mktemp -d)"
+git init
+
+# Commit
+"$FIXTURES_DIR/commit.sh"
+
+# Show results
+echo -e "\n---Run git-cliff---"
+cargo run --manifest-path "$SCRIPT_DIR/../../Cargo.toml" -- --config "$FIXTURES_DIR/cliff.toml" $2
diff --git a/.github/fixtures/test-ignore-tags/commit.sh b/.github/fixtures/test-ignore-tags/commit.sh
index 7ffb277..fa448ec 100755
--- a/.github/fixtures/test-ignore-tags/commit.sh
+++ b/.github/fixtures/test-ignore-tags/commit.sh
@@ -12,4 +12,4 @@
 git tag v0.2.0-beta.1
 
 GIT_COMMITTER_DATE="2021-01-23 01:23:49" git commit --allow-empty -m "feat: add feature 3"
-git tag v0.2.0
\ No newline at end of file
+git tag v0.2.0
diff --git a/.github/fixtures/test-latest-with-one-tag/cliff.toml b/.github/fixtures/test-latest-with-one-tag/cliff.toml
new file mode 100644
index 0000000..f8c6717
--- /dev/null
+++ b/.github/fixtures/test-latest-with-one-tag/cliff.toml
@@ -0,0 +1,27 @@
+[changelog]
+# changelog header
+header = """
+# Changelog\n
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
+    {% endfor %}
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
diff --git a/.github/fixtures/test-latest-with-one-tag/commit.sh b/.github/fixtures/test-latest-with-one-tag/commit.sh
new file mode 100755
index 0000000..6c5c90c
--- /dev/null
+++ b/.github/fixtures/test-latest-with-one-tag/commit.sh
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+set -e
+
+GIT_COMMITTER_DATE="2021-01-23 01:23:45" git commit --allow-empty -m "Initial commit"
+
+GIT_COMMITTER_DATE="2021-01-23 01:23:46" git commit --allow-empty -m "feat: add feature 1"
+git tag v0.1.0
diff --git a/.github/fixtures/test-latest-with-one-tag/expected.md b/.github/fixtures/test-latest-with-one-tag/expected.md
new file mode 100644
index 0000000..1b15d95
--- /dev/null
+++ b/.github/fixtures/test-latest-with-one-tag/expected.md
@@ -0,0 +1,11 @@
+# Changelog
+
+All notable changes to this project will be documented in this file.
+
+## [0.1.0] - 2021-01-23
+
+### Feat
+
+- Add feature 1
+
+<!-- generated by git-cliff -->
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index febbce8..8da4637 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -64,7 +64,7 @@
             TOOLCHAIN: stable
             TARGET: i686-pc-windows-msvc
           - BUILD: macos
-            OS: macos-10.15
+            OS: macos-11
             TOOLCHAIN: stable
             TARGET: x86_64-apple-darwin
     steps:
@@ -112,7 +112,7 @@
               > git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz.sha512
           fi
       - name: Sign the release
-        if: matrix.OS == 'ubuntu-20.04' || matrix.OS == 'macos-10.15'
+        if: matrix.OS == 'ubuntu-20.04' || matrix.OS == 'macos-11'
         run: |
           echo "${{ secrets.GPG_RELEASE_KEY }}" | base64 --decode > private.key
           echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index f407ccf..f78d257 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -40,15 +40,22 @@
           toolchain: nightly
           override: true
       - name: Checkout
+        if: github.event_name != 'pull_request'
         uses: actions/checkout@v2
         with:
           fetch-depth: 0
+      - name: Checkout
+        if: github.event_name == 'pull_request'
+        uses: actions/checkout@v2
+        with:
+          ref: ${{ github.event.pull_request.head.sha }}
+          fetch-depth: 0
       - name: Run tests
         run: |
           export CARGO_INCREMENTAL=0
           export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
           export RUSTDOCFLAGS="-Cpanic=abort"
-          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-v0.8.6-x86_64-unknown-linux-gnu.tar.gz | tar xzf -
+          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
           cargo test --verbose $CARGO_OPTIONS
           zip -0 ccov.zip `find . \( -name "git_cliff*.gc*" \) -print`;
           ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info;
@@ -104,3 +111,14 @@
           args: --exclude "%7Busername%7D|file:///|https://datatracker.ietf.org" -v *.md
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+
+  audit:
+    name: Audit check
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+      - name: Run cargo-audit
+        uses: actions-rs/audit-check@v1
+        with:
+          token: ${{ secrets.GITHUB_TOKEN }}
diff --git a/.github/workflows/test-fixtures.yml b/.github/workflows/test-fixtures.yml
index 609a2e5..477733e 100644
--- a/.github/workflows/test-fixtures.yml
+++ b/.github/workflows/test-fixtures.yml
@@ -23,6 +23,8 @@
             command: --latest
           - fixtures-name: test-date-order-arg
             command: --latest --date-order
+          - fixtures-name: test-latest-with-one-tag
+            command: --latest
     steps:
       - name: Checkout
         uses: actions/checkout@v2
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4d8dca8..f1e8a35 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,53 @@
 
 All notable changes to this project will be documented in this file.
 
+## [0.6.0] - 2022-02-12
+
+### Bug Fixes
+
+- Only drop previous releases if skipped (#44)
+- Run clippy from nightly toolchain
+- Update tests about optional config values
+- Set the previous release when using `--unreleased` (#47)
+- Lower the priority of global configuration file (#51)
+- Update the download link of latest grcov release
+- Use the correct tar command for extracting grcov archive
+- Update grcov download command
+- Update custom error tests
+
+### Documentation
+
+- Update template contexts about link_parsers
+- Add minimal example
+- Update copyright years
+
+### Features
+
+- Add `link_parsers` for parsing/extracting links (#42)
+- Make the `git` section optional (#45)
+- Make the `changelog` section optional (#45)
+- [**breaking**] Use conventional commit body to check against commit parsers
+- [**breaking**] Replace --topo-order by --date-order (#58)
+
+### Miscellaneous Tasks
+
+- Update arg parsing to clap v3 (#49)
+- Upgrade dependencies
+- Bump the Rust version in Dockerfile
+- Run cargo-audit for checking vulnerabilities
+- Update the runner to macos-11
+
+### Refactor
+
+- Apply clippy suggestions
+- [**breaking**] Change the default value of `trim` to `true`
+- Unify serde and serde_derive using derive feature (#57)
+
+### Styling
+
+- Update the styling
+- Comply with MD022 and fix minor typos (#61)
+
 ## [0.5.0] - 2021-12-15
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index d0bef74..d4f7253 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -39,15 +39,15 @@
 
 [[package]]
 name = "autocfg"
-version = "1.0.1"
+version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"
+checksum = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"
 
 [[package]]
 name = "bitflags"
-version = "1.3.1"
+version = "1.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2da1976d75adbe5fbc88130ecd119529cf1cc6a93ae1546d8696ee66f0d21af1"
+checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
 [[package]]
 name = "block-buffer"
@@ -67,7 +67,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"
 dependencies = [
- "generic-array 0.14.4",
+ "generic-array 0.14.5",
 ]
 
 [[package]]
@@ -81,9 +81,9 @@
 
 [[package]]
 name = "bstr"
-version = "0.2.16"
+version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90682c8d613ad3373e66de8c6411e0ae2ab2571e879d2efbf73558cc66f21279"
+checksum = "ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223"
 dependencies = [
  "memchr",
 ]
@@ -102,9 +102,9 @@
 
 [[package]]
 name = "cc"
-version = "1.0.69"
+version = "1.0.72"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2"
+checksum = "22a9137b95ea06864e018375b72adfb7db6e6f68cfc8df5a04d00288050485ee"
 dependencies = [
  "jobserver",
 ]
@@ -129,9 +129,9 @@
 
 [[package]]
 name = "chrono-tz"
-version = "0.6.0"
+version = "0.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64c01c1c607d25c71bbaa67c113d6c6b36c434744b4fd66691d711b5b1bc0c8b"
+checksum = "58549f1842da3080ce63002102d5bc954c7bc843d4f47818e642abdc36253552"
 dependencies = [
  "chrono",
  "chrono-tz-build",
@@ -151,9 +151,9 @@
 
 [[package]]
 name = "clap"
-version = "3.0.10"
+version = "3.0.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a30c3bf9ff12dfe5dae53f0a96e0febcd18420d1c0e7fad77796d9d5c4b5375"
+checksum = "b63edc3f163b3c71ec8aa23f9bd6070f77edbf3d1d198b164afa90ff00e4ec62"
 dependencies = [
  "atty",
  "bitflags",
@@ -169,18 +169,18 @@
 
 [[package]]
 name = "clap_complete"
-version = "3.0.4"
+version = "3.0.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d044e9db8cd0f68191becdeb5246b7462e4cf0c069b19ae00d1bf3fa9889498d"
+checksum = "678db4c39c013cc68b54d372bce2efc58e30a0337c497c9032fd196802df3bc3"
 dependencies = [
  "clap",
 ]
 
 [[package]]
 name = "clap_derive"
-version = "3.0.6"
+version = "3.0.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "517358c28fcef6607bf6f76108e02afad7e82297d132a6b846dcc1fc3efcd153"
+checksum = "9a1132dc3944b31c20dd8b906b3a9f0a5d0243e092d59171414969657ac6aa85"
 dependencies = [
  "heck",
  "proc-macro-error",
@@ -204,18 +204,18 @@
 
 [[package]]
 name = "cpufeatures"
-version = "0.1.5"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66c99696f6c9dd7f35d486b9d04d7e6e202aa3e8c40d553f2fdf5e7e0c6a71ef"
+checksum = "95059428f66df56b63431fdb4e1947ed2190586af5c5a8a8b71122bdf5a7f469"
 dependencies = [
  "libc",
 ]
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.8.5"
+version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db"
+checksum = "b5e5bed1f1c269533fa816a0a5492b3545209a205ca1a54842be180eb63a16a6"
 dependencies = [
  "cfg-if",
  "lazy_static",
@@ -223,9 +223,9 @@
 
 [[package]]
 name = "ctor"
-version = "0.1.20"
+version = "0.1.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5e98e2ad1a782e33928b96fc3948e7c355e5af34ba4de7670fe8bac2a3b2006d"
+checksum = "ccc0a48a9b826acdf4028595adc9db92caea352f7af011a3034acd172a52a0aa"
 dependencies = [
  "quote",
  "syn",
@@ -258,7 +258,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"
 dependencies = [
- "generic-array 0.14.4",
+ "generic-array 0.14.5",
 ]
 
 [[package]]
@@ -334,9 +334,9 @@
 
 [[package]]
 name = "generic-array"
-version = "0.14.4"
+version = "0.14.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"
+checksum = "fd48d33ec7f05fbfa152300fdad764757cbded343c1aa1cff2fbaf4134851803"
 dependencies = [
  "typenum",
  "version_check",
@@ -344,9 +344,9 @@
 
 [[package]]
 name = "getrandom"
-version = "0.2.3"
+version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"
+checksum = "418d37c8b1d42553c93648be529cb70f920d3baf8ef469b74b9638df426e0b4c"
 dependencies = [
  "cfg-if",
  "libc",
@@ -355,7 +355,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.5.0"
+version = "0.6.0"
 dependencies = [
  "clap",
  "clap_complete",
@@ -368,7 +368,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.5.0"
+version = "0.6.0"
 dependencies = [
  "config",
  "git-conventional",
@@ -387,21 +387,21 @@
 
 [[package]]
 name = "git-conventional"
-version = "0.11.0"
+version = "0.11.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b6fba08a8b40d1967e1396a2b42680af39da750a6e28476f48b5ca4033f15f27"
+checksum = "f99a4ab940f75618c47d4a6875b728d1cf656cc0cc28a36ec7bc56ff7bd6127f"
 dependencies = [
  "doc-comment",
- "nom 7.0.0",
+ "nom 7.1.0",
  "serde",
  "unicase",
 ]
 
 [[package]]
 name = "git2"
-version = "0.13.23"
+version = "0.13.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2a8057932925d3a9d9e4434ea016570d37420ddb1ceed45a174d577f24ed6700"
+checksum = "f29229cc1b24c0e6062f6e742aa3e256492a5323365e5ed3413599f8a5eff7d6"
 dependencies = [
  "bitflags",
  "libc",
@@ -507,9 +507,9 @@
 
 [[package]]
 name = "indexmap"
-version = "1.7.0"
+version = "1.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"
+checksum = "282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223"
 dependencies = [
  "autocfg",
  "hashbrown",
@@ -517,15 +517,15 @@
 
 [[package]]
 name = "itoa"
-version = "0.4.7"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dd25036021b0de88a0aff6b850051563c6516d0bf53f8638938edbb9de732736"
+checksum = "1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35"
 
 [[package]]
 name = "jobserver"
-version = "0.1.23"
+version = "0.1.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f5ca711fd837261e14ec9e674f092cbb931d3fa1482b017ae59328ddc6f3212b"
+checksum = "af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa"
 dependencies = [
  "libc",
 ]
@@ -551,15 +551,15 @@
 
 [[package]]
 name = "libc"
-version = "0.2.99"
+version = "0.2.117"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7f823d141fe0a24df1e23b4af4e3c7ba9e5966ec514ea068c93024aa7deb765"
+checksum = "e74d72e0f9b65b5b4ca49a346af3976df0f9c61d550727f349ecd559f251a26c"
 
 [[package]]
 name = "libgit2-sys"
-version = "0.12.24+1.3.0"
+version = "0.12.26+1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ddbd6021eef06fb289a8f54b3c2acfdd85ff2a585dfbb24b8576325373d2152c"
+checksum = "19e1c899248e606fbfe68dcb31d8b0176ebab833b103824af31bddf4b7457494"
 dependencies = [
  "cc",
  "libc",
@@ -602,21 +602,21 @@
 
 [[package]]
 name = "matches"
-version = "0.1.8"
+version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"
+checksum = "a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f"
 
 [[package]]
 name = "memchr"
-version = "2.4.0"
+version = "2.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc"
+checksum = "308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a"
 
 [[package]]
 name = "minimal-lexical"
-version = "0.1.2"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6595bb28ed34f43c3fe088e48f6cfb2e033cab45f25a5384d5fdf564fbc8c4b2"
+checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
 
 [[package]]
 name = "nom"
@@ -631,9 +631,9 @@
 
 [[package]]
 name = "nom"
-version = "7.0.0"
+version = "7.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7ffd9d26838a953b4af82cbeb9f1592c6798916983959be223a7124e992742c1"
+checksum = "1b1d11e1ef389c76fe5b81bcaf2ea32cf88b62bc494e19f493d0b30e7a930109"
 dependencies = [
  "memchr",
  "minimal-lexical",
@@ -661,9 +661,9 @@
 
 [[package]]
 name = "once_cell"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56"
+checksum = "da32515d9f6e6e489d7bc9d84c71b060db7247dc035bbe44eac88cf87486d8d5"
 
 [[package]]
 name = "opaque-debug"
@@ -755,9 +755,9 @@
 
 [[package]]
 name = "phf"
-version = "0.10.0"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b9fc3db1018c4b59d7d582a739436478b6035138b6aecbce989fc91c3e98409f"
+checksum = "fabbf1ead8a5bcbc20f5f8b939ee3f5b0f6f281b6ad3468b84656b658b455259"
 dependencies = [
  "phf_shared",
 ]
@@ -794,21 +794,21 @@
 
 [[package]]
 name = "pkg-config"
-version = "0.3.19"
+version = "0.3.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c"
+checksum = "58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe"
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.10"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"
+checksum = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872"
 
 [[package]]
 name = "pretty_assertions"
-version = "1.0.0"
+version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ec0cfe1b2403f172ba0f234e500906ee0a3e493fb81092dac23ebefe129301cc"
+checksum = "76d5b548b725018ab5496482b45cb8bef21e9fed1858a6d674e3a8a0f0bb5d50"
 dependencies = [
  "ansi_term",
  "ctor",
@@ -852,9 +852,9 @@
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.28"
+version = "1.0.36"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5c7ed8b8c7b886ea3ed7dde405212185f423ab44682667c8c6dd14aa1d9f6612"
+checksum = "c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029"
 dependencies = [
  "unicode-xid",
 ]
@@ -867,9 +867,9 @@
 
 [[package]]
 name = "quote"
-version = "1.0.9"
+version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7"
+checksum = "864d3e96a899863136fc6e99f3d7cae289dafe43bf2c5ac19b70df7210c0a145"
 dependencies = [
  "proc-macro2",
 ]
@@ -952,9 +952,9 @@
 
 [[package]]
 name = "rust-embed"
-version = "6.2.0"
+version = "6.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1be44a6694859b7cfc955699935944a6844aa9fe416aeda5d40829e3e38dfee6"
+checksum = "d40377bff8cceee81e28ddb73ac97f5c2856ce5522f0b260b763f434cdfae602"
 dependencies = [
  "rust-embed-impl",
  "rust-embed-utils",
@@ -963,9 +963,9 @@
 
 [[package]]
 name = "rust-embed-impl"
-version = "6.1.0"
+version = "6.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f567ca01565c50c67b29e535f5f67b8ea8aeadaeed16a88f10792ab57438b957"
+checksum = "94e763e24ba2bf0c72bc6be883f967f794a019fafd1b86ba1daff9c91a7edd30"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -976,9 +976,9 @@
 
 [[package]]
 name = "rust-embed-utils"
-version = "7.0.0"
+version = "7.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6116e7ab9ea963f60f2f20291d8fcf6c7273192cdd7273b3c80729a9605c97b2"
+checksum = "ad22c7226e4829104deab21df575e995bfbc4adfad13a595e387477f238c1aec"
 dependencies = [
  "sha2",
  "walkdir",
@@ -986,9 +986,9 @@
 
 [[package]]
 name = "ryu"
-version = "1.0.5"
+version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"
+checksum = "73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f"
 
 [[package]]
 name = "same-file"
@@ -1001,18 +1001,18 @@
 
 [[package]]
 name = "serde"
-version = "1.0.130"
+version = "1.0.136"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913"
+checksum = "ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.130"
+version = "1.0.136"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b"
+checksum = "08597e7152fcd306f41838ed3e37be9eaeed2b61c42e2117266a554fab4662f9"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1021,9 +1021,9 @@
 
 [[package]]
 name = "serde_json"
-version = "1.0.66"
+version = "1.0.79"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "336b10da19a12ad094b59d870ebde26a45402e5b470add4b5fd03c5048a32127"
+checksum = "8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95"
 dependencies = [
  "itoa",
  "ryu",
@@ -1054,9 +1054,9 @@
 
 [[package]]
 name = "sha2"
-version = "0.9.5"
+version = "0.9.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b362ae5752fd2137731f9fa25fd4d9058af34666ca1966fb969119cc35719f12"
+checksum = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"
 dependencies = [
  "block-buffer 0.9.0",
  "cfg-if",
@@ -1067,9 +1067,9 @@
 
 [[package]]
 name = "siphasher"
-version = "0.3.7"
+version = "0.3.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "533494a8f9b724d33625ab53c6c4800f7cc445895924a8ef649222dcb76e938b"
+checksum = "a86232ab60fa71287d7f2ddae4a7073f6b7aac33631c3015abb556f08c6d0a3e"
 
 [[package]]
 name = "slug"
@@ -1094,9 +1094,9 @@
 
 [[package]]
 name = "syn"
-version = "1.0.74"
+version = "1.0.86"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1873d832550d4588c3dbc20f01361ab00bfe741048f71e3fecf145a7cc18b29c"
+checksum = "8a65b3f4ffa0092e9887669db0eae07941f023991ab58ea44da8fe8e2d511c6b"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1105,9 +1105,9 @@
 
 [[package]]
 name = "tera"
-version = "1.13.0"
+version = "1.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ed0c0eee8fbbbaab449287574b292f21ca53224b92a07b4a23266b77376f0ce7"
+checksum = "d3cac831b615c25bcef632d1cabf864fa05813baad3d526829db18eb70e8b58d"
 dependencies = [
  "chrono",
  "chrono-tz",
@@ -1175,18 +1175,18 @@
 
 [[package]]
 name = "thread_local"
-version = "1.1.3"
+version = "1.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8018d24e04c95ac8790716a5987d0fec4f8b27249ffa0f7d33f1369bdfb88cbd"
+checksum = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180"
 dependencies = [
  "once_cell",
 ]
 
 [[package]]
 name = "tinyvec"
-version = "1.3.1"
+version = "1.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "848a1e1181b9f6753b5e96a092749e29b11d19ede67dfbbd6c7dc7e0f49b5338"
+checksum = "2c1c1d5a42b6245520c249549ec267180beaffcc0615401ac8e31853d4b6d8d2"
 dependencies = [
  "tinyvec_macros",
 ]
@@ -1208,9 +1208,9 @@
 
 [[package]]
 name = "typenum"
-version = "1.13.0"
+version = "1.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "879f6906492a7cd215bfa4cf595b600146ccfac0c79bcbd1f3000162af5e8b06"
+checksum = "dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987"
 
 [[package]]
 name = "ucd-trie"
@@ -1288,12 +1288,9 @@
 
 [[package]]
 name = "unicode-bidi"
-version = "0.3.5"
+version = "0.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "eeb8be209bb1c96b7c177c7420d26e04eccacb0eeae6b980e35fcb74678107e0"
-dependencies = [
- "matches",
-]
+checksum = "1a01404663e3db436ed2746d9fefef640d868edae3cceb81c3b8d5732fda678f"
 
 [[package]]
 name = "unicode-normalization"
@@ -1330,9 +1327,9 @@
 
 [[package]]
 name = "version_check"
-version = "0.9.3"
+version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe"
+checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
 [[package]]
 name = "walkdir"
diff --git a/Dockerfile b/Dockerfile
index 79099fa..73ad96c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,14 +1,14 @@
-FROM lukemathwalker/cargo-chef:0.1.31-rust-1.56-slim-buster as planner
+FROM lukemathwalker/cargo-chef:0.1.33-rust-1.58-slim-buster as planner
 WORKDIR app
 COPY . .
 RUN cargo chef prepare --recipe-path recipe.json
 
-FROM lukemathwalker/cargo-chef:0.1.31-rust-1.56-slim-buster as cacher
+FROM lukemathwalker/cargo-chef:0.1.33-rust-1.58-slim-buster as cacher
 WORKDIR app
 COPY --from=planner /app/recipe.json recipe.json
 RUN cargo chef cook --release --recipe-path recipe.json
 
-FROM rust:1.56-slim-buster as builder
+FROM rust:1.58-slim-buster as builder
 WORKDIR app
 RUN apt-get update && \
     apt-get install -y --no-install-recommends \
diff --git a/README.md b/README.md
index e9a3e17..b131bb2 100644
--- a/README.md
+++ b/README.md
@@ -49,7 +49,9 @@
   - [Command Line Arguments](#command-line-arguments)
   - [Examples](#examples)
 - [Docker](#docker)
-- [GitHub Action](#github-action)
+- [GitHub Actions](#github-actions)
+  - [git-cliff-action](#git-cliff-action)
+  - [setup-git-cliff](#setup-git-cliff)
 - [GitLab CI/CD](#gitlab-cicd)
 - [Configuration File](#configuration-file)
   - [changelog](#changelog)
@@ -67,6 +69,7 @@
     - [ignore_tags](#ignore_tags)
     - [date_order](#date_order)
     - [sort_commits](#sort_commits)
+    - [link_parsers](#link_parsers)
 - [Templating](#templating)
   - [Context](#context)
     - [Conventional Commits](#conventional-commits)
@@ -197,7 +200,6 @@
 
 ```sh
 # only takes the latest tag into account
-# (requires at least 2 tags)
 git cliff --latest
 
 # only takes the current tag into account
@@ -290,7 +292,9 @@
 
 Also, you can build the image yourself using `docker build -t git-cliff .` command.
 
-## GitHub Action
+## GitHub Actions
+
+### git-cliff-action
 
 It is possible to generate changelogs using [GitHub Actions](https://docs.github.com/en/actions) via [git-cliff-action](https://github.com/orhun/git-cliff-action).
 
@@ -308,6 +312,26 @@
 
 Also, see the [continuous deployment workflow](./.github/workflows/cd.yml) of this project which sets the release notes for GitHub releases using this action.
 
+### setup-git-cliff
+
+There is also another GitHub Action which is [setup-git-cliff](https://github.com/kenji-miyake/setup-git-cliff).
+
+While `git-cliff-action` uses the Docker image generated by [docker.yml](https://github.com/orhun/git-cliff/blob/main/.github/workflows/docker.yml), `setup-git-cliff` installs the binary executable in the [release artifacts](https://github.com/orhun/git-cliff/releases/latest):
+
+```yml
+- name: Check out repository
+  uses: actions/checkout@v2
+
+- name: Set up git-cliff
+  uses: kenji-miyake/setup-git-cliff@v1
+
+- name: Run git-cliff
+  run: |
+    git cliff
+```
+
+See a practical example [here](https://github.com/autowarefoundation/autoware-github-actions/blob/v1/generate-changelog/action.yaml).
+
 ## GitLab CI/CD
 
 It is possible to generate changelogs using [GitLab CI/CD](https://docs.gitlab.com/ee/ci/).
@@ -1328,4 +1352,4 @@
 
 ## Copyright
 
-Copyright © 2021, [git-cliff contributors](mailto:git-cliff@protonmail.com)
+Copyright © 2021-2022, [git-cliff contributors](mailto:git-cliff@protonmail.com)
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index f79b543..ad51cef 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.5.0" # managed by release.sh
+version = "0.6.0" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -11,16 +11,16 @@
 
 [dependencies]
 thiserror = "1.0.30"
-serde = { version = "1.0.130", features = ["derive"] }
-tera = "1.13.0"
+serde = { version = "1.0.136", features = ["derive"] }
+tera = "1.15.0"
 regex = "1.5.4"
 serde_regex = "1.1.0"
-indexmap = "1.7.0"
+indexmap = "1.8.0"
 toml = "0.5.8"
 glob = "0.3.0"
 
 [dependencies.git2]
-version = "0.13.23"
+version = "0.13.25"
 default-features = false
 
 [dependencies.config]
@@ -29,11 +29,11 @@
 features = ["toml", "yaml"]
 
 [dependencies.git-conventional]
-version = "0.11.0"
+version = "0.11.2"
 features = ["serde"]
 
 [dependencies.rust-embed]
-version = "6.2.0"
+version = "6.3.0"
 features = ["debug-embed"]
 
 [dev-dependencies]
diff --git a/git-cliff-core/src/error.rs b/git-cliff-core/src/error.rs
index e4b2b6a..20e7a1a 100644
--- a/git-cliff-core/src/error.rs
+++ b/git-cliff-core/src/error.rs
@@ -63,7 +63,7 @@
 	#[test]
 	fn throw_parse_error() {
 		let actual_error = mock_function().unwrap_err();
-		let expected_error_kind = ErrorKind::InvalidFormat;
+		let expected_error_kind = ErrorKind::MissingType;
 		match actual_error {
 			Error::ParseError(e) => {
 				assert_eq!(expected_error_kind, e.kind());
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 3615359..1eea05b 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.5.0" # managed by release.sh
+version = "0.6.0" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -20,15 +20,15 @@
 pretty_env_logger = "0.4.0"
 log = "0.4.14"
 dirs-next = "2.0.0"
-clap_complete = "3.0"
+clap_complete = "3.0.6"
 
 [dependencies.git-cliff-core]
-version = "0.5.0" # managed by release.sh
+version = "0.6.0" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.clap]
-version = "3.0"
+version = "3.0.14"
 features = ["derive", "env", "wrap_help"]
 
 [dev-dependencies]
-pretty_assertions = "1.0.0"
+pretty_assertions = "1.1.0"
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index e7deab7..9820af3 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -121,6 +121,7 @@
 	let mut tags = repository.tags(&config.git.tag_pattern, args.date_order)?;
 
 	// Skip tags.
+	config.git.skip_tags = config.git.skip_tags.filter(|r| !r.as_str().is_empty());
 	let skip_regex = config.git.skip_tags.as_ref();
 	let ignore_regex = config.git.ignore_tags.as_ref();
 	tags = tags
@@ -155,31 +156,36 @@
 		}
 	} else if args.latest || args.current {
 		if tags.len() < 2 {
-			return Err(Error::ChangelogError(String::from(
-				"Not enough tags exist for processing the latest/current tag",
-			)));
-		}
-		let mut tag_index = tags.len() - 2;
-		if args.current {
-			if let Some(current_tag_index) =
-				repository.current_tag().as_ref().and_then(|tag| {
-					tags.iter()
-						.enumerate()
-						.find(|(_, (_, v))| v == &tag)
-						.map(|(i, _)| i)
-				}) {
-				tag_index = current_tag_index - 1;
-			} else {
-				return Err(Error::ChangelogError(String::from(
-					"No tag exists for the current commit",
-				)));
+			let commits = repository.commits(None, None, None)?;
+			if let (Some(tag1), Some(tag2)) = (
+				commits.last().map(|c| c.id().to_string()),
+				tags.get_index(0).map(|(k, _)| k),
+			) {
+				commit_range = Some(format!("{}..{}", tag1, tag2));
 			}
-		}
-		if let (Some(tag1), Some(tag2)) = (
-			tags.get_index(tag_index).map(|(k, _)| k),
-			tags.get_index(tag_index + 1).map(|(k, _)| k),
-		) {
-			commit_range = Some(format!("{}..{}", tag1, tag2));
+		} else {
+			let mut tag_index = tags.len() - 2;
+			if args.current {
+				if let Some(current_tag_index) =
+					repository.current_tag().as_ref().and_then(|tag| {
+						tags.iter()
+							.enumerate()
+							.find(|(_, (_, v))| v == &tag)
+							.map(|(i, _)| i)
+					}) {
+					tag_index = current_tag_index - 1;
+				} else {
+					return Err(Error::ChangelogError(String::from(
+						"No tag exists for the current commit",
+					)));
+				}
+			}
+			if let (Some(tag1), Some(tag2)) = (
+				tags.get_index(tag_index).map(|(k, _)| k),
+				tags.get_index(tag_index + 1).map(|(k, _)| k),
+			) {
+				commit_range = Some(format!("{}..{}", tag1, tag2));
+			}
 		}
 	}
 	let commits =

=====================================================================
start time: Wed Dec 15 00:00:00 CST 2021
end time: Sat Feb 12 00:00:00 CST 2022
description: 
### Bug Fixes
- Only drop previous releases if skipped (#44)
- Run clippy from nightly toolchain
- Update tests about optional config values
- Set the previous release when using `--unreleased` (#47)
- Lower the priority of global configuration file (#51)
- Update the download link of latest grcov release
- Use the correct tar command for extracting grcov archive
- Update grcov download command
- Update custom error tests
### Documentation
- Update template contexts about link_parsers
- Add minimal example
- Update copyright years
### Features
- Add `link_parsers` for parsing/extracting links (#42)
- Make the `git` section optional (#45)
- Make the `changelog` section optional (#45)
- [**breaking**] Use conventional commit body to check against commit parsers
- [**breaking**] Replace --topo-order by --date-order (#58)
### Miscellaneous Tasks
- Update arg parsing to clap v3 (#49)
- Upgrade dependencies
- Bump the Rust version in Dockerfile
- Run cargo-audit for checking vulnerabilities
- Update the runner to macos-11
### Refactor
- Apply clippy suggestions
- [**breaking**] Change the default value of `trim` to `true`
- Unify serde and serde_derive using derive feature (#57)
### Styling
- Update the styling
- Comply with MD022 and fix minor typos (#61)

commit message: 
commit d23cf22d4974dd607d2bc68fe73043eadec67752 1639603689 -----sp :: chore(release): prepare for v0.5.0
commit 943c23fd350eea1154deb2e294257c22d2bc76e5+ 1640968992 -----sp :: fix(changelog): only drop previous releases if skipped (#44)
commit b88e7d30bee74667028602fed1337ceb24829145+ 1640974237 -----sp :: feat(changelog): add `link_parsers` for parsing/extracting links (#42)
commit cd018e90a15e9960c0998bbfdd284d65029691f2+ 1640975272 -----sp :: refactor(clippy): apply clippy suggestions
commit 7d766d7e34726faf69f91a3941f1470356e4dda5+ 1640975619 -----sp :: fix(ci): run clippy from nightly toolchain
commit dcb3141ac969c52009f3f13314da65f1cf0e2604+ 1642367874 -----sp :: style(readme): update the styling
commit dce09d71a05f5d1e1d8939d688d19c4740ba6a93+ 1642368097 -----sp :: docs(readme): update template contexts about link_parsers
commit 3b3ef7e4d8d2cb680419e7175bc948b895c7de24+ 1642369020 -----sp :: refactor(config)!: change the default value of `trim` to `true`
commit 8202e37dbd5dd98b3f9de8470e41776b5afb1b51+ 1642371274 -----sp :: feat(config): make the `git` section optional (#45)
commit e02ae0b3661b3379175a10cb273a9c7744747765+ 1642371503 -----sp :: feat(config): make the `changelog` section optional (#45)
commit 8bb48b09ef4488e4fb6b03a43e1d862b4645971b+ 1642372233 -----sp :: fix(test): update tests about optional config values
commit 2be04f8b2214513d08d349b254a97a8c783073fb+ 1642948766 -----sp :: fix(changelog): set the previous release when using `--unreleased` (#47)
commit 848d8a587efd5f611a98b647b954c06938fac24a+ 1643471606 -----sp :: docs(config): add minimal example
commit d961b53ba5ceb99adccfc5df3909c96cda682341+ 1643666817 -----sp :: chore(args): update arg parsing to clap v3 (#49)
commit bedabc93ddc30be69d27cbb42b23d3ff68e96f95+ 1643667573 -----sp :: refactor(lib): unify serde and serde_derive using derive feature (#57)
commit 25959529d60340caac668e0dd3e5c5b105ab4290+ 1643927755 -----sp :: fix(config): lower the priority of global configuration file (#51)
commit c47133ac2423f7581b711fa97f1b30094907a3c2+ 1643928441 -----sp :: fix(ci): update the download link of latest grcov release
commit a3f3aa6405846419fabeafab5fea204ec0e4be9b+ 1643928667 -----sp :: fix(ci): use the correct tar command for extracting grcov archive
commit e1da61150f07f641dfe471e240033e13cc19d089+ 1644068548 -----sp :: feat(changelog)!: use conventional commit body to check against commit parsers
commit 0293b281090f74a5855678acbb3dc9a259ba7126+ 1644333071 -----sp :: style(changelog): comply with MD022 and fix minor typos (#61)

hunks: 
diff --git a/.github/fixtures/cliff.toml b/.github/fixtures/cliff.toml
index 40a40b2..01adea2 100644
--- a/.github/fixtures/cliff.toml
+++ b/.github/fixtures/cliff.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -21,7 +21,7 @@
     {% endfor %}
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/.github/fixtures/expected.md b/.github/fixtures/expected.md
index a5f1080..2d96ad5 100644
--- a/.github/fixtures/expected.md
+++ b/.github/fixtures/expected.md
@@ -1,4 +1,5 @@
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [0.2.0] - 2021-01-23
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index def1a91..f407ccf 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -48,7 +48,7 @@
           export CARGO_INCREMENTAL=0
           export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
           export RUSTDOCFLAGS="-Cpanic=abort"
-          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
+          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-v0.8.6-x86_64-unknown-linux-gnu.tar.gz | tar xzf -
           cargo test --verbose $CARGO_OPTIONS
           zip -0 ccov.zip `find . \( -name "git_cliff*.gc*" \) -print`;
           ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info;
@@ -61,7 +61,7 @@
       - name: Install toolchain
         uses: actions-rs/toolchain@v1
         with:
-          toolchain: stable
+          toolchain: nightly
           profile: minimal
           components: clippy
           override: true
@@ -101,6 +101,6 @@
       - name: Check the links
         uses: lycheeverse/lychee-action@v1
         with:
-          args: --exclude "%7Busername%7D|file:///" -v *.md
+          args: --exclude "%7Busername%7D|file:///|https://datatracker.ietf.org" -v *.md
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index faa6ca3..4d8dca8 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,5 @@
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [0.5.0] - 2021-12-15
diff --git a/Cargo.lock b/Cargo.lock
index 61f9602..d0bef74 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -13,15 +13,6 @@
 
 [[package]]
 name = "ansi_term"
-version = "0.11.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
-dependencies = [
- "winapi",
-]
-
-[[package]]
-name = "ansi_term"
 version = "0.12.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"
@@ -160,17 +151,42 @@
 
 [[package]]
 name = "clap"
-version = "2.33.3"
+version = "3.0.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002"
+checksum = "7a30c3bf9ff12dfe5dae53f0a96e0febcd18420d1c0e7fad77796d9d5c4b5375"
 dependencies = [
- "ansi_term 0.11.0",
  "atty",
  "bitflags",
+ "clap_derive",
+ "indexmap",
+ "lazy_static",
+ "os_str_bytes",
  "strsim",
- "term_size",
+ "termcolor",
+ "terminal_size",
  "textwrap",
- "unicode-width",
+]
+
+[[package]]
+name = "clap_complete"
+version = "3.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d044e9db8cd0f68191becdeb5246b7462e4cf0c069b19ae00d1bf3fa9889498d"
+dependencies = [
+ "clap",
+]
+
+[[package]]
+name = "clap_derive"
+version = "3.0.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "517358c28fcef6607bf6f76108e02afad7e82297d132a6b846dcc1fc3efcd153"
+dependencies = [
+ "heck",
+ "proc-macro-error",
+ "proc-macro2",
+ "quote",
+ "syn",
 ]
 
 [[package]]
@@ -341,12 +357,13 @@
 name = "git-cliff"
 version = "0.5.0"
 dependencies = [
+ "clap",
+ "clap_complete",
  "dirs-next",
  "git-cliff-core",
  "log",
  "pretty_assertions",
  "pretty_env_logger",
- "structopt",
 ]
 
 [[package]]
@@ -362,7 +379,6 @@
  "regex",
  "rust-embed",
  "serde",
- "serde_derive",
  "serde_regex",
  "tera",
  "thiserror",
@@ -432,12 +448,9 @@
 
 [[package]]
 name = "heck"
-version = "0.3.3"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"
-dependencies = [
- "unicode-segmentation",
-]
+checksum = "2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9"
 
 [[package]]
 name = "hermit-abi"
@@ -665,6 +678,15 @@
 checksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"
 
 [[package]]
+name = "os_str_bytes"
+version = "6.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "output_vt100"
 version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -788,7 +810,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ec0cfe1b2403f172ba0f234e500906ee0a3e493fb81092dac23ebefe129301cc"
 dependencies = [
- "ansi_term 0.12.1",
+ "ansi_term",
  "ctor",
  "diff",
  "output_vt100",
@@ -1066,33 +1088,9 @@
 
 [[package]]
 name = "strsim"
-version = "0.8.0"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"
-
-[[package]]
-name = "structopt"
-version = "0.3.25"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "40b9788f4202aa75c240ecc9c15c65185e6a39ccdeb0fd5d008b98825464c87c"
-dependencies = [
- "clap",
- "lazy_static",
- "structopt-derive",
-]
-
-[[package]]
-name = "structopt-derive"
-version = "0.4.18"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0"
-dependencies = [
- "heck",
- "proc-macro-error",
- "proc-macro2",
- "quote",
- "syn",
-]
+checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
 
 [[package]]
 name = "syn"
@@ -1128,16 +1126,6 @@
 ]
 
 [[package]]
-name = "term_size"
-version = "0.3.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1e4129646ca0ed8f45d09b929036bafad5377103edd06e50bf574b353d2b08d9"
-dependencies = [
- "libc",
- "winapi",
-]
-
-[[package]]
 name = "termcolor"
 version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1147,13 +1135,22 @@
 ]
 
 [[package]]
-name = "textwrap"
-version = "0.11.0"
+name = "terminal_size"
+version = "0.1.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060"
+checksum = "633c1a546cee861a1a6d0dc69ebeca693bf4296661ba7852b9d21d159e0506df"
 dependencies = [
- "term_size",
- "unicode-width",
+ "libc",
+ "winapi",
+]
+
+[[package]]
+name = "textwrap"
+version = "0.14.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0066c8d12af8b5acd21e00547c3797fde4e8677254a7ee429176ccebbe93dd80"
+dependencies = [
+ "terminal_size",
 ]
 
 [[package]]
@@ -1308,18 +1305,6 @@
 ]
 
 [[package]]
-name = "unicode-segmentation"
-version = "1.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b"
-
-[[package]]
-name = "unicode-width"
-version = "0.1.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3"
-
-[[package]]
 name = "unicode-xid"
 version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
diff --git a/README.md b/README.md
index 541a39d..61822ad 100644
--- a/README.md
+++ b/README.md
@@ -131,7 +131,7 @@
 ### Command Line Arguments
 
 ```
-git-cliff [FLAGS] [OPTIONS] [RANGE]
+git-cliff [FLAGS] [OPTIONS] [--] [RANGE]
 ```
 
 **Flags:**
@@ -150,18 +150,18 @@
 **Options:**
 
 ```
--c, --config <PATH>               Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
--w, --workdir <PATH>              Sets the working directory [env: WORKDIR=]
--r, --repository <PATH>           Sets the git repository [env: REPOSITORY=]
-    --include-path <PATTERN>...   Sets the path to include related commits [env: INCLUDE_PATH=]
-    --exclude-path <PATTERN>...   Sets the path to exclude related commits [env: EXCLUDE_PATH=]
-    --with-commit <MSG>...        Sets custom commit messages to include in the changelog [env: WITH_COMMIT=]
--p, --prepend <PATH>              Prepends entries to the given changelog file [env: PREPEND=
--o, --output <PATH>               Writes output to the given file [env: OUTPUT=]
--t, --tag <TAG>                   Sets the tag for the latest version [env: TAG=]
--b, --body <TEMPLATE>             Sets the template for the changelog body [env: TEMPLATE=]
--s, --strip <PART>                Strips the given parts from the changelog [possible values: header, footer, all]
-    --sort <sort>                 Sets sorting of the commits inside sections [default: oldest] [possible values: oldest, newest]
+-c, --config <PATH>                Sets the configuration file [env: CONFIG=] [default: cliff.toml]
+-w, --workdir <PATH>               Sets the working directory [env: WORKDIR=]
+-r, --repository <PATH>            Sets the git repository [env: REPOSITORY=]
+    --include-path <PATTERN>...    Sets the path to include related commits [env: INCLUDE_PATH=]
+    --exclude-path <PATTERN>...    Sets the path to exclude related commits [env: EXCLUDE_PATH=]
+    --with-commit <MSG>...         Sets custom commit messages to include in the changelog [env: WITH_COMMIT=]
+-p, --prepend <PATH>               Prepends entries to the given changelog file [env: PREPEND=]
+-o, --output <PATH>                Writes output to the given file [env: OUTPUT=]
+-t, --tag <TAG>                    Sets the tag for the latest version [env: TAG=]
+-b, --body <TEMPLATE>              Sets the template for the changelog body [env: TEMPLATE=]
+-s, --strip <PART>                 Strips the given parts from the changelog [possible values: header, footer, all]
+    --sort <SORT>                  Sets sorting of the commits inside sections [default: oldest] [possible values: oldest, newest]
 ```
 
 **Args:**
@@ -330,7 +330,7 @@
         - CHANGELOG.md
 ```
 
-Please note that the stage is `doc` and has to be changed accordingly to your need. 
+Please note that the stage is `doc` and has to be changed accordingly to your need.
 
 ## Configuration File
 
@@ -375,7 +375,7 @@
 
 #### trim
 
-If set to `true`, leading and trailing whitespaces are removed from the [body](#body).
+If set to `true`, leading and trailing whitespace are removed from the [body](#body).
 
 It is useful for adding indentation to the template for readability, as shown [in the example](#changelog).
 
@@ -406,6 +406,10 @@
 ignore_tags = ""
 topo_order = false
 sort_commits = "oldest"
+link_parsers = [
+    { pattern = "#(\\d+)", href = "https://github.com/orhun/git-cliff/issues/$1"},
+    { pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1"},
+]
 ```
 
 #### conventional_commits
@@ -513,6 +517,17 @@
 
 This can also be achieved by specifying the `--sort` command line argument.
 
+#### link_parsers
+
+An array of link parsers for extracting external references, and turning them into URLs, using regex.
+
+Examples:
+
+- `{ pattern = "#(\\d+)", href = "https://github.com/orhun/git-cliff/issues/$1"}`
+  - Extract all GitLab issues and PRs and generate URLs linking to them. The link text will be the matching pattern.
+- `{ pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1"}`,
+  - Extract mentions of IETF RFCs and generate URLs linking to them. It also rewrites the text as "ietf-rfc...".
+
 ## Templating
 
 A template is a text where variables and expressions get replaced with values when it is rendered.
@@ -550,7 +565,8 @@
       "footers": ["[footer]", "[footer]"],
       "breaking_description": "<description>",
       "breaking": false,
-      "conventional": true
+      "conventional": true,
+      "links": [{"text": "(set by link_parsers)", "href": "(set by link_parsers)"}]
     }
   ],
   "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
@@ -595,6 +611,7 @@
       "scope": "(overrided by commit_parsers)",
       "message": "(full commit message including description, footers, etc.)",
       "conventional": false,
+      "links": [{"text": "(set by link_parsers)", "href": "(set by link_parsers)"}]
     }
   ],
   "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
@@ -648,6 +665,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -691,6 +709,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -729,6 +748,66 @@
 
 </details>
 
+#### [Minimal](./examples/minimal.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+## [unreleased]
+### Feat
+- Support multiple file formats
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+### Chore
+- Add release script
+
+### Refactor
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+### Docs
+- Add README.md
+- [**breaking**] Add tested usage example
+
+### Feat
+- Add ability to parse arrays
+
+### Fix
+- Rename help argument due to conflict
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+## [unreleased]
+### Feat
+- Support multiple file formats
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+### Chore
+- Add release script
+
+### Refactor
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+### Docs
+- Add README.md
+- [**breaking**] Add tested usage example
+
+### Feat
+- Add ability to parse arrays
+
+### Fix
+- Rename help argument due to conflict
+
+</details>
+
 #### [Detailed](./examples/detailed.toml)
 
 <details>
@@ -736,6 +815,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -781,6 +861,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -828,6 +909,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -889,6 +971,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -952,6 +1035,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -996,6 +1080,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -1042,6 +1127,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
@@ -1088,6 +1174,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
@@ -1136,6 +1223,7 @@
 
 ```
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
@@ -1183,6 +1271,7 @@
   <summary>Rendered Output</summary>
 
 # Changelog
+
 All notable changes to this project will be documented in this file.
 
 ## [unreleased]
diff --git a/config/cliff.toml b/config/cliff.toml
index e57b38b..d1bbc15 100644
--- a/config/cliff.toml
+++ b/config/cliff.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -21,7 +21,7 @@
     {% endfor %}
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/examples/detailed.toml b/examples/detailed.toml
index bbafa0c..bb8616e 100644
--- a/examples/detailed.toml
+++ b/examples/detailed.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -27,7 +27,7 @@
     {% endfor %}
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/examples/keepachangelog.toml b/examples/keepachangelog.toml
index d3765b3..2cc18a9 100644
--- a/examples/keepachangelog.toml
+++ b/examples/keepachangelog.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.
 
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
@@ -24,7 +24,7 @@
     {% endfor %}
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/examples/minimal.toml b/examples/minimal.toml
new file mode 100644
index 0000000..58416c8
--- /dev/null
+++ b/examples/minimal.toml
@@ -0,0 +1,18 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}\
+{% else %}\
+    ## [unreleased]\
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}\
+        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}
+    {% endfor %}\
+{% endfor %}\n
+"""
diff --git a/examples/scoped.toml b/examples/scoped.toml
index d2ecc8b..0a3d2d3 100644
--- a/examples/scoped.toml
+++ b/examples/scoped.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -24,7 +24,7 @@
     {% endfor %}\
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/examples/scopesorted.toml b/examples/scopesorted.toml
index 28c8b5c..9ca9410 100644
--- a/examples/scopesorted.toml
+++ b/examples/scopesorted.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -36,7 +36,7 @@
     {% raw %}\n{% endraw %}\
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/examples/unconventional.toml b/examples/unconventional.toml
index b6d6365..f829797 100644
--- a/examples/unconventional.toml
+++ b/examples/unconventional.toml
@@ -3,7 +3,7 @@
 [changelog]
 # changelog header
 header = """
-# Changelog
+# Changelog\n
 All notable changes to this project will be documented in this file.\n
 """
 # template for the changelog body
@@ -21,7 +21,7 @@
     {% endfor %}
 {% endfor %}\n
 """
-# remove the leading and trailing whitespaces from the template
+# remove the leading and trailing whitespace from the template
 trim = true
 # changelog footer
 footer = """
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 7300351..f79b543 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -11,8 +11,7 @@
 
 [dependencies]
 thiserror = "1.0.30"
-serde = "1.0.130"
-serde_derive = "1.0.130"
+serde = { version = "1.0.130", features = ["derive"] }
 tera = "1.13.0"
 regex = "1.5.4"
 serde_regex = "1.1.0"
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index 6c559cc..de8868c 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -1,6 +1,7 @@
 use crate::config::{
 	CommitParser,
 	GitConfig,
+	LinkParser,
 };
 use crate::error::{
 	Error as AppError,
@@ -15,7 +16,7 @@
 };
 
 /// Common commit object that is parsed from a repository.
-#[derive(Debug, Clone, PartialEq, serde_derive::Deserialize)]
+#[derive(Debug, Clone, PartialEq, serde::Deserialize)]
 #[serde(rename_all = "camelCase")]
 pub struct Commit<'a> {
 	/// Commit ID.
@@ -29,6 +30,18 @@
 	pub group:   Option<String>,
 	/// Commit scope based on conventional type or a commit parser.
 	pub scope:   Option<String>,
+	/// A list of links found in the commit
+	pub links:   Vec<Link>,
+}
+
+/// Object representing a link
+#[derive(Debug, Clone, PartialEq, serde::Deserialize, serde::Serialize)]
+#[serde(rename_all = "camelCase")]
+pub struct Link {
+	/// Text of the link.
+	pub text: String,
+	/// URL of the link
+	pub href: String,
 }
 
 impl<'a> From<&GitCommit<'a>> for Commit<'a> {
@@ -49,6 +62,7 @@
 			conv: None,
 			group: None,
 			scope: None,
+			links: vec![],
 		}
 	}
 
@@ -56,9 +70,10 @@
 	///
 	/// * converts commit to a conventional commit
 	/// * sets the group for the commit
+	/// * extacts links and generates URLs
 	pub fn process(&self, config: &GitConfig) -> Result<Self> {
 		let mut commit = self.clone();
-		if config.conventional_commits {
+		if config.conventional_commits.unwrap_or(true) {
 			if config.filter_unconventional.unwrap_or(true) {
 				commit = commit.into_conventional()?;
 			} else if let Ok(conv_commit) = commit.clone().into_conventional() {
@@ -69,6 +84,9 @@
 			commit =
 				commit.parse(parsers, config.filter_commits.unwrap_or(false))?;
 		}
+		if let Some(parsers) = &config.link_parsers {
+			commit = commit.parse_links(parsers)?;
+		}
 		Ok(commit)
 	}
 
@@ -93,11 +111,18 @@
 	/// [`scope`]: Commit::scope
 	pub fn parse(mut self, parsers: &[CommitParser], filter: bool) -> Result<Self> {
 		for parser in parsers {
-			for regex in vec![parser.message.as_ref(), parser.body.as_ref()]
-				.into_iter()
-				.flatten()
-			{
-				if regex.is_match(&self.message) {
+			let mut regex_checks = Vec::new();
+			if let Some(message_regex) = parser.message.as_ref() {
+				regex_checks.push((message_regex, self.message.to_string()))
+			}
+			if let (Some(body_regex), Some(body)) = (
+				parser.body.as_ref(),
+				self.conv.as_ref().and_then(|v| v.body()),
+			) {
+				regex_checks.push((body_regex, body.to_string()))
+			}
+			for (regex, text) in regex_checks {
+				if regex.is_match(&text) {
 					if parser.skip != Some(true) {
 						self.group = parser.group.as_ref().cloned();
 						self.scope = parser.default_scope.as_ref().cloned();
@@ -118,6 +143,32 @@
 			)))
 		}
 	}
+
+	/// Parses the commit using [`LinkParser`]s.
+	///
+	/// Sets the [`links`] of the commit.
+	///
+	/// [`links`]: Commit::links
+	pub fn parse_links(mut self, parsers: &[LinkParser]) -> Result<Self> {
+		for parser in parsers {
+			let regex = &parser.pattern;
+			let replace = &parser.href;
+			for mat in regex.find_iter(&self.message) {
+				let m = mat.as_str();
+				let text = if let Some(text_replace) = &parser.text {
+					regex.replace(m, text_replace).to_string()
+				} else {
+					m.to_string()
+				};
+				let href = regex.replace(m, replace);
+				self.links.push(Link {
+					text,
+					href: href.to_string(),
+				});
+			}
+		}
+		Ok(self)
+	}
 }
 
 impl Serialize for Commit<'_> {
@@ -151,10 +202,7 @@
 				commit.serialize_field("breaking", &conv.breaking())?;
 				commit.serialize_field(
 					"scope",
-					&conv
-						.scope()
-						.map(|v| v.as_str())
-						.or_else(|| self.scope.as_deref()),
+					&conv.scope().map(|v| v.as_str()).or(self.scope.as_deref()),
 				)?;
 			}
 			None => {
@@ -163,6 +211,7 @@
 				commit.serialize_field("scope", &self.scope)?;
 			}
 		}
+		commit.serialize_field("links", &self.links)?;
 		commit.serialize_field("conventional", &self.conv.is_some())?;
 		commit.end()
 	}
@@ -207,4 +256,60 @@
 		assert_eq!(Some(String::from("test_group")), commit.group);
 		assert_eq!(Some(String::from("test_scope")), commit.scope);
 	}
+
+	#[test]
+	fn parse_link() {
+		let test_cases = vec![
+			(
+				Commit::new(
+					String::from("123123"),
+					String::from("test(commit): add test\n\nBody with issue #123"),
+				),
+				true,
+			),
+			(
+				Commit::new(
+					String::from("123123"),
+					String::from(
+						"test(commit): add test\n\nImlement RFC456\n\nFixes: #456",
+					),
+				),
+				true,
+			),
+		];
+		for (commit, is_conventional) in &test_cases {
+			assert_eq!(is_conventional, &commit.clone().into_conventional().is_ok())
+		}
+		let commit = Commit::new(
+			String::from("123123"),
+			String::from("test(commit): add test\n\nImlement RFC456\n\nFixes: #455"),
+		);
+		let commit = commit
+			.parse_links(&[
+				LinkParser {
+					pattern: Regex::new("RFC(\\d+)").unwrap(),
+					href:    String::from("rfc://$1"),
+					text:    None,
+				},
+				LinkParser {
+					pattern: Regex::new("#(\\d+)").unwrap(),
+					href:    String::from("https://github.com/$1"),
+					text:    None,
+				},
+			])
+			.unwrap();
+		assert_eq!(
+			vec![
+				Link {
+					text: String::from("RFC456"),
+					href: String::from("rfc://456"),
+				},
+				Link {
+					text: String::from("#455"),
+					href: String::from("https://github.com/455"),
+				}
+			],
+			commit.links
+		);
+	}
 }
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index c6b55ba..cc6423b 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -1,22 +1,25 @@
 use crate::error::Result;
 use regex::Regex;
+use std::path::Path;
 
 /// Configuration values.
-#[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
+#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
 pub struct Config {
 	/// Configuration values about changelog generation.
+	#[serde(default)]
 	pub changelog: ChangelogConfig,
 	/// Configuration values about git.
+	#[serde(default)]
 	pub git:       GitConfig,
 }
 
 /// Changelog configuration.
-#[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
+#[derive(Debug, Default, Clone, serde::Serialize, serde::Deserialize)]
 pub struct ChangelogConfig {
 	/// Changelog header.
 	pub header: Option<String>,
 	/// Changelog body, template.
-	pub body:   String,
+	pub body:   Option<String>,
 	/// Changelog footer.
 	pub footer: Option<String>,
 	/// Trim the template.
@@ -24,14 +27,16 @@
 }
 
 /// Git configuration
-#[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
+#[derive(Debug, Default, Clone, serde::Serialize, serde::Deserialize)]
 pub struct GitConfig {
 	/// Whether to enable parsing conventional commits.
-	pub conventional_commits:  bool,
+	pub conventional_commits:  Option<bool>,
 	/// Whether to filter out unconventional commits.
 	pub filter_unconventional: Option<bool>,
 	/// Git commit parsers.
 	pub commit_parsers:        Option<Vec<CommitParser>>,
+	/// Link parsers.
+	pub link_parsers:          Option<Vec<LinkParser>>,
 	/// Whether to filter out commits.
 	pub filter_commits:        Option<bool>,
 	/// Blob pattern for git tags.
@@ -49,7 +54,7 @@
 }
 
 /// Parser for grouping commits.
-#[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
+#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
 pub struct CommitParser {
 	/// Regex for matching the commit message.
 	#[serde(with = "serde_regex", default)]
@@ -65,12 +70,24 @@
 	pub skip:          Option<bool>,
 }
 
+/// Parser for extracting links in commits.
+#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
+pub struct LinkParser {
+	/// Regex for finding links in the commit message.
+	#[serde(with = "serde_regex")]
+	pub pattern: Regex,
+	/// The string used to generate the link URL.
+	pub href:    String,
+	/// The string used to generate the link text.
+	pub text:    Option<String>,
+}
+
 impl Config {
 	/// Parses the config file and returns the values.
-	pub fn parse(file_name: String) -> Result<Config> {
+	pub fn parse(path: &Path) -> Result<Config> {
 		let mut config = config::Config::default();
 		config
-			.merge(config::File::with_name(&file_name))?
+			.merge(config::File::from(path))?
 			.merge(config::Environment::with_prefix("CLIFF").separator("_"))?;
 		Ok(config.try_into()?)
 	}
@@ -84,17 +101,14 @@
 	use std::path::PathBuf;
 	#[test]
 	fn parse_config() -> Result<()> {
-		let file_name = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
+		let path = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
 			.parent()
 			.unwrap()
 			.to_path_buf()
 			.join("config")
-			.join(crate::DEFAULT_CONFIG)
-			.to_str()
-			.unwrap()
-			.to_string();
+			.join(crate::DEFAULT_CONFIG);
 		env::set_var("CLIFF_CHANGELOG_FOOTER", "test");
-		let config = Config::parse(file_name)?;
+		let config = Config::parse(&path)?;
 		assert_eq!("test", config.changelog.footer.unwrap());
 		Ok(())
 	}
diff --git a/git-cliff-core/src/embed.rs b/git-cliff-core/src/embed.rs
index d07b24e..84c86b9 100644
--- a/git-cliff-core/src/embed.rs
+++ b/git-cliff-core/src/embed.rs
@@ -21,7 +21,7 @@
 	/// Extracts the embedded content.
 	pub fn get_config() -> Result<String> {
 		match Self::get(crate::DEFAULT_CONFIG) {
-			Some(v) => Ok(str::from_utf8(&v.data.into_owned())?.to_string()),
+			Some(v) => Ok(str::from_utf8(&v.data)?.to_string()),
 			None => Err(Error::EmbeddedError(String::from(
 				"Embedded config not found",
 			))),
diff --git a/git-cliff-core/src/release.rs b/git-cliff-core/src/release.rs
index 468c80f..947f8f0 100644
--- a/git-cliff-core/src/release.rs
+++ b/git-cliff-core/src/release.rs
@@ -1,14 +1,7 @@
 use crate::commit::Commit;
 
 /// Representation of a release.
-#[derive(
-	Default,
-	Debug,
-	Clone,
-	PartialEq,
-	serde_derive::Serialize,
-	serde_derive::Deserialize,
-)]
+#[derive(Default, Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
 #[serde(rename_all = "camelCase")]
 pub struct Release<'a> {
 	/// Release version, git tag.
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index 3e68d06..46b41db 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -119,8 +119,7 @@
 				if let Some(commit) = tag
 					.target()
 					.ok()
-					.map(|target| target.into_commit().ok())
-					.flatten()
+					.and_then(|target| target.into_commit().ok())
 				{
 					tags.push((commit, name));
 				}
diff --git a/git-cliff-core/tests/integration_test.rs b/git-cliff-core/tests/integration_test.rs
index 4a1b666..5fb5da6 100644
--- a/git-cliff-core/tests/integration_test.rs
+++ b/git-cliff-core/tests/integration_test.rs
@@ -3,6 +3,7 @@
 	ChangelogConfig,
 	CommitParser,
 	GitConfig,
+	LinkParser,
 };
 use git_cliff_core::error::Result;
 use git_cliff_core::release::*;
@@ -15,28 +16,28 @@
 fn generate_changelog() -> Result<()> {
 	let changelog_config = ChangelogConfig {
 		header: Some(String::from("this is a changelog")),
-		body:   String::from(
+		body:   Some(String::from(
 			r#"
-        ## Release {{ version }}
-        {% for group, commits in commits | group_by(attribute="group") %}
-        ### {{ group }}    
-        {% for commit in commits %}
-        {%- if commit.scope -%}
-        - *({{commit.scope}})* {{ commit.message }}    
-        {% else -%}
-        - {{ commit.message }}    
-        {% endif -%}
-        {% if commit.breaking -%}
-        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
-        {% endif -%}
-        {% endfor -%}
+## Release {{ version }}
+{% for group, commits in commits | group_by(attribute="group") %}
+### {{ group }}
+{% for commit in commits %}
+{%- if commit.scope -%}
+- *({{commit.scope}})* {{ commit.message }}{%- if commit.links %} ({% for link in commit.links %}[{{link.text}}]({{link.href}}) {% endfor -%}){% endif %}
+{% else -%}
+- {{ commit.message }}
+{% endif -%}
+{% if commit.breaking -%}
+{% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
+{% endif -%}
+{% endfor -%}
 {% endfor %}"#,
-		),
+		)),
 		footer: Some(String::from("eoc - end of changelog")),
 		trim:   None,
 	};
 	let git_config = GitConfig {
-		conventional_commits:  true,
+		conventional_commits:  Some(true),
 		filter_unconventional: Some(true),
 		commit_parsers:        Some(vec![
 			CommitParser {
@@ -60,6 +61,18 @@
 		ignore_tags:           None,
 		topo_order:            None,
 		sort_commits:          None,
+		link_parsers:          Some(vec![
+			LinkParser {
+				pattern: Regex::new("#(\\d+)").unwrap(),
+				href:    String::from("https://github.com/$1"),
+				text:    None,
+			},
+			LinkParser {
+				pattern: Regex::new("https://github.com/(.*)").unwrap(),
+				href:    String::from("https://github.com/$1"),
+				text:    Some(String::from("$1")),
+			},
+		]),
 	};
 
 	let releases = vec![
@@ -74,7 +87,9 @@
 				Commit::new(String::from("abc124"), String::from("feat: add zyx")),
 				Commit::new(
 					String::from("abc124"),
-					String::from("feat(random-scope): add random feature"),
+					String::from(
+						"feat(random-scope): add random feature\n\nThis is related to https://github.com/NixOS/nixpkgs/issues/136814\n\nCloses #123",
+					),
 				),
 				Commit::new(String::from("def789"), String::from("invalid commit")),
 				Commit::new(
@@ -125,7 +140,7 @@
 	];
 
 	let out = &mut String::new();
-	let template = Template::new(changelog_config.body)?;
+	let template = Template::new(changelog_config.body.unwrap())?;
 
 	writeln!(out, "{}", changelog_config.header.unwrap()).unwrap();
 	for release in releases {
@@ -134,32 +149,33 @@
 	writeln!(out, "{}", changelog_config.footer.unwrap()).unwrap();
 
 	assert_eq!(
-		"this is a changelog
+		r#"this is a changelog
 
-        ## Release v2.0.0
-        
-        ### fix bugs    
-        - fix abc    
-        
-        ### shiny features    
-        - add xyz    
-        - add zyx    
-        - *(random-scope)* add random feature    
-        - *(big-feature)* this is a breaking change    
-          - **BREAKING**: this is a breaking change
-        
-        ## Release v1.0.0
-        
-        ### chore    
-        - do nothing    
-        
-        ### feat    
-        - add cool features    
-        
-        ### fix    
-        - fix stuff    
-        - fix more stuff    
-        eoc - end of changelog\n",
+## Release v2.0.0
+
+### fix bugs
+- fix abc
+
+### shiny features
+- add xyz
+- add zyx
+- *(random-scope)* add random feature ([#123](https://github.com/123) [NixOS/nixpkgs/issues/136814](https://github.com/NixOS/nixpkgs/issues/136814) )
+- *(big-feature)* this is a breaking change
+  - **BREAKING**: this is a breaking change
+
+## Release v1.0.0
+
+### chore
+- do nothing
+
+### feat
+- add cool features
+
+### fix
+- fix stuff
+- fix more stuff
+eoc - end of changelog
+"#,
 		out
 	);
 
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 296b3de..3615359 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -20,15 +20,15 @@
 pretty_env_logger = "0.4.0"
 log = "0.4.14"
 dirs-next = "2.0.0"
+clap_complete = "3.0"
 
 [dependencies.git-cliff-core]
 version = "0.5.0" # managed by release.sh
 path = "../git-cliff-core"
 
-[dependencies.structopt]
-version = "0.3.25"
-default-features = false
-features = ["suggestions", "color", "wrap_help"]
+[dependencies.clap]
+version = "3.0"
+features = ["derive", "env", "wrap_help"]
 
 [dev-dependencies]
 pretty_assertions = "1.0.0"
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index b033e63..0c8e52d 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -1,29 +1,44 @@
+use clap::{
+	AppSettings,
+	ArgEnum,
+	Parser,
+};
 use git_cliff_core::glob::Pattern;
 use git_cliff_core::DEFAULT_CONFIG;
 use std::path::PathBuf;
-use structopt::clap::AppSettings;
-use structopt::StructOpt;
+
+#[derive(Debug, Clone, Copy, ArgEnum)]
+pub enum Strip {
+	Header,
+	Footer,
+	All,
+}
+
+#[derive(Debug, Clone, Copy, PartialEq, Eq, ArgEnum)]
+pub enum Sort {
+	Oldest,
+	Newest,
+}
 
 /// Command-line arguments to parse.
-#[derive(Debug, StructOpt)]
-#[structopt(
-    name = env!("CARGO_PKG_NAME"),
-    version = env!("CARGO_PKG_VERSION"),
-    author = env!("CARGO_PKG_AUTHORS"),
-    about = env!("CARGO_PKG_DESCRIPTION"),
-    global_settings(&[
-        AppSettings::ColorAuto,
-        AppSettings::ColoredHelp,
-        AppSettings::DeriveDisplayOrder,
-    ]),
-    rename_all_env = "screaming-snake"
+#[derive(Debug, Parser)]
+#[clap(
+    version,
+    author,
+    about,
+    global_setting = AppSettings::DeriveDisplayOrder,
+    rename_all_env = "screaming-snake",
+    help_heading = Some("OPTIONS"),
+    override_usage = "git-cliff [FLAGS] [OPTIONS] [--] [RANGE]",
+    mut_arg("help", |arg| arg.help("Prints help information").help_heading("FLAGS")),
+    mut_arg("version", |arg| arg.help("Prints version information").help_heading("FLAGS"))
 )]
 pub struct Opt {
 	/// Increases the logging verbosity.
-	#[structopt(short, long, parse(from_occurrences), alias = "debug")]
+	#[clap(short, long, parse(from_occurrences), alias = "debug", help_heading = Some("FLAGS"))]
 	pub verbose:      u8,
 	/// Sets the configuration file.
-	#[structopt(
+	#[clap(
 		short,
 		long,
 		env,
@@ -32,31 +47,31 @@
 	)]
 	pub config:       PathBuf,
 	/// Sets the working directory.
-	#[structopt(short, long, env, value_name = "PATH")]
+	#[clap(short, long, env, value_name = "PATH")]
 	pub workdir:      Option<PathBuf>,
 	/// Sets the git repository.
-	#[structopt(short, long, env, value_name = "PATH")]
+	#[clap(short, long, env, value_name = "PATH")]
 	pub repository:   Option<PathBuf>,
 	/// Sets the path to include related commits.
-	#[structopt(long, env, value_name = "PATTERN")]
+	#[clap(long, env, value_name = "PATTERN", multiple_values = true)]
 	pub include_path: Option<Vec<Pattern>>,
 	/// Sets the path to exclude related commits.
-	#[structopt(long, env, value_name = "PATTERN")]
+	#[clap(long, env, value_name = "PATTERN", multiple_values = true)]
 	pub exclude_path: Option<Vec<Pattern>>,
 	/// Sets custom commit messages to include in the changelog.
-	#[structopt(long, env, value_name = "MSG")]
+	#[clap(long, env, value_name = "MSG", multiple_values = true)]
 	pub with_commit:  Option<Vec<String>>,
 	/// Prepends entries to the given changelog file.
-	#[structopt(short, long, env, value_name = "PATH")]
+	#[clap(short, long, env, value_name = "PATH")]
 	pub prepend:      Option<PathBuf>,
 	/// Writes output to the given file.
-	#[structopt(short, long, env, value_name = "PATH")]
+	#[clap(short, long, env, value_name = "PATH")]
 	pub output:       Option<PathBuf>,
 	/// Sets the tag for the latest version.
-	#[structopt(short, long, env, value_name = "TAG", allow_hyphen_values = true)]
+	#[clap(short, long, env, value_name = "TAG", allow_hyphen_values = true)]
 	pub tag:          Option<String>,
 	/// Sets the template for the changelog body.
-	#[structopt(
+	#[clap(
 		short,
 		long,
 		env = "TEMPLATE",
@@ -65,36 +80,31 @@
 	)]
 	pub body:         Option<String>,
 	/// Writes the default configuration file to cliff.toml
-	#[structopt(short, long)]
+	#[clap(short, long, help_heading = Some("FLAGS"))]
 	pub init:         bool,
 	/// Processes the commits starting from the latest tag.
-	#[structopt(short, long)]
+	#[clap(short, long, help_heading = Some("FLAGS"))]
 	pub latest:       bool,
 	/// Processes the commits that belong to the current tag.
-	#[structopt(long)]
+	#[clap(long, help_heading = Some("FLAGS"))]
 	pub current:      bool,
 	/// Processes the commits that do not belong to a tag.
-	#[structopt(short, long)]
+	#[clap(short, long, help_heading = Some("FLAGS"))]
 	pub unreleased:   bool,
 	/// Sorts the tags topologically.
-	#[structopt(long)]
+	#[clap(long, help_heading = Some("FLAGS"))]
 	pub topo_order:   bool,
 	/// Strips the given parts from the changelog.
-	#[structopt(
-		short,
-		long,
-		value_name = "PART",
-		possible_values = &["header", "footer", "all"]
-	)]
-	pub strip:        Option<String>,
-	/// Sets the commit range to process.
-	#[structopt(value_name = "RANGE")]
-	pub range:        Option<String>,
+	#[clap(short, long, value_name = "PART", arg_enum)]
+	pub strip:        Option<Strip>,
 	/// Sets sorting of the commits inside sections.
-	#[structopt(
+	#[clap(
 		long,
-		possible_values = &["oldest", "newest"],
-		default_value = "oldest"
+		arg_enum,
+		default_value_t = Sort::Oldest
 	)]
-	pub sort:         String,
+	pub sort:         Sort,
+	/// Sets the commit range to process.
+	#[clap(value_name = "RANGE", help_heading = Some("ARGS"))]
+	pub range:        Option<String>,
 }
diff --git a/git-cliff/src/bin/completions.rs b/git-cliff/src/bin/completions.rs
index e67f968..30aed0f 100644
--- a/git-cliff/src/bin/completions.rs
+++ b/git-cliff/src/bin/completions.rs
@@ -1,23 +1,26 @@
-use git_cliff::args::Opt;
-use std::{
-	env,
-	str::FromStr,
+use clap::{
+	ArgEnum,
+	IntoApp,
 };
-use structopt::clap::Shell;
-use structopt::StructOpt;
+use clap_complete::Shell;
+use git_cliff::args::Opt;
+use std::env;
 
 /// Shell completions can be created with:
 /// `cargo run --bin git-cliff-completions`
 /// in a directory specified by the environment variable OUT_DIR.
 /// See <https://doc.rust-lang.org/cargo/reference/environment-variables.html>
-fn main() {
+fn main() -> Result<(), std::io::Error> {
 	let out_dir = env::var("OUT_DIR").expect("OUT_DIR is not set");
-	let mut app = Opt::clap();
-	for variant in Shell::variants()
-		.iter()
-		.filter_map(|v| Shell::from_str(v).ok())
-	{
-		app.gen_completions(env!("CARGO_PKG_NAME"), variant, &out_dir);
+	let mut app = Opt::into_app();
+	for &shell in Shell::value_variants() {
+		clap_complete::generate_to(
+			shell,
+			&mut app,
+			env!("CARGO_PKG_NAME"),
+			&out_dir,
+		)?;
 	}
 	println!("Completion scripts are generated in {:?}", out_dir);
+	Ok(())
 }
diff --git a/git-cliff/src/changelog.rs b/git-cliff/src/changelog.rs
index 70d00e6..5651d30 100644
--- a/git-cliff/src/changelog.rs
+++ b/git-cliff/src/changelog.rs
@@ -1,6 +1,9 @@
 use git_cliff_core::commit::Commit;
 use git_cliff_core::config::Config;
-use git_cliff_core::error::Result;
+use git_cliff_core::error::{
+	Error,
+	Result,
+};
 use git_cliff_core::release::Release;
 use git_cliff_core::template::Template;
 use std::io::Write;
@@ -16,19 +19,27 @@
 impl<'a> Changelog<'a> {
 	/// Constructs a new instance.
 	pub fn new(releases: Vec<Release<'a>>, config: &'a Config) -> Result<Self> {
+		let mut template = config
+			.changelog
+			.body
+			.as_deref()
+			.unwrap_or_default()
+			.to_string();
+		if template.is_empty() {
+			return Err(Error::ChangelogError(String::from(
+				"changelog body cannot be empty",
+			)));
+		}
+		if config.changelog.trim.unwrap_or(true) {
+			template = template
+				.lines()
+				.map(|v| v.trim())
+				.collect::<Vec<&str>>()
+				.join("\n")
+		}
 		let mut changelog = Self {
 			releases,
-			template: Template::new({
-				let mut template = config.changelog.body.to_string();
-				if config.changelog.trim == Some(true) {
-					template = template
-						.lines()
-						.map(|v| v.trim())
-						.collect::<Vec<&str>>()
-						.join("\n")
-				}
-				template
-			})?,
+			template: Template::new(template)?,
 			config,
 		};
 		changelog.process_commits();
@@ -64,6 +75,7 @@
 	fn process_releases(&mut self) {
 		debug!("Processing the releases...");
 		let skip_regex = self.config.git.skip_tags.as_ref();
+		let mut skipped_tags = Vec::new();
 		self.releases = self
 			.releases
 			.clone()
@@ -80,6 +92,7 @@
 						.map(|r| {
 							let skip_tag = r.is_match(version);
 							if skip_tag {
+								skipped_tags.push(version.clone());
 								trace!("Skipping release: {}", version)
 							}
 							skip_tag
@@ -90,17 +103,22 @@
 				}
 			})
 			.collect();
-		if skip_regex.is_some() {
-			let mut releases = self.releases.clone();
-			for (i, release) in self.releases.iter_mut().enumerate() {
-				if release.previous.is_none() {
-					continue;
-				}
-				if let Some(previous_release) = releases.get_mut(i + 1) {
+		for skipped_tag in &skipped_tags {
+			if let Some(release_index) = self.releases.iter().position(|release| {
+				release
+					.previous
+					.as_ref()
+					.and_then(|release| release.version.as_ref()) ==
+					Some(skipped_tag)
+			}) {
+				if let Some(previous_release) =
+					self.releases.get_mut(release_index + 1)
+				{
 					previous_release.previous = None;
-					release.previous = Some(Box::new(previous_release.clone()));
-				} else {
-					release.previous = None;
+					self.releases[release_index].previous =
+						Some(Box::new(previous_release.clone()));
+				} else if release_index == self.releases.len() - 1 {
+					self.releases[release_index].previous = None;
 				}
 			}
 		}
@@ -153,7 +171,7 @@
 		let config = Config {
 			changelog: ChangelogConfig {
 				header: Some(String::from("# Changelog")),
-				body:   String::from(
+				body:   Some(String::from(
 					r#"{% if version %}
 				## Release [{{ version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
 				({{ commit_id }}){% else %}
@@ -163,12 +181,12 @@
 				#### {{ group }}{% for commit in commits %}
 				- {{ commit.message }}{% endfor %}
 				{% endfor %}{% endfor %}"#,
-				),
+				)),
 				footer: Some(String::from("------------")),
 				trim:   Some(true),
 			},
 			git:       GitConfig {
-				conventional_commits:  true,
+				conventional_commits:  Some(true),
 				filter_unconventional: Some(false),
 				commit_parsers:        Some(vec![
 					CommitParser {
@@ -206,6 +224,7 @@
 				ignore_tags:           None,
 				topo_order:            Some(false),
 				sort_commits:          Some(String::from("oldest")),
+				link_parsers:          None,
 			},
 		};
 		let test_release = Release {
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index 9fa63d4..6542ef7 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -6,8 +6,13 @@
 #[macro_use]
 extern crate log;
 
-use args::Opt;
+use args::{
+	Opt,
+	Sort,
+	Strip,
+};
 use changelog::Changelog;
+use clap::ArgEnum;
 use git_cliff_core::commit::Commit;
 use git_cliff_core::config::Config;
 use git_cliff_core::embed::EmbeddedConfig;
@@ -47,43 +52,43 @@
 	}
 
 	// Parse the configuration file.
-	let mut path = match args.config.to_str() {
-		Some(v) => Ok(v.to_string()),
-		None => Err(Error::IoError(io::Error::new(
-			io::ErrorKind::Other,
-			"path contains invalid characters",
-		))),
-	}?;
-	if let Some(config_path) = dirs_next::config_dir()
-		.map(|dir| dir.join(env!("CARGO_PKG_NAME")).join(DEFAULT_CONFIG))
-		.map(|path| path.to_str().map(String::from))
-		.flatten()
-	{
-		if fs::metadata(&config_path).is_ok() {
+	let mut path = args.config.clone();
+	if !path.exists() {
+		if let Some(config_path) = dirs_next::config_dir()
+			.map(|dir| dir.join(env!("CARGO_PKG_NAME")).join(DEFAULT_CONFIG))
+		{
 			path = config_path;
 		}
 	}
 
-	let mut config = if fs::metadata(&path).is_ok() {
-		Config::parse(path)?
+	// Load the default configuration if necessary.
+	let mut config = if path.exists() {
+		Config::parse(&path)?
 	} else {
-		warn!("{:?} is not found, using the default configuration.", path);
+		warn!(
+			"{:?} is not found, using the default configuration.",
+			args.config
+		);
 		EmbeddedConfig::parse()?
 	};
+	if config.changelog.body.is_none() {
+		warn!("Changelog body is not specified, using the default template.");
+		config.changelog.body = EmbeddedConfig::parse()?.changelog.body;
+	}
 
 	// Update the configuration based on command line arguments and vice versa.
-	match args.strip.as_deref() {
-		Some("header") => {
+	match args.strip {
+		Some(Strip::Header) => {
 			config.changelog.header = None;
 		}
-		Some("footer") => {
+		Some(Strip::Footer) => {
 			config.changelog.footer = None;
 		}
-		Some("all") => {
+		Some(Strip::All) => {
 			config.changelog.header = None;
 			config.changelog.footer = None;
 		}
-		_ => {}
+		None => {}
 	}
 	if args.prepend.is_some() {
 		config.changelog.footer = None;
@@ -93,12 +98,13 @@
 			)));
 		}
 	}
-	if let Some(template) = args.body {
-		config.changelog.body = template;
+	if args.body.is_some() {
+		config.changelog.body = args.body;
 	}
-	if args.sort == "oldest" {
+	if args.sort == Sort::Oldest {
 		if let Some(ref sort_commits) = config.git.sort_commits {
-			args.sort = sort_commits.to_string();
+			args.sort = Sort::from_str(sort_commits, true)
+				.expect("Incorrect config value for 'sort_commits'");
 		}
 	}
 	if !args.topo_order {
@@ -200,7 +206,7 @@
 	for git_commit in commits.into_iter().rev() {
 		let commit = Commit::from(&git_commit);
 		let commit_id = commit.id.to_string();
-		if args.sort == "newest" {
+		if args.sort == Sort::Newest {
 			releases[release_index].commits.insert(0, commit);
 		} else {
 			releases[release_index].commits.push(commit);
@@ -229,8 +235,10 @@
 	}
 
 	// Set the previous release if needed.
-	if args.latest {
-		if let Some((commit_id, version)) = tags.get_index(tags.len() - 2) {
+	if args.latest || args.unreleased {
+		if let Some((commit_id, version)) =
+			tags.len().checked_sub(2).and_then(|v| tags.get_index(v))
+		{
 			let previous_release = Release {
 				commit_id: Some(commit_id.to_string()),
 				version: Some(version.to_string()),
diff --git a/git-cliff/src/main.rs b/git-cliff/src/main.rs
index 410dd5c..b4f95e6 100644
--- a/git-cliff/src/main.rs
+++ b/git-cliff/src/main.rs
@@ -1,10 +1,10 @@
+use clap::Parser;
 use git_cliff::args::Opt;
 use std::env;
 use std::process;
-use structopt::StructOpt;
 
 fn main() {
-	let args = Opt::from_args();
+	let args = Opt::parse();
 	if args.verbose == 1 {
 		env::set_var("RUST_LOG", "debug");
 	} else if args.verbose > 1 {

=====================================================================
start time: Fri Oct 22 00:00:00 CST 2021
end time: Wed Dec 15 00:00:00 CST 2021
description: 
### Bug Fixes
- Update log test about exclude path
- Override the sort related config if args are present (#39)
- Checkout the repository before running fixtures
- Use the defined configuration file for fixtures
- Update the multi line docker command
- Strip the carriage return on fixtures while comparing
- Drop the skipped releases from 'previous' field
### Documentation
- Update `--with-commit` example in README.md
### Features
- Add `--topo-order` flag for sorting tags (#29)
- Support specifying the sorting methods in config (#31)
- Accept glob patterns for `--commit-path` argument
- Support multiple values for `--commit-path` argument
- Add `--exclude-path` argument for excluding related commits
- Add `--current` flag for processing the current tag (#37)
- Add `ignore_tags` option (#40)
- Use more explanatory error messages about templates
- Support having both conventional and unconventional commits in the changelog
- Add `--with-commit` argument for including custom commit messages in changelog
### Miscellaneous Tasks
- Improve the workflow for test fixtures
- Run test fixtures on ubuntu-latest
- Indicate the breaking changes via default config
### Refactor
- Rename the config value for commit order
### Styling
- [**breaking**] Rename `--commit-path` argument to `--include-path`

commit message: 
commit 481713cbb74fc2bce4a46ab6f8d4649b03d96fc2+ 1634910599 -----sp :: chore(project): remove unnecessary Cargo.lock entry from .gitignore
commit 6080ebbd4687269f3de150f33fdde8a18a143b4f+ 1634911031 -----sp :: chore(deps): upgrade dependencies
commit 0000000ef0e2d0710f4c1294408da2639f6f3217+ 1634912270 -----sp :: chore(project): migrate to Rust 2021 edition
commit fc33efde85fb6c3a8c82c37e795b598706aea609+ 1634912800 -----sp :: chore(docker): bump the Rust version in Dockerfile
commit c427eed7575cd60609002bcb3dbfe11d2ca11b13 1634913005 -----sp :: chore(release): prepare for v0.4.1
commit 2cee3bf9ecc00e21b871e88a34a949fbca6b646b 1634914625 -----sp :: fix(cd): install the Rust toolchain explicitly for crates.io releases
commit dc7e91b1913af5a801937a46f3d8933f3e953612 1634914752 -----sp :: chore(release): prepare for v0.4.2
commit cc09d637ff4edfcba625e469dcd3eb0062ac2a4f+ 1635544920 -----sp :: feat(changelog): add `--topo-order` flag for sorting tags (#29)
commit 4eb334da06c1bde3b53d95ea50d086daab07e4bb+ 1637869544 -----sp :: feat(config): support specifying the sorting methods in config (#31)
commit 6cec37d1ecb23507f0bf47cd7fe942368faca92d+ 1637869930 -----sp :: refactor(config): rename the config value for commit order
commit ad11cbf6c528e1cf80075d986658774be3fabff7+ 1638277529 -----sp :: feat(args): accept glob patterns for `--commit-path` argument
commit edb343a10e76a33b7223aa36d37df350d4ac6df1+ 1638279079 -----sp :: feat(args): support multiple values for `--commit-path` argument
commit 25a1d49c0993685d8bf95225e81ee7d614131115+ 1638388212 -----sp :: feat(args): add `--exclude-path` argument for excluding related commits
commit 9d213f5713af3a27e1026d275be1676a739d6c3a+ 1638388342 -----sp :: fix(tests): update log test about exclude path
commit 7b000ad43ef5d25941057b38bb6747f9f1514b17+ 1638388729 -----sp :: style(args)!: rename `--commit-path` argument to `--include-path`
commit 02a6187a58583f27e4604d7ea518b52b4bc7a833+ 1638428470 -----sp :: feat(args): add `--current` flag for processing the current tag (#37)
commit ef63727b5f0a5aba7024e2afe5dc24a1b218d978+ 1638561427 -----sp :: fix(args): override the sort related config if args are present (#39)
commit de11ccecac10de6069d7a1ba0a1013582fc8bd25+ 1638902977 -----sp :: feat(config): add `ignore_tags` option (#40)
commit 92a54d67b825b53b6993a769ea9d5cf37ea2e43e+ 1638908113 -----sp :: chore(fixtures): improve the workflow for test fixtures
commit dea65f235e2091001d8de41794bf3c98a7223917+ 1638908531 -----sp :: chore(fixtures): run test fixtures on ubuntu-latest
commit cb412a905f7121bb3277de1086fb48f34bbb7319+ 1638908632 -----sp :: fix(fixtures): checkout the repository before running fixtures
commit bbc58d7bd01091b71c38323ba71cc07b97285c19+ 1638909062 -----sp :: fix(fixtures): use the defined configuration file for fixtures
commit c8d288c4c8dafd011b2d324d3ba3052b0fe11794+ 1638909182 -----sp :: fix(fixtures): update the multi line docker command
commit d7e8ce25286a2dc1ce5d134df871cdc07f4a9211+ 1638910126 -----sp :: fix(fixtures): strip the carriage return on fixtures while comparing
commit 7f867ae647ff30f54aae314596cbc7c7ce4f50c1+ 1638990471 -----sp :: fix(changelog): drop the skipped releases from 'previous' field
commit 1a9c3e310f1b7ae8de6f5d62bd2095afd616c463+ 1638994333 -----sp :: feat(template): use more explanatory error messages about templates
commit 8445313b13f6f087f79ea73bc1c12b0340a87d92+ 1639224430 -----sp :: feat(changelog): support having both conventional and unconventional commits in the changelog
commit 316c11b60756f8b38174433450d42f25919368b7+ 1639225229 -----sp :: chore(config): indicate the breaking changes via default config
commit e4c60b20be8b7f1fa19429b1b1f984dc4caf9340+ 1639239289 -----sp :: feat(args): add `--with-commit` argument for including custom commit messages in changelog
commit 47d124add2669e541d992aba83759dc31cd9d18d+ 1639239582 -----sp :: docs(readme): update `--with-commit` example in README.md

hunks: 
diff --git a/.github/fixtures/cliff.toml b/.github/fixtures/cliff.toml
new file mode 100644
index 0000000..40a40b2
--- /dev/null
+++ b/.github/fixtures/cliff.toml
@@ -0,0 +1,59 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {{ commit.message | upper_first }}\
+    {% endfor %}
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# allow only conventional commits
+# https://www.conventionalcommits.org
+conventional_commits = true
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
+    { body = ".*security", group = "Security"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = false
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = "v.*-beta.*"
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/.github/fixtures/expected.md b/.github/fixtures/expected.md
new file mode 100644
index 0000000..a5f1080
--- /dev/null
+++ b/.github/fixtures/expected.md
@@ -0,0 +1,18 @@
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [0.2.0] - 2021-01-23
+
+### Features
+
+- Add feature 2
+- Add feature 3
+
+## [0.1.0] - 2021-01-23
+
+### Features
+
+- Add feature 1
+- Fix feature 1
+
+<!-- generated by git-cliff -->
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 310cf6d..febbce8 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -140,17 +140,20 @@
         uses: actions/checkout@v2
       - name: Set the release version
         run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
+      - name: Install Rust toolchain
+        uses: actions-rs/toolchain@v1
+        with:
+          toolchain: stable
+          target: x86_64-unknown-linux-gnu
+          override: true
       - name: Prepare for the crates.io release
         run: |
           mkdir git-cliff-core/config/
           cp config/cliff.toml git-cliff-core/config/
           sed -i 's|"../config/"|"config/"|' git-cliff-core/src/embed.rs
       - name: Publish the library
-        uses: actions-rs/cargo@v1
-        with:
-          command: publish
-          args: |
-            --allow-dirty --manifest-path git-cliff-core/Cargo.toml
+        run: |
+          cargo publish --allow-dirty --manifest-path git-cliff-core/Cargo.toml \
             --locked --token ${{ secrets.CARGO_TOKEN }}
       - name: Wait for library to update
         shell: bash
@@ -158,9 +161,6 @@
           crate_status="https://raw.githubusercontent.com/rust-lang/crates.io-index/master/gi/t-/git-cliff-core"
           until curl -s "$crate_status" | grep -q '"vers":"${{ env.RELEASE_VERSION }}"'; do sleep 5; done;
       - name: Publish the binary
-        uses: actions-rs/cargo@v1
-        with:
-          command: publish
-          args: |
-            --allow-dirty --manifest-path git-cliff/Cargo.toml
+        run: |
+          cargo publish --allow-dirty --manifest-path git-cliff/Cargo.toml \
             --locked --token ${{ secrets.CARGO_TOKEN }}
diff --git a/.github/workflows/test-fixtures.yml b/.github/workflows/test-fixtures.yml
new file mode 100644
index 0000000..875d362
--- /dev/null
+++ b/.github/workflows/test-fixtures.yml
@@ -0,0 +1,52 @@
+name: Test fixtures
+
+on:
+  push:
+    branches:
+      - main
+  pull_request:
+    branches:
+      - main
+
+jobs:
+  test-fixtures:
+    name: Test fixtures
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+        with:
+          fetch-depth: 0
+      - name: Set git config
+        run: |
+          git config --global user.name github-actions
+          git config --global user.email github-actions@github.com
+      - name: Create commits and tags
+        run: |
+          mkdir .workspace && cd .workspace && git init
+          git commit --allow-empty -m "Initial commit"
+          git commit --allow-empty -m "feat: add skip feature"
+          git tag v0.1.0-beta.1
+          git commit --allow-empty -m "feat: add feature 1"
+          git commit --allow-empty -m "feat: fix feature 1"
+          git tag v0.1.0
+          git commit --allow-empty -m "feat: add feature 2"
+          git tag v0.2.0-beta.1
+          git commit --allow-empty -m "feat: add feature 3"
+          git tag v0.2.0
+        env:
+          GIT_AUTHOR_DATE: "2021-01-23 01:23:45"
+          GIT_COMMITTER_DATE: "2021-01-23 01:23:45"
+      - name: Generate a changelog
+        run: |
+          cd .workspace
+          fixtures_dir=${GITHUB_WORKSPACE}/.github/fixtures
+          docker run -t \
+            -v "$(pwd)/.git":/app/ \
+            -v "$fixtures_dir/cliff.toml":/app/cliff.toml \
+            orhunp/git-cliff:latest > "$fixtures_dir/output.md"
+      - name: Compare the output with the expected output
+        run: |
+          cd ${GITHUB_WORKSPACE}/.github/fixtures
+          cat output.md
+          diff --strip-trailing-cr output.md expected.md
diff --git a/CHANGELOG.md b/CHANGELOG.md
index c5b2866..e022ae5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,35 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.4.2] - 2021-10-22
+
+### Bug Fixes
+
+- Install the Rust toolchain explicitly for crates.io releases
+
+## [0.4.1] - 2021-10-22
+
+### Bug Fixes
+
+- Add support for special characters in scopes (#26)
+
+### Documentation
+
+- Add GitLab CI/CD section to README.md (#24)
+- Update GitLab CI/CD section
+
+### Miscellaneous Tasks
+
+- Run CI workflows periodically
+- Remove unnecessary Cargo.lock entry from .gitignore
+- Upgrade dependencies
+- Migrate to Rust 2021 edition
+- Bump the Rust version in Dockerfile
+
+### Refactor
+
+- Use a better error message for invalid repo path
+
 ## [0.4.0] - 2021-10-01
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 60aa61b..627a41b 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -138,12 +138,24 @@
 
 [[package]]
 name = "chrono-tz"
-version = "0.5.3"
+version = "0.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2554a3155fec064362507487171dcc4edc3df60cb10f3a1fb10ed8094822b120"
+checksum = "64c01c1c607d25c71bbaa67c113d6c6b36c434744b4fd66691d711b5b1bc0c8b"
 dependencies = [
  "chrono",
+ "chrono-tz-build",
+ "phf",
+]
+
+[[package]]
+name = "chrono-tz-build"
+version = "0.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "db058d493fb2f65f41861bfed7e3fe6335264a9f0f92710cab5bdf01fef09069"
+dependencies = [
  "parse-zoneinfo",
+ "phf",
+ "phf_codegen",
 ]
 
 [[package]]
@@ -327,7 +339,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.4.0"
+version = "0.4.2"
 dependencies = [
  "dirs-next",
  "git-cliff-core",
@@ -339,11 +351,12 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.4.0"
+version = "0.4.2"
 dependencies = [
  "config",
  "git-conventional",
  "git2",
+ "glob",
  "indexmap",
  "pretty_assertions",
  "regex",
@@ -370,9 +383,9 @@
 
 [[package]]
 name = "git2"
-version = "0.13.22"
+version = "0.13.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9c1cbbfc9a1996c6af82c2b4caf828d2c653af4fcdbb0e5674cc966eee5a4197"
+checksum = "2a8057932925d3a9d9e4434ea016570d37420ddb1ceed45a174d577f24ed6700"
 dependencies = [
  "bitflags",
  "libc",
@@ -382,6 +395,12 @@
 ]
 
 [[package]]
+name = "glob"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"
+
+[[package]]
 name = "globset"
 version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -525,9 +544,9 @@
 
 [[package]]
 name = "libgit2-sys"
-version = "0.12.23+1.2.0"
+version = "0.12.24+1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "29730a445bae719db3107078b46808cc45a5b7a6bae3f31272923af969453356"
+checksum = "ddbd6021eef06fb289a8f54b3c2acfdd85ff2a585dfbb24b8576325373d2152c"
 dependencies = [
  "cc",
  "libc",
@@ -713,6 +732,45 @@
 ]
 
 [[package]]
+name = "phf"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9fc3db1018c4b59d7d582a739436478b6035138b6aecbce989fc91c3e98409f"
+dependencies = [
+ "phf_shared",
+]
+
+[[package]]
+name = "phf_codegen"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4fb1c3a8bc4dd4e5cfce29b44ffc14bedd2ee294559a294e2a4d4c9e9a6a13cd"
+dependencies = [
+ "phf_generator",
+ "phf_shared",
+]
+
+[[package]]
+name = "phf_generator"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5d5285893bb5eb82e6aaf5d59ee909a06a16737a8970984dd7746ba9283498d6"
+dependencies = [
+ "phf_shared",
+ "rand",
+]
+
+[[package]]
+name = "phf_shared"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096"
+dependencies = [
+ "siphasher",
+ "uncased",
+]
+
+[[package]]
 name = "pkg-config"
 version = "0.3.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -986,6 +1044,12 @@
 ]
 
 [[package]]
+name = "siphasher"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "533494a8f9b724d33625ab53c6c4800f7cc445895924a8ef649222dcb76e938b"
+
+[[package]]
 name = "slug"
 version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1008,9 +1072,9 @@
 
 [[package]]
 name = "structopt"
-version = "0.3.23"
+version = "0.3.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf9d950ef167e25e0bdb073cf1d68e9ad2795ac826f2f3f59647817cf23c0bfa"
+checksum = "40b9788f4202aa75c240ecc9c15c65185e6a39ccdeb0fd5d008b98825464c87c"
 dependencies = [
  "clap",
  "lazy_static",
@@ -1019,9 +1083,9 @@
 
 [[package]]
 name = "structopt-derive"
-version = "0.4.16"
+version = "0.4.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "134d838a2c9943ac3125cf6df165eda53493451b719f3255b2a26b85f772d0ba"
+checksum = "dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0"
 dependencies = [
  "heck",
  "proc-macro-error",
@@ -1043,9 +1107,9 @@
 
 [[package]]
 name = "tera"
-version = "1.12.1"
+version = "1.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf95b0d8a46da5fe3ea119394a6c7f1e745f9de359081641c99946e2bf55d4f2"
+checksum = "ed0c0eee8fbbbaab449287574b292f21ca53224b92a07b4a23266b77376f0ce7"
 dependencies = [
  "chrono",
  "chrono-tz",
@@ -1094,18 +1158,18 @@
 
 [[package]]
 name = "thiserror"
-version = "1.0.29"
+version = "1.0.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "602eca064b2d83369e2b2f34b09c70b605402801927c65c11071ac911d299b88"
+checksum = "854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.29"
+version = "1.0.30"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bad553cc2c78e8de258400763a647e80e6d1b31ee237275d756f6836d204494c"
+checksum = "aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1158,6 +1222,15 @@
 checksum = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"
 
 [[package]]
+name = "uncased"
+version = "0.9.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5baeed7327e25054889b9bd4f975f32e5f4c5d434042d59ab6cd4142c0a76ed0"
+dependencies = [
+ "version_check",
+]
+
+[[package]]
 name = "unic-char-property"
 version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
diff --git a/Dockerfile b/Dockerfile
index 2ae7d54..79099fa 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,14 +1,14 @@
-FROM lukemathwalker/cargo-chef:0.1.31-rust-1.54-slim-buster as planner
+FROM lukemathwalker/cargo-chef:0.1.31-rust-1.56-slim-buster as planner
 WORKDIR app
 COPY . .
 RUN cargo chef prepare --recipe-path recipe.json
 
-FROM lukemathwalker/cargo-chef:0.1.31-rust-1.54-slim-buster as cacher
+FROM lukemathwalker/cargo-chef:0.1.31-rust-1.56-slim-buster as cacher
 WORKDIR app
 COPY --from=planner /app/recipe.json recipe.json
 RUN cargo chef cook --release --recipe-path recipe.json
 
-FROM rust:1.54-slim-buster as builder
+FROM rust:1.56-slim-buster as builder
 WORKDIR app
 RUN apt-get update && \
     apt-get install -y --no-install-recommends \
diff --git a/README.md b/README.md
index 4caf4a8..541a39d 100644
--- a/README.md
+++ b/README.md
@@ -59,10 +59,14 @@
     - [footer](#footer)
   - [git](#git)
     - [conventional_commits](#conventional_commits)
+    - [filter_unconventional](#filter_unconventional)
     - [commit_parsers](#commit_parsers)
     - [filter_commits](#filter_commits)
     - [tag_pattern](#tag_pattern)
     - [skip_tags](#skip_tags)
+    - [ignore_tags](#ignore_tags)
+    - [topo_order](#topo_order)
+    - [sort_commits](#sort_commits)
 - [Templating](#templating)
   - [Context](#context)
     - [Conventional Commits](#conventional-commits)
@@ -75,6 +79,7 @@
     - [Scoped](#scoped)
     - [Scoped (Sorted)](#scoped-sorted)
     - [Keep a Changelog](#keep-a-changelog)
+    - [Unconventional](#unconventional)
 - [Similar Projects](#similar-projects)
 - [License](#license)
 - [Copyright](#copyright)
@@ -135,7 +140,9 @@
 -v, --verbose       Increases the logging verbosity
 -i, --init          Writes the default configuration file to cliff.toml
 -l, --latest        Processes the commits starting from the latest tag
+    --current       Processes the commits that belong to the current tag
 -u, --unreleased    Processes the commits that do not belong to a tag
+    --topo-order    Sorts the tags topologically
 -h, --help          Prints help information
 -V, --version       Prints version information
 ```
@@ -143,16 +150,18 @@
 **Options:**
 
 ```
--c, --config <PATH>        Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
--w, --workdir <PATH>       Sets the working directory [env: WORKDIR=]
--r, --repository <PATH>    Sets the git repository [env: REPOSITORY=]
-    --commit-path <PATH>   Sets the directory to parse commits from [env: COMMIT_PATH=]
--p, --prepend <PATH>       Prepends entries to the given changelog file [env: PREPEND=]
--o, --output <PATH>        Writes output to the given file [env: OUTPUT=]
--t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
--b, --body <TEMPLATE>      Sets the template for the changelog body [env: TEMPLATE=]
--s, --strip <PART>         Strips the given parts from the changelog [possible values: header, footer, all]
-    --sort <sort>          Sets sorting of the commits inside sections [default: oldest] [possible values: oldest, newest]
+-c, --config <PATH>               Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
+-w, --workdir <PATH>              Sets the working directory [env: WORKDIR=]
+-r, --repository <PATH>           Sets the git repository [env: REPOSITORY=]
+    --include-path <PATTERN>...   Sets the path to include related commits [env: INCLUDE_PATH=]
+    --exclude-path <PATTERN>...   Sets the path to exclude related commits [env: EXCLUDE_PATH=]
+    --with-commit <MSG>...        Sets custom commit messages to include in the changelog [env: WITH_COMMIT=]
+-p, --prepend <PATH>              Prepends entries to the given changelog file [env: PREPEND=
+-o, --output <PATH>               Writes output to the given file [env: OUTPUT=]
+-t, --tag <TAG>                   Sets the tag for the latest version [env: TAG=]
+-b, --body <TEMPLATE>             Sets the template for the changelog body [env: TEMPLATE=]
+-s, --strip <PART>                Strips the given parts from the changelog [possible values: header, footer, all]
+    --sort <sort>                 Sets sorting of the commits inside sections [default: oldest] [possible values: oldest, newest]
 ```
 
 **Args:**
@@ -191,6 +200,11 @@
 # (requires at least 2 tags)
 git cliff --latest
 
+# only takes the current tag into account
+# useful if you checkout a specific tag (e.g. `git checkout v0.0.1`)
+# (requires a tag to be present for the current commit (i.e. HEAD))
+git cliff --current
+
 # generate changelog for unreleased commits
 git cliff --unreleased
 git cliff --unreleased --tag 1.0.0
@@ -204,7 +218,20 @@
 Generate a changelog scoped to a specific directory (useful for monorepos):
 
 ```sh
-git cliff --commit-path project1/
+git cliff --include-path "**/*.toml" --include-path "*.md"
+git cliff --exclude-path ".github/*"
+```
+
+Generate a changelog that includes yet unexisting commit messages:
+
+```sh
+commit_msg="chore(release): update CHANGELOG.md for 1.0.0"
+
+# You might need to include the commit messages that do not exist
+# for testing purposes or solving the chicken-egg problem.
+git cliff --with-commit "$commit_msg" -o CHANGELOG.md
+
+git add CHANGELOG.md && git commit -m "$commit_msg"
 ```
 
 Sort the commits inside sections:
@@ -218,6 +245,13 @@
 git cliff --sort newest
 ```
 
+Sort the tags in topological order:
+
+```sh
+# Process in topological order instead of chronological.
+git cliff --topo-order
+```
+
 Save the changelog file to the specified file:
 
 ```sh
@@ -356,6 +390,7 @@
 ```toml
 [git]
 conventional_commits = true
+filter_unconventional = true
 commit_parsers = [
     { message = "^feat", group = "Features"},
     { message = "^fix", group = "Bug Fixes"},
@@ -368,11 +403,14 @@
 filter_commits = false
 tag_pattern = "v[0-9]*"
 skip_tags = "v0.1.0-beta.1"
+ignore_tags = ""
+topo_order = false
+sort_commits = "oldest"
 ```
 
 #### conventional_commits
 
-If set to `true`, parses the commits according to the [Conventional Commits specifications](https://www.conventionalcommits.org).
+If set to `true`, commits are parsed according to the [Conventional Commits specifications](https://www.conventionalcommits.org).
 
 > The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages.
 
@@ -388,6 +426,35 @@
 
 e.g. `feat(parser): add ability to parse arrays`
 
+#### filter_unconventional
+
+If set to `true`, commits that are not conventional are excluded. This option can be used to generate changelogs with conventional and unconvential commits mixed together. For example:
+
+```toml
+conventional_commits = true
+filter_unconventional = false
+commit_parsers = [
+  { message = ".*", group = "Other", default_scope = "other"},
+]
+```
+
+With the configuration above, conventional commits are parsed as usual and unconventional commits will be also included in the changelog as "Other".
+
+To completely exclude unconventional commits from the changelog:
+
+```toml
+# default behaviour
+conventional_commits = true
+filter_unconventional = true
+```
+
+To include any type of commit in the changelog without parsing:
+
+```toml
+conventional_commits = false
+filter_unconventional = false
+```
+
 #### commit_parsers
 
 An array of commit parsers for determining the commit groups by using regex.
@@ -423,6 +490,29 @@
 
 A regex for skip processing the matched tags.
 
+#### ignore_tags
+
+A regex for ignore processing the matched tags.
+
+While `skip_tags` drop commits from the changelog, `ignore_tags` include ignored commits into the next tag.
+
+#### topo_order
+
+If set to `true`, tags are processed in topological order instead of chronological.
+
+This can also be achieved by using the `--topo-order` command line flag.
+
+#### sort_commits
+
+Sort the commits inside sections by specified order.
+
+Possible values:
+
+- `oldest`
+- `newest`
+
+This can also be achieved by specifying the `--sort` command line argument.
+
 ## Templating
 
 A template is a text where variables and expressions get replaced with values when it is rendered.
@@ -459,7 +549,8 @@
       "body": "[body]",
       "footers": ["[footer]", "[footer]"],
       "breaking_description": "<description>",
-      "breaking": false
+      "breaking": false,
+      "conventional": true
     }
   ],
   "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
@@ -501,7 +592,9 @@
     {
       "id": "e795460c9bb7275294d1fa53a9d73258fb51eb10",
       "group": "(overrided by commit_parsers)",
-      "message": "(whole commit message including description, footers, etc.)"
+      "scope": "(overrided by commit_parsers)",
+      "message": "(full commit message including description, footers, etc.)",
+      "conventional": false,
     }
   ],
   "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
@@ -1036,6 +1129,102 @@
 
 </details>
 
+#### [Unconventional](./examples/unconventional.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats ✔️
+- Use cache while fetching pages ✔️
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- Add release script ✔️
+
+### Refactor
+
+- Expose string functions ✔️
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict ✔️
+
+### Documentation
+
+- Add README.md ✔️
+- Add tested usage example ✔️
+
+### Features
+
+- Add ability to parse arrays ✔️
+
+### Other (unconventional)
+
+- Initial commit ❌
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats ✔️
+- Use cache while fetching pages ✔️
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- Add release script ✔️
+
+### Refactor
+
+- Expose string functions ✔️
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict ✔️
+
+### Documentation
+
+- Add README.md ✔️
+- Add tested usage example ✔️
+
+### Features
+
+- Add ability to parse arrays ✔️
+
+### Other (unconventional)
+
+- Initial commit ❌
+
+<!-- generated by git-cliff -->
+
+</details>
+
 ## Similar Projects
 
 - [git-journal](https://github.com/saschagrunert/git-journal) - The Git Commit Message and Changelog Generation Framework
diff --git a/config/cliff.toml b/config/cliff.toml
index 9652135..e57b38b 100644
--- a/config/cliff.toml
+++ b/config/cliff.toml
@@ -17,7 +17,7 @@
 {% for group, commits in commits | group_by(attribute="group") %}
     ### {{ group | upper_first }}
     {% for commit in commits %}
-        - {{ commit.message | upper_first }}\
+        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
     {% endfor %}
 {% endfor %}\n
 """
@@ -29,9 +29,10 @@
 """
 
 [git]
-# allow only conventional commits
-# https://www.conventionalcommits.org
+# parse the commits based on https://www.conventionalcommits.org
 conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = true
 # regex for parsing and grouping commits
 commit_parsers = [
     { message = "^feat", group = "Features"},
@@ -51,3 +52,9 @@
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
 skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/examples/detailed.toml b/examples/detailed.toml
index 52974b9..bbafa0c 100644
--- a/examples/detailed.toml
+++ b/examples/detailed.toml
@@ -35,9 +35,10 @@
 """
 
 [git]
-# allow only conventional commits
-# https://www.conventionalcommits.org
+# parse the commits based on https://www.conventionalcommits.org
 conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = true
 # regex for parsing and grouping commits
 commit_parsers = [
     { message = "^feat", group = "Features"},
@@ -57,3 +58,9 @@
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
 skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/examples/keepachangelog.toml b/examples/keepachangelog.toml
index f7f5b33..d3765b3 100644
--- a/examples/keepachangelog.toml
+++ b/examples/keepachangelog.toml
@@ -32,9 +32,10 @@
 """
 
 [git]
-# allow only conventional commits
-# https://www.conventionalcommits.org
+# parse the commits based on https://www.conventionalcommits.org
 conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = true
 # regex for parsing and grouping commits
 commit_parsers = [
     { message = "^.*: add", group = "Added"},
@@ -52,3 +53,9 @@
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
 skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/examples/scoped.toml b/examples/scoped.toml
index 0a713a4..d2ecc8b 100644
--- a/examples/scoped.toml
+++ b/examples/scoped.toml
@@ -32,9 +32,10 @@
 """
 
 [git]
-# allow only conventional commits
-# https://www.conventionalcommits.org
+# parse the commits based on https://www.conventionalcommits.org
 conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = true
 # regex for parsing and grouping commits
 commit_parsers = [
     { message = "^feat", group = "Features"},
@@ -54,3 +55,9 @@
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
 skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/examples/scopesorted.toml b/examples/scopesorted.toml
index d17db1c..28c8b5c 100644
--- a/examples/scopesorted.toml
+++ b/examples/scopesorted.toml
@@ -44,9 +44,10 @@
 """
 
 [git]
-# allow only conventional commits
-# https://www.conventionalcommits.org
+# parse the commits based on https://www.conventionalcommits.org
 conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = true
 # regex for parsing and grouping commits
 commit_parsers = [
     { message = "^feat", group = "Features"},
@@ -66,3 +67,9 @@
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
 skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/examples/unconventional.toml b/examples/unconventional.toml
new file mode 100644
index 0000000..b6d6365
--- /dev/null
+++ b/examples/unconventional.toml
@@ -0,0 +1,61 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {{ commit.message | upper_first | trim_end }} {% if commit.conventional %}✔️{% else %}❌{% endif %}\
+    {% endfor %}
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# parse the commits based on https://www.conventionalcommits.org
+conventional_commits = true
+# filter out the commits that are not conventional
+filter_unconventional = false
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
+    { body = ".*security", group = "Security"},
+    { body = ".*", group = "Other (unconventional)"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = false
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
+# regex for ignoring tags
+ignore_tags = ""
+# sort the tags topologically
+topo_order = false
+# sort the commits inside sections by oldest/newest order
+sort_commits = "oldest"
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index eb69517..f936238 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,26 +1,27 @@
 [package]
 name = "git-cliff-core"
-version = "0.4.0" # managed by release.sh
+version = "0.4.2" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
 homepage = "https://github.com/orhun/git-cliff"
 repository = "https://github.com/orhun/git-cliff"
 keywords = ["changelog", "generator", "conventional", "commit"]
-edition = "2018"
+edition = "2021"
 
 [dependencies]
-thiserror = "1.0.29"
+thiserror = "1.0.30"
 serde = "1.0.130"
 serde_derive = "1.0.130"
-tera = "1.12.1"
+tera = "1.13.0"
 regex = "1.5.4"
 serde_regex = "1.1.0"
 indexmap = "1.7.0"
 toml = "0.5.8"
+glob = "0.3.0"
 
 [dependencies.git2]
-version = "0.13.22"
+version = "0.13.23"
 default-features = false
 
 [dependencies.config]
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index 5a541ef..6c559cc 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -1,4 +1,7 @@
-use crate::config::CommitParser;
+use crate::config::{
+	CommitParser,
+	GitConfig,
+};
 use crate::error::{
 	Error as AppError,
 	Result,
@@ -53,18 +56,18 @@
 	///
 	/// * converts commit to a conventional commit
 	/// * sets the group for the commit
-	pub fn process(
-		&self,
-		parsers: Option<&Vec<CommitParser>>,
-		filter_commits: Option<bool>,
-		conventional_commits: bool,
-	) -> Result<Self> {
+	pub fn process(&self, config: &GitConfig) -> Result<Self> {
 		let mut commit = self.clone();
-		if conventional_commits {
-			commit = commit.into_conventional()?;
+		if config.conventional_commits {
+			if config.filter_unconventional.unwrap_or(true) {
+				commit = commit.into_conventional()?;
+			} else if let Ok(conv_commit) = commit.clone().into_conventional() {
+				commit = conv_commit;
+			}
 		}
-		if let Some(parsers) = parsers {
-			commit = commit.parse(parsers, filter_commits.unwrap_or(false))?;
+		if let Some(parsers) = &config.commit_parsers {
+			commit =
+				commit.parse(parsers, config.filter_commits.unwrap_or(false))?;
 		}
 		Ok(commit)
 	}
@@ -122,7 +125,7 @@
 	where
 		S: Serializer,
 	{
-		let mut commit = serializer.serialize_struct("Commit", 8)?;
+		let mut commit = serializer.serialize_struct("Commit", 9)?;
 		commit.serialize_field("id", &self.id)?;
 		match &self.conv {
 			Some(conv) => {
@@ -157,8 +160,10 @@
 			None => {
 				commit.serialize_field("message", &self.message)?;
 				commit.serialize_field("group", &self.group)?;
+				commit.serialize_field("scope", &self.scope)?;
 			}
 		}
+		commit.serialize_field("conventional", &self.conv.is_some())?;
 		commit.end()
 	}
 }
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index 983f9fe..c6b55ba 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -26,17 +26,26 @@
 /// Git configuration
 #[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
 pub struct GitConfig {
-	/// Whether to enable conventional commits.
-	pub conventional_commits: bool,
+	/// Whether to enable parsing conventional commits.
+	pub conventional_commits:  bool,
+	/// Whether to filter out unconventional commits.
+	pub filter_unconventional: Option<bool>,
 	/// Git commit parsers.
-	pub commit_parsers:       Option<Vec<CommitParser>>,
+	pub commit_parsers:        Option<Vec<CommitParser>>,
 	/// Whether to filter out commits.
-	pub filter_commits:       Option<bool>,
+	pub filter_commits:        Option<bool>,
 	/// Blob pattern for git tags.
-	pub tag_pattern:          Option<String>,
+	pub tag_pattern:           Option<String>,
 	#[serde(with = "serde_regex", default)]
 	/// Regex to skip matched tags.
-	pub skip_tags:            Option<Regex>,
+	pub skip_tags:             Option<Regex>,
+	#[serde(with = "serde_regex", default)]
+	/// Regex to ignore matched tags.
+	pub ignore_tags:           Option<Regex>,
+	/// Whether to sort tags topologically.
+	pub topo_order:            Option<bool>,
+	/// Sorting of the commits inside sections.
+	pub sort_commits:          Option<String>,
 }
 
 /// Parser for grouping commits.
diff --git a/git-cliff-core/src/error.rs b/git-cliff-core/src/error.rs
index 3c5ed66..e4b2b6a 100644
--- a/git-cliff-core/src/error.rs
+++ b/git-cliff-core/src/error.rs
@@ -26,7 +26,13 @@
 	/// Error that may occur while generating changelog.
 	#[error("Changelog error: `{0}`")]
 	ChangelogError(String),
-	/// Error that may occur while template operations such as parse and render.
+	/// Error that may occur while parsing the template.
+	#[error("Template parse error:\n{0}")]
+	TemplateParseError(String),
+	/// Error that may occur while rendering the template.
+	#[error("Template render error:\n{0}")]
+	TemplateRenderError(String),
+	/// Error that may occur during more general template operations.
 	#[error("Template error: `{0}`")]
 	TemplateError(#[from] tera::Error),
 	/// Error that may occur while parsing the command line arguments.
diff --git a/git-cliff-core/src/lib.rs b/git-cliff-core/src/lib.rs
index b25a2ba..c3dd01d 100644
--- a/git-cliff-core/src/lib.rs
+++ b/git-cliff-core/src/lib.rs
@@ -1,8 +1,11 @@
 //! A highly customizable changelog generator
 #![warn(missing_docs, clippy::unwrap_used)]
 
-/// Export regex crate.
+/// Export `glob` crate.
+pub use glob;
+/// Export `regex` crate.
 pub use regex;
+
 /// Git commit.
 pub mod commit;
 /// Config file parser.
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index b29e68f..3e68d06 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -4,9 +4,11 @@
 };
 use git2::{
 	Commit,
+	DescribeOptions,
 	Repository as GitRepository,
 	Sort,
 };
+use glob::Pattern;
 use indexmap::IndexMap;
 use std::io;
 use std::path::PathBuf;
@@ -39,7 +41,8 @@
 	pub fn commits(
 		&self,
 		range: Option<String>,
-		path: Option<String>,
+		include_path: Option<Vec<Pattern>>,
+		exclude_path: Option<Vec<Pattern>>,
 	) -> Result<Vec<Commit>> {
 		let mut revwalk = self.inner.revwalk()?;
 		revwalk.set_sorting(Sort::TIME | Sort::TOPOLOGICAL)?;
@@ -52,7 +55,7 @@
 			.filter_map(|id| id.ok())
 			.filter_map(|id| self.inner.find_commit(id).ok())
 			.collect();
-		if let Some(commit_path) = path {
+		if include_path.is_some() || exclude_path.is_some() {
 			commits = commits
 				.into_iter()
 				.filter(|commit| {
@@ -62,11 +65,23 @@
 							prev_commit.tree().ok().as_ref(),
 							None,
 						) {
-							return diff.deltas().any(|delta| {
-								delta.new_file().path().map_or(false, |path| {
-									path.starts_with(&commit_path)
-								})
-							});
+							return diff
+								.deltas()
+								.filter_map(|delta| delta.new_file().path())
+								.any(|new_file_path| {
+									if let Some(include_path) = &include_path {
+										include_path.iter().any(|glob| {
+											glob.matches_path(new_file_path)
+										})
+									} else if let Some(exclude_path) = &exclude_path
+									{
+										!exclude_path.iter().any(|glob| {
+											glob.matches_path(new_file_path)
+										})
+									} else {
+										false
+									}
+								});
 						}
 					}
 					false
@@ -76,12 +91,23 @@
 		Ok(commits)
 	}
 
+	/// Returns the current tag.
+	///
+	/// It is the same as running `git describe --tags`
+	pub fn current_tag(&self) -> Option<String> {
+		self.inner
+			.describe(DescribeOptions::new().describe_tags())
+			.ok()
+			.and_then(|describe| describe.format(None).ok())
+	}
+
 	/// Parses and returns a commit-tag map.
 	///
 	/// It collects lightweight and annotated tags.
 	pub fn tags(
 		&self,
 		pattern: &Option<String>,
+		topo_order: bool,
 	) -> Result<IndexMap<String, String>> {
 		let mut tags: Vec<(Commit, String)> = Vec::new();
 		let tag_names = self.inner.tag_names(pattern.as_deref())?;
@@ -100,7 +126,9 @@
 				}
 			}
 		}
-		tags.sort_by(|a, b| a.0.time().seconds().cmp(&b.0.time().seconds()));
+		if !topo_order {
+			tags.sort_by(|a, b| a.0.time().seconds().cmp(&b.0.time().seconds()));
+		}
 		Ok(tags
 			.into_iter()
 			.map(|(a, b)| (a.id().to_string(), b))
@@ -151,7 +179,7 @@
 				.unwrap()
 				.to_path_buf(),
 		)?;
-		let commits = repository.commits(None, None)?;
+		let commits = repository.commits(None, None, None)?;
 		let last_commit = AppCommit::from(&commits.first().unwrap().clone());
 		assert_eq!(get_last_commit_hash()?, last_commit.id);
 		if let Err(e) = last_commit.into_conventional() {
@@ -164,7 +192,7 @@
 				}
 			}
 		}
-		let tags = repository.tags(&None)?;
+		let tags = repository.tags(&None, false)?;
 		assert_eq!(&get_last_tag()?, tags.last().unwrap().1);
 		Ok(())
 	}
diff --git a/git-cliff-core/src/template.rs b/git-cliff-core/src/template.rs
index 158fd55..4b94c47 100644
--- a/git-cliff-core/src/template.rs
+++ b/git-cliff-core/src/template.rs
@@ -1,6 +1,10 @@
-use crate::error::Result;
+use crate::error::{
+	Error,
+	Result,
+};
 use crate::release::Release;
 use std::collections::HashMap;
+use std::error::Error as ErrorImpl;
 use tera::{
 	Context as TeraContext,
 	Result as TeraResult,
@@ -18,7 +22,13 @@
 	/// Constructs a new instance.
 	pub fn new(template: String) -> Result<Self> {
 		let mut tera = Tera::default();
-		tera.add_raw_template("template", &template)?;
+		if let Err(e) = tera.add_raw_template("template", &template) {
+			return if let Some(error_source) = e.source() {
+				Err(Error::TemplateParseError(error_source.to_string()))
+			} else {
+				Err(Error::TemplateError(e))
+			};
+		}
 		tera.register_filter("upper_first", Self::upper_first_filter);
 		Ok(Self { tera })
 	}
@@ -40,9 +50,17 @@
 
 	/// Renders the template.
 	pub fn render(&self, release: &Release) -> Result<String> {
-		Ok(self
-			.tera
-			.render("template", &TeraContext::from_serialize(release)?)?)
+		let context = TeraContext::from_serialize(release)?;
+		match self.tera.render("template", &context) {
+			Ok(v) => Ok(v),
+			Err(e) => {
+				return if let Some(error_source) = e.source() {
+					Err(Error::TemplateRenderError(error_source.to_string()))
+				} else {
+					Err(Error::TemplateError(e))
+				};
+			}
+		}
 	}
 }
 
diff --git a/git-cliff-core/tests/integration_test.rs b/git-cliff-core/tests/integration_test.rs
index 7c5253a..4a1b666 100644
--- a/git-cliff-core/tests/integration_test.rs
+++ b/git-cliff-core/tests/integration_test.rs
@@ -36,8 +36,9 @@
 		trim:   None,
 	};
 	let git_config = GitConfig {
-		conventional_commits: true,
-		commit_parsers:       Some(vec![
+		conventional_commits:  true,
+		filter_unconventional: Some(true),
+		commit_parsers:        Some(vec![
 			CommitParser {
 				message:       Regex::new("^feat").ok(),
 				body:          None,
@@ -53,15 +54,22 @@
 				skip:          None,
 			},
 		]),
-		filter_commits:       Some(true),
-		tag_pattern:          None,
-		skip_tags:            None,
+		filter_commits:        Some(true),
+		tag_pattern:           None,
+		skip_tags:             None,
+		ignore_tags:           None,
+		topo_order:            None,
+		sort_commits:          None,
 	};
 
 	let releases = vec![
 		Release {
 			version:   Some(String::from("v2.0.0")),
 			commits:   vec![
+				Commit::new(
+					String::from("000abc"),
+					String::from("Add unconventional commit"),
+				),
 				Commit::new(String::from("abc123"), String::from("feat: add xyz")),
 				Commit::new(String::from("abc124"), String::from("feat: add zyx")),
 				Commit::new(
@@ -84,14 +92,7 @@
 				),
 			]
 			.iter()
-			.filter_map(|c| {
-				c.process(
-					git_config.commit_parsers.as_ref(),
-					git_config.filter_commits,
-					git_config.conventional_commits,
-				)
-				.ok()
-			})
+			.filter_map(|c| c.process(&git_config).ok())
 			.collect::<Vec<Commit>>(),
 			commit_id: None,
 			timestamp: 0,
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index fd10df6..f0bf30f 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.4.0" # managed by release.sh
+version = "0.4.2" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -10,7 +10,7 @@
 keywords = ["changelog", "generator", "conventional", "commit"]
 categories = ["command-line-utilities"]
 default-run = "git-cliff"
-edition = "2018"
+edition = "2021"
 
 [[bin]]
 name = "git-cliff-completions"
@@ -22,11 +22,11 @@
 dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.4.0" # managed by release.sh
+version = "0.4.2" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
-version = "0.3.23"
+version = "0.3.25"
 default-features = false
 features = ["suggestions", "color", "wrap_help"]
 
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 62c0070..b033e63 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -1,3 +1,4 @@
+use git_cliff_core::glob::Pattern;
 use git_cliff_core::DEFAULT_CONFIG;
 use std::path::PathBuf;
 use structopt::clap::AppSettings;
@@ -20,7 +21,7 @@
 pub struct Opt {
 	/// Increases the logging verbosity.
 	#[structopt(short, long, parse(from_occurrences), alias = "debug")]
-	pub verbose:     u8,
+	pub verbose:      u8,
 	/// Sets the configuration file.
 	#[structopt(
 		short,
@@ -29,25 +30,31 @@
 		value_name = "PATH",
 		default_value = DEFAULT_CONFIG,
 	)]
-	pub config:      PathBuf,
+	pub config:       PathBuf,
 	/// Sets the working directory.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub workdir:     Option<PathBuf>,
+	pub workdir:      Option<PathBuf>,
 	/// Sets the git repository.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub repository:  Option<PathBuf>,
-	/// Sets the directory to parse commits from.
-	#[structopt(long, env, value_name = "PATH")]
-	pub commit_path: Option<String>,
+	pub repository:   Option<PathBuf>,
+	/// Sets the path to include related commits.
+	#[structopt(long, env, value_name = "PATTERN")]
+	pub include_path: Option<Vec<Pattern>>,
+	/// Sets the path to exclude related commits.
+	#[structopt(long, env, value_name = "PATTERN")]
+	pub exclude_path: Option<Vec<Pattern>>,
+	/// Sets custom commit messages to include in the changelog.
+	#[structopt(long, env, value_name = "MSG")]
+	pub with_commit:  Option<Vec<String>>,
 	/// Prepends entries to the given changelog file.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub prepend:     Option<PathBuf>,
+	pub prepend:      Option<PathBuf>,
 	/// Writes output to the given file.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub output:      Option<PathBuf>,
+	pub output:       Option<PathBuf>,
 	/// Sets the tag for the latest version.
 	#[structopt(short, long, env, value_name = "TAG", allow_hyphen_values = true)]
-	pub tag:         Option<String>,
+	pub tag:          Option<String>,
 	/// Sets the template for the changelog body.
 	#[structopt(
 		short,
@@ -56,16 +63,22 @@
 		value_name = "TEMPLATE",
 		allow_hyphen_values = true
 	)]
-	pub body:        Option<String>,
+	pub body:         Option<String>,
 	/// Writes the default configuration file to cliff.toml
 	#[structopt(short, long)]
-	pub init:        bool,
+	pub init:         bool,
 	/// Processes the commits starting from the latest tag.
 	#[structopt(short, long)]
-	pub latest:      bool,
+	pub latest:       bool,
+	/// Processes the commits that belong to the current tag.
+	#[structopt(long)]
+	pub current:      bool,
 	/// Processes the commits that do not belong to a tag.
 	#[structopt(short, long)]
-	pub unreleased:  bool,
+	pub unreleased:   bool,
+	/// Sorts the tags topologically.
+	#[structopt(long)]
+	pub topo_order:   bool,
 	/// Strips the given parts from the changelog.
 	#[structopt(
 		short,
@@ -73,16 +86,15 @@
 		value_name = "PART",
 		possible_values = &["header", "footer", "all"]
 	)]
-	pub strip:       Option<String>,
+	pub strip:        Option<String>,
 	/// Sets the commit range to process.
 	#[structopt(value_name = "RANGE")]
-	pub range:       Option<String>,
-
+	pub range:        Option<String>,
 	/// Sets sorting of the commits inside sections.
 	#[structopt(
 		long,
 		possible_values = &["oldest", "newest"],
 		default_value = "oldest"
 	)]
-	pub sort: String,
+	pub sort:         String,
 }
diff --git a/git-cliff/src/changelog.rs b/git-cliff/src/changelog.rs
index 489be4e..70d00e6 100644
--- a/git-cliff/src/changelog.rs
+++ b/git-cliff/src/changelog.rs
@@ -40,32 +40,20 @@
 	/// criteria set by configuration file.
 	fn process_commits(&mut self) {
 		debug!("Processing the commits...");
-		let config = &self.config;
 		self.releases.iter_mut().for_each(|release| {
 			release.commits = release
 				.commits
 				.iter()
-				.filter_map(|commit| {
-					match commit.process(
-						config.git.commit_parsers.as_ref(),
-						config.git.filter_commits,
-						config.git.conventional_commits,
-					) {
-						Ok(commit) => Some(commit),
-						Err(e) => {
-							trace!(
-								"{} - {} ({})",
-								commit.id[..7].to_string(),
-								e,
-								commit
-									.message
-									.lines()
-									.next()
-									.unwrap_or_default()
-									.trim()
-							);
-							None
-						}
+				.filter_map(|commit| match commit.process(&self.config.git) {
+					Ok(commit) => Some(commit),
+					Err(e) => {
+						trace!(
+							"{} - {} ({})",
+							commit.id[..7].to_string(),
+							e,
+							commit.message.lines().next().unwrap_or_default().trim()
+						);
+						None
 					}
 				})
 				.collect::<Vec<Commit>>();
@@ -102,6 +90,20 @@
 				}
 			})
 			.collect();
+		if skip_regex.is_some() {
+			let mut releases = self.releases.clone();
+			for (i, release) in self.releases.iter_mut().enumerate() {
+				if release.previous.is_none() {
+					continue;
+				}
+				if let Some(previous_release) = releases.get_mut(i + 1) {
+					previous_release.previous = None;
+					release.previous = Some(Box::new(previous_release.clone()));
+				} else {
+					release.previous = None;
+				}
+			}
+		}
 	}
 
 	/// Generates the changelog and writes it to the given output.
@@ -166,8 +168,9 @@
 				trim:   Some(true),
 			},
 			git:       GitConfig {
-				conventional_commits: true,
-				commit_parsers:       Some(vec![
+				conventional_commits:  true,
+				filter_unconventional: Some(false),
+				commit_parsers:        Some(vec![
 					CommitParser {
 						message:       Regex::new("feat*").ok(),
 						body:          None,
@@ -183,16 +186,26 @@
 						skip:          None,
 					},
 					CommitParser {
+						message:       Regex::new("merge*").ok(),
+						body:          None,
+						group:         None,
+						default_scope: None,
+						skip:          Some(true),
+					},
+					CommitParser {
 						message:       Regex::new(".*").ok(),
 						body:          None,
 						group:         Some(String::from("Other")),
-						default_scope: None,
+						default_scope: Some(String::from("other")),
 						skip:          None,
 					},
 				]),
-				filter_commits:       Some(false),
-				tag_pattern:          None,
-				skip_tags:            Regex::new("v3.*").ok(),
+				filter_commits:        Some(false),
+				tag_pattern:           None,
+				skip_tags:             Regex::new("v3.*").ok(),
+				ignore_tags:           None,
+				topo_order:            Some(false),
+				sort_commits:          Some(String::from("oldest")),
 			},
 		};
 		let test_release = Release {
@@ -203,6 +216,10 @@
 					String::from("feat(app): add cool features"),
 				),
 				Commit::new(
+					String::from("000000"),
+					String::from("support unconventional commits"),
+				),
+				Commit::new(
 					String::from("0bc123"),
 					String::from("feat: support unscoped commits"),
 				),
@@ -300,6 +317,9 @@
 			#### app
 			- do nothing
 
+			#### other
+			- support unconventional commits
+
 			#### ui
 			- make good stuff
 			------------"#
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index 84420aa..9fa63d4 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -71,7 +71,7 @@
 		EmbeddedConfig::parse()?
 	};
 
-	// Update the configuration based on command line arguments.
+	// Update the configuration based on command line arguments and vice versa.
 	match args.strip.as_deref() {
 		Some("header") => {
 			config.changelog.header = None;
@@ -96,13 +96,50 @@
 	if let Some(template) = args.body {
 		config.changelog.body = template;
 	}
+	if args.sort == "oldest" {
+		if let Some(ref sort_commits) = config.git.sort_commits {
+			args.sort = sort_commits.to_string();
+		}
+	}
+	if !args.topo_order {
+		if let Some(topo_order) = config.git.topo_order {
+			args.topo_order = topo_order;
+		}
+	}
 
 	// Initialize the git repository.
 	let repository =
 		Repository::init(args.repository.unwrap_or(env::current_dir()?))?;
 
 	// Parse tags.
-	let mut tags = repository.tags(&config.git.tag_pattern)?;
+	let mut tags = repository.tags(&config.git.tag_pattern, args.topo_order)?;
+
+	// Skip tags.
+	let skip_regex = config.git.skip_tags.as_ref();
+	let ignore_regex = config.git.ignore_tags.as_ref();
+	tags = tags
+		.into_iter()
+		.filter(|(_, name)| {
+			// Keep skip tags to drop commits in the later stage.
+			let skip = skip_regex.map(|r| r.is_match(name)).unwrap_or_default();
+
+			let ignore = ignore_regex
+				.map(|r| {
+					if r.as_str().trim().is_empty() {
+						return false;
+					}
+
+					let ignore_tag = r.is_match(name);
+					if ignore_tag {
+						trace!("Ignoring release: {}", name)
+					}
+					ignore_tag
+				})
+				.unwrap_or_default();
+
+			skip || !ignore
+		})
+		.collect();
 
 	// Parse commits.
 	let mut commit_range = args.range;
@@ -110,19 +147,37 @@
 		if let Some(last_tag) = tags.last().map(|(k, _)| k) {
 			commit_range = Some(format!("{}..HEAD", last_tag));
 		}
-	} else if args.latest {
+	} else if args.latest || args.current {
 		if tags.len() < 2 {
 			return Err(Error::ChangelogError(String::from(
-				"Latest tag cannot be processed",
+				"Not enough tags exist for processing the latest/current tag",
 			)));
-		} else if let (Some(tag1), Some(tag2)) = (
-			tags.get_index(tags.len() - 2).map(|(k, _)| k),
-			tags.get_index(tags.len() - 1).map(|(k, _)| k),
+		}
+		let mut tag_index = tags.len() - 2;
+		if args.current {
+			if let Some(current_tag_index) =
+				repository.current_tag().as_ref().and_then(|tag| {
+					tags.iter()
+						.enumerate()
+						.find(|(_, (_, v))| v == &tag)
+						.map(|(i, _)| i)
+				}) {
+				tag_index = current_tag_index - 1;
+			} else {
+				return Err(Error::ChangelogError(String::from(
+					"No tag exists for the current commit",
+				)));
+			}
+		}
+		if let (Some(tag1), Some(tag2)) = (
+			tags.get_index(tag_index).map(|(k, _)| k),
+			tags.get_index(tag_index + 1).map(|(k, _)| k),
 		) {
 			commit_range = Some(format!("{}..{}", tag1, tag2));
 		}
 	}
-	let commits = repository.commits(commit_range, args.commit_path)?;
+	let commits =
+		repository.commits(commit_range, args.include_path, args.exclude_path)?;
 
 	// Update tags.
 	if let Some(tag) = args.tag {
@@ -162,6 +217,17 @@
 		}
 	}
 
+	// Add custom commit messages to the latest release.
+	if let Some(custom_commits) = args.with_commit {
+		if let Some(latest_release) = releases.iter_mut().last() {
+			custom_commits.iter().for_each(|commit_message| {
+				latest_release
+					.commits
+					.push(Commit::new(String::new(), commit_message.to_string()))
+			});
+		}
+	}
+
 	// Set the previous release if needed.
 	if args.latest {
 		if let Some((commit_id, version)) = tags.get_index(tags.len() - 2) {
diff --git a/release.sh b/release.sh
index 6100577..815ab48 100755
--- a/release.sh
+++ b/release.sh
@@ -14,7 +14,7 @@
 	{% for group, commits in commits | group_by(attribute=\"group\") %}
 	{{ group | upper_first }}\
 	{% for commit in commits %}
-		- {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end=\"\") }})\
+		- {% if commit.breaking %}(breaking) {% endif %}{{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end=\"\") }})\
 	{% endfor %}
 	{% endfor %}"
 	changelog=$(cargo run -- --unreleased --strip all)

=====================================================================
start time: Fri Oct 01 00:00:00 CST 2021
end time: Fri Oct 22 00:00:00 CST 2021
description: 
### Bug Fixes
- Add support for special characters in scopes (#26)
### Documentation
- Add GitLab CI/CD section to README.md (#24)
- Update GitLab CI/CD section
### Miscellaneous Tasks
- Run CI workflows periodically
- Remove unnecessary Cargo.lock entry from .gitignore
- Upgrade dependencies
- Migrate to Rust 2021 edition
- Bump the Rust version in Dockerfile
### Refactor
- Use a better error message for invalid repo path

commit message: 
commit 7756266b17f3c3ba55f5d00f8e55aea0a3a68ef2+ 1633122488 -----sp :: chore(docker): use docker.yml workflow for CI/CD
commit f2c1ba411f51f1f790df84d9b5be25357fccd959+ 1633124071 -----sp :: chore(deps): upgrade dependencies
commit a8b53789e4bd69dc43252f2df9862b910030b1b0 1633125033 -----sp :: chore(release): prepare for v0.4.0
commit 627d4eff7f6e4da9ea942ac05c6743a4153f4cc2+ 1634322315 -----sp :: chore(ci): run CI workflows periodically
commit f447cc2e73ea707c2f4694507e9c7847fcff29e9+ 1634322442 -----sp :: refactor(git): use a better error message for invalid repo path
commit 90a87c58741b3cdeee87a3c162cd10ddef59adaf+ 1634667177 -----sp :: docs(readme): add GitLab CI/CD section to README.md (#24)
commit 2925340368da5c74104f7c9befa47ee27f49c02d+ 1634667438 -----sp :: docs(readme): update GitLab CI/CD section
commit 10771f43c0f252dec9ad414b780bb22d866d00e2+ 1634669136 -----sp :: fix(changelog): add support for special characters in scopes (#26)

hunks: 
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 5dccfd5..def1a91 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -7,6 +7,8 @@
   pull_request:
     branches:
       - main
+  schedule:
+    - cron: "0 0 * * 0"
 
 jobs:
   check:
diff --git a/.github/workflows/docker.yml b/.github/workflows/docker.yml
index dc0e535..49909aa 100644
--- a/.github/workflows/docker.yml
+++ b/.github/workflows/docker.yml
@@ -9,6 +9,8 @@
   pull_request:
     branches:
       - main
+  schedule:
+    - cron: "0 0 * * 0"
 
 jobs:
   docker:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 83a918a..c5b2866 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,43 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.4.0] - 2021-10-01
+
+### Bug Fixes
+
+- Update lychee arguments to skip checking files
+- Remove tags from the base image names
+- Remove only the leading "v" from tags (#18)
+
+### Documentation
+
+- Add scope-sorted example (#16)
+- Add raw/rendered output for scoped-sorted example
+- Add packaging status badge to installation section
+- Mention the signing key for binary releases (#17)
+- Add "build from source" section to README.md
+
+### Features
+
+- Add `--sort` argument for sorting commits (#15)
+
+### Miscellaneous Tasks
+
+- Set a version for the checkout action
+- Update the runner to ubuntu-20.04
+- Use cache for docker builds
+- Use docker meta for tagging for GHCR
+- Extend the tags for docker meta
+- Rename the GHCR package due to legacy reasons
+- Specify the latest tag explicitly
+- Use explicit image name for docker automated builds
+- Use docker.yml workflow for CI/CD
+- Upgrade dependencies
+
+### Styling
+
+- Fix the newline issues in scoped-sorted example
+
 ## [0.3.0] - 2021-09-10
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 4fb94bd..60aa61b 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -327,7 +327,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.3.0"
+version = "0.4.0"
 dependencies = [
  "dirs-next",
  "git-cliff-core",
@@ -339,7 +339,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.3.0"
+version = "0.4.0"
 dependencies = [
  "config",
  "git-conventional",
@@ -358,9 +358,9 @@
 
 [[package]]
 name = "git-conventional"
-version = "0.10.2"
+version = "0.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cc574c897f85ed0a16517cb9318409cd4f8213475c25ffd413bedb2c4d917def"
+checksum = "b6fba08a8b40d1967e1396a2b42680af39da750a6e28476f48b5ca4033f15f27"
 dependencies = [
  "doc-comment",
  "nom 7.0.0",
@@ -726,9 +726,9 @@
 
 [[package]]
 name = "pretty_assertions"
-version = "0.7.2"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1cab0e7c02cf376875e9335e0ba1da535775beb5450d21e1dffca068818ed98b"
+checksum = "ec0cfe1b2403f172ba0f234e500906ee0a3e493fb81092dac23ebefe129301cc"
 dependencies = [
  "ansi_term 0.12.1",
  "ctor",
diff --git a/README.md b/README.md
index 6e4b2ee..4caf4a8 100644
--- a/README.md
+++ b/README.md
@@ -50,6 +50,7 @@
   - [Examples](#examples)
 - [Docker](#docker)
 - [GitHub Action](#github-action)
+- [GitLab CI/CD](#gitlab-cicd)
 - [Configuration File](#configuration-file)
   - [changelog](#changelog)
     - [header](#header)
@@ -273,6 +274,30 @@
 
 Also, see the [continuous deployment workflow](./.github/workflows/cd.yml) of this project which sets the release notes for GitHub releases using this action.
 
+## GitLab CI/CD
+
+It is possible to generate changelogs using [GitLab CI/CD](https://docs.gitlab.com/ee/ci/).
+
+This minimal example creates artifacts that can be used on another job.
+
+```yml
+- changelog:
+    image:
+      name: orhunp/git-cliff:latest
+      entrypoint: [""]
+    variables:
+      GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
+      GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needs
+    stage: doc
+    script:
+      - git-cliff -r . > CHANGELOG.md
+    artifacts:
+      paths:
+        - CHANGELOG.md
+```
+
+Please note that the stage is `doc` and has to be changed accordingly to your need. 
+
 ## Configuration File
 
 **git-cliff** configuration file supports [TOML](https://github.com/toml-lang/toml) (preferred) and [YAML](https://yaml.org) formats.
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 34db175..eb69517 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.3.0" # managed by release.sh
+version = "0.4.0" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -29,7 +29,7 @@
 features = ["toml", "yaml"]
 
 [dependencies.git-conventional]
-version = "0.10.2"
+version = "0.11.0"
 features = ["serde"]
 
 [dependencies.rust-embed]
@@ -37,4 +37,4 @@
 features = ["debug-embed"]
 
 [dev-dependencies]
-pretty_assertions = "0.7"
+pretty_assertions = "1.0.0"
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index 334770b..b29e68f 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -28,7 +28,7 @@
 		} else {
 			Err(Error::IoError(io::Error::new(
 				io::ErrorKind::NotFound,
-				"path not found",
+				"repository path not found",
 			)))
 		}
 	}
diff --git a/git-cliff-core/tests/integration_test.rs b/git-cliff-core/tests/integration_test.rs
index ac8a022..7c5253a 100644
--- a/git-cliff-core/tests/integration_test.rs
+++ b/git-cliff-core/tests/integration_test.rs
@@ -19,10 +19,18 @@
 			r#"
         ## Release {{ version }}
         {% for group, commits in commits | group_by(attribute="group") %}
-        ### {{ group }}
+        ### {{ group }}    
         {% for commit in commits %}
-        - {{ commit.message }}{% endfor %}
-        {% endfor %}"#,
+        {%- if commit.scope -%}
+        - *({{commit.scope}})* {{ commit.message }}    
+        {% else -%}
+        - {{ commit.message }}    
+        {% endif -%}
+        {% if commit.breaking -%}
+        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
+        {% endif -%}
+        {% endfor -%}
+{% endfor %}"#,
 		),
 		footer: Some(String::from("eoc - end of changelog")),
 		trim:   None,
@@ -56,7 +64,15 @@
 			commits:   vec![
 				Commit::new(String::from("abc123"), String::from("feat: add xyz")),
 				Commit::new(String::from("abc124"), String::from("feat: add zyx")),
+				Commit::new(
+					String::from("abc124"),
+					String::from("feat(random-scope): add random feature"),
+				),
 				Commit::new(String::from("def789"), String::from("invalid commit")),
+				Commit::new(
+					String::from("def789"),
+					String::from("feat(big-feature)!: this is a breaking change"),
+				),
 				Commit::new(String::from("qwerty"), String::from("fix: fix abc")),
 				Commit::new(
 					String::from("qwop"),
@@ -121,29 +137,27 @@
 
         ## Release v2.0.0
         
-        ### fix bugs
+        ### fix bugs    
+        - fix abc    
         
-        - fix abc
-        
-        ### shiny features
-        
-        - add xyz
-        - add zyx
+        ### shiny features    
+        - add xyz    
+        - add zyx    
+        - *(random-scope)* add random feature    
+        - *(big-feature)* this is a breaking change    
+          - **BREAKING**: this is a breaking change
         
         ## Release v1.0.0
         
-        ### chore
+        ### chore    
+        - do nothing    
         
-        - do nothing
+        ### feat    
+        - add cool features    
         
-        ### feat
-        
-        - add cool features
-        
-        ### fix
-        
-        - fix stuff
-        - fix more stuff
+        ### fix    
+        - fix stuff    
+        - fix more stuff    
         eoc - end of changelog\n",
 		out
 	);
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index e8eadb5..fd10df6 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.3.0" # managed by release.sh
+version = "0.4.0" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -22,7 +22,7 @@
 dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.3.0" # managed by release.sh
+version = "0.4.0" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
@@ -31,4 +31,4 @@
 features = ["suggestions", "color", "wrap_help"]
 
 [dev-dependencies]
-pretty_assertions = "0.7"
+pretty_assertions = "1.0.0"

=====================================================================
start time: Fri Sep 10 00:00:00 CST 2021
end time: Fri Oct 01 00:00:00 CST 2021
description: 
### Bug Fixes
- Update lychee arguments to skip checking files
- Remove tags from the base image names
- Remove only the leading "v" from tags (#18)
### Documentation
- Add scope-sorted example (#16)
- Add raw/rendered output for scoped-sorted example
- Add packaging status badge to installation section
- Mention the signing key for binary releases (#17)
- Add "build from source" section to README.md
### Features
- Add `--sort` argument for sorting commits (#15)
### Miscellaneous Tasks
- Set a version for the checkout action
- Update the runner to ubuntu-20.04
- Use cache for docker builds
- Use docker meta for tagging for GHCR
- Extend the tags for docker meta
- Rename the GHCR package due to legacy reasons
- Specify the latest tag explicitly
- Use explicit image name for docker automated builds
- Use docker.yml workflow for CI/CD
- Upgrade dependencies
### Styling
- Fix the newline issues in scoped-sorted example

commit message: 
commit 39dd563f5758615784e223a20f3ac7990631c67e+ 1631299995 -----sp :: chore(deps): upgrade dependencies
commit 7f8e252560d80000a62a05e11f6f17ebd3e9c979 1631300050 -----sp :: chore(release): prepare for v0.3.0
commit ba3f1cac50338672c555581659e098e11796f466+ 1631302041 -----sp :: fix(ci): update lychee arguments to skip checking files
commit 05584b614aa593558674243cfbf14dafe7b6b8db+ 1632230259 -----sp :: docs(config): Add scope-sorted example (#16)
commit 428d407df581dd00e26b320c3872eb21cfc8c803+ 1632231517 -----sp :: style(config): fix the newline issues in scoped-sorted example
commit f64459dd9f6030697e51903f91136fa857332425+ 1632231647 -----sp :: docs(readme): add raw/rendered output for scoped-sorted example
commit 5409e06e4cf3b6833ba3a9b1eb224014280069dd+ 1632231798 -----sp :: docs(readme): add packaging status badge to installation section
commit 9022af533d3d967a09352a1bdf542f8ba97e9930+ 1632259944 -----sp :: docs(readme): mention the signing key for binary releases (#17)
commit b323e60996595976fbe8261b5f8c4a9f67d2a8f8+ 1632594982 -----sp :: chore(workflow): set a version for the checkout action
commit 5069594f1800e409665609224995b25dcb9df438+ 1632595404 -----sp :: chore(workflow): update the runner to ubuntu-20.04
commit d3140ed9882b6df8c07196c8f68bae67ab8da684+ 1632596448 -----sp :: chore(docker): use cache for docker builds
commit 081b2d257ba853c1d31d35ebfeae1cb92a641746+ 1632600400 -----sp :: chore(docker): use docker meta for tagging for GHCR
commit ece0481e73e63371dab87ec6a71da59999db7d47+ 1632600563 -----sp :: fix(docker): remove tags from the base image names
commit dff2e62edc3886346375a2451faabe5e8cf679f9+ 1632601081 -----sp :: chore(docker): extend the tags for docker meta
commit 71b88466ebd37b2bf5f0489afed117417ad20b24+ 1632601108 -----sp :: chore(docker): rename the GHCR package due to legacy reasons
commit 6bafc5d1a124dea5423338afd75a5136944bebb5+ 1632601341 -----sp :: chore(docker): specify the latest tag explicitly
commit e444615c02749da5fc64ae3286bfde1b616e7271+ 1632780605 -----sp :: fix(config): remove only the leading "v" from tags (#18)
commit b193f42e258e8fdee8b1b645d5a614d606f7e079+ 1632781629 -----sp :: docs(readme): add "build from source" section to README.md
commit 777375f67703b2833509700273cb0bec9a659525+ 1632855725 -----sp :: chore(docker): use explicit image name for docker automated builds
commit 2950a412c2aaa0d96609753129047cef39fd3e1c+ 1632859085 -----sp :: feat(changelog): add `--sort` argument for sorting commits (#15)

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 342587d..59034dd 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -8,12 +8,12 @@
 jobs:
   generate-changelog:
     name: Generate changelog
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     outputs:
       release_body: ${{ steps.release.outputs.release_body }}
     steps:
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
         with:
           fetch-depth: 0
       - name: Generate a changelog
@@ -44,11 +44,11 @@
         build: [linux-gnu, linux-musl, win-gnu, win-msvc, win32-msvc, macos]
         include:
           - BUILD: linux-gnu
-            OS: ubuntu-18.04
+            OS: ubuntu-20.04
             TOOLCHAIN: stable
             TARGET: x86_64-unknown-linux-gnu
           - BUILD: linux-musl
-            OS: ubuntu-18.04
+            OS: ubuntu-20.04
             TOOLCHAIN: stable
             TARGET: x86_64-unknown-linux-musl
           - BUILD: win-gnu
@@ -69,7 +69,7 @@
             TARGET: x86_64-apple-darwin
     steps:
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Set the release version
         shell: bash
         run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
@@ -112,7 +112,7 @@
               > git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz.sha512
           fi
       - name: Sign the release
-        if: matrix.OS == 'ubuntu-18.04' || matrix.OS == 'macos-10.15'
+        if: matrix.OS == 'ubuntu-20.04' || matrix.OS == 'macos-10.15'
         run: |
           echo "${{ secrets.GPG_RELEASE_KEY }}" | base64 --decode > private.key
           echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
@@ -134,10 +134,10 @@
   publish-docker:
     name: Publish the Docker image
     needs: publish-github
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Set the release version
         run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
       - name: Build
@@ -160,10 +160,10 @@
   publish-crates-io:
     name: Publish on crates.io
     needs: publish-github
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Set the release version
         run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
       - name: Prepare for the crates.io release
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 46edbe5..5dccfd5 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -11,7 +11,7 @@
 jobs:
   check:
     name: Check
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Install toolchain
         uses: actions-rs/toolchain@v1
@@ -20,7 +20,7 @@
           profile: minimal
           override: true
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Check
         uses: actions-rs/cargo@v1
         with:
@@ -29,7 +29,7 @@
 
   test:
     name: Test suite
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Install toolchain
         uses: actions-rs/toolchain@v1
@@ -38,7 +38,7 @@
           toolchain: nightly
           override: true
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
         with:
           fetch-depth: 0
       - name: Run tests
@@ -54,7 +54,7 @@
 
   clippy:
     name: Lints
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Install toolchain
         uses: actions-rs/toolchain@v1
@@ -64,7 +64,7 @@
           components: clippy
           override: true
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Check the lints
         uses: actions-rs/cargo@v1
         with:
@@ -73,7 +73,7 @@
 
   rustfmt:
     name: Formatting
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Install toolchain
         uses: actions-rs/toolchain@v1
@@ -83,7 +83,7 @@
           components: rustfmt
           override: true
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Check the formatting
         uses: actions-rs/cargo@v1
         with:
@@ -92,13 +92,13 @@
 
   lychee:
     name: Links
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - name: Checkout
-        uses: actions/checkout@main
+        uses: actions/checkout@v2
       - name: Check the links
         uses: lycheeverse/lychee-action@v1
         with:
-          args: --exclude "%7Busername%7D" -v *.md
+          args: --exclude "%7Busername%7D|file:///" -v *.md
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/.github/workflows/docker.yml b/.github/workflows/docker.yml
index 28c09af..f1b404e 100644
--- a/.github/workflows/docker.yml
+++ b/.github/workflows/docker.yml
@@ -4,27 +4,71 @@
   push:
     branches:
       - main
+  pull_request:
+    branches:
+      - main
 
 jobs:
   docker:
-    name: Docker
-    runs-on: ubuntu-18.04
+    name: Docker Build and Push
+    runs-on: ubuntu-20.04
     steps:
       - name: Checkout
-        uses: actions/checkout@main
-      - name: Build
-        run: docker build -t git-cliff .
-      - name: Tag
-        run: |
-          docker tag git-cliff orhunp/git-cliff:latest
-          docker tag git-cliff docker.pkg.github.com/orhun/git-cliff/git-cliff:latest
-      - name: Login (Docker Hub)
-        run: echo ${{ secrets.DOCKERHUB_PASS }} |
-          docker login -u orhunp --password-stdin
-      - name: Push (Docker Hub)
-        run: docker push orhunp/git-cliff:latest
-      - name: Login (Package Registry)
-        run: echo ${{ secrets.GITHUB_TOKEN }} |
-          docker login -u orhun docker.pkg.github.com --password-stdin
-      - name: Push (Package Registry)
-        run: docker push docker.pkg.github.com/orhun/git-cliff/git-cliff:latest
+        uses: actions/checkout@v2
+
+      - name: Docker meta
+        id: meta
+        uses: docker/metadata-action@v3
+        with:
+          images: |
+            orhunp/git-cliff
+            ghcr.io/${{ github.repository_owner }}/git-cliff/git-cliff
+          tags: |
+            type=schedule
+            type=ref,event=branch
+            type=ref,event=pr
+            type=sha
+            type=raw,value=latest
+
+      - name: Set up Docker Buildx
+        id: buildx
+        uses: docker/setup-buildx-action@v1
+
+      - name: Cache Docker layers
+        uses: actions/cache@v2
+        with:
+          path: /tmp/.buildx-cache
+          key: ${{ runner.os }}-buildx-${{ github.sha }}
+          restore-keys: |
+            ${{ runner.os }}-buildx-
+
+      - name: Login to Docker Hub
+        if: github.event_name != 'pull_request'
+        uses: docker/login-action@v1
+        with:
+          username: ${{ secrets.DOCKER_HUB_USERNAME }}
+          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
+
+      - name: Login to GHCR
+        if: github.event_name != 'pull_request'
+        uses: docker/login-action@v1
+        with:
+          registry: ghcr.io
+          username: ${{ github.repository_owner }}
+          password: ${{ secrets.GITHUB_TOKEN }}
+
+      - name: Build and push
+        id: docker_build
+        uses: docker/build-push-action@v2
+        with:
+          context: ./
+          file: ./Dockerfile
+          builder: ${{ steps.buildx.outputs.name }}
+          push: ${{ github.event_name != 'pull_request' }}
+          tags: ${{ steps.meta.outputs.tags }}
+          labels: ${{ steps.meta.outputs.labels }}
+          cache-from: type=local,src=/tmp/.buildx-cache
+          cache-to: type=local,dest=/tmp/.buildx-cache
+
+      - name: Image digest
+        run: echo ${{ steps.docker_build.outputs.digest }}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index eedcb55..83a918a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,28 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.3.0] - 2021-09-10
+
+### Bug Fixes
+
+- Fix default regexes and references in docs (#7)
+
+### Documentation
+
+- Update installation instructions for Arch Linux
+- Add badge for joining the Matrix chat
+- Update example regexes
+- Update the default regex in scoped config example
+
+### Features
+
+- Support parsing the missing scopes with `default_scope` (#8)
+- Support generating a changelog scoped to a directory (#11)
+
+### Miscellaneous Tasks
+
+- Upgrade dependencies
+
 ## [0.2.6] - 2021-09-04
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 0552957..4fb94bd 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -327,7 +327,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.2.6"
+version = "0.3.0"
 dependencies = [
  "dirs-next",
  "git-cliff-core",
@@ -339,7 +339,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.2.6"
+version = "0.3.0"
 dependencies = [
  "config",
  "git-conventional",
diff --git a/README.md b/README.md
index d7b38d8..6e4b2ee 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,8 @@
 - [Installation](#installation)
   - [From crates.io](#from-cratesio)
   - [Using pacman](#using-pacman)
-  - [Binary Releases](#binary-releases)
+  - [Binary releases](#binary-releases)
+  - [Build from source](#build-from-source)
 - [Usage](#usage)
   - [Command Line Arguments](#command-line-arguments)
   - [Examples](#examples)
@@ -71,6 +72,7 @@
     - [Basic](#basic)
     - [Detailed](#detailed)
     - [Scoped](#scoped)
+    - [Scoped (Sorted)](#scoped-sorted)
     - [Keep a Changelog](#keep-a-changelog)
 - [Similar Projects](#similar-projects)
 - [License](#license)
@@ -80,6 +82,13 @@
 
 ## Installation
 
+<details>
+  <summary>Packaging status</summary>
+
+[![Packaging status](https://repology.org/badge/vertical-allrepos/git-cliff.svg)](https://repology.org/project/git-cliff/versions)
+
+</details>
+
 ### From crates.io
 
 [git-cliff](crates.io/crates/git-cliff) can be installed from crates.io:
@@ -96,10 +105,21 @@
 pacman -S git-cliff
 ```
 
-### Binary Releases
+### Binary releases
 
 See the available binaries for different operating systems/architectures from the [releases page](https://github.com/orhun/git-cliff/releases).
 
+\* Release tarballs are signed with the following PGP key: [1D2D410A741137EBC544826F4A92FA17B6619297](https://keyserver.ubuntu.com/pks/lookup?search=0x4A92FA17B6619297&op=vindex)
+
+### Build from source
+
+* Linux dependencies: [zlib](https://zlib.net/)
+
+```sh
+# binary will be located at `target/release/git-cliff`
+CARGO_TARGET_DIR=target cargo build --release
+```
+
 ## Usage
 
 ### Command Line Arguments
@@ -131,6 +151,7 @@
 -t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
 -b, --body <TEMPLATE>      Sets the template for the changelog body [env: TEMPLATE=]
 -s, --strip <PART>         Strips the given parts from the changelog [possible values: header, footer, all]
+    --sort <sort>          Sets sorting of the commits inside sections [default: oldest] [possible values: oldest, newest]
 ```
 
 **Args:**
@@ -185,6 +206,17 @@
 git cliff --commit-path project1/
 ```
 
+Sort the commits inside sections:
+
+```sh
+# The oldest commit will be on top.
+# (default)
+git cliff --sort oldest
+
+# The newest commit will be on top.
+git cliff --sort newest
+```
+
 Save the changelog file to the specified file:
 
 ```sh
@@ -795,6 +827,96 @@
 
 </details>
 
+#### [Scoped (Sorted)](./examples/scopesorted.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- *(cache)* Use cache while fetching pages
+- *(config)* Support multiple file formats
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- *(release)* Add release script
+
+### Refactor
+
+- *(parser)* Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- *(args)* Rename help argument due to conflict
+
+### Documentation
+
+- *(example)* Add tested usage example
+  - **BREAKING**: add tested usage example
+- *(project)* Add README.md
+
+### Features
+
+- *(parser)* Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- *(cache)* Use cache while fetching pages
+- *(config)* Support multiple file formats
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- *(release)* Add release script
+
+### Refactor
+
+- *(parser)* Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- *(args)* Rename help argument due to conflict
+
+### Documentation
+
+- *(example)* Add tested usage example
+  - **BREAKING**: add tested usage example
+- *(project)* Add README.md
+
+### Features
+
+- *(parser)* Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+
+</details>
+
 #### [Keep a Changelog](./examples/keepachangelog.toml)
 
 <details>
diff --git a/config/cliff.toml b/config/cliff.toml
index f9897e0..9652135 100644
--- a/config/cliff.toml
+++ b/config/cliff.toml
@@ -10,7 +10,7 @@
 # https://tera.netlify.app/docs/#introduction
 body = """
 {% if version %}\
-    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
 {% else %}\
     ## [unreleased]
 {% endif %}\
diff --git a/examples/detailed.toml b/examples/detailed.toml
index dfa82d0..52974b9 100644
--- a/examples/detailed.toml
+++ b/examples/detailed.toml
@@ -10,7 +10,7 @@
 # https://tera.netlify.app/docs/#introduction
 body = """
 {% if version %}\
-    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
 {% else %}\
     ## [unreleased]
 {% endif %}\
diff --git a/examples/keepachangelog.toml b/examples/keepachangelog.toml
index 9a7bd7f..f7f5b33 100644
--- a/examples/keepachangelog.toml
+++ b/examples/keepachangelog.toml
@@ -13,7 +13,7 @@
 # https://tera.netlify.app/docs/#introduction
 body = """
 {% if version %}\
-    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
 {% else %}\
     ## [unreleased]
 {% endif %}\
diff --git a/examples/scoped.toml b/examples/scoped.toml
index 8e57617..0a713a4 100644
--- a/examples/scoped.toml
+++ b/examples/scoped.toml
@@ -10,7 +10,7 @@
 # https://tera.netlify.app/docs/#introduction
 body = """
 {% if version %}\
-    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
 {% else %}\
     ## [unreleased]
 {% endif %}\
diff --git a/examples/scopesorted.toml b/examples/scopesorted.toml
new file mode 100644
index 0000000..d17db1c
--- /dev/null
+++ b/examples/scopesorted.toml
@@ -0,0 +1,68 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits
+    | filter(attribute="scope")
+    | sort(attribute="scope") %}
+        - *({{commit.scope}})* {{ commit.message | upper_first }}
+        {%- if commit.breaking %}
+        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
+        {%- endif -%}
+    {%- endfor -%}
+    {%- for commit in commits %}
+        {%- if commit.scope -%}
+        {% else -%}
+            - *(No Category)* {{ commit.message | upper_first }}
+            {% if commit.breaking -%}
+            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
+            {% endif -%}
+        {% endif -%}
+    {% endfor -%}
+    {% raw %}\n{% endraw %}\
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# allow only conventional commits
+# https://www.conventionalcommits.org
+conventional_commits = true
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
+    { body = ".*security", group = "Security"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = false
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 6df97e9..34db175 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.2.6" # managed by release.sh
+version = "0.3.0" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 2b1e8b9..e8eadb5 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.2.6" # managed by release.sh
+version = "0.3.0" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -22,7 +22,7 @@
 dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.2.6" # managed by release.sh
+version = "0.3.0" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 8ef1d95..62c0070 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -77,4 +77,12 @@
 	/// Sets the commit range to process.
 	#[structopt(value_name = "RANGE")]
 	pub range:       Option<String>,
+
+	/// Sets sorting of the commits inside sections.
+	#[structopt(
+		long,
+		possible_values = &["oldest", "newest"],
+		default_value = "oldest"
+	)]
+	pub sort: String,
 }
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index 0a17e80..84420aa 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -145,7 +145,11 @@
 	for git_commit in commits.into_iter().rev() {
 		let commit = Commit::from(&git_commit);
 		let commit_id = commit.id.to_string();
-		releases[release_index].commits.push(commit);
+		if args.sort == "newest" {
+			releases[release_index].commits.insert(0, commit);
+		} else {
+			releases[release_index].commits.push(commit);
+		}
 		if let Some(tag) = tags.get(&commit_id) {
 			releases[release_index].version = Some(tag.to_string());
 			releases[release_index].commit_id = Some(commit_id);

=====================================================================
start time: Sat Sep 04 00:00:00 CST 2021
end time: Fri Sep 10 00:00:00 CST 2021
description: 
### Bug Fixes
- Fix default regexes and references in docs (#7)
### Documentation
- Update installation instructions for Arch Linux
- Add badge for joining the Matrix chat
- Update example regexes
- Update the default regex in scoped config example
### Features
- Support parsing the missing scopes with `default_scope` (#8)
- Support generating a changelog scoped to a directory (#11)
### Miscellaneous Tasks
- Upgrade dependencies

commit message: 
commit 72cee9caa632498c55a7c5f1aac2657fbb445b90+ 1630755130 -----sp :: chore(deps): bump `git-conventional` to `0.10.1` (fixes #6)
commit d0e1a84bd86f5225dc8bfa1ef6de39bde8427851+ 1630756610 -----sp :: chore(deps): bump dependencies
commit af1851c0111d66ec3dd190baf7a456bcf44fdcdc+ 1630764966 -----sp :: fix(docker): pin the cargo-chef version in Dockerfile
commit 4398828df7b3710550adee8ec09a34a59783265b+ 1630765236 -----sp :: docs(readme): update docker commands to only mount the .git directory
commit 612192b3aa638be9ccd38ecda27bdee6b6ff6655+ 1630773994 -----sp :: chore(docker): bump cargo-chef version in Dockerfile
commit 4590c51cd86b9c123d5b16a8205d469556ec4eba 1630774858 -----sp :: chore(release): prepare for v0.2.6
commit 8fb18b784808222fdf3c4328ac9c871b93524fee+ 1630777204 -----sp :: docs(readme): update installation instructions for Arch Linux
commit b5df656e61035f6230f2613f3dba6a92f88708cd+ 1630963388 -----sp :: feat(changelog): support parsing the missing scopes with `default_scope` (#8)
commit b5edfc279d0290fecaacab469ecccdadf63eb3ab+ 1631100045 -----sp :: docs(readme): add badge for joining the Matrix chat
commit 8a18e4d48debbe522cefa9acd662bcc9a825c74e+ 1631126429 -----sp :: fix(config): fix default regexes and references in docs (#7)
commit f420a5ac6cf56f3167cac23d40b43ec9aa370005+ 1631127482 -----sp :: docs(readme): update example regexes
commit 0d793ad9db43f0290ff6286f6aa1a618feb714ea+ 1631127509 -----sp :: docs(config): update the default regex in scoped config example
commit 0bb7c910b45436cbf69b444ccb29a530ede4aea0+ 1631136865 -----sp :: feat(changelog): support generating a changelog scoped to a directory (#11)

hunks: 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0609561..eedcb55 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,22 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.2.6] - 2021-09-04
+
+### Bug Fixes
+
+- Pin the cargo-chef version in Dockerfile
+
+### Documentation
+
+- Update docker commands to only mount the .git directory
+
+### Miscellaneous Tasks
+
+- Bump `git-conventional` to `0.10.1` (fixes #6)
+- Bump dependencies
+- Bump cargo-chef version in Dockerfile
+
 ## [0.2.5] - 2021-08-20
 
 ### Documentation
diff --git a/Cargo.lock b/Cargo.lock
index 727d345..5390b4c 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -327,7 +327,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.2.5"
+version = "0.2.6"
 dependencies = [
  "dirs-next",
  "git-cliff-core",
@@ -339,7 +339,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.2.5"
+version = "0.2.6"
 dependencies = [
  "config",
  "git-conventional",
@@ -872,9 +872,9 @@
 
 [[package]]
 name = "rust-embed"
-version = "6.0.0"
+version = "6.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3203eb498314cbc2c6671278c8da3c64a16476d79ad1442bc13e8629706f24f7"
+checksum = "1be44a6694859b7cfc955699935944a6844aa9fe416aeda5d40829e3e38dfee6"
 dependencies = [
  "rust-embed-impl",
  "rust-embed-utils",
@@ -883,9 +883,9 @@
 
 [[package]]
 name = "rust-embed-impl"
-version = "6.0.0"
+version = "6.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1c03c7b7b780fdafde5055576641fd6b4d38095e3399cd0588552639aeff432"
+checksum = "f567ca01565c50c67b29e535f5f67b8ea8aeadaeed16a88f10792ab57438b957"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -896,9 +896,9 @@
 
 [[package]]
 name = "rust-embed-utils"
-version = "6.0.0"
+version = "7.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b5f2909061b856ce587f2496fc149a71d576cb2e0842c79f0dc82741622c6d0"
+checksum = "6116e7ab9ea963f60f2f20291d8fcf6c7273192cdd7273b3c80729a9605c97b2"
 dependencies = [
  "sha2",
  "walkdir",
@@ -921,18 +921,18 @@
 
 [[package]]
 name = "serde"
-version = "1.0.127"
+version = "1.0.130"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f03b9878abf6d14e6779d3f24f07b2cfa90352cfec4acc5aab8f1ac7f146fae8"
+checksum = "f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.127"
+version = "1.0.130"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a024926d3432516606328597e0f224a51355a493b49fdd67e9209187cbe55ecc"
+checksum = "d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1008,9 +1008,9 @@
 
 [[package]]
 name = "structopt"
-version = "0.3.22"
+version = "0.3.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "69b041cdcb67226aca307e6e7be44c8806423d83e018bd662360a93dabce4d71"
+checksum = "bf9d950ef167e25e0bdb073cf1d68e9ad2795ac826f2f3f59647817cf23c0bfa"
 dependencies = [
  "clap",
  "lazy_static",
@@ -1019,9 +1019,9 @@
 
 [[package]]
 name = "structopt-derive"
-version = "0.4.15"
+version = "0.4.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7813934aecf5f51a54775e00068c237de98489463968231a51746bbbc03f9c10"
+checksum = "134d838a2c9943ac3125cf6df165eda53493451b719f3255b2a26b85f772d0ba"
 dependencies = [
  "heck",
  "proc-macro-error",
@@ -1094,18 +1094,18 @@
 
 [[package]]
 name = "thiserror"
-version = "1.0.26"
+version = "1.0.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "93119e4feac1cbe6c798c34d3a53ea0026b0b1de6a120deef895137c0529bfe2"
+checksum = "283d5230e63df9608ac7d9691adc1dfb6e701225436eb64d0b9a7f0a5a04f6ec"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.26"
+version = "1.0.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "060d69a0afe7796bf42e9e2ff91f5ee691fb15c53d38b4b62a9a53eb23164745"
+checksum = "fa3884228611f5cd3608e2d409bf7dce832e4eb3135e3f11addbd7e41bd68e71"
 dependencies = [
  "proc-macro2",
  "quote",
diff --git a/Dockerfile b/Dockerfile
index 9fa2699..2ae7d54 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,9 +1,9 @@
-FROM lukemathwalker/cargo-chef as planner
+FROM lukemathwalker/cargo-chef:0.1.31-rust-1.54-slim-buster as planner
 WORKDIR app
 COPY . .
 RUN cargo chef prepare --recipe-path recipe.json
 
-FROM lukemathwalker/cargo-chef as cacher
+FROM lukemathwalker/cargo-chef:0.1.31-rust-1.54-slim-buster as cacher
 WORKDIR app
 COPY --from=planner /app/recipe.json recipe.json
 RUN cargo chef cook --release --recipe-path recipe.json
diff --git a/README.md b/README.md
index 7134bb3..d7b38d8 100644
--- a/README.md
+++ b/README.md
@@ -24,6 +24,10 @@
     <a href="https://docs.rs/git-cliff-core/">
         <img src="https://img.shields.io/docsrs/git-cliff-core?style=flat&labelColor=1C2C2E&color=BEC5C9&logo=Rust&logoColor=BEC5C9E">
     </a>
+    <br>
+    <a href="https://matrix.to/#/#git-cliff:matrix.org">
+        <img src="https://img.shields.io/matrix/git-cliff:matrix.org?style=flat&labelColor=1C2C2E&color=BEC5C9&logo=matrix&logoColor=BEC5C9E&label=join%20matrix">
+    </a>
 </p>
 
 ## About
@@ -38,7 +42,7 @@
 - [About](#about)
 - [Installation](#installation)
   - [From crates.io](#from-cratesio)
-  - [From AUR](#from-aur)
+  - [Using pacman](#using-pacman)
   - [Binary Releases](#binary-releases)
 - [Usage](#usage)
   - [Command Line Arguments](#command-line-arguments)
@@ -84,12 +88,12 @@
 cargo install git-cliff
 ```
 
-### From AUR
+### Using pacman
 
-If you are using Arch Linux, [git-cliff](https://aur.archlinux.org/packages/git-cliff/) can be installed from the [AUR](https://aur.archlinux.org/) using an [AUR helper](https://wiki.archlinux.org/title/AUR_helpers):
+If you are using Arch Linux, **git-cliff** can be installed from the [community repository](https://archlinux.org/packages/community/x86_64/git-cliff/):
 
 ```sh
-paru -S git-cliff
+pacman -S git-cliff
 ```
 
 ### Binary Releases
@@ -120,7 +124,8 @@
 ```
 -c, --config <PATH>        Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
 -w, --workdir <PATH>       Sets the working directory [env: WORKDIR=]
--r, --repository <PATH>    Sets the repository to parse commits from [env: REPOSITORY=]
+-r, --repository <PATH>    Sets the git repository [env: REPOSITORY=]
+    --commit-path <PATH>   Sets the directory to parse commits from [env: COMMIT_PATH=]
 -p, --prepend <PATH>       Prepends entries to the given changelog file [env: PREPEND=]
 -o, --output <PATH>        Writes output to the given file [env: OUTPUT=]
 -t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
@@ -157,7 +162,7 @@
 git cliff --tag 1.0.0
 ```
 
-Create a changelog for a certain part of git history:
+Generate a changelog for a certain part of git history:
 
 ```sh
 # only takes the latest tag into account
@@ -174,6 +179,12 @@
 git cliff HEAD~2..
 ```
 
+Generate a changelog scoped to a specific directory (useful for monorepos):
+
+```sh
+git cliff --commit-path project1/
+```
+
 Save the changelog file to the specified file:
 
 ```sh
@@ -201,13 +212,13 @@
 The easiest way of running **git-cliff** (in the git root directory with [configuration file](#configuration-file) present) is to use the [available tags](https://hub.docker.com/repository/docker/orhunp/git-cliff/tags) from [Docker Hub](https://hub.docker.com/repository/docker/orhunp/git-cliff):
 
 ```sh
-docker run -t -v "$(pwd)":/app/ orhunp/git-cliff:latest
+docker run -t -v "$(pwd)/.git":/app/ orhunp/git-cliff:latest
 ```
 
 Or you can use the image from the [GitHub Package Registry](https://github.com/orhun/git-cliff/packages/841947):
 
 ```sh
-docker run -t -v "$(pwd)":/app/ docker.pkg.github.com/orhun/git-cliff/git-cliff:latest
+docker run -t -v "$(pwd)/.git":/app/ docker.pkg.github.com/orhun/git-cliff/git-cliff:latest
 ```
 
 Also, you can build the image yourself using `docker build -t git-cliff .` command.
@@ -289,13 +300,13 @@
 [git]
 conventional_commits = true
 commit_parsers = [
-    { message = "^feat*", group = "Features"},
-    { message = "^fix*", group = "Bug Fixes"},
-    { message = "^doc*", group = "Documentation"},
-    { message = "^perf*", group = "Performance"},
-    { message = "^refactor*", group = "Refactor"},
-    { message = "^style*", group = "Styling"},
-    { message = "^test*", group = "Testing"},
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
 ]
 filter_commits = false
 tag_pattern = "v[0-9]*"
@@ -326,14 +337,16 @@
 
 Examples:
 
-- `{ message = "^feat*", group = "Features"}`
+- `{ message = "^feat", group = "Features"}`
   - Group the commit as "Features" if the commit message (description) starts with "feat".
 - `{ body = ".*security", group = "Security"}`
   - Group the commit as "Security" if the commit body contains "security".
 - `{ message = ".*deprecated", body = ".*deprecated", group = "Deprecation"}`
   - Group the commit as "Deprecation" if the commit body and message contains "deprecated".
-- `{ message = "^revert*", skip = true}`
+- `{ message = "^revert", skip = true}`
   - Skip processing the commit if the commit message (description) starts with "revert".
+- `{ message = "^doc", group = "Documentation", default_scope = "other"},`
+  - If the commit starts with "doc", group the commit as "Documentation" and set the default scope to "other". (e.g. `docs: xyz` will be processed as `docs(other): xyz`)
 
 #### filter_commits
 
diff --git a/config/cliff.toml b/config/cliff.toml
index 4b86cd2..f9897e0 100644
--- a/config/cliff.toml
+++ b/config/cliff.toml
@@ -34,15 +34,15 @@
 conventional_commits = true
 # regex for parsing and grouping commits
 commit_parsers = [
-    { message = "^feat*", group = "Features"},
-    { message = "^fix*", group = "Bug Fixes"},
-    { message = "^doc*", group = "Documentation"},
-    { message = "^perf*", group = "Performance"},
-    { message = "^refactor*", group = "Refactor"},
-    { message = "^style*", group = "Styling"},
-    { message = "^test*", group = "Testing"},
-    { message = "^chore\\(release\\): prepare for*", skip = true},
-    { message = "^chore*", group = "Miscellaneous Tasks"},
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
     { body = ".*security", group = "Security"},
 ]
 # filter out the commits that are not matched by commit parsers
diff --git a/examples/detailed.toml b/examples/detailed.toml
index 0b43b79..dfa82d0 100644
--- a/examples/detailed.toml
+++ b/examples/detailed.toml
@@ -40,15 +40,15 @@
 conventional_commits = true
 # regex for parsing and grouping commits
 commit_parsers = [
-    { message = "^feat*", group = "Features"},
-    { message = "^fix*", group = "Bug Fixes"},
-    { message = "^doc*", group = "Documentation"},
-    { message = "^perf*", group = "Performance"},
-    { message = "^refactor*", group = "Refactor"},
-    { message = "^style*", group = "Styling"},
-    { message = "^test*", group = "Testing"},
-    { message = "^chore\\(release\\): prepare for*", skip = true},
-    { message = "^chore*", group = "Miscellaneous Tasks"},
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
     { body = ".*security", group = "Security"},
 ]
 # filter out the commits that are not matched by commit parsers
diff --git a/examples/keepachangelog.toml b/examples/keepachangelog.toml
index a215e4b..9a7bd7f 100644
--- a/examples/keepachangelog.toml
+++ b/examples/keepachangelog.toml
@@ -37,14 +37,14 @@
 conventional_commits = true
 # regex for parsing and grouping commits
 commit_parsers = [
-    { message = "^*: add*", group = "Added"},
-    { message = "^*: support*", group = "Added"},
-    { message = "^*: remove*", group = "Removed"},
-    { message = "^*: delete*", group = "Removed"},
-    { message = "^test*", group = "Fixed"},
-    { message = "^fix*", group = "Fixed"},
-    { message = "^*: fix*", group = "Fixed"},
-    { message = "^*", group = "Changed"},
+    { message = "^.*: add", group = "Added"},
+    { message = "^.*: support", group = "Added"},
+    { message = "^.*: remove", group = "Removed"},
+    { message = "^.*: delete", group = "Removed"},
+    { message = "^test", group = "Fixed"},
+    { message = "^fix", group = "Fixed"},
+    { message = "^.*: fix", group = "Fixed"},
+    { message = "^.*", group = "Changed"},
 ]
 # filter out the commits that are not matched by commit parsers
 filter_commits = true
diff --git a/examples/scoped.toml b/examples/scoped.toml
index 6635de9..8e57617 100644
--- a/examples/scoped.toml
+++ b/examples/scoped.toml
@@ -37,15 +37,15 @@
 conventional_commits = true
 # regex for parsing and grouping commits
 commit_parsers = [
-    { message = "^feat*", group = "Features"},
-    { message = "^fix*", group = "Bug Fixes"},
-    { message = "^doc*", group = "Documentation"},
-    { message = "^perf*", group = "Performance"},
-    { message = "^refactor*", group = "Refactor"},
-    { message = "^style*", group = "Styling"},
-    { message = "^test*", group = "Testing"},
-    { message = "^chore\\(release\\): prepare for*", skip = true},
-    { message = "^chore*", group = "Miscellaneous Tasks"},
+    { message = "^feat", group = "Features"},
+    { message = "^fix", group = "Bug Fixes"},
+    { message = "^doc", group = "Documentation", default_scope = "unscoped"},
+    { message = "^perf", group = "Performance"},
+    { message = "^refactor", group = "Refactor"},
+    { message = "^style", group = "Styling"},
+    { message = "^test", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for", skip = true},
+    { message = "^chore", group = "Miscellaneous Tasks"},
     { body = ".*security", group = "Security"},
 ]
 # filter out the commits that are not matched by commit parsers
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 6d2820f..52aac13 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.2.5" # managed by release.sh
+version = "0.2.6" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -10,9 +10,9 @@
 edition = "2018"
 
 [dependencies]
-thiserror = "1.0.26"
-serde = "1.0.27"
-serde_derive = "1.0.27"
+thiserror = "1.0.28"
+serde = "1.0.130"
+serde_derive = "1.0.130"
 tera = "1.12.1"
 regex = "1.5.4"
 serde_regex = "1.1.0"
@@ -33,7 +33,7 @@
 features = ["serde"]
 
 [dependencies.rust-embed]
-version = "6.0.0"
+version = "6.2.0"
 features = ["debug-embed"]
 
 [dev-dependencies]
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index 481297c..5a541ef 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -22,8 +22,10 @@
 	/// Conventional commit.
 	#[serde(skip_deserializing)]
 	pub conv:    Option<ConventionalCommit<'a>>,
-	/// Commit group based on a group parser or its conventional type.
+	/// Commit group based on a commit parser or its conventional type.
 	pub group:   Option<String>,
+	/// Commit scope based on conventional type or a commit parser.
+	pub scope:   Option<String>,
 }
 
 impl<'a> From<&GitCommit<'a>> for Commit<'a> {
@@ -43,6 +45,7 @@
 			message,
 			conv: None,
 			group: None,
+			scope: None,
 		}
 	}
 
@@ -61,8 +64,7 @@
 			commit = commit.into_conventional()?;
 		}
 		if let Some(parsers) = parsers {
-			commit =
-				commit.into_grouped(parsers, filter_commits.unwrap_or(false))?;
+			commit = commit.parse(parsers, filter_commits.unwrap_or(false))?;
 		}
 		Ok(commit)
 	}
@@ -80,12 +82,13 @@
 		}
 	}
 
-	/// Returns the commit with its group set.
-	pub fn into_grouped(
-		mut self,
-		parsers: &[CommitParser],
-		filter: bool,
-	) -> Result<Self> {
+	/// Parses the commit using [`CommitParser`]s.
+	///
+	/// Sets the [`group`] and [`scope`] of the commit.
+	///
+	/// [`group`]: Commit::group
+	/// [`scope`]: Commit::scope
+	pub fn parse(mut self, parsers: &[CommitParser], filter: bool) -> Result<Self> {
 		for parser in parsers {
 			for regex in vec![parser.message.as_ref(), parser.body.as_ref()]
 				.into_iter()
@@ -94,6 +97,7 @@
 				if regex.is_match(&self.message) {
 					if parser.skip != Some(true) {
 						self.group = parser.group.as_ref().cloned();
+						self.scope = parser.default_scope.as_ref().cloned();
 						return Ok(self);
 					} else {
 						return Err(AppError::GroupError(String::from(
@@ -142,7 +146,13 @@
 					&conv.breaking_description(),
 				)?;
 				commit.serialize_field("breaking", &conv.breaking())?;
-				commit.serialize_field("scope", &conv.scope())?;
+				commit.serialize_field(
+					"scope",
+					&conv
+						.scope()
+						.map(|v| v.as_str())
+						.or_else(|| self.scope.as_deref()),
+				)?;
 			}
 			None => {
 				commit.serialize_field("message", &self.message)?;
@@ -178,16 +188,18 @@
 		let commit = test_cases[0]
 			.0
 			.clone()
-			.into_grouped(
+			.parse(
 				&[CommitParser {
-					message: Regex::new("test*").ok(),
-					body:    None,
-					group:   Some(String::from("test_group")),
-					skip:    None,
+					message:       Regex::new("test*").ok(),
+					body:          None,
+					group:         Some(String::from("test_group")),
+					default_scope: Some(String::from("test_scope")),
+					skip:          None,
 				}],
 				false,
 			)
 			.unwrap();
 		assert_eq!(Some(String::from("test_group")), commit.group);
+		assert_eq!(Some(String::from("test_scope")), commit.scope);
 	}
 }
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index 095c474..983f9fe 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -41,18 +41,19 @@
 
 /// Parser for grouping commits.
 #[derive(Debug, Clone, serde_derive::Serialize, serde_derive::Deserialize)]
-#[serde(rename_all = "camelCase")]
 pub struct CommitParser {
 	/// Regex for matching the commit message.
 	#[serde(with = "serde_regex", default)]
-	pub message: Option<Regex>,
+	pub message:       Option<Regex>,
 	/// Regex for matching the commit body.
 	#[serde(with = "serde_regex", default)]
-	pub body:    Option<Regex>,
+	pub body:          Option<Regex>,
 	/// Group of the commit.
-	pub group:   Option<String>,
+	pub group:         Option<String>,
+	/// Scope of the commit.
+	pub default_scope: Option<String>,
 	/// Whether to skip this commit group.
-	pub skip:    Option<bool>,
+	pub skip:          Option<bool>,
 }
 
 impl Config {
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index 3529b5d..334770b 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -36,7 +36,11 @@
 	/// Parses and returns the commits.
 	///
 	/// Sorts the commits by their time.
-	pub fn commits(&self, range: Option<String>) -> Result<Vec<Commit>> {
+	pub fn commits(
+		&self,
+		range: Option<String>,
+		path: Option<String>,
+	) -> Result<Vec<Commit>> {
 		let mut revwalk = self.inner.revwalk()?;
 		revwalk.set_sorting(Sort::TIME | Sort::TOPOLOGICAL)?;
 		if let Some(range) = range {
@@ -44,10 +48,32 @@
 		} else {
 			revwalk.push_head()?;
 		}
-		Ok(revwalk
+		let mut commits: Vec<Commit> = revwalk
 			.filter_map(|id| id.ok())
 			.filter_map(|id| self.inner.find_commit(id).ok())
-			.collect())
+			.collect();
+		if let Some(commit_path) = path {
+			commits = commits
+				.into_iter()
+				.filter(|commit| {
+					if let Ok(prev_commit) = commit.parent(0) {
+						if let Ok(diff) = self.inner.diff_tree_to_tree(
+							commit.tree().ok().as_ref(),
+							prev_commit.tree().ok().as_ref(),
+							None,
+						) {
+							return diff.deltas().any(|delta| {
+								delta.new_file().path().map_or(false, |path| {
+									path.starts_with(&commit_path)
+								})
+							});
+						}
+					}
+					false
+				})
+				.collect()
+		}
+		Ok(commits)
 	}
 
 	/// Parses and returns a commit-tag map.
@@ -125,7 +151,7 @@
 				.unwrap()
 				.to_path_buf(),
 		)?;
-		let commits = repository.commits(None)?;
+		let commits = repository.commits(None, None)?;
 		let last_commit = AppCommit::from(&commits.first().unwrap().clone());
 		assert_eq!(get_last_commit_hash()?, last_commit.id);
 		if let Err(e) = last_commit.into_conventional() {
diff --git a/git-cliff-core/tests/integration_test.rs b/git-cliff-core/tests/integration_test.rs
index d226469..ac8a022 100644
--- a/git-cliff-core/tests/integration_test.rs
+++ b/git-cliff-core/tests/integration_test.rs
@@ -31,16 +31,18 @@
 		conventional_commits: true,
 		commit_parsers:       Some(vec![
 			CommitParser {
-				message: Regex::new("feat*").ok(),
-				body:    None,
-				group:   Some(String::from("shiny features")),
-				skip:    None,
+				message:       Regex::new("^feat").ok(),
+				body:          None,
+				group:         Some(String::from("shiny features")),
+				default_scope: None,
+				skip:          None,
 			},
 			CommitParser {
-				message: Regex::new("fix*").ok(),
-				body:    None,
-				group:   Some(String::from("fix bugs")),
-				skip:    None,
+				message:       Regex::new("^fix").ok(),
+				body:          None,
+				group:         Some(String::from("fix bugs")),
+				default_scope: None,
+				skip:          None,
 			},
 		]),
 		filter_commits:       Some(true),
@@ -57,6 +59,10 @@
 				Commit::new(String::from("def789"), String::from("invalid commit")),
 				Commit::new(String::from("qwerty"), String::from("fix: fix abc")),
 				Commit::new(
+					String::from("qwop"),
+					String::from("final: invalid commit"),
+				),
+				Commit::new(
 					String::from("hjkl12"),
 					String::from("chore: do boring stuff"),
 				),
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 0d0feb8..2b1e8b9 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.2.5" # managed by release.sh
+version = "0.2.6" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -22,11 +22,11 @@
 dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.2.5" # managed by release.sh
+version = "0.2.6" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
-version = "0.3.22"
+version = "0.3.23"
 default-features = false
 features = ["suggestions", "color", "wrap_help"]
 
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 902e4c2..8ef1d95 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -20,7 +20,7 @@
 pub struct Opt {
 	/// Increases the logging verbosity.
 	#[structopt(short, long, parse(from_occurrences), alias = "debug")]
-	pub verbose:    u8,
+	pub verbose:     u8,
 	/// Sets the configuration file.
 	#[structopt(
 		short,
@@ -29,22 +29,25 @@
 		value_name = "PATH",
 		default_value = DEFAULT_CONFIG,
 	)]
-	pub config:     PathBuf,
+	pub config:      PathBuf,
 	/// Sets the working directory.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub workdir:    Option<PathBuf>,
-	/// Sets the repository to parse commits from.
+	pub workdir:     Option<PathBuf>,
+	/// Sets the git repository.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub repository: Option<PathBuf>,
+	pub repository:  Option<PathBuf>,
+	/// Sets the directory to parse commits from.
+	#[structopt(long, env, value_name = "PATH")]
+	pub commit_path: Option<String>,
 	/// Prepends entries to the given changelog file.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub prepend:    Option<PathBuf>,
+	pub prepend:     Option<PathBuf>,
 	/// Writes output to the given file.
 	#[structopt(short, long, env, value_name = "PATH")]
-	pub output:     Option<PathBuf>,
+	pub output:      Option<PathBuf>,
 	/// Sets the tag for the latest version.
 	#[structopt(short, long, env, value_name = "TAG", allow_hyphen_values = true)]
-	pub tag:        Option<String>,
+	pub tag:         Option<String>,
 	/// Sets the template for the changelog body.
 	#[structopt(
 		short,
@@ -53,16 +56,16 @@
 		value_name = "TEMPLATE",
 		allow_hyphen_values = true
 	)]
-	pub body:       Option<String>,
+	pub body:        Option<String>,
 	/// Writes the default configuration file to cliff.toml
 	#[structopt(short, long)]
-	pub init:       bool,
+	pub init:        bool,
 	/// Processes the commits starting from the latest tag.
 	#[structopt(short, long)]
-	pub latest:     bool,
+	pub latest:      bool,
 	/// Processes the commits that do not belong to a tag.
 	#[structopt(short, long)]
-	pub unreleased: bool,
+	pub unreleased:  bool,
 	/// Strips the given parts from the changelog.
 	#[structopt(
 		short,
@@ -70,8 +73,8 @@
 		value_name = "PART",
 		possible_values = &["header", "footer", "all"]
 	)]
-	pub strip:      Option<String>,
+	pub strip:       Option<String>,
 	/// Sets the commit range to process.
 	#[structopt(value_name = "RANGE")]
-	pub range:      Option<String>,
+	pub range:       Option<String>,
 }
diff --git a/git-cliff/src/changelog.rs b/git-cliff/src/changelog.rs
index f0b46dc..489be4e 100644
--- a/git-cliff/src/changelog.rs
+++ b/git-cliff/src/changelog.rs
@@ -169,22 +169,25 @@
 				conventional_commits: true,
 				commit_parsers:       Some(vec![
 					CommitParser {
-						message: Regex::new("feat*").ok(),
-						body:    None,
-						group:   Some(String::from("New features")),
-						skip:    None,
+						message:       Regex::new("feat*").ok(),
+						body:          None,
+						group:         Some(String::from("New features")),
+						default_scope: Some(String::from("other")),
+						skip:          None,
 					},
 					CommitParser {
-						message: Regex::new("fix*").ok(),
-						body:    None,
-						group:   Some(String::from("Bug Fixes")),
-						skip:    None,
+						message:       Regex::new("fix*").ok(),
+						body:          None,
+						group:         Some(String::from("Bug Fixes")),
+						default_scope: None,
+						skip:          None,
 					},
 					CommitParser {
-						message: Regex::new(".*").ok(),
-						body:    None,
-						group:   Some(String::from("Other")),
-						skip:    None,
+						message:       Regex::new(".*").ok(),
+						body:          None,
+						group:         Some(String::from("Other")),
+						default_scope: None,
+						skip:          None,
 					},
 				]),
 				filter_commits:       Some(false),
@@ -200,6 +203,10 @@
 					String::from("feat(app): add cool features"),
 				),
 				Commit::new(
+					String::from("0bc123"),
+					String::from("feat: support unscoped commits"),
+				),
+				Commit::new(
 					String::from("0werty"),
 					String::from("style(ui): make good stuff"),
 				),
@@ -286,6 +293,9 @@
 			#### app
 			- add cool features
 
+			#### other
+			- support unscoped commits
+
 			### Other
 			#### app
 			- do nothing
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index 329477e..0a17e80 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -122,7 +122,7 @@
 			commit_range = Some(format!("{}..{}", tag1, tag2));
 		}
 	}
-	let commits = repository.commits(commit_range)?;
+	let commits = repository.commits(commit_range, args.commit_path)?;
 
 	// Update tags.
 	if let Some(tag) = args.tag {

=====================================================================
start time: Fri Aug 20 00:00:00 CST 2021
end time: Sat Sep 04 00:00:00 CST 2021
description: 
### Bug Fixes
- Pin the cargo-chef version in Dockerfile
### Documentation
- Update docker commands to only mount the .git directory
### Miscellaneous Tasks
- Bump `git-conventional` to `0.10.1` (fixes #6)
- Bump dependencies
- Bump cargo-chef version in Dockerfile

commit message: 
commit a9b286cf023148da0800c2a0408d87571c239847+ 1629492288 -----sp :: fix(cd): change the config file location for crates.io release
commit 5219b9ef305c95367df2e09d4050ecbf4739fc5a 1629492342 -----sp :: chore(release): prepare for v0.2.4
commit e0f6ca151af1b0561cfcc4b757e430923f3d81b5 1629495465 -----sp :: feat(template): add `breaking_description` to the template context (#4)
commit 6fa5d288d35c9f4218e33631b942bdd0cc381d3c 1629495808 -----sp :: docs(readme): mention breaking changes for templating
commit 4c6e64bd13badf6bff55d608fcff4a06585f226c 1629496101 -----sp :: docs(readme): update template examples to mention how to contribute
commit 59ffe53a7cb4791e4877a74f2e14d15139d2aca9 1629496697 -----sp :: chore(release): show the committed changes before creating a tag
commit ae8821aaa537f597762206647c18e9ac69289b6a 1629496706 -----sp :: chore(release): prepare for v0.2.5

hunks: 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a982687..0609561 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,27 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.2.5] - 2021-08-20
+
+### Documentation
+
+- Mention breaking changes for templating
+- Update template examples to mention how to contribute
+
+### Features
+
+- Add `breaking_description` to the template context (#4)
+
+### Miscellaneous Tasks
+
+- Show the committed changes before creating a tag
+
+## [0.2.4] - 2021-08-20
+
+### Bug Fixes
+
+- Change the config file location for crates.io release
+
 ## [0.2.3] - 2021-08-18
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index e1ff3ef..54e9129 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -345,7 +345,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.2.3"
+version = "0.2.5"
 dependencies = [
  "dirs-next",
  "git-cliff-core",
@@ -357,7 +357,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.2.3"
+version = "0.2.5"
 dependencies = [
  "config",
  "git-conventional",
@@ -376,9 +376,9 @@
 
 [[package]]
 name = "git-conventional"
-version = "0.9.2"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f9b9c51fa5f3d70c39e34d3fa551c3e7d746f11d32dc9443958b74769af5dfe2"
+checksum = "bacda69dbb6e0711a2c62eca58ba4fb88ef51531191eefb50ad582f958ff47b9"
 dependencies = [
  "doc-comment",
  "nom 6.1.2",
diff --git a/README.md b/README.md
index 56525b5..7134bb3 100644
--- a/README.md
+++ b/README.md
@@ -60,6 +60,7 @@
 - [Templating](#templating)
   - [Context](#context)
     - [Conventional Commits](#conventional-commits)
+      - [Breaking Changes](#breaking-changes)
     - [Non-Conventional Commits](#non-conventional-commits)
   - [Syntax](#syntax)
   - [Examples](#examples-1)
@@ -387,6 +388,7 @@
       "message": "<description>",
       "body": "[body]",
       "footers": ["[footer]", "[footer]"],
+      "breaking_description": "<description>",
       "breaking": false
     }
   ],
@@ -398,6 +400,24 @@
 }
 ```
 
+##### Breaking Changes
+
+`breaking` flag is set to `true` when the commit has an exclamation mark after the commit type and scope, e.g.:
+
+```
+feat(scope)!: this is a breaking change
+```
+
+Or when the `BREAKING CHANGE:` footer is defined:
+
+```
+feat: add xyz
+
+BREAKING CHANGE: this is a breaking change
+```
+
+`breaking_description` is set to the explanation of the breaking change. This description is expected to be present in the `BREAKING CHANGE` footer. However, if it's not provided, the `message` is expected to describe the breaking change.
+
 #### Non-Conventional Commits
 
 > conventional_commits = **false**
@@ -456,6 +476,8 @@
 
 See [examples](./examples/) directory for example configuration files.
 
+If you have a custom configuration file that you are using for your project(s), consider sharing it with us by [submitting a pull request](./CONTRIBUTING.md)!
+
 #### [Basic](./config/cliff.toml)
 
 <details>
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index a5b3f66..8fccf13 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.2.3" # managed by release.sh
+version = "0.2.5" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -29,7 +29,7 @@
 features = ["toml", "yaml"]
 
 [dependencies.git-conventional]
-version = "0.9.2"
+version = "0.10.0"
 features = ["serde"]
 
 [dependencies.rust-embed]
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index 4bdd0da..481297c 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -118,7 +118,7 @@
 	where
 		S: Serializer,
 	{
-		let mut commit = serializer.serialize_struct("Commit", 7)?;
+		let mut commit = serializer.serialize_struct("Commit", 8)?;
 		commit.serialize_field("id", &self.id)?;
 		match &self.conv {
 			Some(conv) => {
@@ -137,6 +137,10 @@
 					"group",
 					self.group.as_ref().unwrap_or(&conv.type_().to_string()),
 				)?;
+				commit.serialize_field(
+					"breaking_description",
+					&conv.breaking_description(),
+				)?;
 				commit.serialize_field("breaking", &conv.breaking())?;
 				commit.serialize_field("scope", &conv.scope())?;
 			}
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 39516ee..0d0feb8 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.2.3" # managed by release.sh
+version = "0.2.5" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -22,7 +22,7 @@
 dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.2.3" # managed by release.sh
+version = "0.2.5" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
diff --git a/release.sh b/release.sh
index f134187..6100577 100755
--- a/release.sh
+++ b/release.sh
@@ -8,6 +8,7 @@
 	# update the changelog
 	cargo run -- --tag "$1" > CHANGELOG.md
 	git add -A && git commit -m "chore(release): prepare for $1"
+	git show
 	# generate a changelog for the tag message
 	export TEMPLATE="\
 	{% for group, commits in commits | group_by(attribute=\"group\") %}

=====================================================================
start time: Wed Aug 18 00:00:00 CST 2021
end time: Fri Aug 20 00:00:00 CST 2021
description: 
### Bug Fixes
- Change the config file location for crates.io release

commit message: 
commit acda1954dc192a3b706c21a48821f75e5a8e0d22+ 1629226161 -----sp :: chore(config): move `cliff.toml` to config/
commit c478f2c6167c53a814810eb65ab96084f020d928+ 1629227662 -----sp :: refactor(lib): create a constant for default configuration file
commit e7ae5a062d3c446c6a0bc7d2784c52b63485259f+ 1629243956 -----sp :: docs(changelog): update the doc comment of `prepend`
commit 6f154ce4eef33e5d36e07a6c78878eb01ebc024f+ 1629244924 -----sp :: refactor(lib): update the log message for unprocessed tags
commit e5148e3ae1f6d459c0faeba6b6a78cf221f6f7ff+ 1629245946 -----sp :: feat(config): embed the default configuration file into the binary
commit 183481bac374707fbb7c579e2df83296e27f7251+ 1629247864 -----sp :: feat(config): add `--init` flag for creating the default config
commit 45889c0a05ad64598d4e6b053bc0d90ff5449b51+ 1629248348 -----sp :: fix(config): use custom error type for UTF-8 errors
commit 210b6341137016b902b20736f76c358e47d53c97+ 1629319597 -----sp :: feat(config): support a global location for configuration file (#2)
commit 927776b9db06ff2de8555b57c862c4a9e4991469 1629319871 -----sp :: style(args): update the message of `--init` flag
commit a067433061670c13afd0c0a1c604945a3a38d926 1629320367 -----sp :: chore(release): prepare for v0.2.0
commit 68dda364278870df84891495a3ff546ddbcae6a1 1629322897 -----sp :: fix(cd): copy the configuration file to embed into package
commit df241e485fa785453129b49da86da5efd9190668 1629322919 -----sp :: chore(release): prepare for v0.2.1
commit 48ea1578b5ecc17f5cc9a4249fb7b38610028fc6 1629327498 -----sp :: fix(cd): copy the config file into registry to resolve it for embed
commit 2d2f1befbc1102ddad1306765e1257f5e229a5da 1629327654 -----sp :: chore(release): prepare for v0.2.2
commit 9e29c95319abd1747fbf6fd1e205d414617b0447 1629329345 -----sp :: fix(cd): fetch the dependencies before copying the file to embed
commit e6fe05b2da8b65122a5f9b021e7e3aaa4b5e5956 1629329361 -----sp :: chore(release): prepare for v0.2.3

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 69ffb3b..8c82233 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -166,6 +166,10 @@
         uses: actions/checkout@main
       - name: Set the release version
         run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
+      - name: Prepare the files to embed
+        run: |
+          mkdir -p target/package/config/
+          cp config/cliff.toml target/package/config/
       - name: Publish the library
         uses: actions-rs/cargo@v1
         with:
@@ -173,11 +177,23 @@
           args: |
             --manifest-path git-cliff-core/Cargo.toml
             --locked --token ${{ secrets.CARGO_TOKEN }}
-      - name: Wait for core library to update
+      - name: Wait for library to update
         shell: bash
         run: |
           crate_status="https://raw.githubusercontent.com/rust-lang/crates.io-index/master/gi/t-/git-cliff-core"
           until curl -s "$crate_status" | grep -q '"vers":"${{ env.RELEASE_VERSION }}"'; do sleep 5; done;
+      - name: Fetch the dependencies
+        uses: actions-rs/cargo@v1
+        with:
+          command: fetch
+          args: --manifest-path git-cliff/Cargo.toml
+      - name: Prepare the files to embed
+        shell: bash
+        run: |
+          for d in /home/runner/.cargo/registry/src/github.com-*/ ; do
+            mkdir "$d"/config/
+            cp config/cliff.toml "$d"/config/
+          done
       - name: Publish the binary
         uses: actions-rs/cargo@v1
         with:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9c3cc4b..a982687 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,53 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.2.3] - 2021-08-18
+
+### Bug Fixes
+
+- Fetch the dependencies before copying the file to embed
+
+## [0.2.2] - 2021-08-18
+
+### Bug Fixes
+
+- Copy the config file into registry to resolve it for embed
+
+## [0.2.1] - 2021-08-18
+
+### Bug Fixes
+
+- Copy the configuration file to embed into package
+
+## [0.2.0] - 2021-08-18
+
+### Bug Fixes
+
+- Use custom error type for UTF-8 errors
+
+### Documentation
+
+- Update the doc comment of `prepend`
+
+### Features
+
+- Embed the default configuration file into the binary
+- Add `--init` flag for creating the default config
+- Support a global location for configuration file (#2)
+
+### Miscellaneous Tasks
+
+- Move `cliff.toml` to config/
+
+### Refactor
+
+- Create a constant for default configuration file
+- Update the log message for unprocessed tags
+
+### Styling
+
+- Update the message of `--init` flag
+
 ## [0.1.2] - 2021-08-14
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 95b2094..e1ff3ef 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -79,7 +79,16 @@
  "block-padding",
  "byte-tools",
  "byteorder",
- "generic-array",
+ "generic-array 0.12.4",
+]
+
+[[package]]
+name = "block-buffer"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"
+dependencies = [
+ "generic-array 0.14.4",
 ]
 
 [[package]]
@@ -178,6 +187,15 @@
 ]
 
 [[package]]
+name = "cpufeatures"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "66c99696f6c9dd7f35d486b9d04d7e6e202aa3e8c40d553f2fdf5e7e0c6a71ef"
+dependencies = [
+ "libc",
+]
+
+[[package]]
 name = "crossbeam-utils"
 version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -215,7 +233,37 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"
 dependencies = [
- "generic-array",
+ "generic-array 0.12.4",
+]
+
+[[package]]
+name = "digest"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"
+dependencies = [
+ "generic-array 0.14.4",
+]
+
+[[package]]
+name = "dirs-next"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"
+dependencies = [
+ "cfg-if",
+ "dirs-sys-next",
+]
+
+[[package]]
+name = "dirs-sys-next"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"
+dependencies = [
+ "libc",
+ "redox_users",
+ "winapi",
 ]
 
 [[package]]
@@ -275,6 +323,16 @@
 ]
 
 [[package]]
+name = "generic-array"
+version = "0.14.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"
+dependencies = [
+ "typenum",
+ "version_check",
+]
+
+[[package]]
 name = "getrandom"
 version = "0.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -287,8 +345,9 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.1.2"
+version = "0.2.3"
 dependencies = [
+ "dirs-next",
  "git-cliff-core",
  "log",
  "pretty_assertions",
@@ -298,7 +357,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.1.2"
+version = "0.2.3"
 dependencies = [
  "config",
  "git-conventional",
@@ -306,11 +365,13 @@
  "indexmap",
  "pretty_assertions",
  "regex",
+ "rust-embed",
  "serde",
  "serde_derive",
  "serde_regex",
  "tera",
  "thiserror",
+ "toml",
 ]
 
 [[package]]
@@ -593,6 +654,12 @@
 checksum = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"
 
 [[package]]
+name = "opaque-debug"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"
+
+[[package]]
 name = "output_vt100"
 version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -788,6 +855,25 @@
 ]
 
 [[package]]
+name = "redox_syscall"
+version = "0.2.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff"
+dependencies = [
+ "bitflags",
+]
+
+[[package]]
+name = "redox_users"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64"
+dependencies = [
+ "getrandom",
+ "redox_syscall",
+]
+
+[[package]]
 name = "regex"
 version = "1.5.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -805,6 +891,40 @@
 checksum = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"
 
 [[package]]
+name = "rust-embed"
+version = "6.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3203eb498314cbc2c6671278c8da3c64a16476d79ad1442bc13e8629706f24f7"
+dependencies = [
+ "rust-embed-impl",
+ "rust-embed-utils",
+ "walkdir",
+]
+
+[[package]]
+name = "rust-embed-impl"
+version = "6.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a1c03c7b7b780fdafde5055576641fd6b4d38095e3399cd0588552639aeff432"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "rust-embed-utils",
+ "syn",
+ "walkdir",
+]
+
+[[package]]
+name = "rust-embed-utils"
+version = "6.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b5f2909061b856ce587f2496fc149a71d576cb2e0842c79f0dc82741622c6d0"
+dependencies = [
+ "sha2",
+ "walkdir",
+]
+
+[[package]]
 name = "ryu"
 version = "1.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -866,10 +986,23 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df"
 dependencies = [
- "block-buffer",
- "digest",
+ "block-buffer 0.7.3",
+ "digest 0.8.1",
  "fake-simd",
- "opaque-debug",
+ "opaque-debug 0.2.3",
+]
+
+[[package]]
+name = "sha2"
+version = "0.9.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b362ae5752fd2137731f9fa25fd4d9058af34666ca1966fb969119cc35719f12"
+dependencies = [
+ "block-buffer 0.9.0",
+ "cfg-if",
+ "cpufeatures",
+ "digest 0.9.0",
+ "opaque-debug 0.3.0",
 ]
 
 [[package]]
diff --git a/README.md b/README.md
index b4ea6be..56525b5 100644
--- a/README.md
+++ b/README.md
@@ -107,6 +107,7 @@
 
 ```
 -v, --verbose       Increases the logging verbosity
+-i, --init          Writes the default configuration file to cliff.toml
 -l, --latest        Processes the commits starting from the latest tag
 -u, --unreleased    Processes the commits that do not belong to a tag
 -h, --help          Prints help information
@@ -134,7 +135,14 @@
 
 ### Examples
 
-To simply create a changelog at your projects git root directory with a [configuration file](#configuration-file) (e.g. `cliff.toml`) present:
+The default [configuration file](#configuration-file) (`cliff.toml`) can be generated using the `--init` flag:
+
+```sh
+# create cliff.toml
+git cliff --init
+```
+
+Then simply create a changelog at your projects git root directory:
 
 ```sh
 # same as running `git-cliff --config cliff.toml --repository .`
@@ -225,7 +233,13 @@
 
 **git-cliff** configuration file supports [TOML](https://github.com/toml-lang/toml) (preferred) and [YAML](https://yaml.org) formats.
 
-See [config/cliff.toml](./config/cliff.toml) for an example.
+The configuration file is read from `$HOME/git-cliff/cliff.toml` if the file exists. This location depends on the platform, for example:
+
+- on Linux: `/home/<user>/.config/git-cliff/cliff.toml`
+- on Windows: `C:\Users\<user>\AppData\Roaming\git-cliff\cliff.toml`
+- on macOS: `/Users/<user>/Library/Application Support/git-cliff/cliff.toml`
+
+See [config/cliff.toml](./config/cliff.toml) for the default configuration values.
 
 ### changelog
 
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index c01267b..a5b3f66 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.1.2" # managed by release.sh
+version = "0.2.3" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -17,6 +17,7 @@
 regex = "1.5.4"
 serde_regex = "1.1.0"
 indexmap = "1.7.0"
+toml = "0.5.8"
 
 [dependencies.git2]
 version = "0.13.21"
@@ -27,9 +28,13 @@
 default-features = false
 features = ["toml", "yaml"]
 
-[dev-dependencies]
-pretty_assertions = "0.7"
-
 [dependencies.git-conventional]
 version = "0.9.2"
 features = ["serde"]
+
+[dependencies.rust-embed]
+version = "6.0.0"
+features = ["debug-embed"]
+
+[dev-dependencies]
+pretty_assertions = "0.7"
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index 3882320..095c474 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -79,7 +79,7 @@
 			.unwrap()
 			.to_path_buf()
 			.join("config")
-			.join("cliff.toml")
+			.join(crate::DEFAULT_CONFIG)
 			.to_str()
 			.unwrap()
 			.to_string();
diff --git a/git-cliff-core/src/embed.rs b/git-cliff-core/src/embed.rs
new file mode 100644
index 0000000..d07b24e
--- /dev/null
+++ b/git-cliff-core/src/embed.rs
@@ -0,0 +1,37 @@
+#![allow(missing_docs)] // RustEmbed generated functions does not have doc comments
+
+use crate::config::Config;
+use crate::error::{
+	Error,
+	Result,
+};
+use rust_embed::RustEmbed;
+use std::str;
+
+/// Configuration file embedder/extractor.
+///
+/// Embeds `config/`[`DEFAULT_CONFIG`] into the binary.
+///
+/// [`DEFAULT_CONFIG`]: crate::DEFAULT_CONFIG
+#[derive(Debug, RustEmbed)]
+#[folder = "../config/"]
+pub struct EmbeddedConfig;
+
+impl EmbeddedConfig {
+	/// Extracts the embedded content.
+	pub fn get_config() -> Result<String> {
+		match Self::get(crate::DEFAULT_CONFIG) {
+			Some(v) => Ok(str::from_utf8(&v.data.into_owned())?.to_string()),
+			None => Err(Error::EmbeddedError(String::from(
+				"Embedded config not found",
+			))),
+		}
+	}
+
+	/// Parses the extracted content into [`Config`].
+	///
+	/// [`Config`]: Config
+	pub fn parse() -> Result<Config> {
+		Ok(toml::from_str(&Self::get_config()?)?)
+	}
+}
diff --git a/git-cliff-core/src/error.rs b/git-cliff-core/src/error.rs
index fbee13a..3c5ed66 100644
--- a/git-cliff-core/src/error.rs
+++ b/git-cliff-core/src/error.rs
@@ -6,6 +6,10 @@
 	/// Error that may occur while I/O operations.
 	#[error("IO error: `{0}`")]
 	IoError(#[from] std::io::Error),
+	/// Error that may occur when attempting to interpret a sequence of u8 as a
+	/// string.
+	#[error("UTF-8 error: `{0}`")]
+	Utf8Error(#[from] std::str::Utf8Error),
 	/// Error variant that represents errors coming out of libgit2.
 	#[error("Git error: `{0}`")]
 	GitError(#[from] git2::Error),
@@ -28,6 +32,12 @@
 	/// Error that may occur while parsing the command line arguments.
 	#[error("Argument error: `{0}`")]
 	ArgumentError(String),
+	/// Error that may occur while extracting the embedded content.
+	#[error("Embedded error: `{0}`")]
+	EmbeddedError(String),
+	/// Errors that may occur when deserializing types from TOML format.
+	#[error("Cannot parse TOML: `{0}`")]
+	DeserializeError(#[from] toml::de::Error),
 }
 
 /// Result type of the core library.
diff --git a/git-cliff-core/src/lib.rs b/git-cliff-core/src/lib.rs
index 077e08d..b25a2ba 100644
--- a/git-cliff-core/src/lib.rs
+++ b/git-cliff-core/src/lib.rs
@@ -7,6 +7,8 @@
 pub mod commit;
 /// Config file parser.
 pub mod config;
+/// Embedded file handler.
+pub mod embed;
 /// Error handling.
 pub mod error;
 /// Common release type.
@@ -15,3 +17,6 @@
 pub mod repo;
 /// Template engine.
 pub mod template;
+
+/// Default configuration file.
+pub const DEFAULT_CONFIG: &str = "cliff.toml";
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index f5c068a..39516ee 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.1.2" # managed by release.sh
+version = "0.2.3" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -19,9 +19,10 @@
 [dependencies]
 pretty_env_logger = "0.4.0"
 log = "0.4.14"
+dirs-next = "2.0.0"
 
 [dependencies.git-cliff-core]
-version = "0.1.2" # managed by release.sh
+version = "0.2.3" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 52e8f32..902e4c2 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -1,3 +1,4 @@
+use git_cliff_core::DEFAULT_CONFIG;
 use std::path::PathBuf;
 use structopt::clap::AppSettings;
 use structopt::StructOpt;
@@ -26,7 +27,7 @@
 		long,
 		env,
 		value_name = "PATH",
-		default_value = "cliff.toml"
+		default_value = DEFAULT_CONFIG,
 	)]
 	pub config:     PathBuf,
 	/// Sets the working directory.
@@ -53,6 +54,9 @@
 		allow_hyphen_values = true
 	)]
 	pub body:       Option<String>,
+	/// Writes the default configuration file to cliff.toml
+	#[structopt(short, long)]
+	pub init:       bool,
 	/// Processes the commits starting from the latest tag.
 	#[structopt(short, long)]
 	pub latest:     bool,
diff --git a/git-cliff/src/changelog.rs b/git-cliff/src/changelog.rs
index b96a6bb..f0b46dc 100644
--- a/git-cliff/src/changelog.rs
+++ b/git-cliff/src/changelog.rs
@@ -119,7 +119,7 @@
 		Ok(())
 	}
 
-	/// Generate changelog and prepend it to the given changelog.
+	/// Generates a changelog and prepends it to the given changelog.
 	pub fn prepend<W: Write>(
 		&self,
 		mut changelog: String,
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index a0fbe11..329477e 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -10,12 +10,14 @@
 use changelog::Changelog;
 use git_cliff_core::commit::Commit;
 use git_cliff_core::config::Config;
+use git_cliff_core::embed::EmbeddedConfig;
 use git_cliff_core::error::{
 	Error,
 	Result,
 };
 use git_cliff_core::release::Release;
 use git_cliff_core::repo::Repository;
+use git_cliff_core::DEFAULT_CONFIG;
 use std::env;
 use std::fs::{
 	self,
@@ -25,6 +27,13 @@
 
 /// Runs `git-cliff`.
 pub fn run(mut args: Opt) -> Result<()> {
+	// Create the configuration file if init flag is given.
+	if args.init {
+		info!("Saving the configuration file to {:?}", DEFAULT_CONFIG);
+		fs::write(DEFAULT_CONFIG, EmbeddedConfig::get_config()?)?;
+		return Ok(());
+	}
+
 	// Set the working directory.
 	if let Some(workdir) = args.workdir {
 		args.config = workdir.join(args.config);
@@ -37,14 +46,30 @@
 		}
 	}
 
-	// Parse configuration file.
-	let mut config = Config::parse(match args.config.to_str() {
+	// Parse the configuration file.
+	let mut path = match args.config.to_str() {
 		Some(v) => Ok(v.to_string()),
 		None => Err(Error::IoError(io::Error::new(
 			io::ErrorKind::Other,
 			"path contains invalid characters",
 		))),
-	}?)?;
+	}?;
+	if let Some(config_path) = dirs_next::config_dir()
+		.map(|dir| dir.join(env!("CARGO_PKG_NAME")).join(DEFAULT_CONFIG))
+		.map(|path| path.to_str().map(String::from))
+		.flatten()
+	{
+		if fs::metadata(&config_path).is_ok() {
+			path = config_path;
+		}
+	}
+
+	let mut config = if fs::metadata(&path).is_ok() {
+		Config::parse(path)?
+	} else {
+		warn!("{:?} is not found, using the default configuration.", path);
+		EmbeddedConfig::parse()?
+	};
 
 	// Update the configuration based on command line arguments.
 	match args.strip.as_deref() {
@@ -88,7 +113,7 @@
 	} else if args.latest {
 		if tags.len() < 2 {
 			return Err(Error::ChangelogError(String::from(
-				"latest tag cannot be processed",
+				"Latest tag cannot be processed",
 			)));
 		} else if let (Some(tag1), Some(tag2)) = (
 			tags.get_index(tags.len() - 2).map(|(k, _)| k),

=====================================================================
start time: Sat Aug 14 00:00:00 CST 2021
end time: Wed Aug 18 00:00:00 CST 2021
description: 
### Bug Fixes
- Use custom error type for UTF-8 errors
### Documentation
- Update the doc comment of `prepend`
### Features
- Embed the default configuration file into the binary
- Add `--init` flag for creating the default config
- Support a global location for configuration file (#2)
### Miscellaneous Tasks
- Move `cliff.toml` to config/
### Refactor
- Create a constant for default configuration file
- Update the log message for unprocessed tags
### Styling
- Update the message of `--init` flag

commit message: 
commit f85974761be11e0ecc85575bc4b6d5a02e438fd2+ 1628886693 -----sp :: perf(changelog): process only the last 'previous' release
commit 29db41aa12332f14a421109fe8d6d09b549abd61+ 1628944845 -----sp :: fix(changelog): set the previous release when using `--latest` (#3)
commit 7e84797900f1b6f61e16d8a4766b8209673a7acb+ 1628945813 -----sp :: perf(changelog): optimize the release vector size
commit af76d41b41d71fa01ad26f41d0c3d935fd34264e+ 1628947038 -----sp :: chore(deps): upgrade dependencies
commit 83479445c2af6d713128d5086ff51d2b166ed754 1628947483 -----sp :: chore(release): prepare for v0.1.1
commit 3ae64f4dd01f05a7896821c55642b8cac6e59bec 1628948780 -----sp :: fix(cd): use the correct name of completions binary
commit f1fd88af8f7fdfb021109ed9a24bd3d43045d534 1628948819 -----sp :: docs(completions): update the example completion command
commit c5f58213b42fdfd6ec987563c3cdc9f3d152dc06 1628948833 -----sp :: chore(release): prepare for v0.1.2

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 326a9d3..b9d957f 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -92,7 +92,7 @@
         run: |
           mkdir -p release/completions/
           cp {LICENSE,README.md,CHANGELOG.md,cliff.toml} release/
-          OUT_DIR=release/completions/ cargo run --release --bin completions
+          OUT_DIR=release/completions/ cargo run --release --bin git-cliff-completions
           if [ "${{ matrix.OS }}" = "windows-2019" ]; then
             cp target/${{ matrix.TARGET }}/release/git-cliff.exe release/
           else
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8bc9089..9c3cc4b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,36 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.2] - 2021-08-14
+
+### Bug Fixes
+
+- Use the correct name of completions binary
+
+### Documentation
+
+- Update the example completion command
+
+## [0.1.1] - 2021-08-14
+
+### Bug Fixes
+
+- Set the previous release when using `--latest` (#3)
+
+### Documentation
+
+- Add installation instructions for the AUR
+
+### Miscellaneous Tasks
+
+- Rename the shell completions binary
+- Upgrade dependencies
+
+### Performance
+
+- Process only the last 'previous' release
+- Optimize the release vector size
+
 ## [0.1.0] - 2021-08-12
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 88a4c5e..95b2094 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -287,7 +287,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.1.0"
+version = "0.1.2"
 dependencies = [
  "git-cliff-core",
  "log",
@@ -298,7 +298,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.1.0"
+version = "0.1.2"
 dependencies = [
  "config",
  "git-conventional",
@@ -327,9 +327,9 @@
 
 [[package]]
 name = "git2"
-version = "0.13.20"
+version = "0.13.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d9831e983241f8c5591ed53f17d874833e2fa82cac2625f3888c50cbfe136cba"
+checksum = "659cd14835e75b64d9dba5b660463506763cf0aa6cb640aeeb0e98d841093490"
 dependencies = [
  "bitflags",
  "libc",
@@ -482,9 +482,9 @@
 
 [[package]]
 name = "libgit2-sys"
-version = "0.12.21+1.1.0"
+version = "0.12.22+1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "86271bacd72b2b9e854c3dcfb82efd538f15f870e4c11af66900effb462f6825"
+checksum = "89c53ac117c44f7042ad8d8f5681378dfbc6010e49ec2c0d1f11dfedc7a4a1c3"
 dependencies = [
  "cc",
  "libc",
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index bb59fc4..c01267b 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.1.0" # managed by release.sh
+version = "0.1.2" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -19,7 +19,7 @@
 indexmap = "1.7.0"
 
 [dependencies.git2]
-version = "0.13.20"
+version = "0.13.21"
 default-features = false
 
 [dependencies.config]
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 71909a7..f5c068a 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.1.0" # managed by release.sh
+version = "0.1.2" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -21,7 +21,7 @@
 log = "0.4.14"
 
 [dependencies.git-cliff-core]
-version = "0.1.0" # managed by release.sh
+version = "0.1.2" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
diff --git a/git-cliff/src/bin/completions.rs b/git-cliff/src/bin/completions.rs
index b842a02..e67f968 100644
--- a/git-cliff/src/bin/completions.rs
+++ b/git-cliff/src/bin/completions.rs
@@ -6,7 +6,8 @@
 use structopt::clap::Shell;
 use structopt::StructOpt;
 
-/// Shell completions can be created with `cargo run --bin completions`
+/// Shell completions can be created with:
+/// `cargo run --bin git-cliff-completions`
 /// in a directory specified by the environment variable OUT_DIR.
 /// See <https://doc.rust-lang.org/cargo/reference/environment-variables.html>
 fn main() {
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index 1c6bc57..a0fbe11 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -114,7 +114,7 @@
 	}
 
 	// Process releases.
-	let mut releases = vec![Release::default(); tags.len() + 1];
+	let mut releases = vec![Release::default()];
 	let mut release_index = 0;
 	let mut previous_release = Release::default();
 	for git_commit in commits.into_iter().rev() {
@@ -128,10 +128,23 @@
 			previous_release.previous = None;
 			releases[release_index].previous = Some(Box::new(previous_release));
 			previous_release = releases[release_index].clone();
+			releases.push(Release::default());
 			release_index += 1;
 		}
 	}
 
+	// Set the previous release if needed.
+	if args.latest {
+		if let Some((commit_id, version)) = tags.get_index(tags.len() - 2) {
+			let previous_release = Release {
+				commit_id: Some(commit_id.to_string()),
+				version: Some(version.to_string()),
+				..Release::default()
+			};
+			releases[0].previous = Some(Box::new(previous_release));
+		}
+	}
+
 	// Generate changelog.
 	let changelog = Changelog::new(releases, &config)?;
 	if let Some(path) = args.prepend {

=====================================================================
start time: Thu Aug 12 00:00:00 CST 2021
end time: Sat Aug 14 00:00:00 CST 2021
description: 
### Bug Fixes
- Set the previous release when using `--latest` (#3)
### Documentation
- Add installation instructions for the AUR
### Miscellaneous Tasks
- Rename the shell completions binary
- Upgrade dependencies
### Performance
- Process only the last 'previous' release
- Optimize the release vector size

commit message: 
commit a2df26ff8602095707ebcfcfc4c278d12a9463f4+ 1628763902 -----sp :: chore(docker): bump the rust version
commit 5ba781721eb5e5d577b6b4fc47adb9bdc381f67d+ 1628765654 -----sp :: chore(deps): upgrade dependencies
commit 2b8b4d3535f29231e05c3572e919634b9af907b6 1628765991 -----sp :: chore(release): prepare for v0.1.0
commit f1b495d7b1aeb016911150faa0d49f847cc7b17c+ 1628788398 -----sp :: docs(readme): add installation instructions for the AUR
commit 718f53573b9f48a60ad1930cd9555063414f8b96+ 1628851167 -----sp :: chore(project): rename the shell completions binary

hunks: 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 17cac4d..8bc9089 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,51 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0] - 2021-08-12
+
+### Bug Fixes
+
+- Update the environment variable parsing settings
+- Use footers field as an array for the context
+- Sort the commits in topological order
+- Return error if there is not a latest tag to process
+- Update symbolic link to the default config
+- Remove symbolic link
+- Use 7 digits for short SHA
+
+### Documentation
+
+- Update README.md about usage
+- Update README.md about template and examples
+- Add examples for CLI usage
+- Add examples for templating
+- Update detailed template example
+- Add preview image to README.md
+
+### Miscellaneous Tasks
+
+- Upgrade dependencies
+- Remove etc directory from .gitignore
+- Bump the rust version
+- Upgrade dependencies
+
+### Refactor
+
+- Rename changelog argument to prepend
+
+### Styling
+
+- Center the badges
+- Update the comments in template context
+- Remove comments from template context
+- Wrap table of contents into summary
+- Remove quotes from rendered output
+
+### Testing
+
+- Add tests
+- Update repository tests about getting the latest tag
+
 ## [0.1.0-rc.21] - 2021-07-01
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index a66a27a..88a4c5e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -54,9 +54,9 @@
 
 [[package]]
 name = "bitflags"
-version = "1.2.1"
+version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"
+checksum = "2da1976d75adbe5fbc88130ecd119529cf1cc6a93ae1546d8696ee66f0d21af1"
 
 [[package]]
 name = "bitvec"
@@ -114,9 +114,9 @@
 
 [[package]]
 name = "cc"
-version = "1.0.67"
+version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd"
+checksum = "e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2"
 dependencies = [
  "jobserver",
 ]
@@ -136,7 +136,6 @@
  "libc",
  "num-integer",
  "num-traits",
- "time",
  "winapi",
 ]
 
@@ -180,11 +179,10 @@
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.8.4"
+version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4feb231f0d4d6af81aed15928e58ecf5816aa62a2393e2c82f46973e92a9a278"
+checksum = "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db"
 dependencies = [
- "autocfg",
  "cfg-if",
  "lazy_static",
 ]
@@ -289,7 +287,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.1.0-rc.21"
+version = "0.1.0"
 dependencies = [
  "git-cliff-core",
  "log",
@@ -300,7 +298,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.1.0-rc.21"
+version = "0.1.0"
 dependencies = [
  "config",
  "git-conventional",
@@ -342,9 +340,9 @@
 
 [[package]]
 name = "globset"
-version = "0.4.6"
+version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c152169ef1e421390738366d2f796655fec62621dabbd0fd476f905934061e4a"
+checksum = "10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd"
 dependencies = [
  "aho-corasick",
  "bstr",
@@ -372,27 +370,27 @@
 
 [[package]]
 name = "heck"
-version = "0.3.2"
+version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac"
+checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"
 dependencies = [
  "unicode-segmentation",
 ]
 
 [[package]]
 name = "hermit-abi"
-version = "0.1.18"
+version = "0.1.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c"
+checksum = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"
 dependencies = [
  "libc",
 ]
 
 [[package]]
 name = "humansize"
-version = "1.1.0"
+version = "1.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e"
+checksum = "02296996cb8796d7c6e3bc2d9211b7802812d36999a51bb754123ead7d37d026"
 
 [[package]]
 name = "humantime"
@@ -416,9 +414,9 @@
 
 [[package]]
 name = "ignore"
-version = "0.4.17"
+version = "0.4.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b287fb45c60bb826a0dc68ff08742b9d88a2fea13d6e0c286b3172065aaf878c"
+checksum = "713f1b139373f96a2e0ce3ac931cd01ee973c3c5dd7c40c0c2efe96ad2b6751d"
 dependencies = [
  "crossbeam-utils",
  "globset",
@@ -450,9 +448,9 @@
 
 [[package]]
 name = "jobserver"
-version = "0.1.22"
+version = "0.1.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "972f5ae5d1cb9c6ae417789196c803205313edde988685da5e3aae0827b9e7fd"
+checksum = "f5ca711fd837261e14ec9e674f092cbb931d3fa1482b017ae59328ddc6f3212b"
 dependencies = [
  "libc",
 ]
@@ -478,9 +476,9 @@
 
 [[package]]
 name = "libc"
-version = "0.2.94"
+version = "0.2.99"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "18794a8ad5b29321f790b55d93dfba91e125cb1a9edbd4f8e3150acc771c1a5e"
+checksum = "a7f823d141fe0a24df1e23b4af4e3c7ba9e5966ec514ea068c93024aa7deb765"
 
 [[package]]
 name = "libgit2-sys"
@@ -584,9 +582,9 @@
 
 [[package]]
 name = "once_cell"
-version = "1.7.2"
+version = "1.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "af8b08b04175473088b46763e51ee54da5f9a164bc162f615b91bc179dbf15a3"
+checksum = "692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56"
 
 [[package]]
 name = "opaque-debug"
@@ -721,9 +719,9 @@
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.26"
+version = "1.0.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec"
+checksum = "5c7ed8b8c7b886ea3ed7dde405212185f423ab44682667c8c6dd14aa1d9f6612"
 dependencies = [
  "unicode-xid",
 ]
@@ -751,9 +749,9 @@
 
 [[package]]
 name = "rand"
-version = "0.8.3"
+version = "0.8.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e"
+checksum = "2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8"
 dependencies = [
  "libc",
  "rand_chacha",
@@ -763,9 +761,9 @@
 
 [[package]]
 name = "rand_chacha"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d"
+checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
 dependencies = [
  "ppv-lite86",
  "rand_core",
@@ -773,18 +771,18 @@
 
 [[package]]
 name = "rand_core"
-version = "0.6.2"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7"
+checksum = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"
 dependencies = [
  "getrandom",
 ]
 
 [[package]]
 name = "rand_hc"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73"
+checksum = "d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7"
 dependencies = [
  "rand_core",
 ]
@@ -823,18 +821,18 @@
 
 [[package]]
 name = "serde"
-version = "1.0.126"
+version = "1.0.127"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ec7505abeacaec74ae4778d9d9328fe5a5d04253220a85c4ee022239fc996d03"
+checksum = "f03b9878abf6d14e6779d3f24f07b2cfa90352cfec4acc5aab8f1ac7f146fae8"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.126"
+version = "1.0.127"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "963a7dbc9895aeac7ac90e74f34a5d5261828f79df35cbed41e10189d3804d43"
+checksum = "a024926d3432516606328597e0f224a51355a493b49fdd67e9209187cbe55ecc"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -843,9 +841,9 @@
 
 [[package]]
 name = "serde_json"
-version = "1.0.64"
+version = "1.0.66"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "799e97dc9fdae36a5c8b8f2cae9ce2ee9fdce2058c57a93e6099d919fd982f79"
+checksum = "336b10da19a12ad094b59d870ebde26a45402e5b470add4b5fd03c5048a32127"
 dependencies = [
  "itoa",
  "ryu",
@@ -897,9 +895,9 @@
 
 [[package]]
 name = "structopt"
-version = "0.3.21"
+version = "0.3.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5277acd7ee46e63e5168a80734c9f6ee81b1367a7d8772a2d765df2a3705d28c"
+checksum = "69b041cdcb67226aca307e6e7be44c8806423d83e018bd662360a93dabce4d71"
 dependencies = [
  "clap",
  "lazy_static",
@@ -908,9 +906,9 @@
 
 [[package]]
 name = "structopt-derive"
-version = "0.4.14"
+version = "0.4.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5ba9cdfda491b814720b6b06e0cac513d922fc407582032e8706e9f137976f90"
+checksum = "7813934aecf5f51a54775e00068c237de98489463968231a51746bbbc03f9c10"
 dependencies = [
  "heck",
  "proc-macro-error",
@@ -921,9 +919,9 @@
 
 [[package]]
 name = "syn"
-version = "1.0.72"
+version = "1.0.74"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1e8cdbefb79a9a5a65e0db8b47b723ee907b7c7f8496c76a1770b5c310bab82"
+checksum = "1873d832550d4588c3dbc20f01361ab00bfe741048f71e3fecf145a7cc18b29c"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -938,9 +936,9 @@
 
 [[package]]
 name = "tera"
-version = "1.12.0"
+version = "1.12.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7571541dff0e57eaa2e931249f0d7489eb2b24b6b105546f8c2f1a47f15aaa3a"
+checksum = "bf95b0d8a46da5fe3ea119394a6c7f1e745f9de359081641c99946e2bf55d4f2"
 dependencies = [
  "chrono",
  "chrono-tz",
@@ -1017,20 +1015,10 @@
 ]
 
 [[package]]
-name = "time"
-version = "0.1.43"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438"
-dependencies = [
- "libc",
- "winapi",
-]
-
-[[package]]
 name = "tinyvec"
-version = "1.2.0"
+version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b5220f05bb7de7f3f53c7c065e1199b3172696fe2db9f9c4d8ad9b4ee74c342"
+checksum = "848a1e1181b9f6753b5e96a092749e29b11d19ede67dfbbd6c7dc7e0f49b5338"
 dependencies = [
  "tinyvec_macros",
 ]
@@ -1132,18 +1120,18 @@
 
 [[package]]
 name = "unicode-normalization"
-version = "0.1.17"
+version = "0.1.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "07fbfce1c8a97d547e8b5334978438d9d6ec8c20e38f56d4a4374d181493eaef"
+checksum = "d54590932941a9e9266f0832deed84ebe1bf2e4c9e4a3554d393d18f5e854bf9"
 dependencies = [
  "tinyvec",
 ]
 
 [[package]]
 name = "unicode-segmentation"
-version = "1.7.1"
+version = "1.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796"
+checksum = "8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b"
 
 [[package]]
 name = "unicode-width"
@@ -1171,9 +1159,9 @@
 
 [[package]]
 name = "vcpkg"
-version = "0.2.12"
+version = "0.2.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cbdbff6266a24120518560b5dc983096efb98462e51d0d68169895b237be3e5d"
+checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"
 
 [[package]]
 name = "version_check"
diff --git a/README.md b/README.md
index 4cc548c..f73e267 100644
--- a/README.md
+++ b/README.md
@@ -38,6 +38,7 @@
 - [About](#about)
 - [Installation](#installation)
   - [From crates.io](#from-cratesio)
+  - [From AUR](#from-aur)
   - [Binary Releases](#binary-releases)
 - [Usage](#usage)
   - [Command Line Arguments](#command-line-arguments)
@@ -82,6 +83,14 @@
 cargo install git-cliff
 ```
 
+### From AUR
+
+If you are using Arch Linux, [git-cliff](https://aur.archlinux.org/packages/git-cliff/) can be installed from the [AUR](https://aur.archlinux.org/) using an [AUR helper](https://wiki.archlinux.org/title/AUR_helpers):
+
+```sh
+paru -S git-cliff
+```
+
 ### Binary Releases
 
 See the available binaries for different operating systems/architectures from the [releases page](https://github.com/orhun/git-cliff/releases).
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 7349394..bb59fc4 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.1.0-rc.21" # managed by release.sh
+version = "0.1.0" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -11,9 +11,9 @@
 
 [dependencies]
 thiserror = "1.0.26"
-serde = "1.0"
-serde_derive = "1.0"
-tera = "1.12.0"
+serde = "1.0.27"
+serde_derive = "1.0.27"
+tera = "1.12.1"
 regex = "1.5.4"
 serde_regex = "1.1.0"
 indexmap = "1.7.0"
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 8f98f9a..71909a7 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.1.0-rc.21" # managed by release.sh
+version = "0.1.0" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -12,16 +12,20 @@
 default-run = "git-cliff"
 edition = "2018"
 
+[[bin]]
+name = "git-cliff-completions"
+path = "src/bin/completions.rs"
+
 [dependencies]
 pretty_env_logger = "0.4.0"
 log = "0.4.14"
 
 [dependencies.git-cliff-core]
-version = "0.1.0-rc.21" # managed by release.sh
+version = "0.1.0" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
-version = "0.3"
+version = "0.3.22"
 default-features = false
 features = ["suggestions", "color", "wrap_help"]
 

=====================================================================
start time: Thu Jul 01 00:00:00 CST 2021
end time: Thu Aug 12 00:00:00 CST 2021
description: 
### Bug Fixes
- Update the environment variable parsing settings
- Use footers field as an array for the context
- Sort the commits in topological order
- Return error if there is not a latest tag to process
- Update symbolic link to the default config
- Remove symbolic link
- Use 7 digits for short SHA
### Documentation
- Update README.md about usage
- Update README.md about template and examples
- Add examples for CLI usage
- Add examples for templating
- Update detailed template example
- Add preview image to README.md
### Miscellaneous Tasks
- Upgrade dependencies
- Remove etc directory from .gitignore
- Bump the rust version
- Upgrade dependencies
### Refactor
- Rename changelog argument to prepend
### Styling
- Center the badges
- Update the comments in template context
- Remove comments from template context
- Wrap table of contents into summary
- Remove quotes from rendered output
### Testing
- Add tests
- Update repository tests about getting the latest tag

commit message: 
commit 2f16dd5ae7f4bbff7b9944db039192d8ce148655 1625091223 -----sp :: fix(cd): generate changelog on a dedicated/different job
commit 22f0a7ef73cb1649d9ed59e43ee0e410b456233d 1625091435 -----sp :: chore(cargo): update project details
commit f4636597422c2c7ac770e80b9e1217e9565c2701 1625091730 -----sp :: chore(release): prepare for v0.1.0-rc.19
commit 777b3e573f20e913a68293eb155076d52914b4d4 1625093834 -----sp :: fix(cd): wait between publishing crates
commit 4c7b043e974c29211ff74735cba99dfcff8a5ab8 1625093907 -----sp :: chore(release): prepare for v0.1.0-rc.20
commit e795460c9bb7275294d1fa53a9d73258fb51eb10+ 1625164518 -----sp :: fix(cd): wait for core library to update on crates.io before publish
commit a440c6eb26404be4877b7e3ad592bfaa5d4eb210 1625169301 -----sp :: chore(release): prepare for v0.1.0-rc.21
commit 8975c8fb4116aa40f0ecb631ad9ec7a5a87aed58+ 1625311375 -----sp :: chore(deps): upgrade dependencies
commit 9984abfe04e6bed0745b52701ce3f45dd92529f6+ 1625859559 -----sp :: fix(config): update the environment variable parsing settings
commit 11a7a7eb3eec4e801b6ab6576db2849bc771987f+ 1625859711 -----sp :: test(config): add tests
commit 9cf9ac1586cf0f582b9a48bc5ce6f351d8350721+ 1625861407 -----sp :: test(git): update repository tests about getting the latest tag
commit 7f4a9c20128af75a8972e58130ac0ed4ce52d995+ 1626287933 -----sp :: docs(readme): update README.md about usage
commit f08ff0c4136a2257bfe7e586c03bcf7a520f06bd+ 1626288780 -----sp :: style(readme): center the badges
commit 37494901ef4826b57f82946a6cd6c7cd21f5ca2c+ 1626290473 -----sp :: style(readme): update the comments in template context
commit 1cf1ac73fa26d015f7316c7c27639c1c7f4a7995+ 1626291950 -----sp :: style(readme): remove comments from template context
commit fa6a38b339d7a56e976820b363f48d5c13d5cdf5+ 1626292162 -----sp :: style(readme): wrap table of contents into summary
commit 3e5c23d342ef96bececf41254cb609025a012fb3+ 1626608609 -----sp :: fix(changelog): use footers field as an array for the context
commit a1b4b5b18a6061392fc27b66a5726824212c114c+ 1626612133 -----sp :: fix(git): sort the commits in topological order
commit 2f2b2fc50a5aa4cdd7842448b9fde7f73564f5d7+ 1626624002 -----sp :: docs(readme): update README.md about template and examples
commit 8232111aa1fab0089fdb3b025202729b59dcf906+ 1626702160 -----sp :: fix(changelog): return error if there is not a latest tag to process
commit 5a5a042134c4829d98271607f697f77701f80860+ 1626896114 -----sp :: refactor(args): rename changelog argument to prepend
commit 32f837e3f0d642f5dc16f1e144ef5040652173ec+ 1626985851 -----sp :: docs(readme): add examples for CLI usage
commit a40615860871d4bbb351ae1571192a624b1b539d+ 1627939265 -----sp :: docs(readme): add examples for templating
commit ee377cc42d2d8771d67b0907151b1bb2ee012d69+ 1627939412 -----sp :: fix(example): update symbolic link to the default config
commit ed010be74fb745a9147315bcbbe0f9ac0aae85fb+ 1627939627 -----sp :: fix(example): remove symbolic link
commit dfab97842fe78fb8f217a5185fb6ec92682a53ca+ 1627939772 -----sp :: style(readme): remove quotes from rendered output
commit 1f85263f84bf15285fd3fd75af00fa21b12e9738+ 1627940001 -----sp :: fix(template): use 7 digits for short SHA
commit 441ed4d8b499a46ce22800da3d969ea6165d6ddf+ 1627940094 -----sp :: docs(readme): update detailed template example
commit 8881083520e5fcdbdfa27520f0a1aa29752067cc+ 1628362720 -----sp :: chore(git): remove etc directory from .gitignore
commit 6e6bddeadd3ee43ac6bb626ce5ebd582ffd1f7cb+ 1628450593 -----sp :: docs(readme): add preview image to README.md

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 5c47cfd..326a9d3 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -164,6 +164,8 @@
     steps:
       - name: Checkout
         uses: actions/checkout@main
+      - name: Set the release version
+        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
       - name: Publish the library
         uses: actions-rs/cargo@v1
         with:
@@ -171,6 +173,11 @@
           args: |
             --manifest-path git-cliff-core/Cargo.toml
             --locked --token ${{ secrets.CARGO_TOKEN }}
+      - name: Wait for core library to update
+        shell: bash
+        run: |
+          crate_status="https://raw.githubusercontent.com/rust-lang/crates.io-index/master/gi/t-/git-cliff-core"
+          until curl -s "$crate_status" | grep -q '"vers":"${{ env.RELEASE_VERSION }}"'; do sleep 5; done;
       - name: Publish the binary
         uses: actions-rs/cargo@v1
         with:
diff --git a/.gitignore b/.gitignore
index 52d2bdf..82fe6a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,6 +6,3 @@
 
 # Ignore library's lock file
 git-cliff-core/Cargo.lock
-
-# Miscellaneous
-/etc/
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 318145b..17cac4d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,28 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0-rc.21] - 2021-07-01
+
+### Bug Fixes
+
+- Wait for core library to update on crates.io before publish
+
+## [0.1.0-rc.20] - 2021-06-30
+
+### Bug Fixes
+
+- Wait between publishing crates
+
+## [0.1.0-rc.19] - 2021-06-30
+
+### Bug Fixes
+
+- Generate changelog on a dedicated/different job
+
+### Miscellaneous Tasks
+
+- Update project details
+
 ## [0.1.0-rc.18] - 2021-06-30
 
 ### Bug Fixes
diff --git a/Cargo.lock b/Cargo.lock
index 2df2be0..a66a27a 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -289,7 +289,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.1.0-rc.18"
+version = "0.1.0-rc.21"
 dependencies = [
  "git-cliff-core",
  "log",
@@ -300,7 +300,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.1.0-rc.18"
+version = "0.1.0-rc.21"
 dependencies = [
  "config",
  "git-conventional",
@@ -366,9 +366,9 @@
 
 [[package]]
 name = "hashbrown"
-version = "0.9.1"
+version = "0.11.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"
+checksum = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"
 
 [[package]]
 name = "heck"
@@ -434,9 +434,9 @@
 
 [[package]]
 name = "indexmap"
-version = "1.6.2"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "824845a0bf897a9042383849b02c1bc219c2383772efcd5c6f9766fa4b81aef3"
+checksum = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"
 dependencies = [
  "autocfg",
  "hashbrown",
@@ -938,9 +938,9 @@
 
 [[package]]
 name = "tera"
-version = "1.9.0"
+version = "1.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d8e88150b29f8844dea83fcaec7c03d3365992f5cec749f1e7cbf2a5594b22eb"
+checksum = "7571541dff0e57eaa2e931249f0d7489eb2b24b6b105546f8c2f1a47f15aaa3a"
 dependencies = [
  "chrono",
  "chrono-tz",
@@ -989,18 +989,18 @@
 
 [[package]]
 name = "thiserror"
-version = "1.0.24"
+version = "1.0.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e"
+checksum = "93119e4feac1cbe6c798c34d3a53ea0026b0b1de6a120deef895137c0529bfe2"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.24"
+version = "1.0.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0"
+checksum = "060d69a0afe7796bf42e9e2ff91f5ee691fb15c53d38b4b62a9a53eb23164745"
 dependencies = [
  "proc-macro2",
  "quote",
diff --git a/README.md b/README.md
index 1d7b310..4cc548c 100644
--- a/README.md
+++ b/README.md
@@ -2,12 +2,94 @@
     <a href="https://github.com/orhun/git-cliff">
         <img src="https://user-images.githubusercontent.com/24392180/121790699-8808dc80-cbea-11eb-8ab6-2fb6b08b66d8.png" width="300"></a>
     <br>
+    <a href="https://github.com/orhun/git-cliff/releases">
+        <img src="https://img.shields.io/github/v/release/orhun/git-cliff?style=flat&labelColor=1C2C2E&color=C96329&logo=GitHub&logoColor=white">
+    </a>
+    <a href="https://crates.io/crates/git-cliff/">
+        <img src="https://img.shields.io/crates/v/git-cliff?style=flat&labelColor=1C2C2E&color=C96329&logo=Rust&logoColor=white">
+    </a>
+    <a href="https://codecov.io/gh/orhun/git-cliff">
+        <img src="https://img.shields.io/codecov/c/gh/orhun/git-cliff?style=flat&labelColor=1C2C2E&color=C96329&logo=Codecov&logoColor=white">
+    </a>
+    <br>
+    <a href="https://github.com/orhun/git-cliff/actions?query=workflow%3A%22Continuous+Integration%22">
+        <img src="https://img.shields.io/github/workflow/status/orhun/git-cliff/Continuous%20Integration?style=flat&labelColor=1C2C2E&color=BEC5C9&logo=GitHub%20Actions&logoColor=BEC5C9">
+    </a>
+    <a href="https://github.com/orhun/git-cliff/actions?query=workflow%3A%22Continuous+Deployment%22">
+        <img src="https://img.shields.io/github/workflow/status/orhun/git-cliff/Continuous%20Deployment?style=flat&labelColor=1C2C2E&color=BEC5C9&logo=GitHub%20Actions&logoColor=BEC5C9&label=deploy">
+    </a>
+    <a href="https://hub.docker.com/r/orhunp/git-cliff">
+        <img src="https://img.shields.io/docker/cloud/build/orhunp/git-cliff?style=flat&labelColor=1C2C2E&color=BEC5C9&label=docker&logo=Docker&logoColor=BEC5C9">
+    </a>
+    <a href="https://docs.rs/git-cliff-core/">
+        <img src="https://img.shields.io/docsrs/git-cliff-core?style=flat&labelColor=1C2C2E&color=BEC5C9&logo=Rust&logoColor=BEC5C9E">
+    </a>
 </p>
 
+## About
+
+**git-cliff** can generate [changelog](https://en.wikipedia.org/wiki/Changelog) files from the [Git](https://git-scm.com/) history by utilizing [conventional commits](#conventional_commits) as well as regex-powered [custom parsers](#commit_parsers). The [changelog template](#templating) can be customized with a [configuration file](#configuration-file) to match the desired format.
+
+![preview](https://user-images.githubusercontent.com/24392180/128637997-5713ba25-d8f3-40c7-8ba8-ea7f333ead88.png)
+
+<details>
+  <summary>Table of Contents</summary>
+
+- [About](#about)
+- [Installation](#installation)
+  - [From crates.io](#from-cratesio)
+  - [Binary Releases](#binary-releases)
+- [Usage](#usage)
+  - [Command Line Arguments](#command-line-arguments)
+  - [Examples](#examples)
+- [Docker](#docker)
+- [GitHub Action](#github-action)
+- [Configuration File](#configuration-file)
+  - [changelog](#changelog)
+    - [header](#header)
+    - [body](#body)
+    - [trim](#trim)
+    - [footer](#footer)
+  - [git](#git)
+    - [conventional_commits](#conventional_commits)
+    - [commit_parsers](#commit_parsers)
+    - [filter_commits](#filter_commits)
+    - [tag_pattern](#tag_pattern)
+    - [skip_tags](#skip_tags)
+- [Templating](#templating)
+  - [Context](#context)
+    - [Conventional Commits](#conventional-commits)
+    - [Non-Conventional Commits](#non-conventional-commits)
+  - [Syntax](#syntax)
+  - [Examples](#examples-1)
+    - [Basic](#basic)
+    - [Detailed](#detailed)
+    - [Scoped](#scoped)
+    - [Keep a Changelog](#keep-a-changelog)
+- [Similar Projects](#similar-projects)
+- [License](#license)
+- [Copyright](#copyright)
+
+</details>
+
 ## Installation
 
+### From crates.io
+
+[git-cliff](crates.io/crates/git-cliff) can be installed from crates.io:
+
+```sh
+cargo install git-cliff
+```
+
+### Binary Releases
+
+See the available binaries for different operating systems/architectures from the [releases page](https://github.com/orhun/git-cliff/releases).
+
 ## Usage
 
+### Command Line Arguments
+
 ```
 git-cliff [FLAGS] [OPTIONS] [RANGE]
 ```
@@ -28,7 +110,7 @@
 -c, --config <PATH>        Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
 -w, --workdir <PATH>       Sets the working directory [env: WORKDIR=]
 -r, --repository <PATH>    Sets the repository to parse commits from [env: REPOSITORY=]
--p, --changelog <PATH>     Prepends entries to the given changelog file [env: CHANGELOG=]
+-p, --prepend <PATH>       Prepends entries to the given changelog file [env: PREPEND=]
 -o, --output <PATH>        Writes output to the given file [env: OUTPUT=]
 -t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
 -b, --body <TEMPLATE>      Sets the template for the changelog body [env: TEMPLATE=]
@@ -41,9 +123,64 @@
 <RANGE>    Sets the commit range to process
 ```
 
-### Docker
+### Examples
 
-The easiest way of running **git-cliff** (in the git root directory) is to use the [available tags](https://hub.docker.com/repository/docker/orhunp/git-cliff/tags) from [Docker Hub](https://hub.docker.com/repository/docker/orhunp/git-cliff):
+To simply create a changelog at your projects git root directory with a [configuration file](#configuration-file) (e.g. `cliff.toml`) present:
+
+```sh
+# same as running `git-cliff --config cliff.toml --repository .`
+# same as running `git-cliff --workdir .`
+git cliff
+```
+
+Set a tag for the "unreleased" changes:
+
+```sh
+git cliff --tag 1.0.0
+```
+
+Create a changelog for a certain part of git history:
+
+```sh
+# only takes the latest tag into account
+# (requires at least 2 tags)
+git cliff --latest
+
+# generate changelog for unreleased commits
+git cliff --unreleased
+git cliff --unreleased --tag 1.0.0
+
+# generate changelog for a specific commit range
+git cliff 4c7b043..a440c6e
+git cliff 4c7b043..HEAD
+git cliff HEAD~2..
+```
+
+Save the changelog file to the specified file:
+
+```sh
+git cliff --output CHANGELOG.md
+```
+
+Prepend new changes to an existing changelog file:
+
+```sh
+# 1- changelog header is removed from CHANGELOG.md
+# 2- new entries are prepended to CHANGELOG.md without footer part
+git cliff --unreleased --tag 1.0.0 --prepend CHANGELOG.md
+```
+
+Set/remove the changelog parts:
+
+```sh
+git cliff --body $template --strip footer
+```
+
+Also, see the [release script](./release.sh) of this project which sets the changelog as a message of an annotated tag.
+
+## Docker
+
+The easiest way of running **git-cliff** (in the git root directory with [configuration file](#configuration-file) present) is to use the [available tags](https://hub.docker.com/repository/docker/orhunp/git-cliff/tags) from [Docker Hub](https://hub.docker.com/repository/docker/orhunp/git-cliff):
 
 ```sh
 docker run -t -v "$(pwd)":/app/ orhunp/git-cliff:latest
@@ -57,7 +194,650 @@
 
 Also, you can build the image yourself using `docker build -t git-cliff .` command.
 
-## Examples
+## GitHub Action
+
+It is possible to generate changelogs using [GitHub Actions](https://docs.github.com/en/actions) via [git-cliff-action](https://github.com/orhun/git-cliff-action).
+
+```yml
+- name: Generate a changelog
+  uses: orhun/git-cliff-action@v1
+  with:
+    config: cliff.toml
+    args: --verbose
+  env:
+    OUTPUT: CHANGELOG.md
+```
+
+See the [repository](https://github.com/orhun/git-cliff-action) for other [examples](https://github.com/orhun/git-cliff-action#examples).
+
+Also, see the [continuous deployment workflow](./.github/workflows/cd.yml) of this project which sets the release notes for GitHub releases using this action.
+
+## Configuration File
+
+**git-cliff** configuration file supports [TOML](https://github.com/toml-lang/toml) (preferred) and [YAML](https://yaml.org) formats.
+
+See [cliff.toml](./cliff.toml) for an example.
+
+### changelog
+
+This section contains the configuration options for changelog generation.
+
+```toml
+[changelog]
+header = "Changelog"
+body = """
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {{ commit.message | upper_first }}
+    {% endfor %}
+{% endfor %}
+"""
+trim = true
+footer = "<!-- generated by git-cliff -->"
+```
+
+#### header
+
+Header text that will be added to the beginning of the changelog.
+
+#### body
+
+Body template that represents a single release in the changelog.
+
+See [templating](#templating) for more detail.
+
+#### trim
+
+If set to `true`, leading and trailing whitespaces are removed from the [body](#body).
+
+It is useful for adding indentation to the template for readability, as shown [in the example](#changelog).
+
+#### footer
+
+Footer text that will be added to the end of the changelog.
+
+### git
+
+This section contains the parsing and git related configuration options.
+
+```toml
+[git]
+conventional_commits = true
+commit_parsers = [
+    { message = "^feat*", group = "Features"},
+    { message = "^fix*", group = "Bug Fixes"},
+    { message = "^doc*", group = "Documentation"},
+    { message = "^perf*", group = "Performance"},
+    { message = "^refactor*", group = "Refactor"},
+    { message = "^style*", group = "Styling"},
+    { message = "^test*", group = "Testing"},
+]
+filter_commits = false
+tag_pattern = "v[0-9]*"
+skip_tags = "v0.1.0-beta.1"
+```
+
+#### conventional_commits
+
+If set to `true`, parses the commits according to the [Conventional Commits specifications](https://www.conventionalcommits.org).
+
+> The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages.
+
+> The commit message should be structured as follows:
+
+```
+<type>[optional scope]: <description>
+
+[optional body]
+
+[optional footer(s)]
+```
+
+e.g. `feat(parser): add ability to parse arrays`
+
+#### commit_parsers
+
+An array of commit parsers for determining the commit groups by using regex.
+
+Examples:
+
+- `{ message = "^feat*", group = "Features"}`
+  - Group the commit as "Features" if the commit message (description) starts with "feat".
+- `{ body = ".*security", group = "Security"}`
+  - Group the commit as "Security" if the commit body contains "security".
+- `{ message = ".*deprecated", body = ".*deprecated", group = "Deprecation"}`
+  - Group the commit as "Deprecation" if the commit body and message contains "deprecated".
+- `{ message = "^revert*", skip = true}`
+  - Skip processing the commit if the commit message (description) starts with "revert".
+
+#### filter_commits
+
+If set to `true`, commits that are not matched by [commit parsers](#commit_parsers) are filtered out.
+
+#### tag_pattern
+
+A glob pattern for matching the git tags.
+
+e.g. It processes the same tags as the output of the following git command:
+
+```sh
+git tag --list 'v[0-9]*'
+```
+
+#### skip_tags
+
+A regex for skip processing the matched tags.
+
+## Templating
+
+A template is a text where variables and expressions get replaced with values when it is rendered.
+
+### Context
+
+Context is the model that holds the required data for a template rendering. The [JSON](https://en.wikipedia.org/wiki/JSON) format is used in the following examples for the representation of a context.
+
+#### Conventional Commits
+
+> conventional_commits = **true**
+
+For a [conventional commit](#conventional_commits) like this,
+
+```
+<type>[scope]: <description>
+
+[body]
+
+[footer(s)]
+```
+
+following context is generated to use for templating:
+
+```json
+{
+  "version": "v0.1.0-rc.21",
+  "commits": [
+    {
+      "id": "e795460c9bb7275294d1fa53a9d73258fb51eb10",
+      "group": "<type> (overrided by commit_parsers)",
+      "scope": "[scope]",
+      "message": "<description>",
+      "body": "[body]",
+      "footers": ["[footer]", "[footer]"],
+      "breaking": false
+    }
+  ],
+  "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
+  "timestamp": 1625169301,
+  "previous": {
+    "version": "previous release"
+  }
+}
+```
+
+#### Non-Conventional Commits
+
+> conventional_commits = **false**
+
+If [conventional_commits](#conventional_commits) is set to `false`, then some of the fields are omitted from the context or squashed into the `message` field:
+
+```json
+{
+  "version": "v0.1.0-rc.21",
+  "commits": [
+    {
+      "id": "e795460c9bb7275294d1fa53a9d73258fb51eb10",
+      "group": "(overrided by commit_parsers)",
+      "message": "(whole commit message including description, footers, etc.)"
+    }
+  ],
+  "commit_id": "a440c6eb26404be4877b7e3ad592bfaa5d4eb210 (release commit)",
+  "timestamp": 1625169301,
+  "previous": {
+    "version": "previous release"
+  }
+}
+```
+
+### Syntax
+
+**git-cliff** uses [Tera](https://github.com/Keats/tera) as the template engine. It has a syntax based on [Jinja2](http://jinja.pocoo.org/) and [Django](https://docs.djangoproject.com/en/3.1/topics/templates/) templates.
+
+There are 3 kinds of delimiters and those cannot be changed:
+
+- `{{` and `}}` for expressions
+- `{%` or `{%-` and `%}` or `-%}` for statements
+- `{#` and `#}` for comments
+
+See the [Tera Documentation](https://tera.netlify.app/docs/#templates) for more information about [control structures](https://tera.netlify.app/docs/#control-structures), [built-ins filters](https://tera.netlify.app/docs/#built-ins), etc.
+
+Custom built-in filters that **git-cliff** uses:
+
+- `upper_first`: Converts the first character of a string to uppercase.
+
+### Examples
+
+Examples are based on the following Git history:
+
+```log
+* df6aef4 (HEAD -> master) feat(cache): use cache while fetching pages
+* a9d4050 feat(config): support multiple file formats
+* 06412ac (tag: v1.0.1) chore(release): add release script
+* e4fd3cf refactor(parser): expose string functions
+* ad27b43 (tag: v1.0.0) docs(example)!: add tested usage example
+* 9add0d4 fix(args): rename help argument due to conflict
+* a140cef feat(parser): add ability to parse arrays
+* 81fbc63 docs(project): add README.md
+* a78bc36 Initial commit
+```
+
+See [examples](./examples/) directory for example configuration files.
+
+#### [Basic](./cliff.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- Add release script
+
+### Refactor
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict
+
+### Documentation
+
+- Add README.md
+- Add tested usage example
+
+### Features
+
+- Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+- Add release script
+
+### Refactor
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict
+
+### Documentation
+
+- Add README.md
+- Add tested usage example
+
+### Features
+
+- Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+
+</details>
+
+#### [Detailed](./examples/detailed.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats ([a9d4050](a9d4050212a18f6b3bd76e2e41fbb9045d268b80))
+- Use cache while fetching pages ([df6aef4](df6aef41292f3ffe5887754232e6ea7831c50ba5))
+
+## [1.0.1] - 2021-07-18
+
+[ad27b43](ad27b43e8032671afb4809a1a3ecf12f45c60e0e)...[06412ac](06412ac1dd4071006c465dde6597a21d4367a158)
+
+### Miscellaneous Tasks
+
+- Add release script ([06412ac](06412ac1dd4071006c465dde6597a21d4367a158))
+
+### Refactor
+
+- Expose string functions ([e4fd3cf](e4fd3cf8e2e6f49c0b57f66416e886c37cbb3715))
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict ([9add0d4](9add0d4616dc95a6ea8b01d5e4d233876b6e5e00))
+
+### Documentation
+
+- Add README.md ([81fbc63](81fbc6365484abf0b4f4b05d384175763ad8db44))
+- Add tested usage example ([ad27b43](ad27b43e8032671afb4809a1a3ecf12f45c60e0e))
+
+### Features
+
+- Add ability to parse arrays ([a140cef](a140cef0405e0bcbfb5de44ff59e091527d91b38))
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+- Support multiple file formats ([a9d4050](a9d4050212a18f6b3bd76e2e41fbb9045d268b80))
+- Use cache while fetching pages ([df6aef4](df6aef41292f3ffe5887754232e6ea7831c50ba5))
+
+## [1.0.1] - 2021-07-18
+
+[ad27b43](ad27b43e8032671afb4809a1a3ecf12f45c60e0e)...[06412ac](06412ac1dd4071006c465dde6597a21d4367a158)
+
+### Miscellaneous Tasks
+
+- Add release script ([06412ac](06412ac1dd4071006c465dde6597a21d4367a158))
+
+### Refactor
+
+- Expose string functions ([e4fd3cf](e4fd3cf8e2e6f49c0b57f66416e886c37cbb3715))
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+- Rename help argument due to conflict ([9add0d4](9add0d4616dc95a6ea8b01d5e4d233876b6e5e00))
+
+### Documentation
+
+- Add README.md ([81fbc63](81fbc6365484abf0b4f4b05d384175763ad8db44))
+- Add tested usage example ([ad27b43](ad27b43e8032671afb4809a1a3ecf12f45c60e0e))
+
+### Features
+
+- Add ability to parse arrays ([a140cef](a140cef0405e0bcbfb5de44ff59e091527d91b38))
+
+<!-- generated by git-cliff -->
+
+</details>
+
+#### [Scoped](./examples/scoped.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+#### Cache
+
+- Use cache while fetching pages
+
+#### Config
+
+- Support multiple file formats
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+#### Release
+
+- Add release script
+
+### Refactor
+
+#### Parser
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+#### Args
+
+- Rename help argument due to conflict
+
+### Documentation
+
+#### Example
+
+- Add tested usage example
+
+#### Project
+
+- Add README.md
+
+### Features
+
+#### Parser
+
+- Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+## [unreleased]
+
+### Features
+
+#### Cache
+
+- Use cache while fetching pages
+
+#### Config
+
+- Support multiple file formats
+
+## [1.0.1] - 2021-07-18
+
+### Miscellaneous Tasks
+
+#### Release
+
+- Add release script
+
+### Refactor
+
+#### Parser
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Bug Fixes
+
+#### Args
+
+- Rename help argument due to conflict
+
+### Documentation
+
+#### Example
+
+- Add tested usage example
+
+#### Project
+
+- Add README.md
+
+### Features
+
+#### Parser
+
+- Add ability to parse arrays
+
+<!-- generated by git-cliff -->
+
+</details>
+
+#### [Keep a Changelog](./examples/keepachangelog.toml)
+
+<details>
+  <summary>Raw Output</summary>
+
+```
+# Changelog
+All notable changes to this project will be documented in this file.
+
+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
+and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
+
+## [unreleased]
+
+### Added
+
+- Support multiple file formats
+
+### Changed
+
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+
+### Added
+
+- Add release script
+
+### Changed
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Added
+
+- Add README.md
+- Add ability to parse arrays
+- Add tested usage example
+
+### Fixed
+
+- Rename help argument due to conflict
+
+<!-- generated by git-cliff -->
+```
+
+</details>
+
+<details>
+  <summary>Rendered Output</summary>
+
+# Changelog
+All notable changes to this project will be documented in this file.
+
+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
+and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
+
+## [unreleased]
+
+### Added
+
+- Support multiple file formats
+
+### Changed
+
+- Use cache while fetching pages
+
+## [1.0.1] - 2021-07-18
+
+### Added
+
+- Add release script
+
+### Changed
+
+- Expose string functions
+
+## [1.0.0] - 2021-07-18
+
+### Added
+
+- Add README.md
+- Add ability to parse arrays
+- Add tested usage example
+
+### Fixed
+
+- Rename help argument due to conflict
+
+<!-- generated by git-cliff -->
+
+</details>
+
+## Similar Projects
+
+- [git-journal](https://github.com/saschagrunert/git-journal) - The Git Commit Message and Changelog Generation Framework
+- [clog-cli](https://github.com/clog-tool/clog-cli) - Generate beautiful changelogs from your Git commit history
+- [relnotes](https://crates.io/crates/relnotes) - A tool to automatically generate release notes for your project.
+- [cocogitto](https://github.com/oknozor/cocogitto) - A set of CLI tools for the conventional commit
+and semver specifications.
 
 ## License
 
diff --git a/examples/detailed.toml b/examples/detailed.toml
new file mode 100644
index 0000000..0b43b79
--- /dev/null
+++ b/examples/detailed.toml
@@ -0,0 +1,59 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% if previous %}\
+    {% if previous.commit_id %}
+        [{{ previous.commit_id | truncate(length=7, end="") }}]({{ previous.commit_id }})...\
+            [{{ commit_id | truncate(length=7, end="") }}]({{ commit_id }})
+    {% endif %}\
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
+    {% endfor %}
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# allow only conventional commits
+# https://www.conventionalcommits.org
+conventional_commits = true
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^feat*", group = "Features"},
+    { message = "^fix*", group = "Bug Fixes"},
+    { message = "^doc*", group = "Documentation"},
+    { message = "^perf*", group = "Performance"},
+    { message = "^refactor*", group = "Refactor"},
+    { message = "^style*", group = "Styling"},
+    { message = "^test*", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for*", skip = true},
+    { message = "^chore*", group = "Miscellaneous Tasks"},
+    { body = ".*security", group = "Security"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = false
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
diff --git a/examples/keepachangelog.toml b/examples/keepachangelog.toml
new file mode 100644
index 0000000..a215e4b
--- /dev/null
+++ b/examples/keepachangelog.toml
@@ -0,0 +1,54 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.
+
+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
+and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for commit in commits %}
+        - {{ commit.message | upper_first }}\
+    {% endfor %}
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# allow only conventional commits
+# https://www.conventionalcommits.org
+conventional_commits = true
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^*: add*", group = "Added"},
+    { message = "^*: support*", group = "Added"},
+    { message = "^*: remove*", group = "Removed"},
+    { message = "^*: delete*", group = "Removed"},
+    { message = "^test*", group = "Fixed"},
+    { message = "^fix*", group = "Fixed"},
+    { message = "^*: fix*", group = "Fixed"},
+    { message = "^*", group = "Changed"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = true
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
diff --git a/examples/scoped.toml b/examples/scoped.toml
new file mode 100644
index 0000000..6635de9
--- /dev/null
+++ b/examples/scoped.toml
@@ -0,0 +1,56 @@
+# configuration file for git-cliff (0.1.0)
+
+[changelog]
+# changelog header
+header = """
+# Changelog
+All notable changes to this project will be documented in this file.\n
+"""
+# template for the changelog body
+# https://tera.netlify.app/docs/#introduction
+body = """
+{% if version %}\
+    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
+{% else %}\
+    ## [unreleased]
+{% endif %}\
+{% for group, commits in commits | group_by(attribute="group") %}
+    ### {{ group | upper_first }}
+    {% for group, commits in commits | group_by(attribute="scope") %}
+        #### {{ group | upper_first }}
+        {% for commit in commits %}
+            - {{ commit.message | upper_first }}\
+        {% endfor %}
+    {% endfor %}\
+{% endfor %}\n
+"""
+# remove the leading and trailing whitespaces from the template
+trim = true
+# changelog footer
+footer = """
+<!-- generated by git-cliff -->
+"""
+
+[git]
+# allow only conventional commits
+# https://www.conventionalcommits.org
+conventional_commits = true
+# regex for parsing and grouping commits
+commit_parsers = [
+    { message = "^feat*", group = "Features"},
+    { message = "^fix*", group = "Bug Fixes"},
+    { message = "^doc*", group = "Documentation"},
+    { message = "^perf*", group = "Performance"},
+    { message = "^refactor*", group = "Refactor"},
+    { message = "^style*", group = "Styling"},
+    { message = "^test*", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for*", skip = true},
+    { message = "^chore*", group = "Miscellaneous Tasks"},
+    { body = ".*security", group = "Security"},
+]
+# filter out the commits that are not matched by commit parsers
+filter_commits = false
+# glob pattern for matching git tags
+tag_pattern = "v[0-9]*"
+# regex for skipping tags
+skip_tags = "v0.1.0-beta.1"
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index e463906..7349394 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,24 +1,22 @@
 [package]
 name = "git-cliff-core"
-version = "0.1.0-rc.18" # managed by release.sh
+version = "0.1.0-rc.21" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
-readme = "README.md"
 homepage = "https://github.com/orhun/git-cliff"
 repository = "https://github.com/orhun/git-cliff"
 keywords = ["changelog", "generator", "conventional", "commit"]
-categories = ["command-line-utilities"]
 edition = "2018"
 
 [dependencies]
-thiserror = "1.0"
+thiserror = "1.0.26"
 serde = "1.0"
 serde_derive = "1.0"
-tera = "1.9.0"
+tera = "1.12.0"
 regex = "1.5.4"
 serde_regex = "1.1.0"
-indexmap = "1.6.2"
+indexmap = "1.7.0"
 
 [dependencies.git2]
 version = "0.13.20"
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index 4ecd20d..4bdd0da 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -124,7 +124,15 @@
 			Some(conv) => {
 				commit.serialize_field("message", conv.description())?;
 				commit.serialize_field("body", &conv.body())?;
-				commit.serialize_field("footer", conv.footers())?;
+				commit.serialize_field(
+					"footers",
+					&conv
+						.footers()
+						.to_vec()
+						.iter()
+						.map(|f| f.value())
+						.collect::<Vec<&str>>(),
+				)?;
 				commit.serialize_field(
 					"group",
 					self.group.as_ref().unwrap_or(&conv.type_().to_string()),
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index 60e1e6b..10746f9 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -61,7 +61,30 @@
 		let mut config = config::Config::default();
 		config
 			.merge(config::File::with_name(&file_name))?
-			.merge(config::Environment::with_prefix(env!("CARGO_PKG_NAME")))?;
+			.merge(config::Environment::with_prefix("CLIFF").separator("_"))?;
 		Ok(config.try_into()?)
 	}
 }
+
+#[cfg(test)]
+mod test {
+	use super::*;
+	use pretty_assertions::assert_eq;
+	use std::env;
+	use std::path::PathBuf;
+	#[test]
+	fn parse_config() -> Result<()> {
+		let file_name = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
+			.parent()
+			.unwrap()
+			.to_path_buf()
+			.join("cliff.toml")
+			.to_str()
+			.unwrap()
+			.to_string();
+		env::set_var("CLIFF_CHANGELOG_FOOTER", "test");
+		let config = Config::parse(file_name)?;
+		assert_eq!("test", config.changelog.footer.unwrap());
+		Ok(())
+	}
+}
diff --git a/git-cliff-core/src/error.rs b/git-cliff-core/src/error.rs
index c75a812..fbee13a 100644
--- a/git-cliff-core/src/error.rs
+++ b/git-cliff-core/src/error.rs
@@ -19,6 +19,9 @@
 	/// Error that may occur while grouping commits.
 	#[error("Grouping error: `{0}`")]
 	GroupError(String),
+	/// Error that may occur while generating changelog.
+	#[error("Changelog error: `{0}`")]
+	ChangelogError(String),
 	/// Error that may occur while template operations such as parse and render.
 	#[error("Template error: `{0}`")]
 	TemplateError(#[from] tera::Error),
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index a34cd9d..3529b5d 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -38,7 +38,7 @@
 	/// Sorts the commits by their time.
 	pub fn commits(&self, range: Option<String>) -> Result<Vec<Commit>> {
 		let mut revwalk = self.inner.revwalk()?;
-		revwalk.set_sorting(Sort::TIME)?;
+		revwalk.set_sorting(Sort::TIME | Sort::TOPOLOGICAL)?;
 		if let Some(range) = range {
 			revwalk.push_range(&range)?;
 		} else {
@@ -104,6 +104,19 @@
 		.to_string())
 	}
 
+	fn get_last_tag() -> Result<String> {
+		Ok(str::from_utf8(
+			Command::new("git")
+				.args(&["describe", "--abbrev=0"])
+				.output()?
+				.stdout
+				.as_ref(),
+		)
+		.unwrap()
+		.trim()
+		.to_string())
+	}
+
 	#[test]
 	fn git_log() -> Result<()> {
 		let repository = Repository::init(
@@ -125,6 +138,8 @@
 				}
 			}
 		}
+		let tags = repository.tags(&None)?;
+		assert_eq!(&get_last_tag()?, tags.last().unwrap().1);
 		Ok(())
 	}
 }
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index fbb5b46..8f98f9a 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,10 +1,10 @@
 [package]
 name = "git-cliff"
-version = "0.1.0-rc.18" # managed by release.sh
+version = "0.1.0-rc.21" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
-readme = "README.md"
+readme = "../README.md"
 homepage = "https://github.com/orhun/git-cliff"
 repository = "https://github.com/orhun/git-cliff"
 keywords = ["changelog", "generator", "conventional", "commit"]
@@ -17,7 +17,7 @@
 log = "0.4.14"
 
 [dependencies.git-cliff-core]
-version = "0.1.0-rc.18" # managed by release.sh
+version = "0.1.0-rc.21" # managed by release.sh
 path = "../git-cliff-core"
 
 [dependencies.structopt]
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 244c5b5..52e8f32 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -36,8 +36,8 @@
 	#[structopt(short, long, env, value_name = "PATH")]
 	pub repository: Option<PathBuf>,
 	/// Prepends entries to the given changelog file.
-	#[structopt(short = "p", long, env, value_name = "PATH")]
-	pub changelog:  Option<PathBuf>,
+	#[structopt(short, long, env, value_name = "PATH")]
+	pub prepend:    Option<PathBuf>,
 	/// Writes output to the given file.
 	#[structopt(short, long, env, value_name = "PATH")]
 	pub output:     Option<PathBuf>,
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index b0b64c0..e436318 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -32,8 +32,8 @@
 			Some(repository) => Some(workdir.join(repository)),
 			None => Some(workdir.clone()),
 		};
-		if let Some(changelog) = args.changelog {
-			args.changelog = Some(workdir.join(changelog));
+		if let Some(changelog) = args.prepend {
+			args.prepend = Some(workdir.join(changelog));
 		}
 	}
 
@@ -60,7 +60,7 @@
 		}
 		_ => {}
 	}
-	if args.changelog.is_some() {
+	if args.prepend.is_some() {
 		config.changelog.footer = None;
 		if !(args.unreleased || args.latest) {
 			return Err(Error::ArgumentError(String::from(
@@ -86,7 +86,11 @@
 			commit_range = Some(format!("{}..HEAD", last_tag));
 		}
 	} else if args.latest {
-		if let (Some(tag1), Some(tag2)) = (
+		if tags.len() < 2 {
+			return Err(Error::ChangelogError(String::from(
+				"latest tag cannot be processed",
+			)));
+		} else if let (Some(tag1), Some(tag2)) = (
 			tags.get_index(tags.len() - 2).map(|(k, _)| k),
 			tags.get_index(tags.len() - 1).map(|(k, _)| k),
 		) {
@@ -129,7 +133,7 @@
 
 	// Generate changelog.
 	let changelog = Changelog::new(releases, &config)?;
-	if let Some(path) = args.changelog {
+	if let Some(path) = args.prepend {
 		changelog.prepend(fs::read_to_string(&path)?, &mut File::create(path)?)
 	} else if let Some(path) = args.output {
 		changelog.generate(&mut File::create(path)?)
diff --git a/release.sh b/release.sh
index a41126a..f134187 100755
--- a/release.sh
+++ b/release.sh
@@ -13,7 +13,7 @@
 	{% for group, commits in commits | group_by(attribute=\"group\") %}
 	{{ group | upper_first }}\
 	{% for commit in commits %}
-		- {{ commit.message | upper_first }} ({{ commit.id | truncate(length=8, end=\"\") }})\
+		- {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end=\"\") }})\
 	{% endfor %}
 	{% endfor %}"
 	changelog=$(cargo run -- --unreleased --strip all)

=====================================================================
start time: Wed Jun 30 00:00:00 CST 2021
end time: Thu Jul 01 00:00:00 CST 2021
description: 
### Bug Fixes
- Wait for core library to update on crates.io before publish

commit message: 
commit 59b7c6ef79c6377b3de26247a232412c765ab6a8+ 1624988686 -----sp :: docs(release): add link to the signer key of the tag
commit ce2246bcfdcbce2e2ef30ec44fbfae26d3914139+ 1624988709 -----sp :: docs(release): add RELEASE.md
commit 6619c385ed5220293b4a9af1c405a364f0085bc9+ 1625005592 -----sp :: chore(release): set the new version in release script
commit f1613e110fff4f912fcc40b7ad1f6da1fbb6bfd2 1625006128 -----sp :: chore(release): prepare for v0.1.0-rc.16
commit 99f2f0701cbf92c5b4ec235e307549af53336db7 1625008151 -----sp :: chore(release): verify the created tag after creation
commit f48108109e84ea6d869c75e98143be9b7ed5d069 1625008926 -----sp :: chore(release): indicate which versions are managed by the script
commit acc1d3453ca865ddbf3e8e786fcc157c8e31eae6 1625010160 -----sp :: fix(cd): publish the cargo workspace members seperately
commit 4453522fabecd8e9e6d254619747d53bd640719f 1625010941 -----sp :: chore(release): prepare for v0.1.0-rc.17
commit f038054417f608b5792b89f60b4d384b74b317dd 1625011712 -----sp :: fix(cd): use a separate step for setting the changelog body
commit 6414789067780d0551292c004a8aaff04483906d 1625011876 -----sp :: fix(cd): fix the syntax of publish step arguments
commit 5648143169e484681e4c2f8a3e9754fc2b90c95c 1625011883 -----sp :: chore(release): prepare for v0.1.0-rc.18

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index e844351..9e5a150 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -102,20 +102,18 @@
         env:
           OUTPUT: CHANGES.md
       - name: Set release body
+        if: matrix.OS == 'ubuntu-18.04'
         id: release
         shell: bash
         run: |
-          if [ "${{ matrix.OS }}" = "ubuntu-18.04" ]; then
-            r=$(cat ${{ steps.git-cliff.outputs.changelog }})
-            r="$(printf "$r" | tail -n +3)"
-            r="${r//'%'/'%25'}"
-            r="${r//$'\n'/'%0A'}"
-            r="${r//$'\r'/'%0D'}"
-            echo "::set-output name=RELEASE_BODY::$r"
-          else
-            echo "::set-output name=RELEASE_BODY::${{ env.RELEASE_VERSION }}"
-          fi
+          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
+          r="$(printf "$r" | tail -n +3)"
+          r="${r//'%'/'%25'}"
+          r="${r//$'\n'/'%0A'}"
+          r="${r//$'\r'/'%0D'}"
+          echo "::set-output name=RELEASE_BODY::$r"
       - name: Upload the release
+        if: matrix.OS == 'ubuntu-18.04'
         uses: svenstaro/upload-release-action@v2
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
@@ -123,8 +121,16 @@
           file_glob: true
           tag: ${{ github.ref }}
           release_name: "Release v${{ env.RELEASE_VERSION }}"
-          overwrite: true
           body: "${{ steps.release.outputs.RELEASE_BODY }}"
+      - name: Upload the release
+        if: matrix.OS != 'ubuntu-18.04'
+        uses: svenstaro/upload-release-action@v2
+        with:
+          repo_token: ${{ secrets.GITHUB_TOKEN }}
+          file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
+          file_glob: true
+          tag: ${{ github.ref }}
+          release_name: "Release v${{ env.RELEASE_VERSION }}"
 
   publish-docker:
     name: Publish the Docker image
@@ -159,8 +165,17 @@
     steps:
       - name: Checkout
         uses: actions/checkout@main
-      - name: Publish
+      - name: Publish the library
         uses: actions-rs/cargo@v1
         with:
           command: publish
-          args: --locked --token ${{ secrets.CARGO_TOKEN }}
+          args: |
+            --manifest-path git-cliff-core/Cargo.toml
+            --locked --token ${{ secrets.CARGO_TOKEN }}
+      - name: Publish the binary
+        uses: actions-rs/cargo@v1
+        with:
+          command: publish
+          args: |
+            --manifest-path git-cliff/Cargo.toml
+            --locked --token ${{ secrets.CARGO_TOKEN }}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a5bf93f..318145b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,41 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0-rc.18] - 2021-06-30
+
+### Bug Fixes
+
+- Use a separate step for setting the changelog body
+- Fix the syntax of publish step arguments
+
+## [0.1.0-rc.17] - 2021-06-29
+
+### Bug Fixes
+
+- Publish the cargo workspace members seperately
+
+### Miscellaneous Tasks
+
+- Verify the created tag after creation
+- Indicate which versions are managed by the script
+
+## [0.1.0-rc.16] - 2021-06-29
+
+### Bug Fixes
+
+- Update lychee arguments to exclude invalid links
+
+### Documentation
+
+- Add CONTRIBUTING.md
+- Add link to the signer key of the tag
+- Add RELEASE.md
+
+### Miscellaneous Tasks
+
+- Enable crates.io releases
+- Set the new version in release script
+
 ## [0.1.0-rc.15] - 2021-06-23
 
 ### Miscellaneous Tasks
diff --git a/Cargo.lock b/Cargo.lock
index 9275e40..2df2be0 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -289,7 +289,7 @@
 
 [[package]]
 name = "git-cliff"
-version = "0.1.0"
+version = "0.1.0-rc.18"
 dependencies = [
  "git-cliff-core",
  "log",
@@ -300,7 +300,7 @@
 
 [[package]]
 name = "git-cliff-core"
-version = "0.1.0"
+version = "0.1.0-rc.18"
 dependencies = [
  "config",
  "git-conventional",
diff --git a/RELEASE.md b/RELEASE.md
new file mode 100644
index 0000000..a8613a5
--- /dev/null
+++ b/RELEASE.md
@@ -0,0 +1,9 @@
+# Creating a Release
+
+[GitHub](https://github.com/orhun/git-cliff/releases), [crates.io](https://crates.io/crates/git-cliff/) and [Docker Hub](https://hub.docker.com/repository/docker/orhunp/git-cliff) releases are automated via [GitHub actions](./.github/workflows/cd.yml) and triggered by pushing a tag.
+
+1. Run the [release script](./release.sh): `./release.sh v[X.Y.Z]`
+2. Push the changes: `git push`
+3. Check if [Continuous Integration](https://github.com/orhun/git-cliff/actions) workflow is completed successfully.
+4. Push the tags: `git push --tags`
+5. Wait for [Continuous Deployment](https://github.com/orhun/git-cliff/actions) workflow to finish.
diff --git a/git-cliff-core/Cargo.toml b/git-cliff-core/Cargo.toml
index 236e248..e463906 100644
--- a/git-cliff-core/Cargo.toml
+++ b/git-cliff-core/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff-core"
-version = "0.1.0"
+version = "0.1.0-rc.18" # managed by release.sh
 description = "Core library of git-cliff"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
diff --git a/git-cliff/Cargo.toml b/git-cliff/Cargo.toml
index 88fb732..fbb5b46 100644
--- a/git-cliff/Cargo.toml
+++ b/git-cliff/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-cliff"
-version = "0.1.0"
+version = "0.1.0-rc.18" # managed by release.sh
 description = "A highly customizable changelog generator ⛰️"
 authors = ["git-cliff contributors <git-cliff@protonmail.com>"]
 license = "GPL-3.0"
@@ -13,10 +13,13 @@
 edition = "2018"
 
 [dependencies]
-git-cliff-core = { path = "../git-cliff-core" }
 pretty_env_logger = "0.4.0"
 log = "0.4.14"
 
+[dependencies.git-cliff-core]
+version = "0.1.0-rc.18" # managed by release.sh
+path = "../git-cliff-core"
+
 [dependencies.structopt]
 version = "0.3"
 default-features = false
diff --git a/release.sh b/release.sh
index 10e1460..a41126a 100755
--- a/release.sh
+++ b/release.sh
@@ -2,6 +2,9 @@
 
 # takes the tag as an argument (e.g. v0.1.0)
 if [ -n "$1" ]; then
+	# update the version
+	msg="# managed by release.sh"
+	sed "s/^version = .* $msg$/version = \"${1#v}\" $msg/" -i git-cliff*/Cargo.toml
 	# update the changelog
 	cargo run -- --tag "$1" > CHANGELOG.md
 	git add -A && git commit -m "chore(release): prepare for $1"
@@ -20,6 +23,7 @@
 		-c user.email="git-cliff@protonmail.com" \
 		-c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
 		tag -s -a "$1" -m "Release $1" -m "$changelog"
+	git tag -v "$1"
 else
 	echo "warn: please provide a tag"
 fi

=====================================================================
start time: Wed Jun 23 00:00:00 CST 2021
end time: Tue Jun 29 00:00:00 CST 2021
description: 
### Bug Fixes
- Update lychee arguments to exclude invalid links
### Documentation
- Add CONTRIBUTING.md
- Add link to the signer key of the tag
- Add RELEASE.md
### Miscellaneous Tasks
- Enable crates.io releases
- Set the new version in release script

commit message: 
commit 01825330d90a9399c9285b5a286b1d69aa1494e7+ 1624483583 -----sp :: chore(cd): use seperate steps for uploading releases
commit cb90048f7b31d4b64bbb447a77e2f70406652d4e 1624484909 -----sp :: chore(release): prepare for v0.1.0-rc.13
commit 6b97c2d18c05fb9cf27088a39b24d12ab1b0c556 1624488854 -----sp :: fix(cd): strip the changelog header before escaping
commit 9ff5c0f500dec3ad59d8262e9b5d86b1b2b8c3ce 1624488883 -----sp :: chore(release): prepare for v0.1.0-rc.14
commit 42a714f31cf5b6f924fe68d966189e2c278a11a6 1624489685 -----sp :: chore(cd): use only one step for uploading releases
commit 129ac1477b2ad02e218629780af32f909f3da3b8 1624489739 -----sp :: chore(release): prepare for v0.1.0-rc.15
commit 31ecfd8ad041e36090575e5851ff00d491ccebca+ 1624744253 -----sp :: chore(cd): enable crates.io releases
commit 0fe28b322e4dd83bef1ba39d1028922065aa8aee+ 1624892797 -----sp :: docs(contributing): add CONTRIBUTING.md

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 8417410..e844351 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -107,16 +107,15 @@
         run: |
           if [ "${{ matrix.OS }}" = "ubuntu-18.04" ]; then
             r=$(cat ${{ steps.git-cliff.outputs.changelog }})
+            r="$(printf "$r" | tail -n +3)"
             r="${r//'%'/'%25'}"
             r="${r//$'\n'/'%0A'}"
             r="${r//$'\r'/'%0D'}"
-            r="$(printf "$r" | tail -n +3)"
             echo "::set-output name=RELEASE_BODY::$r"
           else
             echo "::set-output name=RELEASE_BODY::${{ env.RELEASE_VERSION }}"
           fi
       - name: Upload the release
-        if: matrix.OS == 'ubuntu-18.04'
         uses: svenstaro/upload-release-action@v2
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
@@ -124,16 +123,8 @@
           file_glob: true
           tag: ${{ github.ref }}
           release_name: "Release v${{ env.RELEASE_VERSION }}"
+          overwrite: true
           body: "${{ steps.release.outputs.RELEASE_BODY }}"
-      - name: Upload the release
-        if: matrix.OS != 'ubuntu-18.04'
-        uses: svenstaro/upload-release-action@v2
-        with:
-          repo_token: ${{ secrets.GITHUB_TOKEN }}
-          file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
-          file_glob: true
-          tag: ${{ github.ref }}
-          release_name: "Release v${{ env.RELEASE_VERSION }}"
 
   publish-docker:
     name: Publish the Docker image
@@ -160,15 +151,16 @@
           docker login -u orhun docker.pkg.github.com --password-stdin
       - name: Push (Package Registry)
         run: docker push docker.pkg.github.com/orhun/git-cliff/git-cliff:${{ env.RELEASE_VERSION }}
-#  publish-crates-io:
-#    name: Publish on crates.io
-#    needs: publish-github
-#    runs-on: ubuntu-18.04
-#    steps:
-#      - name: Checkout
-#        uses: actions/checkout@main
-#      - name: Publish
-#        uses: actions-rs/cargo@v1
-#        with:
-#          command: publish
-#          args: --locked --token ${{ secrets.CARGO_TOKEN }}
+
+  publish-crates-io:
+    name: Publish on crates.io
+    needs: publish-github
+    runs-on: ubuntu-18.04
+    steps:
+      - name: Checkout
+        uses: actions/checkout@main
+      - name: Publish
+        uses: actions-rs/cargo@v1
+        with:
+          command: publish
+          args: --locked --token ${{ secrets.CARGO_TOKEN }}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index cd9a424..a5bf93f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,24 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0-rc.15] - 2021-06-23
+
+### Miscellaneous Tasks
+
+- Use only one step for uploading releases
+
+## [0.1.0-rc.14] - 2021-06-23
+
+### Bug Fixes
+
+- Strip the changelog header before escaping
+
+## [0.1.0-rc.13] - 2021-06-23
+
+### Miscellaneous Tasks
+
+- Use seperate steps for uploading releases
+
 ## [0.1.0-rc.12] - 2021-06-21
 
 ### Bug Fixes
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..426580f
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,51 @@
+# Contributing
+
+Thank you for considering contributing to [git-cliff](https://github.com/orhun/git-cliff/)!
+
+When contributing, please first discuss the change you wish to make via [issue](https://github.com/orhun/git-cliff/issues),
+[email](mailto:orhunparmaksiz@gmail.com), or any other method with the owners of this repository before making a change.
+
+Note that we have a [Code of Conduct](./CODE_OF_CONDUCT.md), please follow it in all your interactions with the project.
+
+## Setup
+
+1. Fork this repository and create your branch from `main`.
+
+2. Clone your forked repository.
+
+```sh
+git clone https://github.com/{username}/git-cliff && cd git-cliff
+```
+
+3. Make sure that you have [Rust](https://www.rust-lang.org/) `1.53.0-nightly` or later installed and build the project.
+   
+```sh
+cargo build
+```
+
+4. Start committing your changes. Follow the [conventional commit specification](https://www.conventionalcommits.org/) while doing so.
+
+5. Add your tests (if you haven't already) or update the existing tests according to the changes. And check if the tests are passed.
+
+```sh
+cargo test
+```
+
+7. Make sure [rustfmt](https://github.com/rust-lang/rustfmt) and [clippy](https://github.com/rust-lang/rust-clippy) don't complain about your changes.
+
+```sh
+cargo fmt --all -- --check --verbose
+cargo clippy --verbose -- -D warnings
+```
+
+## Create a Pull Request
+
+1. Ensure that you updated the documentation and filled the [Pull Request template](./.github/PULL_REQUEST_TEMPLATE.md) according to the changes you made.
+
+2. Wait for approval from the project owner/maintainer. Discuss the possible changes and update your Pull Request if necessary.
+
+3. You may merge the Pull Request once you have the sign-off of the project owner/maintainer, or if you do not have permission to do that, you may request the project owner/maintainer to merge it in case they haven't done it after a while.
+
+# License
+
+By contributing, you agree that your contributions will be licensed under [GNU General Public License v3.0](./LICENSE).

=====================================================================
start time: Mon Jun 21 00:00:00 CST 2021
end time: Wed Jun 23 00:00:00 CST 2021
description: 
### Miscellaneous Tasks
- Use seperate steps for uploading releases

commit message: 
commit 41053fbe90a08648b70e5cca6a2504e94202bd06 1624213230 -----sp :: chore(cd): override the changelog template
commit 06ecb19908a7c88d252d0526c53617a278ec8281 1624213280 -----sp :: chore(release): prepare for v0.1.0-rc.7
commit ad3126e15144f98b5845c31149214cdce5ffb3d5 1624213679 -----sp :: chore(docker): rename the docker automated builds action
commit 381c941a94188fb40bcce1129c29e6a5379ac7a7 1624214002 -----sp :: fix(release): specify the committer email in release script
commit 85aa1cdc688b74d1d2df46dc61e6aa5561fc6ace 1624214212 -----sp :: fix(cd): double quote the environment variable
commit 5a57724f960c29b4f09948519c572c581e3684a8 1624214219 -----sp :: chore(release): prepare for v0.1.0-rc.8
commit 49aa011f5f8cf0bc0a466fed82a94a25384e3ee0 1624214482 -----sp :: chore(release): prepare for v0.1.0-rc.9
commit 9f84fe58a76c4aed97844e648bf42ad0c1d46303 1624215347 -----sp :: style(config): update the order of entries in config
commit 40a9562c899a7ddfe411ceb20e8cda2311f8a4ac 1624215355 -----sp :: chore(release): prepare for v0.1.0-rc.10
commit 1be66eebebaa3a5849399433ad5823345668ffb1+ 1624217078 -----sp :: refactor(error): use custom error message for GroupError
commit d826b9d2e5bdd30b132731ff6d1dc87748543ccb+ 1624307429 -----sp :: chore(cd): remove the custom changelog template
commit db55556787bdbec2cc6ef250dfd1e8913396b615 1624307442 -----sp :: chore(release): prepare for v0.1.0-rc.11
commit c8989122d06af2abb70edf5d42d7297411d0b093 1624308117 -----sp :: chore(project): update .editorconfig about shell scripts
commit 5677281b2ca594789a32c53e7f304cae734c089f 1624308522 -----sp :: chore(release): include the commit id in the custom template
commit 92a4b0d5bfb8c27627886005d0e6d823a3cc6476 1624309628 -----sp :: fix(cd): use printf to prevent field splitting the variable
commit 5d616ee249aaee9f38d6d9b7a9e14170b9b7405a 1624309936 -----sp :: fix(release): fix the character escape in release script
commit 000a67cd8aae7ae20848baa04cd6212376dcde12 1624315749 -----sp :: fix(git): return tags by their creation order
commit 97e098f3a054be7c7dd0ce78f7d19ff5efa0055c 1624315782 -----sp :: chore(release): prepare for v0.1.0-rc.12

hunks: 
diff --git a/.editorconfig b/.editorconfig
index 2a03a43..8bce75f 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -7,3 +7,7 @@
 [*.rs]
 indent_style = tab
 indent_size = 4
+
+[*.sh]
+indent_style = tab
+indent_size = 4
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 9b4f05c..724c939 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -98,16 +98,9 @@
         id: git-cliff
         with:
           config: cliff.toml
-          args: -vv --latest --strip header --body $template
+          args: -vv --latest --strip header
         env:
           OUTPUT: CHANGES.md
-          template: >
-            {% for group, commits in commits | group_by(attribute="group") %}
-                ### {{ group | upper_first }}
-                {% for commit in commits %}
-                    - {{ commit.message | upper_first }}\
-                {% endfor %}
-            {% endfor %}
       - name: Set release body
         id: release
         shell: bash
@@ -117,6 +110,7 @@
             r="${r//'%'/'%25'}"
             r="${r//$'\n'/'%0A'}"
             r="${r//$'\r'/'%0D'}"
+            r="$(printf "$r" | tail -n +3)"
             echo "::set-output name=RELEASE_BODY::$r"
           else
             echo "::set-output name=RELEASE_BODY::${{ env.RELEASE_VERSION }}"
diff --git a/.github/workflows/docker.yml b/.github/workflows/docker.yml
index 511fb75..28c09af 100644
--- a/.github/workflows/docker.yml
+++ b/.github/workflows/docker.yml
@@ -1,4 +1,4 @@
-name: Automated Builds
+name: Docker Automated Builds
 
 on:
   push:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index f5f94af..cd9a424 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,57 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0-rc.12] - 2021-06-21
+
+### Bug Fixes
+
+- Use printf to prevent field splitting the variable
+- Fix the character escape in release script
+- Return tags by their creation order
+
+### Miscellaneous Tasks
+
+- Update .editorconfig about shell scripts
+- Include the commit id in the custom template
+
+## [0.1.0-rc.11] - 2021-06-21
+
+### Miscellaneous Tasks
+
+- Remove the custom changelog template
+
+### Refactor
+
+- Use custom error message for GroupError
+
+## [0.1.0-rc.10] - 2021-06-20
+
+### Styling
+
+- Update the order of entries in config
+
+## [0.1.0-rc.8] - 2021-06-20
+
+### Bug Fixes
+
+- Specify the committer email in release script
+- Double quote the environment variable
+
+### Miscellaneous Tasks
+
+- Rename the docker automated builds action
+
+## [0.1.0-rc.7] - 2021-06-20
+
+### Features
+
+- Support setting the body template via args
+
+### Miscellaneous Tasks
+
+- Set a custom changelog for the tag message
+- Override the changelog template
+
 ## [0.1.0-rc.6] - 2021-06-20
 
 ### Miscellaneous Tasks
diff --git a/cliff.toml b/cliff.toml
index bff4626..4b86cd2 100644
--- a/cliff.toml
+++ b/cliff.toml
@@ -21,12 +21,12 @@
     {% endfor %}
 {% endfor %}\n
 """
+# remove the leading and trailing whitespaces from the template
+trim = true
 # changelog footer
 footer = """
 <!-- generated by git-cliff -->
 """
-# remove the leading and trailing whitespaces from the template
-trim = true
 
 [git]
 # allow only conventional commits
diff --git a/git-cliff-core/src/commit.rs b/git-cliff-core/src/commit.rs
index c767260..4ecd20d 100644
--- a/git-cliff-core/src/commit.rs
+++ b/git-cliff-core/src/commit.rs
@@ -96,7 +96,9 @@
 						self.group = parser.group.as_ref().cloned();
 						return Ok(self);
 					} else {
-						return Err(AppError::GroupError);
+						return Err(AppError::GroupError(String::from(
+							"Skipping commit",
+						)));
 					}
 				}
 			}
@@ -104,7 +106,9 @@
 		if !filter {
 			Ok(self)
 		} else {
-			Err(AppError::GroupError)
+			Err(AppError::GroupError(String::from(
+				"Commit does not belong to any group",
+			)))
 		}
 	}
 }
diff --git a/git-cliff-core/src/error.rs b/git-cliff-core/src/error.rs
index 7698fee..c75a812 100644
--- a/git-cliff-core/src/error.rs
+++ b/git-cliff-core/src/error.rs
@@ -16,9 +16,9 @@
 	/// error.
 	#[error("Cannot parse the commit: `{0}`")]
 	ParseError(#[from] git_conventional::Error),
-	/// When commit's not belong to any group we throw this error.
-	#[error("Commit does not belong to any group")]
-	GroupError,
+	/// Error that may occur while grouping commits.
+	#[error("Grouping error: `{0}`")]
+	GroupError(String),
 	/// Error that may occur while template operations such as parse and render.
 	#[error("Template error: `{0}`")]
 	TemplateError(#[from] tera::Error),
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index 407ac57..a34cd9d 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -4,7 +4,6 @@
 };
 use git2::{
 	Commit,
-	ObjectType,
 	Repository as GitRepository,
 	Sort,
 };
@@ -58,19 +57,28 @@
 		&self,
 		pattern: &Option<String>,
 	) -> Result<IndexMap<String, String>> {
-		let mut tags = IndexMap::new();
+		let mut tags: Vec<(Commit, String)> = Vec::new();
 		let tag_names = self.inner.tag_names(pattern.as_deref())?;
 		for name in tag_names.iter().flatten().map(String::from) {
 			let obj = self.inner.revparse_single(&name)?;
 			if let Ok(commit) = obj.clone().into_commit() {
-				tags.insert(commit.id().to_string(), name);
+				tags.push((commit, name));
 			} else if let Some(tag) = obj.as_tag() {
-				if let Some(ObjectType::Commit) = tag.target_type() {
-					tags.insert(tag.target_id().to_string(), name);
+				if let Some(commit) = tag
+					.target()
+					.ok()
+					.map(|target| target.into_commit().ok())
+					.flatten()
+				{
+					tags.push((commit, name));
 				}
 			}
 		}
-		Ok(tags)
+		tags.sort_by(|a, b| a.0.time().seconds().cmp(&b.0.time().seconds()));
+		Ok(tags
+			.into_iter()
+			.map(|(a, b)| (a.id().to_string(), b))
+			.collect())
 	}
 }
 
diff --git a/release.sh b/release.sh
index 2a5b927..46b61fb 100755
--- a/release.sh
+++ b/release.sh
@@ -10,12 +10,14 @@
 	{% for group, commits in commits | group_by(attribute=\"group\") %}
 	{{ group | upper_first }}\
 	{% for commit in commits %}
-		- {{ commit.message | upper_first }}\
+		- {{ commit.message | upper_first }} ({{ commit.id | truncate(length=8, end=\"\") }})\
 	{% endfor %}
 	{% endfor %}"
 	changelog=$(cargo run -- --unreleased --strip all)
 	# create a tag
-	git -c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
+	git -c user.name="git-cliff" \
+		-c user.email="git-cliff@protonmail.com" \
+		-c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
 		tag -s -a "$1" -m "Release $1" -m "$changelog"
 else
 	echo "warn: please provide a tag"

=====================================================================
start time: Sun Jun 20 00:00:00 CST 2021
end time: Mon Jun 21 00:00:00 CST 2021
description: 
### Miscellaneous Tasks
- Remove the custom changelog template
### Refactor
- Use custom error message for GroupError

commit message: 
commit 66dfbf40ec0ef91dc2016c1bdf2044a07e4580d5+ 1624123029 -----sp :: chore(cd): set the changelog as release body
commit 62403be828ac75f5689f27ad5d5e0421b514be62 1624133943 -----sp :: chore(cd): fix setting the release body
commit c7f08fe4a3113f656bb45a29141aa127d4e453e5 1624135904 -----sp :: fix(release): strip the unreleased title from tag message
commit 28171f0f98f0980f9b0a6d3ca89ed3d6c70eb0ef 1624137143 -----sp :: chore(config): update the skip_tags regex
commit 24b9068d308b9818fab8fd631120a79e4069521d 1624137390 -----sp :: fix(config): update commit parsers to match the commit type
commit e3d34821911ffb44e4c6e61e8d0c6ecd2d31a341 1624137665 -----sp :: chore(config): update template to include commit ids
commit 9f082b05831016c39f7c6ce3a1ba7f843c34db85 1624137711 -----sp :: chore(release): prepare for v0.1.0-rc.3
commit f95fca966bacb520e958fe783e239f98dfe026bc 1624138033 -----sp :: revert: chore(config): update template to include commit ids
commit dc81d02765e3d7e0d595e85e99bf317ace9cd813 1624138106 -----sp :: chore(release): prepare for v0.1.0-rc.4
commit 2e5f30a5c3b920dc2b52fe12774fccb2fb3fd124 1624138508 -----sp :: fix(config): update config to skip release commits
commit 6a7bdf0c5d19f225a0d986a160cb9663a42532bf 1624138522 -----sp :: chore(release): prepare for v0.1.0-rc.5
commit 76239771662bf342d742c12907619eece1bf946d 1624195275 -----sp :: chore(cd): set the release body on linux
commit 027521ce2d8fa51986ff16c5b180c6c1980e0c7d 1624195414 -----sp :: chore(release): prepare for v0.1.0-rc.6
commit 9fc08f4c50160374298bf77701ee5e299fa435a0 1624197446 -----sp :: feat(changelog): support setting the body template via args
commit c4df0fa892568f1491b62c47d5757fb70b7f4316 1624198132 -----sp :: chore(release): set a custom changelog for the tag message

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index f8592c4..9164188 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -93,22 +93,27 @@
             --passphrase-fd 0 --detach-sign \
             git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz
       - name: Generate a changelog
+        if: matrix.OS == 'ubuntu-18.04'
         uses: orhun/git-cliff-action@v1
         id: git-cliff
         with:
           config: cliff.toml
-          args: --verbose --latest --strip header
+          args: -vv --latest --strip header
         env:
           OUTPUT: CHANGES.md
       - name: Set release body
         id: release
         shell: bash
         run: |
-          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
-          r="${r//'%'/'%25'}"
-          r="${r//$'\n'/'%0A'}"
-          r="${r//$'\r'/'%0D'}"
-          echo "::set-output name=RELEASE_BODY::$r"
+          if [ "${{ matrix.OS }}" = "ubuntu-18.04" ]; then
+            r=$(cat ${{ steps.git-cliff.outputs.changelog }})
+            r="${r//'%'/'%25'}"
+            r="${r//$'\n'/'%0A'}"
+            r="${r//$'\r'/'%0D'}"
+            echo "::set-output name=RELEASE_BODY::$r"
+          else
+            echo "::set-output name=RELEASE_BODY::${{ env.RELEASE_VERSION }}"
+          fi
       - name: Upload the release
         uses: svenstaro/upload-release-action@v2
         with:
@@ -116,9 +121,9 @@
           file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
           file_glob: true
           tag: ${{ github.ref }}
-          release_name: "Release ${{ github.ref }}"
           overwrite: true
-          body: ${{ steps.release.outputs.RELEASE_BODY }}
+          release_name: "Release v${{ env.RELEASE_VERSION }}"
+          body: "${{ steps.release.outputs.RELEASE_BODY }}"
 
   publish-docker:
     name: Publish the Docker image
diff --git a/CHANGELOG.md b/CHANGELOG.md
index ca697a0..f5f94af 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,111 @@
 # Changelog
 All notable changes to this project will be documented in this file.
 
+## [0.1.0-rc.6] - 2021-06-20
+
+### Miscellaneous Tasks
+
+- Set the release body on linux
+
+## [0.1.0-rc.5] - 2021-06-19
+
+### Bug Fixes
+
+- Update config to skip release commits
+
+## [0.1.0-rc.4] - 2021-06-19
+
+### Revert
+
+- Chore(config): update template to include commit ids
+
+## [0.1.0-rc.3] - 2021-06-19
+
+### Bug Fixes
+
+- Strip the unreleased title from tag message
+- Update commit parsers to match the commit type
+
+### Miscellaneous Tasks
+
+- Fix setting the release body
+- Update the skip_tags regex
+- Update template to include commit ids
+
+## [0.1.0-rc.2] - 2021-06-19
+
+### Bug Fixes
+
+- Use default tag_pattern for tests
+
+### Features
+
+- Add `--output` argument
+
+### Miscellaneous Tasks
+
+- Add release title to the tag message
+- Set the release name explicitly
+- Remove user directive from Dockerfile
+- Set the changelog as release body
+
+### Refactor
+
+- Make tag_pattern optional
+
+## [0.1.0-rc.1] - 2021-06-16
+
+### Documentation
+
+- Update the doc comment for completions script
+- Add usage section
+
+### Features
+
+- Add `--workdir` argument
+- Show the processsed commit message
+
+### Miscellaneous Tasks
+
+- Add release script
+- Update the release script about arguments
+- Strip the markdown format from tag message
+
+### Refactor
+
+- Update the value name for `--strip`
+- Improve logging
+- Update value names and description
+
+## [0.1.0-beta.4] - 2021-06-14
+
+### Bug Fixes
+
+- Use bash while setting the release version
+
+### Miscellaneous Tasks
+
+- Add docker releases
+
+## [0.1.0-beta.3] - 2021-06-14
+
+### Bug Fixes
+
+- Include configuration file in the binary releases
+- Specify the bash as shell
+
+### Miscellaneous Tasks
+
+- Set the release body text
+
+## [0.1.0-beta.2] - 2021-06-14
+
+### Bug Fixes
+
+- Install musl-tools for musl builds
+
+### Miscellaneous Tasks
+
+- Update config
+
 <!-- generated by git-cliff -->
diff --git a/README.md b/README.md
index 025368d..1d7b310 100644
--- a/README.md
+++ b/README.md
@@ -31,6 +31,7 @@
 -p, --changelog <PATH>     Prepends entries to the given changelog file [env: CHANGELOG=]
 -o, --output <PATH>        Writes output to the given file [env: OUTPUT=]
 -t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
+-b, --body <TEMPLATE>      Sets the template for the changelog body [env: TEMPLATE=]
 -s, --strip <PART>         Strips the given parts from the changelog [possible values: header, footer, all]
 ```
 
diff --git a/cliff.toml b/cliff.toml
index d06ad55..bff4626 100644
--- a/cliff.toml
+++ b/cliff.toml
@@ -34,15 +34,15 @@
 conventional_commits = true
 # regex for parsing and grouping commits
 commit_parsers = [
-    { message = "feat*", group = "Features"},
-    { message = "fix*", group = "Bug Fixes"},
-    { message = "doc*", group = "Documentation"},
-    { message = "perf*", group = "Performance"},
-    { message = "refactor*", group = "Refactor"},
-    { message = "style*", group = "Styling"},
-    { message = "test*", group = "Testing"},
-    { message = "chore: Prepare*", skip = true},
-    { message = "chore*", group = "Miscellaneous Tasks"},
+    { message = "^feat*", group = "Features"},
+    { message = "^fix*", group = "Bug Fixes"},
+    { message = "^doc*", group = "Documentation"},
+    { message = "^perf*", group = "Performance"},
+    { message = "^refactor*", group = "Refactor"},
+    { message = "^style*", group = "Styling"},
+    { message = "^test*", group = "Testing"},
+    { message = "^chore\\(release\\): prepare for*", skip = true},
+    { message = "^chore*", group = "Miscellaneous Tasks"},
     { body = ".*security", group = "Security"},
 ]
 # filter out the commits that are not matched by commit parsers
@@ -50,4 +50,4 @@
 # glob pattern for matching git tags
 tag_pattern = "v[0-9]*"
 # regex for skipping tags
-skip_tags = "v0.1.0*"
+skip_tags = "v0.1.0-beta.1"
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index 6a53958..244c5b5 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -44,6 +44,15 @@
 	/// Sets the tag for the latest version.
 	#[structopt(short, long, env, value_name = "TAG", allow_hyphen_values = true)]
 	pub tag:        Option<String>,
+	/// Sets the template for the changelog body.
+	#[structopt(
+		short,
+		long,
+		env = "TEMPLATE",
+		value_name = "TEMPLATE",
+		allow_hyphen_values = true
+	)]
+	pub body:       Option<String>,
 	/// Processes the commits starting from the latest tag.
 	#[structopt(short, long)]
 	pub latest:     bool,
@@ -51,8 +60,12 @@
 	#[structopt(short, long)]
 	pub unreleased: bool,
 	/// Strips the given parts from the changelog.
-	#[structopt(short, long, value_name = "PART",
-		possible_values = &["header", "footer", "all"])]
+	#[structopt(
+		short,
+		long,
+		value_name = "PART",
+		possible_values = &["header", "footer", "all"]
+	)]
 	pub strip:      Option<String>,
 	/// Sets the commit range to process.
 	#[structopt(value_name = "RANGE")]
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index a510f41..b0b64c0 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -68,6 +68,9 @@
 			)));
 		}
 	}
+	if let Some(template) = args.body {
+		config.changelog.body = template;
+	}
 
 	// Initialize the git repository.
 	let repository =
diff --git a/release.sh b/release.sh
index 3194661..2a5b927 100755
--- a/release.sh
+++ b/release.sh
@@ -1,11 +1,22 @@
 #!/usr/bin/env bash
 
+# takes the tag as an argument (e.g. v0.1.0)
 if [ -n "$1" ]; then
+	# update the changelog
 	cargo run -- --tag "$1" > CHANGELOG.md
 	git add -A && git commit -m "chore(release): prepare for $1"
+	# generate a changelog for the tag message
+	export TEMPLATE="\
+	{% for group, commits in commits | group_by(attribute=\"group\") %}
+	{{ group | upper_first }}\
+	{% for commit in commits %}
+		- {{ commit.message | upper_first }}\
+	{% endfor %}
+	{% endfor %}"
 	changelog=$(cargo run -- --unreleased --strip all)
-	git -c user.name="git-cliff" \
-		-c user.email="git-cliff@protonmail.com" \
-		-c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
-		tag -s -a "$1" -m "Release $1\n\n${changelog//### /}"
+	# create a tag
+	git -c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
+		tag -s -a "$1" -m "Release $1" -m "$changelog"
+else
+	echo "warn: please provide a tag"
 fi

=====================================================================
start time: Wed Jun 16 00:00:00 CST 2021
end time: Sat Jun 19 00:00:00 CST 2021
description: 
### Bug Fixes
- Use default tag_pattern for tests
### Features
- Add `--output` argument 
### Miscellaneous Tasks
- Add release title to the tag message
- Set the release name explicitly
- Remove user directive from Dockerfile
- Set the changelog as release body
### Refactor
- Make tag_pattern optional
 
commit message: 
commit de439bef01e0e1209b8517ce7b241bb0db2cb530+ 1623789845 -----sp :: feat(args): add `--workdir` argument
commit e8a3c35fa1f2a9a1a99ad8c60b82899c2af212eb+ 1623790017 -----sp :: refactor(args): update the value name for `--strip`
commit 53334533eb6399dc4b931fa3f61c32b5e28bd9e7+ 1623798254 -----sp :: refactor(logs): improve logging
commit 45dccf74a4a5449d92d453d21b6566acd8f30ebe+ 1623799865 -----sp :: feat(logs): show the processsed commit message
commit c697b17f67c9438a1fb159db74b1e225aeb28853+ 1623831315 -----sp :: refactor(args): update value names and description
commit c87fbbe7cf869dd343269f6f23d9e4776a7d952b+ 1623872574 -----sp :: docs(readme): add usage section
commit d76bb9b3e5ff41df96b27c4fb202a2dd2344d6b2+ 1623872625 -----sp :: chore(project): add release script
commit 098c6ad3803d728f4cd25320cb557d2a0bb22bd1+ 1623873128 -----sp :: chore(project): update the release script about arguments
commit 3cb67618ef475bf0eb144c5b84cd68af0758f564+ 1623874020 -----sp :: chore(release): strip the markdown format from tag message
commit 6099b2d0c7c7d51a44a0e05a53908a9a370a7e83+ 1623874467 -----sp :: chore(release): add release title to the tag message
commit 0e5a7b1dd54afff0085930bf8c058803cfe3ea03+ 1623874651 -----sp :: chore(cd): set the release name explicitly
commit 076fc8580aee74755003d99d902b3e64abcad535+ 1623972008 -----sp :: chore(docker): remove user directive from Dockerfile
commit 3a27a3e1a2d3813def0405ddf89914c5f10f7b36+ 1623973907 -----sp :: refactor(config): make tag_pattern optional
commit e6fb8de5d834eb5fe5ff3b5fab1986fcf5e720b6+ 1623974675 -----sp :: fix(test): use default tag_pattern for tests

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
index 51dc04a..666da4d 100644
--- a/.github/workflows/cd.yml
+++ b/.github/workflows/cd.yml
@@ -97,6 +97,7 @@
           file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
           file_glob: true
           tag: ${{ github.ref }}
+          release_name: "Release ${{ github.ref }}"
           overwrite: true
           body: "git-cliff release v${{ env.RELEASE_VERSION }}"
 
diff --git a/Dockerfile b/Dockerfile
index d7baf7c..f312e8e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -23,5 +23,4 @@
 FROM debian:buster-slim as runner
 WORKDIR app
 COPY --from=builder /app/target/release/git-cliff /usr/local/bin
-USER nobody
 ENTRYPOINT ["git-cliff"]
diff --git a/README.md b/README.md
index a3f4ecf..62c0946 100644
--- a/README.md
+++ b/README.md
@@ -8,11 +8,41 @@
 
 ## Usage
 
+```
+git-cliff [FLAGS] [OPTIONS] [RANGE]
+```
+
+**Flags:**
+
+```
+-v, --verbose       Increases the logging verbosity
+-l, --latest        Processes the commits starting from the latest tag
+-u, --unreleased    Processes the commits that do not belong to a tag
+-h, --help          Prints help information
+-V, --version       Prints version information
+```
+
+**Options:**
+
+```
+-c, --config <PATH>        Sets the configuration file [env: CONFIG=]  [default: cliff.toml]
+-w, --workdir <PATH>       Sets the working directory [env: WORKDIR=]
+-r, --repository <PATH>    Sets the repository to parse commits from [env: REPOSITORY=]
+-p, --changelog <PATH>     Prepends entries to the given changelog file [env: CHANGELOG=]
+-t, --tag <TAG>            Sets the tag for the latest version [env: TAG=]
+-s, --strip <PART>         Strips the given parts from the changelog [possible values: header, footer, all]
+```
+
+**Args:**
+
+```
+<RANGE>    Sets the commit range to process
+```
+
 ### Docker
 
 The easiest way of running **git-cliff** (in the git root directory) is to use the [available tags](https://hub.docker.com/repository/docker/orhunp/git-cliff/tags) from [Docker Hub](https://hub.docker.com/repository/docker/orhunp/git-cliff):
 
-
 ```sh
 docker run -t -v "$(pwd)":/app/ orhunp/git-cliff:latest
 ```
@@ -25,6 +55,8 @@
 
 Also, you can build the image yourself using `docker build -t git-cliff .` command.
 
+## Examples
+
 ## License
 
 GNU General Public License ([v3.0](https://www.gnu.org/licenses/gpl.txt))
diff --git a/git-cliff-core/src/config.rs b/git-cliff-core/src/config.rs
index b086748..60e1e6b 100644
--- a/git-cliff-core/src/config.rs
+++ b/git-cliff-core/src/config.rs
@@ -33,7 +33,7 @@
 	/// Whether to filter out commits.
 	pub filter_commits:       Option<bool>,
 	/// Blob pattern for git tags.
-	pub tag_pattern:          String,
+	pub tag_pattern:          Option<String>,
 	#[serde(with = "serde_regex", default)]
 	/// Regex to skip matched tags.
 	pub skip_tags:            Option<Regex>,
diff --git a/git-cliff-core/src/repo.rs b/git-cliff-core/src/repo.rs
index 73295d7..407ac57 100644
--- a/git-cliff-core/src/repo.rs
+++ b/git-cliff-core/src/repo.rs
@@ -54,9 +54,12 @@
 	/// Parses and returns a commit-tag map.
 	///
 	/// It collects lightweight and annotated tags.
-	pub fn tags(&self, pattern: &str) -> Result<IndexMap<String, String>> {
+	pub fn tags(
+		&self,
+		pattern: &Option<String>,
+	) -> Result<IndexMap<String, String>> {
 		let mut tags = IndexMap::new();
-		let tag_names = self.inner.tag_names(Some(pattern))?;
+		let tag_names = self.inner.tag_names(pattern.as_deref())?;
 		for name in tag_names.iter().flatten().map(String::from) {
 			let obj = self.inner.revparse_single(&name)?;
 			if let Ok(commit) = obj.clone().into_commit() {
diff --git a/git-cliff-core/tests/integration_test.rs b/git-cliff-core/tests/integration_test.rs
index 28f4a5c..d226469 100644
--- a/git-cliff-core/tests/integration_test.rs
+++ b/git-cliff-core/tests/integration_test.rs
@@ -44,7 +44,7 @@
 			},
 		]),
 		filter_commits:       Some(true),
-		tag_pattern:          String::new(),
+		tag_pattern:          None,
 		skip_tags:            None,
 	};
 
diff --git a/git-cliff/src/args.rs b/git-cliff/src/args.rs
index c617b9d..55209dc 100644
--- a/git-cliff/src/args.rs
+++ b/git-cliff/src/args.rs
@@ -17,9 +17,9 @@
     rename_all_env = "screaming-snake"
 )]
 pub struct Opt {
-	/// Activates the debug mode
-	#[structopt(short, long)]
-	pub debug:      bool,
+	/// Increases the logging verbosity.
+	#[structopt(short, long, parse(from_occurrences), alias = "debug")]
+	pub verbose:    u8,
 	/// Sets the configuration file.
 	#[structopt(
 		short,
@@ -48,8 +48,10 @@
 	#[structopt(short, long)]
 	pub unreleased: bool,
 	/// Strips the given parts from the changelog.
-	#[structopt(short, long, possible_values = &["header", "footer", "all"])]
+	#[structopt(short, long, value_name = "PART",
+		possible_values = &["header", "footer", "all"])]
 	pub strip:      Option<String>,
 	/// Sets the commit range to process.
+	#[structopt(value_name = "RANGE")]
 	pub range:      Option<String>,
 }
diff --git a/git-cliff/src/changelog.rs b/git-cliff/src/changelog.rs
index ebcbb3a..b96a6bb 100644
--- a/git-cliff/src/changelog.rs
+++ b/git-cliff/src/changelog.rs
@@ -39,6 +39,7 @@
 	/// Processes the commits and omits the ones that doesn't match the
 	/// criteria set by configuration file.
 	fn process_commits(&mut self) {
+		debug!("Processing the commits...");
 		let config = &self.config;
 		self.releases.iter_mut().for_each(|release| {
 			release.commits = release
@@ -52,7 +53,17 @@
 					) {
 						Ok(commit) => Some(commit),
 						Err(e) => {
-							debug!("Cannot process commit: {} ({})", commit.id, e);
+							trace!(
+								"{} - {} ({})",
+								commit.id[..7].to_string(),
+								e,
+								commit
+									.message
+									.lines()
+									.next()
+									.unwrap_or_default()
+									.trim()
+							);
 							None
 						}
 					}
@@ -63,6 +74,7 @@
 
 	/// Processes the releases and filters them out based on the configuration.
 	fn process_releases(&mut self) {
+		debug!("Processing the releases...");
 		let skip_regex = self.config.git.skip_tags.as_ref();
 		self.releases = self
 			.releases
@@ -71,21 +83,16 @@
 			.rev()
 			.filter(|release| {
 				if release.commits.is_empty() {
-					debug!(
-						"Release {} doesn't have any commits",
-						release
-							.version
-							.as_ref()
-							.cloned()
-							.unwrap_or_else(|| String::from("[?]"))
-					);
+					if let Some(version) = release.version.as_ref().cloned() {
+						trace!("Release doesn't have any commits: {}", version);
+					}
 					false
 				} else if let Some(version) = &release.version {
 					!skip_regex
 						.map(|r| {
 							let skip_tag = r.is_match(version);
 							if skip_tag {
-								debug!("Skipping release: {}", version)
+								trace!("Skipping release: {}", version)
 							}
 							skip_tag
 						})
@@ -99,6 +106,7 @@
 
 	/// Generates the changelog and writes it to the given output.
 	pub fn generate<W: Write>(&self, out: &mut W) -> Result<()> {
+		debug!("Generating changelog...");
 		if let Some(header) = &self.config.changelog.header {
 			write!(out, "{}", header)?;
 		}
@@ -117,6 +125,7 @@
 		mut changelog: String,
 		out: &mut W,
 	) -> Result<()> {
+		debug!("Generating changelog and prepending...");
 		if let Some(header) = &self.config.changelog.header {
 			changelog = changelog.replacen(header, "", 1);
 		}
@@ -179,7 +188,7 @@
 					},
 				]),
 				filter_commits:       Some(false),
-				tag_pattern:          String::new(),
+				tag_pattern:          None,
 				skip_tags:            Regex::new("v3.*").ok(),
 			},
 		};
diff --git a/git-cliff/src/lib.rs b/git-cliff/src/lib.rs
index e6d4ad7..725dd4f 100644
--- a/git-cliff/src/lib.rs
+++ b/git-cliff/src/lib.rs
@@ -97,7 +97,7 @@
 		if let Some(commit_id) = commits.first().map(|c| c.id().to_string()) {
 			match tags.get(&commit_id) {
 				Some(tag) => {
-					debug!("There is already a tag ({}) for {}", tag, commit_id)
+					warn!("There is already a tag ({}) for {}", tag, commit_id)
 				}
 				None => {
 					tags.insert(commit_id, tag);
diff --git a/git-cliff/src/main.rs b/git-cliff/src/main.rs
index 70c8d73..410dd5c 100644
--- a/git-cliff/src/main.rs
+++ b/git-cliff/src/main.rs
@@ -5,8 +5,10 @@
 
 fn main() {
 	let args = Opt::from_args();
-	if args.debug {
+	if args.verbose == 1 {
 		env::set_var("RUST_LOG", "debug");
+	} else if args.verbose > 1 {
+		env::set_var("RUST_LOG", "trace");
 	} else if env::var_os("RUST_LOG").is_none() {
 		env::set_var("RUST_LOG", "info");
 	}
diff --git a/release.sh b/release.sh
new file mode 100755
index 0000000..3194661
--- /dev/null
+++ b/release.sh
@@ -0,0 +1,11 @@
+#!/usr/bin/env bash
+
+if [ -n "$1" ]; then
+	cargo run -- --tag "$1" > CHANGELOG.md
+	git add -A && git commit -m "chore(release): prepare for $1"
+	changelog=$(cargo run -- --unreleased --strip all)
+	git -c user.name="git-cliff" \
+		-c user.email="git-cliff@protonmail.com" \
+		-c user.signingkey="1D2D410A741137EBC544826F4A92FA17B6619297" \
+		tag -s -a "$1" -m "Release $1\n\n${changelog//### /}"
+fi

=====================================================================
start time: Mon Jun 14 00:00:00 CST 2021
end time: Wed Jun 16 00:00:00 CST 2021
description: 
### Documentation
- Update the doc comment for completions script
- Add usage section
### Features
- Add `--workdir` argument
- Show the processsed commit message
### Miscellaneous Tasks
- Add release script
- Update the release script about arguments
- Strip the markdown format from tag message
### Refactor
- Update the value name for `--strip`
- Improve logging
- Update value names and description

commit message: 
commit 66fe8be31323cb57b09b87ec8d725f6acc2ec6c2 1623625046 -----sp :: style(project): update structure
commit 7d25e98a8096300497b4684574d042544af26ca4 1623625507 -----sp :: chore(project): add shell completion generation script
commit 839c7d0a5f29908333feefd8fb912e7924a153c7 1623700717 -----sp :: chore(cd): add workflow
commit ca12c0cc19a93e52dddf2bb36994169e08bada40 1623700871 -----sp :: docs(changelog): add CHANGELOG.md
commit 6990b8f3995d0c0f6c987afb2b6454b46e6dc888 1623702021 -----sp :: chore(config): update config
commit 6789929c8a15849ae17839d8338ff056b6967238 1623702042 -----sp :: fix(cd): install musl-tools for musl builds
commit 4bd5c343893c68c1bf6b5cfcbf88c64f8fdd14be 1623702819 -----sp :: fix(cd): include configuration file in the binary releases
commit 627cd11355a64ab2f8d2b4a80c9949c7197e564e 1623702871 -----sp :: fix(cd): specify the bash as shell
commit a37a08ec67eb36a9184cc6e597eb6af2b7159732 1623703044 -----sp :: chore(cd): set the release body text
commit d64395c78bf2f45142b6bb711d25983fba69b0df 1623706879 -----sp :: fix(cd): use bash while setting the release version
commit 4ddef08debfff48117586296e49d5caa0800d1b5 1623707492 -----sp :: chore(cd): add docker releases
commit c056196af9ee3f7109876639a0fb3b230661e1e4+ 1623769849 -----sp :: docs(bin): update the doc comment for completions script

hunks: 
diff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml
new file mode 100644
index 0000000..51dc04a
--- /dev/null
+++ b/.github/workflows/cd.yml
@@ -0,0 +1,139 @@
+name: Continuous Deployment
+
+on:
+  push:
+    tags:
+      - "v*.*.*"
+
+jobs:
+  publish-github:
+    name: Publish on GitHub
+    runs-on: ${{ matrix.os }}
+    strategy:
+      matrix:
+        build: [linux-gnu, linux-musl, win-gnu, win-msvc, win32-msvc, macos]
+        include:
+          - BUILD: linux-gnu
+            OS: ubuntu-18.04
+            TOOLCHAIN: stable
+            TARGET: x86_64-unknown-linux-gnu
+          - BUILD: linux-musl
+            OS: ubuntu-18.04
+            TOOLCHAIN: stable
+            TARGET: x86_64-unknown-linux-musl
+          - BUILD: win-gnu
+            OS: windows-2019
+            TOOLCHAIN: stable
+            TARGET: x86_64-pc-windows-gnu
+          - BUILD: win-msvc
+            OS: windows-2019
+            TOOLCHAIN: stable
+            TARGET: x86_64-pc-windows-msvc
+          - BUILD: win32-msvc
+            OS: windows-2019
+            TOOLCHAIN: stable
+            TARGET: i686-pc-windows-msvc
+          - BUILD: macos
+            OS: macos-10.15
+            TOOLCHAIN: stable
+            TARGET: x86_64-apple-darwin
+    steps:
+      - name: Checkout
+        uses: actions/checkout@main
+      - name: Set the release version
+        shell: bash
+        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
+      - name: Install musl-tools
+        if: matrix.TARGET == 'x86_64-unknown-linux-musl'
+        run: |
+          sudo apt-get update
+          sudo apt-get install -y --no-install-recommends \
+            --allow-unauthenticated musl-tools
+      - name: Install Rust toolchain
+        uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.TOOLCHAIN }}
+          target: ${{ matrix.TARGET }}
+          override: true
+      - name: Build
+        run: cargo build --release --locked --target ${{ matrix.TARGET }}
+      - name: Prepare release assets
+        shell: bash
+        run: |
+          mkdir -p release/completions/
+          cp {LICENSE,README.md,CHANGELOG.md,cliff.toml} release/
+          OUT_DIR=release/completions/ cargo run --release --bin completions
+          if [ "${{ matrix.OS }}" = "windows-2019" ]; then
+            cp target/${{ matrix.TARGET }}/release/git-cliff.exe release/
+          else
+            cp target/${{ matrix.TARGET }}/release/git-cliff release/
+          fi
+          mv release/ git-cliff-${{ env.RELEASE_VERSION }}/
+      - name: Create release artifacts
+        shell: bash
+        run: |
+          if [ "${{ matrix.OS }}" = "windows-2019" ]; then
+            7z a -tzip "git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.zip" \
+              git-cliff-${{ env.RELEASE_VERSION }}/
+          else
+            tar -czvf git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz \
+              git-cliff-${{ env.RELEASE_VERSION }}/
+            shasum -a 512 git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz \
+              > git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz.sha512
+          fi
+      - name: Sign the release
+        if: matrix.OS == 'ubuntu-18.04' || matrix.OS == 'macos-10.15'
+        run: |
+          echo "${{ secrets.GPG_RELEASE_KEY }}" | base64 --decode > private.key
+          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
+            --passphrase-fd 0 --import private.key
+          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
+            --passphrase-fd 0 --detach-sign \
+            git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz
+      - name: Upload the release
+        uses: svenstaro/upload-release-action@v2
+        with:
+          repo_token: ${{ secrets.GITHUB_TOKEN }}
+          file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
+          file_glob: true
+          tag: ${{ github.ref }}
+          overwrite: true
+          body: "git-cliff release v${{ env.RELEASE_VERSION }}"
+
+  publish-docker:
+    name: Publish the Docker image
+    needs: publish-github
+    runs-on: ubuntu-18.04
+    steps:
+      - name: Checkout
+        uses: actions/checkout@main
+      - name: Set the release version
+        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
+      - name: Build
+        run: docker build -t git-cliff .
+      - name: Tag
+        run: |
+          docker tag git-cliff orhunp/git-cliff:${{ env.RELEASE_VERSION }}
+          docker tag git-cliff docker.pkg.github.com/o